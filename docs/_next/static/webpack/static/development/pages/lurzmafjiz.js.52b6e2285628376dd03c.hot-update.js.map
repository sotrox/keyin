{"version":3,"file":"static/webpack/static/development/pages/lurzmafjiz.js.52b6e2285628376dd03c.hot-update.js","sources":["webpack:///./pages/lurzmafjiz.tsx"],"sourcesContent":["import { useState } from 'react'\nimport { TonalLemmatizationAnalyzer, TonalInflectionAnalyzer, TonalCombiningForms, TonalDesinenceInflection } from 'taipa';\nimport { getInflectionalSuffixes, getStems, getSoundSequences, getSurfaceForms } from '../src/process';\n\nimport { RegressiveAssimilation } from 'taipa';\nimport { TonalZeroCombining } from 'taipa/lib/dparser/keywords';\n\nfunction LurzmafjizPage() {\n    const [input, setInput] = useState()\n\n    const tla = new TonalLemmatizationAnalyzer();\n\n    const letters = tla.graphAnalyze(input).map(x => x.letter && x.letter.literal);\n\n    const soudnSeqs = getSoundSequences(tla.morphAnalyze(input).map(x => x.sounds));\n\n    const lexemeLemma = tla.analyze(input);\n    const stems = getStems(lexemeLemma.word.literal, lexemeLemma.getInflectionalEnding());\n    const inflexctionalSuffixes = getInflectionalSuffixes(lexemeLemma.getInflectionalEnding());\n    const lemmas = lexemeLemma.getLemmata().map(x => x.literal);\n\n    const tia = new TonalInflectionAnalyzer();\n    const lexemeInflect = tia.analyze(input, new TonalCombiningForms(), new TonalDesinenceInflection());\n    const proceedingForms = lexemeInflect.otherForms.map(x => x.literal);\n\n    const lexemeRegrAssim = tia.analyze(input, new TonalZeroCombining(), new RegressiveAssimilation());\n    const assimilatedForm = getSurfaceForms(lexemeRegrAssim.word.literal, lexemeRegrAssim.otherForms[0].literal);\n    // const lexemeAgrAssim = tia.analyze(input, new TonalZeroCombining(), new AgressiveAssimila());\n    // if(lexemeAgrAssim.word.literal !== lexemeAgrAssim.otherForms[0].literal) {\n    //     assimilatedForm = getSurfaceForms(lexemeAgrAssim.otherForms[0].literal);\n    // }\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        setInput(e.target.value)\n    };\n\n    return (\n        <div>拍羅馬字, 輸出 lemmas, stem, inflectional suffix, proceeding forms, sound sequences, 甲 letters\n            <label>\n                <br />\n                    <input type='text' value={input} onChange={handleChange} />\n            </label>\n\n            <br />\n            lemmas\n            {lemmas.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            stem\n            {stems.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            inflectional suffix\n            {inflexctionalSuffixes.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            proceeding forms\n            {proceedingForms.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            sound sequences\n            {soudnSeqs.map(x => (\n                <li>{x[0] + ' - ' + x[1]}</li>\n            ))}\n            <br />\n            letters: {letters.join(', ')}\n            <hr></hr>\n            assimilated form:\n            {assimilatedForm}\n        </div>)\n}\n  \nexport default LurzmafjizPage"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}