{"version":3,"file":"static/webpack/static/development/pages/composition.js.6309445065efdea5dafe.hot-update.js","sources":["webpack:///./pages/composition.tsx"],"sourcesContent":["import { useReducer } from 'react';\n\nimport {  tonalLemmatizationAnalyzer, Client, inflectDesinence, TonalWord } from 'taipa';\n\nclass Segment {\n    literal: string = '';\n\n    constructor(str: string) {\n        this.literal = str;\n    }\n\n    isBaseForm(str: string) {\n        if (str === this.literal) return true;\n        return false;\n    }\n\n    isProceedingForm(str: string) {\n        const lx = inflectDesinence(this.literal);\n        if (lx.getForms().filter(x => x.literal === str).length > 0) return true;\n        return false;\n    }\n\n    includes(str: string) {\n        if (this.isBaseForm(str) || this.isProceedingForm(str)) return true;\n        return false;\n    }\n}\n\nconst pah = new Segment('pah');\nconst jiz = new Segment('jiz');\nconst sek = new Segment('sek');\n\n// radio groups\nconst optGroup1 = ['type'];\nconst optGroup2 = ['daizgiy', 'kana'];\nconst optGroup3 = ['blue', 'green', 'red'];\n\nconst segments = [\n    {\n        segment: pah,\n        options: optGroup1\n    },\n    {\n        segment: jiz,\n        options: optGroup2\n    },\n    {\n        segment: sek,\n        options: optGroup3\n    }\n];\n\nconst cli = new Client();\n\nfunction getSeqs(alphabet: string, str: string) {\n    if (alphabet == optGroup2[1]) {\n        const ta = cli.processKana(str);\n        return ta.blockSequences.filter(x => x.length > 0);\n    } else if (alphabet == optGroup2[0]) {\n        const ta = cli.processTonal(str);\n        if((ta.word as TonalWord).syllables) {\n            return (ta.word as TonalWord).syllables.flatMap(x => x.literal);\n        }\n    }\n    return [];\n}\n\nlet seqs: string[] = []; // output sequences\nlet alphabet = '';\nlet fcolor = {}; // font color\n\nconst lx1 = inflectDesinence(segments[0].segment.literal);\nconst lx2 = inflectDesinence(segments[1].segment.literal);\nconst candidates = [\n    lx1.word.literal,\n    lx1.getForms()[1].literal + lx2.word.literal,\n    lx1.getForms()[1].literal + lx2.getForms()[0].literal + segments[2].segment.literal\n];\n\nfunction CompositionPage() {\n    const [input, setInput] = useReducer((state: any, newState: any) => ({ ...state, ...newState }), {\n        scanned: '',\n        selectedOne: '',\n        typed: '',\n        selectedTwo: '',\n        selectedThree: ''\n    });\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        const name = e.target.name;\n        const value = e.target.value;\n        setInput({ [name]: value });\n    };\n\n    let segIdx: number = -1; // no. of segment\n    let combinedSegIdx: number = -1; // no. of combined segments\n    let optIdx = -1; // which radio button and input field to be displayed\n\n    const tl = tonalLemmatizationAnalyzer;\n    const mphs = tl.morphAnalyze(input.scanned);\n\n    if (mphs) {\n        for (let i = 0; i < mphs.length; i++) {\n            if (mphs[i] && segments[i]) {\n                if (\n                    (i < segments.length - 1 && segments[i].segment.isProceedingForm(mphs[i].syllable.literal)) ||\n                    (i == segments.length - 1 && segments[i].segment.isBaseForm(mphs[i].syllable.literal))\n                ) {\n                    combinedSegIdx = i;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n        if (mphs && mphs[i] && segments[i]) {\n            if (segments[i].segment.includes(mphs[i].syllable.literal)) {\n                segIdx = i;\n            }\n        }\n    }\n\n    let options: string[] = [];\n\n    if (segIdx >= 0) {\n        if (combinedSegIdx < segIdx) {\n            options = segments[combinedSegIdx + 1].options;\n            optIdx = combinedSegIdx + 1;\n        } else {\n            options = segments[segIdx].options;\n            optIdx = segIdx;\n        }\n    }\n\n    if (optGroup2.filter(x => x.includes(input.selectedTwo)).length > 0) {\n        alphabet = input.selectedTwo;\n        seqs = getSeqs(alphabet, input.typed);\n    } else {\n        seqs = getSeqs(alphabet, input.typed);\n    }\n\n    if (optGroup3.filter(x => x.includes(input.selectedThree)).length > 0) {\n        const str: string = input.selectedThree;\n        fcolor = { color: str };\n    }\n\n    let isDisabled = true;\n    if (optIdx > 0) isDisabled = false;\n\n    return (\n        <div>\n            <input type=\"text\" list=\"words\" value={input.scanned} name=\"scanned\" onChange={handleChange} />\n            <datalist id=\"words\">\n                {candidates.map(item => (\n                    <option key={item} value={item} />\n                ))}\n            </datalist>\n            <br />\n            <div>\n                {optIdx == 0 &&\n                    options.map((checked_opt, i) => (\n                        <div key={i}>\n                            <input\n                                type=\"radio\"\n                                checked={input.selectedOne === checked_opt}\n                                name=\"selectedOne\"\n                                onChange={handleChange}\n                                value={checked_opt}\n                            />\n                            {checked_opt}\n                        </div>\n                    ))}\n                {optIdx == 1 &&\n                    options.map((checked_opt, i) => (\n                        <div key={i}>\n                            <input\n                                type=\"radio\"\n                                checked={input.selectedTwo === checked_opt}\n                                name=\"selectedTwo\"\n                                onChange={handleChange}\n                                value={checked_opt}\n                            />\n                            {checked_opt}\n                        </div>\n                    ))}\n                {optIdx == 2 &&\n                    options.map((checked_opt, i) => (\n                        <div key={i}>\n                            <input\n                                type=\"radio\"\n                                checked={input.selectedThree === checked_opt}\n                                name=\"selectedThree\"\n                                onChange={handleChange}\n                                value={checked_opt}\n                            />\n                            {checked_opt}\n                        </div>\n                    ))}\n            </div>\n            <div style={fcolor}>\n                {optIdx > 0 && (\n                    <input type=\"text\" disabled={isDisabled} value={input.typed} name=\"typed\" onChange={handleChange} />\n                )}\n                {seqs.map(x => (\n                    <li> {x} </li>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default CompositionPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;;;;A","sourceRoot":""}