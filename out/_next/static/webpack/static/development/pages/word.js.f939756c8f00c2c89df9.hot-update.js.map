{"version":3,"file":"static/webpack/static/development/pages/word.js.f939756c8f00c2c89df9.hot-update.js","sources":["webpack:///./pages/word.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TonalLemmatizationAnalyzer, TonalLemmatizer, TonalInflector } from 'taipa';\nimport { getInflectionalSuffixes, getStems, getSoundSequences, itemize } from '../src/process';\n\nfunction WordPage() {\n    const [input, setInput] = useState('');\n\n    const tla = new TonalLemmatizationAnalyzer();\n\n    const letters = tla.graphAnalyze(input).map(x => x.letter && x.letter.literal);\n\n    const soudnSeqs = getSoundSequences(tla.morphAnalyze(input).map(x => x.sounds));\n    const uncombiningFormSeqs = tla\n        .morphAnalyze(input)\n        .map(it =>\n            it\n                .getForms()\n                .map(it => it.literal)\n                .join(', ')\n        )\n        .map(it => itemize(it));\n\n    const tl = new TonalLemmatizer();\n    const lxLemma = tl.lemmatize(input);\n    const stems = getStems(lxLemma.word.literal, lxLemma.getInflectionalEnding());\n    const inflectionalSuffixes = getInflectionalSuffixes(lxLemma.getInflectionalEnding());\n    const lemmas = lxLemma.getLemmas().map(x => x.literal);\n\n    const ti = new TonalInflector();\n    const lxInflect = ti.inflectDesinence(input);\n    const proceedingForms = lxInflect.getForms().map(x => x.literal);\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        setInput(e.target.value);\n    };\n\n    return (\n        <div>\n            拍羅馬字, 輸出 lemmas, stem, inflectional suffix, proceeding forms, sound sequences, uncombining form\n            sequences, 甲 letters\n            <label>\n                <br />\n                <input type=\"text\" value={input} onChange={handleChange} />\n            </label>\n            <br />\n            lemmas\n            {lemmas.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            stem\n            {stems.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            inflectional suffix\n            {inflectionalSuffixes.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            proceeding forms\n            {proceedingForms.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            sound sequences\n            {soudnSeqs.map(x => (\n                <li>{x[0] + ' - ' + x[1]}</li>\n            ))}\n            <br />\n            uncombining form sequences\n            {uncombiningFormSeqs.map(x => (\n                <li>{x}</li>\n            ))}\n            <br />\n            letters: {letters.join(', ')}\n        </div>\n    );\n}\n\nexport default WordPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AAHA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}