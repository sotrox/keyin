{"version":3,"file":"static/webpack/static/development/pages/hint.js.7322f7a53d6bd9a2f761.hot-update.js","sources":["webpack:///./pages/hint.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Client, TonalSoundTags } from 'taipa';\n\nclass Hint {\n    hint: string = ''\n    sounds: Array<string> = new Array()\n    namesOfSound: Array<string> = new Array()\n}\n\nclass Entry {\n    constructor(public reading: string) {}\n}\n\nclass Group {\n    entries: Entry[] = [new Entry('hoefcia'), new Entry('hefcia')]\n}\n\n\nconst topic: Group = new Group();\nconst slicedReadings: string[] = []\nconst literals: string[] = []\nlet entries: Entry[] = []\nconst hints: Array<Hint> = new Array()\nconst highlights: string[] = []\nconst idx = 0;\n\nlet tonalInHanji = new Map()\n  .set(\"f\", \"一\")\n  .set(\"y\", \"二\")\n  .set(\"w\", \"三\")\n  .set(\"x\", \"五\")\n  .set(\"z\", \"七\")\n  .set(\"xx\", \"九\")\n\nlet namesInHanji = new Map()\n  .set(\"initial\", \"初聲\")\n  .set(\"medial\", \"中聲\")\n  .set(\"nasalization\", \"鼻音化\")\n  .set(\"stopFinal\", \"終聲\")\n  .set(\"nasalFinal\", \"終聲\")\n  .set(\"freeTonal\", \"聲調\")\n  .set(\"checkedTonal\", \"聲調\")\n\n\nfunction getTopic(): void {\n    entries = topic.entries\n\n    const clt = new Client()\n    for(let i = 0; i < topic.entries.length; i++) {\n      let doc = clt.processTonal(topic.entries[i].reading)\n      literals[i] = doc.word.literal\n      let h = new Hint()\n      for(let e of doc.soundSequences) {\n        for(let j of e) {\n          h.namesOfSound.push(j.name)\n          h.sounds.push(j.toString())\n        }\n        h.hint = namesInHanji.get(h.namesOfSound[0]) + ' ' + h.namesOfSound[0]\n      }\n      highlights[i] = h.sounds[0]\n      let sliced = literals[i].slice(highlights[i].length)\n      slicedReadings[i] = sliced\n      hints.push(h)\n    }\n}\n\ngetTopic();\n\nfunction setHintAndHighlight(index: number, n: number) {\n    if(hints[index].namesOfSound[n] === TonalSoundTags.freeTonal || hints[index].namesOfSound[n] === TonalSoundTags.checkedTonal) {\n        if(tonalInHanji.has(hints[index].sounds[n])) {\n            let tonal: string = \"\"\n            tonal = tonalInHanji.get(hints[index].sounds[n])\n            hints[index].hint = namesInHanji.get(hints[index].namesOfSound[n]) + tonal + ' ' + hints[index].namesOfSound[n]\n        }\n    } else {\n        hints[index].hint = namesInHanji.get(hints[index].namesOfSound[n]) + ' ' + hints[index].namesOfSound[n]\n    }\n    highlights[index] = hints[index].sounds[n]\n}\n\nfunction HintPage() {\n    const [input, setInput] = useState('');\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        setInput(e.target.value);\n    };\n\n    const str: string = input;\n\n    // if(literals[idx].search(new RegExp(str)) != 0) {}\n\n    let len: number = 0\n    if(str.length > 0 && literals[idx].search(new RegExp(str)) == 0) {\n        for(let j = 0; j < hints[idx].sounds.length; j++) {\n        len += hints[idx].sounds[j].length\n        if(len >= str.length) {\n            if(len > str.length) {\n            setHintAndHighlight(idx, j)\n            } else {\n            if(j+1 == hints[idx].sounds.length) {\n                // last sound\n                hints[idx].hint = \"\"\n                highlights[idx] = \"\"\n            } else {\n                setHintAndHighlight(idx, j+1)\n            }\n            }\n            break;\n        }\n        }\n    } else if(str.length == 0) {\n        setHintAndHighlight(idx, 0)\n    }\n\n    if(len == str.length) {\n        let sliced = literals[idx].slice(str.length)\n        if(literals[idx].search(new RegExp(str)) == 0) {\n            if(highlights[idx] != undefined) {\n                let slicedTwo = sliced.slice(highlights[idx].length)\n                slicedReadings[idx] = slicedTwo\n            }\n        }\n    } else if(len > str.length) {}\n    \n    return (\n        <div>\n            拍羅馬字, 顯示 hint\n            <label>\n                <br />\n                <input type=\"text\" list=\"words\" value={input} onChange={handleChange} />\n            </label>\n            {highlights[idx]}, {slicedReadings[idx]}\n            <br />\n            {literals[idx]}\n            <br />\n            {len}\n            <br />\n            {len < literals[idx].length ? hints[idx].hint : ''}\n        </div>\n    );\n}\n\nexport default HintPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AACA;AAAA;;;AAGA;AACA;AACA;AADA;AAAA;AACA;AAEA;;;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AASA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}