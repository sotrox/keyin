{"version":3,"file":"static/webpack/static/development/pages/additive.js.5732738bde5643c504fb.hot-update.js","sources":["webpack:///./pages/additive.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TonalCombiningForms, TonalInflectionAnalyzer, TonalDesinenceInflection } from 'taipa';\n\nimport { lowerLettersOfTonal, TonalLetterTags } from 'taipa/lib/tonal/version2';\n\nfunction AdditivePage() {\n    const [input, setInput] = useState();\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        setInput(e.target.value)\n    };\n\n    const syllableSeqs = [\n        ['lo', 'le']\n    ];\n\n    const patterns = [\n            [TonalLetterTags.w, TonalLetterTags.x], // 35\n            [TonalLetterTags.z, TonalLetterTags.z], // 77\n        ]\n\n    const matches = syllableSeqs.map(x => x.join('') === input ? x : []);\n    const tia = new TonalInflectionAnalyzer();\n\n    let gs1 = tia.graphAnalyze('lo');\n    let gs2 = tia.graphAnalyze('le');\n    if(matches) {\n        gs1 = tia.graphAnalyze(matches[0][0]);\n        gs2 = tia.graphAnalyze(matches[0][1]);\n    }\n\n    const ms1 = tia.morphAnalyze(gs1, new TonalCombiningForms());\n    const ms2 = tia.morphAnalyze(gs2, new TonalCombiningForms());\n\n    ms1[0].syllable.pushLetter(lowerLettersOfTonal.get(patterns[0][0]));\n    ms2[0].syllable.pushLetter(lowerLettersOfTonal.get(patterns[0][1]));\n\n    const lx = tia.lexAnalyze([ms1, ms2].flat(), new TonalDesinenceInflection());\n\n    return (\n        <div>\n            <label>拍羅馬字, 輸出 inflected form\n            <br/>\n            <input  type='text' list=\"phrasalverbs\" onChange={handleChange}/></label>\n            <datalist id=\"phrasalverbs\">\n                {syllableSeqs.map(item => <option key={item[0] + item[1]} value={item[0] + item[1]}/> )}\n            </datalist>\n            {lx.word.literal}\n        </div>\n    )\n}\n\nexport default AdditivePage"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}