{"version":3,"file":"static/webpack/static/development/pages/tonepatternwords.js.b32cf1adfe330925d01b.hot-update.js","sources":["webpack:///./pages/tonepatternwords.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { tonalInflectionAnalyzer, TonalCombiningForms, TonalLetterTags, TonalCombiningMorpheme, TonalDesinenceInflection } from 'taipa';\n\nfunction TonePatternWordsPage() {\n    const [input, setInput] = useState('');\n\n    const handleChange = function(e: React.ChangeEvent<HTMLInputElement>) {\n        setInput(e.target.value);\n    };\n\n    const mapTonal = new Map<string, number>()\n        .set(TonalLetterTags.f, 1)\n        .set(TonalLetterTags.y, 2)\n        .set(TonalLetterTags.w, 3)\n        .set(TonalLetterTags.x, 5)\n        .set(TonalLetterTags.z, 7)\n        .set(TonalLetterTags.xx, 9);\n\n    const mapFinal = new Map<string, number>()\n        .set(TonalLetterTags.zero, 1)\n        .set(TonalLetterTags.p, 4)\n        .set(TonalLetterTags.t, 4)\n        .set(TonalLetterTags.k, 4)\n        .set(TonalLetterTags.h, 4)\n        .set(TonalLetterTags.pp, 8)\n        .set(TonalLetterTags.tt, 8)\n        .set(TonalLetterTags.kk, 8)\n        .set(TonalLetterTags.hh, 8);\n\n    const tia = tonalInflectionAnalyzer;\n    const tokens = input.split(' ');\n    let items: (number | undefined)[] = [];\n    if(tokens.length > 0) {\n        const ls1 = tokens.map(it => tia.lexAnalyze(it, new TonalDesinenceInflection()));\n        items = ls1.map(it =>\n            mapTonal.has(it.getInflectionalEnding().toString())\n                ? mapTonal.get(it.getInflectionalEnding().toString())\n                : mapFinal.get(it.getAllomorphicEnding().toString())\n        );\n    } else {\n        items = [];\n    }\n\n    const phrases = ['diurhhw qaux', 'tehh cut kih'];\n\n    return (\n        <div>\n            items.length:{items.length}\n            <label>\n                拍羅馬字, 輸出聲調模式\n                <br />\n                <input type=\"text\" list=\"entries\" onChange={handleChange} />\n            </label>\n            <datalist id=\"entries\">\n                {phrases.map(it => (\n                    <option key={it} value={it} />\n                ))}\n            </datalist>\n            {items}\n        </div>\n    );\n}\n\nexport default TonePatternWordsPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;;;;A","sourceRoot":""}