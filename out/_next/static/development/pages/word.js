(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["static/development/pages/word.js"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx!./":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/word\",\n      function () {\n        return __webpack_require__(/*! ./pages/word.tsx */ \"./pages/word.tsx\");\n      }\n    ]);\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/ZTczNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDBDQUEyQztBQUNsRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzP3BhZ2U9JTJGd29yZCZhYnNvbHV0ZVBhZ2VQYXRoPSUyRlVzZXJzJTJGanNsdiUyRlByb2plY3RzJTJGa2V5aW4lMkZwYWdlcyUyRndvcmQudHN4IS4vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi93b3JkXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwiL1VzZXJzL2pzbHYvUHJvamVjdHMva2V5aW4vcGFnZXMvd29yZC50c3hcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx!./\n");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*******************************************************************************************!*\
  !*** delegated ./node_modules/react/index.js from dll-reference dll_b2533e9d8f81576ae409 ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = (__webpack_require__(/*! dll-reference dll_b2533e9d8f81576ae409 */ \"dll-reference dll_b2533e9d8f81576ae409\"))(\"./node_modules/react/index.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIGZyb20gZGxsLXJlZmVyZW5jZSBkbGxfYjI1MzNlOWQ4ZjgxNTc2YWU0MDk/MmNlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oLyohIGRsbC1yZWZlcmVuY2UgZGxsX2IyNTMzZTlkOGY4MTU3NmFlNDA5ICovIFwiZGxsLXJlZmVyZW5jZSBkbGxfYjI1MzNlOWQ4ZjgxNTc2YWU0MDlcIikpKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanNcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/client.js":
/*!******************************************!*\
  !*** ./node_modules/taipa/lib/client.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst init_1 = __webpack_require__(/*! ./tonal/init */ \"./node_modules/taipa/lib/tonal/init.js\");\nconst analyzer_1 = __webpack_require__(/*! ./tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\nconst init_2 = __webpack_require__(/*! ./kana/init */ \"./node_modules/taipa/lib/kana/init.js\");\nconst analyzer_2 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nconst token_1 = __webpack_require__(/*! ./token */ \"./node_modules/taipa/lib/token.js\");\nclass Client {\n    processKana(str) {\n        init_2.checkNumberOfLettersKana();\n        // kana\n        let ta = new token_1.TokenAnalysis();\n        if (str) {\n            const ka = analyzer_2.kanaLemmatizationAnalyzer;\n            const morphemes = ka.morphAnalyze(str);\n            ta.blockSequences = init_2.getKanaBlocks(morphemes);\n            for (let m of morphemes) {\n                ta.soundSequences.push(m.sounds);\n            }\n        }\n        return ta;\n    }\n    processTonal(str) {\n        init_1.checkNumberOfLetterTonal();\n        // tonal lurzmafjiz\n        let ta = new token_1.TokenAnalysis();\n        if (str) {\n            const tla = analyzer_1.tonalLemmatizationAnalyzer;\n            const morphemes = tla.morphAnalyze(str);\n            const lexeme = tla.lexAnalyze(morphemes);\n            ta.word = lexeme.word;\n            ta.lemmas = lexeme.getLemmas();\n            ta.inflectionalEnding = lexeme.getInflectionalEnding();\n            ta.blockSequences = init_1.getTaiKanaBlocks(morphemes);\n            for (let m of morphemes) {\n                ta.soundSequences.push(m.sounds);\n                // TODO: first free tone to fourth. first checked tone to eighth\n                ta.uncombiningSequences.push(m.getForms().map(it => it.literal));\n            }\n        }\n        return ta;\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2NsaWVudC5qcz9mMDI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsZUFBZSxtQkFBTyxDQUFDLDREQUFjO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLG9FQUFrQjtBQUM3QyxlQUFlLG1CQUFPLENBQUMsMERBQWE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMsa0VBQWlCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2NsaWVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW5pdF8xID0gcmVxdWlyZShcIi4vdG9uYWwvaW5pdFwiKTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi90b25hbC9hbmFseXplclwiKTtcbmNvbnN0IGluaXRfMiA9IHJlcXVpcmUoXCIuL2thbmEvaW5pdFwiKTtcbmNvbnN0IGFuYWx5emVyXzIgPSByZXF1aXJlKFwiLi9rYW5hL2FuYWx5emVyXCIpO1xuY29uc3QgdG9rZW5fMSA9IHJlcXVpcmUoXCIuL3Rva2VuXCIpO1xuY2xhc3MgQ2xpZW50IHtcbiAgICBwcm9jZXNzS2FuYShzdHIpIHtcbiAgICAgICAgaW5pdF8yLmNoZWNrTnVtYmVyT2ZMZXR0ZXJzS2FuYSgpO1xuICAgICAgICAvLyBrYW5hXG4gICAgICAgIGxldCB0YSA9IG5ldyB0b2tlbl8xLlRva2VuQW5hbHlzaXMoKTtcbiAgICAgICAgaWYgKHN0cikge1xuICAgICAgICAgICAgY29uc3Qga2EgPSBhbmFseXplcl8yLmthbmFMZW1tYXRpemF0aW9uQW5hbHl6ZXI7XG4gICAgICAgICAgICBjb25zdCBtb3JwaGVtZXMgPSBrYS5tb3JwaEFuYWx5emUoc3RyKTtcbiAgICAgICAgICAgIHRhLmJsb2NrU2VxdWVuY2VzID0gaW5pdF8yLmdldEthbmFCbG9ja3MobW9ycGhlbWVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IG0gb2YgbW9ycGhlbWVzKSB7XG4gICAgICAgICAgICAgICAgdGEuc291bmRTZXF1ZW5jZXMucHVzaChtLnNvdW5kcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhO1xuICAgIH1cbiAgICBwcm9jZXNzVG9uYWwoc3RyKSB7XG4gICAgICAgIGluaXRfMS5jaGVja051bWJlck9mTGV0dGVyVG9uYWwoKTtcbiAgICAgICAgLy8gdG9uYWwgbHVyem1hZmppelxuICAgICAgICBsZXQgdGEgPSBuZXcgdG9rZW5fMS5Ub2tlbkFuYWx5c2lzKCk7XG4gICAgICAgIGlmIChzdHIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRsYSA9IGFuYWx5emVyXzEudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXI7XG4gICAgICAgICAgICBjb25zdCBtb3JwaGVtZXMgPSB0bGEubW9ycGhBbmFseXplKHN0cik7XG4gICAgICAgICAgICBjb25zdCBsZXhlbWUgPSB0bGEubGV4QW5hbHl6ZShtb3JwaGVtZXMpO1xuICAgICAgICAgICAgdGEud29yZCA9IGxleGVtZS53b3JkO1xuICAgICAgICAgICAgdGEubGVtbWFzID0gbGV4ZW1lLmdldExlbW1hcygpO1xuICAgICAgICAgICAgdGEuaW5mbGVjdGlvbmFsRW5kaW5nID0gbGV4ZW1lLmdldEluZmxlY3Rpb25hbEVuZGluZygpO1xuICAgICAgICAgICAgdGEuYmxvY2tTZXF1ZW5jZXMgPSBpbml0XzEuZ2V0VGFpS2FuYUJsb2Nrcyhtb3JwaGVtZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgbSBvZiBtb3JwaGVtZXMpIHtcbiAgICAgICAgICAgICAgICB0YS5zb3VuZFNlcXVlbmNlcy5wdXNoKG0uc291bmRzKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBmaXJzdCBmcmVlIHRvbmUgdG8gZm91cnRoLiBmaXJzdCBjaGVja2VkIHRvbmUgdG8gZWlnaHRoXG4gICAgICAgICAgICAgICAgdGEudW5jb21iaW5pbmdTZXF1ZW5jZXMucHVzaChtLmdldEZvcm1zKCkubWFwKGl0ID0+IGl0LmxpdGVyYWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGE7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnQgPSBDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/client.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/analyzer.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/analyzer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst analyzer_1 = __webpack_require__(/*! ../tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalInflectionAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     * @param metaplasm A combining metaplasm\n     */\n    morphAnalyze(x, metaplasm) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = analyzer_1.graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalCombiningMorphemeMaker(metaplasm);\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or combining morphemes\n     * @param metaplasm An inflection metaplasm\n     */\n    lexAnalyze(x, metaplasm) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x, new metaplasm_1.TonalCombiningForms());\n        }\n        const lm = new lexeme_1.TonalInflectionLexemeMaker(metaplasm);\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvYW5hbHl6ZXIuanM/MGFiYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLDREQUFVO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2FuYWx5emVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBsZXhlbWVfMSA9IHJlcXVpcmUoXCIuL2xleGVtZVwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuLi90b25hbC9hbmFseXplclwiKTtcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcyBvciBsZXhlbWUuICovXG5leHBvcnRzLnRvbmFsSW5mbGVjdGlvbkFuYWx5emVyID0ge1xuICAgIC8qKlxuICAgICAqIEFuYWx5emVzIGEgc3RyaW5nIG9yIGdyYXBoZW1lcyBpbnRvIG1vcnBoZW1lcy4gTW9ycGhvbG9naWNhbCBhbmFseXNpcy5cbiAgICAgKiBAcGFyYW0geCBBIHN0cmluZyBvciBncmFwaGVtZXNcbiAgICAgKiBAcGFyYW0gbWV0YXBsYXNtIEEgY29tYmluaW5nIG1ldGFwbGFzbVxuICAgICAqL1xuICAgIG1vcnBoQW5hbHl6ZSh4LCBtZXRhcGxhc20pIHtcbiAgICAgICAgbGV0IGdzID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZ3MgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBncyA9IGFuYWx5emVyXzEuZ3JhcGhBbmFseXplVG9uYWwoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5Ub25hbENvbWJpbmluZ01vcnBoZW1lTWFrZXIobWV0YXBsYXNtKTtcbiAgICAgICAgcmV0dXJuIG1tLm1ha2VNb3JwaGVtZXMoZ3MpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQW5hbHl6ZXMgYSBzdHJpbmcgb3IgbW9ycGhlbWVzIGludG8gYSBsZXhlbWUuIExleGljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgY29tYmluaW5nIG1vcnBoZW1lc1xuICAgICAqIEBwYXJhbSBtZXRhcGxhc20gQW4gaW5mbGVjdGlvbiBtZXRhcGxhc21cbiAgICAgKi9cbiAgICBsZXhBbmFseXplKHgsIG1ldGFwbGFzbSkge1xuICAgICAgICBsZXQgbXMgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBtcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1zID0gdGhpcy5tb3JwaEFuYWx5emUoeCwgbmV3IG1ldGFwbGFzbV8xLlRvbmFsQ29tYmluaW5nRm9ybXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG0gPSBuZXcgbGV4ZW1lXzEuVG9uYWxJbmZsZWN0aW9uTGV4ZW1lTWFrZXIobWV0YXBsYXNtKTtcbiAgICAgICAgcmV0dXJuIGxtLm1ha2VMZXhlbWVzKG1zKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuYWx5emVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/assimilator.js":
/*!*******************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/assimilator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nconst analyzer_1 = __webpack_require__(/*! ../tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\n/**\n * Analyzes a string into morphemes. Morphological analysis.\n * @param str A word.\n */\nfunction morphAnalyzeChanging(str) {\n    const gs = analyzer_1.graphAnalyzeTonal(str);\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const mrphs = tschmm.makeMorphemes(gs);\n    return mrphs;\n}\nexports.morphAnalyzeChanging = morphAnalyzeChanging;\n//# sourceMappingURL=assimilator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvYXNzaW1pbGF0b3IuanM/MzVhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvYXNzaW1pbGF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1vcnBoZW1lXzEgPSByZXF1aXJlKFwiLi9tb3JwaGVtZVwiKTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvYW5hbHl6ZXJcIik7XG4vKipcbiAqIEFuYWx5emVzIGEgc3RyaW5nIGludG8gbW9ycGhlbWVzLiBNb3JwaG9sb2dpY2FsIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHdvcmQuXG4gKi9cbmZ1bmN0aW9uIG1vcnBoQW5hbHl6ZUNoYW5naW5nKHN0cikge1xuICAgIGNvbnN0IGdzID0gYW5hbHl6ZXJfMS5ncmFwaEFuYWx5emVUb25hbChzdHIpO1xuICAgIGNvbnN0IHRzY2htbSA9IG5ldyBtb3JwaGVtZV8xLlRvbmFsU291bmRDaGFuZ2luZ01vcnBoZW1lTWFrZXIoKTtcbiAgICBjb25zdCBtcnBocyA9IHRzY2htbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICByZXR1cm4gbXJwaHM7XG59XG5leHBvcnRzLm1vcnBoQW5hbHl6ZUNoYW5naW5nID0gbW9ycGhBbmFseXplQ2hhbmdpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NpbWlsYXRvci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/assimilator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/creator.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/creator.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_2 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst metaplasm_3 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\n/** Creates a lexeme given a `TonalCombiningMetaplasm`. If metaplasm is not provided, `TonalZeroCombining` is defaulted. Excessive tokens are ignored. */\nfunction createTonalInflectionLexeme(str, metaplasm) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = metaplasm\n        ? tia.morphAnalyze(str, metaplasm)\n        : tia.morphAnalyze(str, new metaplasm_2.TonalZeroCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_3.TonalDesinenceInflection());\n    return lx;\n}\nexports.createTonalInflectionLexeme = createTonalInflectionLexeme;\n/** Creates a phrase given a sequence of arbitrary words regardless of syntax. Tokens are analyzed one by one. */\nfunction createTonalPhrase(str) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const strs = str.match(/\\w+/g);\n    const lxs = strs\n        ? strs.map(it => tia.lexAnalyze(it, new metaplasm_1.TonalZeroInflection()))\n        : [];\n    return new phraseme_1.TonalPhrase(lxs.map(it => it.word));\n}\nexports.createTonalPhrase = createTonalPhrase;\n/**\n * Creates a compound in which the preceding word will be inflected and the following word will not.\n * @param preceding A word that will be inflected.\n * @param following A word that will not be inflected.\n */\nfunction createCompoundPhraseme(preceding, following) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const tiphm = new phraseme_2.TonalInflectionPhrasemeMaker();\n    const lxPreceding = tia.lexAnalyze(preceding, new metaplasm_3.TonalDesinenceInflection());\n    const lxFollowing = createTonalInflectionLexeme(following);\n    return tiphm.makeCompoundPhraseme(lxPreceding, lxFollowing);\n}\nexports.createCompoundPhraseme = createCompoundPhraseme;\n//# sourceMappingURL=creator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvY3JlYXRvci5qcz9hMzc1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMscUVBQW1CO0FBQzlDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2NyZWF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi9hbmFseXplclwiKTtcbmNvbnN0IHBocmFzZW1lXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvcGhyYXNlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBwaHJhc2VtZV8yID0gcmVxdWlyZShcIi4vcGhyYXNlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMiA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBtZXRhcGxhc21fMyA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbi8qKiBDcmVhdGVzIGEgbGV4ZW1lIGdpdmVuIGEgYFRvbmFsQ29tYmluaW5nTWV0YXBsYXNtYC4gSWYgbWV0YXBsYXNtIGlzIG5vdCBwcm92aWRlZCwgYFRvbmFsWmVyb0NvbWJpbmluZ2AgaXMgZGVmYXVsdGVkLiBFeGNlc3NpdmUgdG9rZW5zIGFyZSBpZ25vcmVkLiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9uYWxJbmZsZWN0aW9uTGV4ZW1lKHN0ciwgbWV0YXBsYXNtKSB7XG4gICAgY29uc3QgdGlhID0gYW5hbHl6ZXJfMS50b25hbEluZmxlY3Rpb25BbmFseXplcjtcbiAgICBjb25zdCBtcyA9IG1ldGFwbGFzbVxuICAgICAgICA/IHRpYS5tb3JwaEFuYWx5emUoc3RyLCBtZXRhcGxhc20pXG4gICAgICAgIDogdGlhLm1vcnBoQW5hbHl6ZShzdHIsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9Db21iaW5pbmcoKSk7XG4gICAgY29uc3QgbHggPSB0aWEubGV4QW5hbHl6ZShtcywgbmV3IG1ldGFwbGFzbV8zLlRvbmFsRGVzaW5lbmNlSW5mbGVjdGlvbigpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLmNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZSA9IGNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZTtcbi8qKiBDcmVhdGVzIGEgcGhyYXNlIGdpdmVuIGEgc2VxdWVuY2Ugb2YgYXJiaXRyYXJ5IHdvcmRzIHJlZ2FyZGxlc3Mgb2Ygc3ludGF4LiBUb2tlbnMgYXJlIGFuYWx5emVkIG9uZSBieSBvbmUuICovXG5mdW5jdGlvbiBjcmVhdGVUb25hbFBocmFzZShzdHIpIHtcbiAgICBjb25zdCB0aWEgPSBhbmFseXplcl8xLnRvbmFsSW5mbGVjdGlvbkFuYWx5emVyO1xuICAgIGNvbnN0IHN0cnMgPSBzdHIubWF0Y2goL1xcdysvZyk7XG4gICAgY29uc3QgbHhzID0gc3Ryc1xuICAgICAgICA/IHN0cnMubWFwKGl0ID0+IHRpYS5sZXhBbmFseXplKGl0LCBuZXcgbWV0YXBsYXNtXzEuVG9uYWxaZXJvSW5mbGVjdGlvbigpKSlcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gbmV3IHBocmFzZW1lXzEuVG9uYWxQaHJhc2UobHhzLm1hcChpdCA9PiBpdC53b3JkKSk7XG59XG5leHBvcnRzLmNyZWF0ZVRvbmFsUGhyYXNlID0gY3JlYXRlVG9uYWxQaHJhc2U7XG4vKipcbiAqIENyZWF0ZXMgYSBjb21wb3VuZCBpbiB3aGljaCB0aGUgcHJlY2VkaW5nIHdvcmQgd2lsbCBiZSBpbmZsZWN0ZWQgYW5kIHRoZSBmb2xsb3dpbmcgd29yZCB3aWxsIG5vdC5cbiAqIEBwYXJhbSBwcmVjZWRpbmcgQSB3b3JkIHRoYXQgd2lsbCBiZSBpbmZsZWN0ZWQuXG4gKiBAcGFyYW0gZm9sbG93aW5nIEEgd29yZCB0aGF0IHdpbGwgbm90IGJlIGluZmxlY3RlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRQaHJhc2VtZShwcmVjZWRpbmcsIGZvbGxvd2luZykge1xuICAgIGNvbnN0IHRpYSA9IGFuYWx5emVyXzEudG9uYWxJbmZsZWN0aW9uQW5hbHl6ZXI7XG4gICAgY29uc3QgdGlwaG0gPSBuZXcgcGhyYXNlbWVfMi5Ub25hbEluZmxlY3Rpb25QaHJhc2VtZU1ha2VyKCk7XG4gICAgY29uc3QgbHhQcmVjZWRpbmcgPSB0aWEubGV4QW5hbHl6ZShwcmVjZWRpbmcsIG5ldyBtZXRhcGxhc21fMy5Ub25hbERlc2luZW5jZUluZmxlY3Rpb24oKSk7XG4gICAgY29uc3QgbHhGb2xsb3dpbmcgPSBjcmVhdGVUb25hbEluZmxlY3Rpb25MZXhlbWUoZm9sbG93aW5nKTtcbiAgICByZXR1cm4gdGlwaG0ubWFrZUNvbXBvdW5kUGhyYXNlbWUobHhQcmVjZWRpbmcsIGx4Rm9sbG93aW5nKTtcbn1cbmV4cG9ydHMuY3JlYXRlQ29tcG91bmRQaHJhc2VtZSA9IGNyZWF0ZUNvbXBvdW5kUGhyYXNlbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdG9yLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/creator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/dictionary.js":
/*!******************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/dictionary.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// prettier-ignore\nexports.dictOfVerbs = [\n    'koannw',\n    'pah',\n];\n// prettier-ignore\nexports.dictOfPhrasalVerbs = [\n    ['koannw', 'diurh'],\n    ['longw', 'diurh'],\n];\n// prettier-ignore\nexports.dictOfPhrasalVerbTwos = [\n    ['tehh', 'cut', 'kih'],\n];\n/** Base forms of separate VV compounds. */\nexports.dictOfSeperateVVCompounds = [['siamy', 'qoew']];\n//# sourceMappingURL=dictionary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvZGljdGlvbmFyeS5qcz82ZGEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9kaWN0aW9uYXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydHMuZGljdE9mVmVyYnMgPSBbXG4gICAgJ2tvYW5udycsXG4gICAgJ3BhaCcsXG5dO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnRzLmRpY3RPZlBocmFzYWxWZXJicyA9IFtcbiAgICBbJ2tvYW5udycsICdkaXVyaCddLFxuICAgIFsnbG9uZ3cnLCAnZGl1cmgnXSxcbl07XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydHMuZGljdE9mUGhyYXNhbFZlcmJUd29zID0gW1xuICAgIFsndGVoaCcsICdjdXQnLCAna2loJ10sXG5dO1xuLyoqIEJhc2UgZm9ybXMgb2Ygc2VwYXJhdGUgVlYgY29tcG91bmRzLiAqL1xuZXhwb3J0cy5kaWN0T2ZTZXBlcmF0ZVZWQ29tcG91bmRzID0gW1snc2lhbXknLCAncW9ldyddXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpY3Rpb25hcnkuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/dictionary.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/inflector.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/inflector.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_2 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\n/** Inflects the inflectional suffix of a word. Lexical inflector. */\nfunction inflectDesinence(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.TonalCombiningForms());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectDesinence = inflectDesinence;\n/** Inflects the transfix of a word. All tonals other than 3rd tone will be changed to 3rd tone. Lexical inflector. */\nfunction inflectTransfix(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ThirdCombiningForm());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TransfixInflection());\n    return lx;\n}\nexports.inflectTransfix = inflectTransfix;\n/**\n * Inflects e to ez. Lexical inflector.\n * @param word E, ew, or ez\n */\nfunction inflectEncliticE(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.AdnominalECombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticE = inflectEncliticE;\n/**\n * Inflects 4th tone to 1st tone or 3rd tone accordingly. Inflects laih to laiz. Lexical inflector.\n * @param word particle\n * @param tone F, w, or z\n */\nfunction inflectPhrasalVerbParticle(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PhrasalVerbParticleCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPhrasalVerbParticle = inflectPhrasalVerbParticle;\n/**\n * Inflects lez and lew to le. Lexical inflector.\n * @param word Lew, lez, or le\n */\nfunction inflectEncliticLe(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ConjunctiveLeCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticLe = inflectEncliticLe;\n/**\n * Inflects ex to ew. Lexical inflector.\n * @param word Ex\n */\nfunction inflectPossesiveEx(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PossesiveExCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPossesiveEx = inflectPossesiveEx;\n/**\n * Inflects 4th tone to either 1st free tone or 7th free tone. Lexical inflector.\n * @param word 4th checked tone\n * @param tone F or z\n */\nfunction inflectTo(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.FirstSeventhCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectTo = inflectTo;\n/**\n * Inflects 8th tone to 1st tone. Addon inflector.\n * @param word 8th checked tone\n */\nfunction inflectEighthToFirst(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToFirstCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToFirst = inflectEighthToFirst;\n/**\n * Inflects 8th tone to 2nd tone. Addon inflector.\n * @param word 8th neutral tone\n */\nfunction inflectEighthToSecond(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToSecondCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToSecond = inflectEighthToSecond;\n/**\n * Inflects a phrasal verb of length 2 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n */\nfunction inflectToProceeding(verb, particle) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    if (particle === 'kih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n    }\n    else {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.w);\n    }\n    return phm.makePhrasalVerbPhraseme(lxVerb, lxParticle);\n}\nexports.inflectToProceeding = inflectToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToProceeding(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    let lxParticleTwo = creator_1.createTonalInflectionLexeme('');\n    if (particle === 'cut' && particleTwo === 'kih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.f);\n    }\n    else if (particle === 'kih' && particleTwo === 'laih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.z);\n    }\n    return phm.makePhrasalVerbVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToProceeding = inflectVppToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to transitive form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToTransitive(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxParticle = inflectDesinence(particle);\n    const lxParticleTwo = inflectDesinence(particleTwo);\n    return phm.makeTransitiveVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToTransitive = inflectVppToTransitive;\n/**\n * Inflects e form to adnominal form. Phrasal inflector.\n * @param adjectivalNoun Main word\n * @param e E, ew, or ez\n */\nfunction inflectEToAdnominal(adjectivalNoun, e) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxAdjective = creator_1.createTonalInflectionLexeme(adjectivalNoun);\n    const lxE = inflectEncliticE(e);\n    return phm.makeAdjectivePhraseme(lxAdjective, lxE);\n}\nexports.inflectEToAdnominal = inflectEToAdnominal;\n/**\n * Inflects le form to conjunctive form. Phrasal inflector.\n * @param verb Main word\n * @param le Le, lew, or lez\n */\nfunction inflectLeToConjunctive(verb, le) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxLe = inflectEncliticLe(le);\n    return phm.makeConjunctivePhraseme(lxVerb, lxLe);\n}\nexports.inflectLeToConjunctive = inflectLeToConjunctive;\n/**\n * Inflects possesive case from teriminal form to adnominal form. Phrasal inflector.\n * @param noun Main word\n * @param ex Ex\n */\nfunction inflectPossesive(noun, ex) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxNoun = creator_1.createTonalInflectionLexeme(noun);\n    const lxEx = inflectPossesiveEx(ex);\n    return phm.makePossesivePhraseme(lxNoun, lxEx);\n}\nexports.inflectPossesive = inflectPossesive;\n/**\n * Inflects a phrasal verb of length 2 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n * @param tone 1st tone or 7th tone\n * */\nfunction inflectToParticiple(verb, particle, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    return phm.makeParticiplePhraseme(lxVerb, lxParticle);\n}\nexports.inflectToParticiple = inflectToParticiple;\n/**\n * Inflects a phrasal verb of length 3 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n * @param tone 1st tone or 7th tone\n */\nfunction inflectVppToParticiple(verb, particle, particleTwo, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    const lxParticleTwo = inflectTo(particleTwo, tone);\n    return phm.makeVppParticiplePhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToParticiple = inflectVppToParticiple;\n/** Inflects a series of words. The forms of the last word indicates the whole phrase is in proceeding form or not. Phrasal inflector. */\nfunction inflectSerial(...words) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lexemes = words.map(it => inflectDesinence(it));\n    return phm.makeSerialPhraseme(lexemes);\n}\nexports.inflectSerial = inflectSerial;\n//# sourceMappingURL=inflector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/inflector.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/inserter.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/inserter.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst assimilator_1 = __webpack_require__(/*! ./assimilator */ \"./node_modules/taipa/lib/dparser/assimilator.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nfunction getNoInsertion(word) {\n    const mrphs = assimilator_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_2.TonalZeroInsertionMetaplasm());\n    return lx;\n}\n/**\n * Inserts an initial m, n, or ng to syllable ay if the preceding syllable has a final m, n, or ng.\n * @param word A word whose second syllable is ay, a, or af. The word has at least 2 syllables for the second one to be inserted an initial.\n */\nfunction insertToFollowingSyllable(word) {\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    const gs = gm.makeGraphemes(word);\n    const mrphs = tschmm.makeMorphemes(gs);\n    // TODO: add initial g. b? l?\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_1.Epenthesis());\n    return lx;\n}\nexports.insertToFollowingSyllable = insertToFollowingSyllable;\n/**\n * Insert an initial to the enclitic.\n * @param preceding Thre preceding word.\n * @param following The following word. The enclitic.\n */\nfunction insertToFollowingWord(preceding, following) {\n    const lxPreceding = getNoInsertion(preceding);\n    const lxFollowing = getNoInsertion(following);\n    const phmk = new phraseme_1.TonalInsertionPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.InsertionToEnclitic());\n}\nexports.insertToFollowingWord = insertToFollowingWord;\n//# sourceMappingURL=inserter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvaW5zZXJ0ZXIuanM/YzQyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBbUI7QUFDOUMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsNERBQVU7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsa0VBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsc0VBQWU7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9pbnNlcnRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCB2ZXJzaW9uMl8xID0gcmVxdWlyZShcIi4uL3RvbmFsL3ZlcnNpb24yXCIpO1xuY29uc3QgbW9ycGhlbWVfMSA9IHJlcXVpcmUoXCIuL21vcnBoZW1lXCIpO1xuY29uc3QgbGV4ZW1lXzEgPSByZXF1aXJlKFwiLi9sZXhlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbmNvbnN0IHBocmFzZW1lXzEgPSByZXF1aXJlKFwiLi9waHJhc2VtZVwiKTtcbmNvbnN0IGFzc2ltaWxhdG9yXzEgPSByZXF1aXJlKFwiLi9hc3NpbWlsYXRvclwiKTtcbmNvbnN0IG1ldGFwbGFzbV8yID0gcmVxdWlyZShcIi4uL21ldGFwbGFzbVwiKTtcbmZ1bmN0aW9uIGdldE5vSW5zZXJ0aW9uKHdvcmQpIHtcbiAgICBjb25zdCBtcnBocyA9IGFzc2ltaWxhdG9yXzEubW9ycGhBbmFseXplQ2hhbmdpbmcod29yZCk7XG4gICAgY29uc3QgbHggPSBuZXcgbGV4ZW1lXzEuVG9uYWxJbnNlcnRpb25MZXhlbWUobXJwaHMsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9JbnNlcnRpb25NZXRhcGxhc20oKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuLyoqXG4gKiBJbnNlcnRzIGFuIGluaXRpYWwgbSwgbiwgb3IgbmcgdG8gc3lsbGFibGUgYXkgaWYgdGhlIHByZWNlZGluZyBzeWxsYWJsZSBoYXMgYSBmaW5hbCBtLCBuLCBvciBuZy5cbiAqIEBwYXJhbSB3b3JkIEEgd29yZCB3aG9zZSBzZWNvbmQgc3lsbGFibGUgaXMgYXksIGEsIG9yIGFmLiBUaGUgd29yZCBoYXMgYXQgbGVhc3QgMiBzeWxsYWJsZXMgZm9yIHRoZSBzZWNvbmQgb25lIHRvIGJlIGluc2VydGVkIGFuIGluaXRpYWwuXG4gKi9cbmZ1bmN0aW9uIGluc2VydFRvRm9sbG93aW5nU3lsbGFibGUod29yZCkge1xuICAgIGNvbnN0IHRzY2htbSA9IG5ldyBtb3JwaGVtZV8xLlRvbmFsU291bmRDaGFuZ2luZ01vcnBoZW1lTWFrZXIoKTtcbiAgICBjb25zdCBnbSA9IG5ldyB1bml0XzEuR3JhcGhlbWVNYWtlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsKTtcbiAgICBjb25zdCBncyA9IGdtLm1ha2VHcmFwaGVtZXMod29yZCk7XG4gICAgY29uc3QgbXJwaHMgPSB0c2NobW0ubWFrZU1vcnBoZW1lcyhncyk7XG4gICAgLy8gVE9ETzogYWRkIGluaXRpYWwgZy4gYj8gbD9cbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbEluc2VydGlvbkxleGVtZShtcnBocywgbmV3IG1ldGFwbGFzbV8xLkVwZW50aGVzaXMoKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5pbnNlcnRUb0ZvbGxvd2luZ1N5bGxhYmxlID0gaW5zZXJ0VG9Gb2xsb3dpbmdTeWxsYWJsZTtcbi8qKlxuICogSW5zZXJ0IGFuIGluaXRpYWwgdG8gdGhlIGVuY2xpdGljLlxuICogQHBhcmFtIHByZWNlZGluZyBUaHJlIHByZWNlZGluZyB3b3JkLlxuICogQHBhcmFtIGZvbGxvd2luZyBUaGUgZm9sbG93aW5nIHdvcmQuIFRoZSBlbmNsaXRpYy5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0VG9Gb2xsb3dpbmdXb3JkKHByZWNlZGluZywgZm9sbG93aW5nKSB7XG4gICAgY29uc3QgbHhQcmVjZWRpbmcgPSBnZXROb0luc2VydGlvbihwcmVjZWRpbmcpO1xuICAgIGNvbnN0IGx4Rm9sbG93aW5nID0gZ2V0Tm9JbnNlcnRpb24oZm9sbG93aW5nKTtcbiAgICBjb25zdCBwaG1rID0gbmV3IHBocmFzZW1lXzEuVG9uYWxJbnNlcnRpb25QaHJhc2VtZU1ha2VyKCk7XG4gICAgcmV0dXJuIHBobWsubWFrZVBocmFzZW1lKGx4UHJlY2VkaW5nLCBseEZvbGxvd2luZywgbmV3IG1ldGFwbGFzbV8xLkluc2VydGlvblRvRW5jbGl0aWMoKSk7XG59XG5leHBvcnRzLmluc2VydFRvRm9sbG93aW5nV29yZCA9IGluc2VydFRvRm9sbG93aW5nV29yZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc2VydGVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/inserter.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/keywords.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/keywords.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst visitor_1 = __webpack_require__(/*! ./visitor */ \"./node_modules/taipa/lib/dparser/visitor.js\");\n/** Construction element. */\nclass ConstructionElement {\n    constructor() {\n        /** Orthographic text. */\n        this.orth = '';\n        /** The simple part-of-speech tag. */\n        this.pos = '';\n        /** The detailed part-of-speech tag. */\n        this.tag = '';\n    }\n}\nexports.ConstructionElement = ConstructionElement;\nclass PersonalPronounElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.orth = str;\n        this.pos = symbols_1.POSTags.pronoun;\n    }\n}\nexports.PersonalPronounElement = PersonalPronounElement;\nclass VerbElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.orth = str;\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nexports.VerbElement = VerbElement;\nclass EncliticElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.particle;\n        this.orth = str;\n    }\n}\nexports.EncliticElement = EncliticElement;\nclass PronounElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.pronoun;\n        this.orth = str;\n    }\n}\nexports.PronounElement = PronounElement;\nclass NounElement extends ConstructionElement {\n    constructor() {\n        super();\n        this.pos = symbols_1.POSTags.noun;\n    }\n}\nclass ParticleElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.particle;\n        this.orth = str;\n    }\n}\nexports.ParticleElement = ParticleElement;\nclass PrepositionElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.adposition;\n        this.orth = str;\n    }\n}\nexports.PrepositionElement = PrepositionElement;\nclass AuxiliaryElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.auxiliary;\n        this.orth = str;\n    }\n}\nexports.AuxiliaryElement = AuxiliaryElement;\nclass KeyWords {\n    constructor() {\n        this.words = new Array();\n        this.lexemes = new Array();\n        this.populateWords();\n        this.populateLexemes();\n    }\n    createWord(orth, pos) {\n        const w1 = new visitor_1.OrthoWord();\n        w1.form = orth;\n        const ce1 = new ConstructionElement();\n        ce1.orth = orth;\n        ce1.pos = pos;\n        this.words.push([w1, ce1]);\n    }\n    populateWords() {\n        this.createWord('qaz', symbols_1.POSTags.auxiliary);\n        this.createWord('che', symbols_1.POSTags.pronoun);\n    }\n    createLexeme(orth, pos) {\n        const lx1 = new visitor_1.OrthoLexeme();\n        lx1.form = orth;\n        const ilx1 = creator_1.createTonalInflectionLexeme(lx1.form, new metaplasm_1.TonalCombiningForms());\n        lx1.inflected.push(ilx1.getForms()[0].literal);\n        const ce1 = new ConstructionElement();\n        ce1.orth = orth;\n        ce1.pos = pos;\n        this.lexemes.push([lx1, ce1]);\n    }\n    populateLexemes() {\n        this.createLexeme('goay', symbols_1.POSTags.pronoun);\n        this.createLexeme('longy', symbols_1.POSTags.particle);\n        this.createLexeme('bez', symbols_1.POSTags.particle);\n    }\n    matchLexemes(word) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.lexemes.filter(it => it[0].accept(v, word));\n        if (arr.length > 0) {\n            const ce = new ConstructionElement();\n            ce.orth = word;\n            ce.pos = arr[0][1].pos;\n            return ce;\n        }\n        return new ConstructionElement();\n    }\n    matchWords(word) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.words.filter(it => it[0].accept(v, word));\n        if (arr.length > 0) {\n            return arr[0][1];\n        }\n        return new ConstructionElement();\n    }\n}\nexports.KeyWords = KeyWords;\n//# sourceMappingURL=keywords.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIva2V5d29yZHMuanM/ZDIyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2tleXdvcmRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzeW1ib2xzXzEgPSByZXF1aXJlKFwiLi9zeW1ib2xzXCIpO1xuY29uc3QgY3JlYXRvcl8xID0gcmVxdWlyZShcIi4vY3JlYXRvclwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgdmlzaXRvcl8xID0gcmVxdWlyZShcIi4vdmlzaXRvclwiKTtcbi8qKiBDb25zdHJ1Y3Rpb24gZWxlbWVudC4gKi9cbmNsYXNzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogT3J0aG9ncmFwaGljIHRleHQuICovXG4gICAgICAgIHRoaXMub3J0aCA9ICcnO1xuICAgICAgICAvKiogVGhlIHNpbXBsZSBwYXJ0LW9mLXNwZWVjaCB0YWcuICovXG4gICAgICAgIHRoaXMucG9zID0gJyc7XG4gICAgICAgIC8qKiBUaGUgZGV0YWlsZWQgcGFydC1vZi1zcGVlY2ggdGFnLiAqL1xuICAgICAgICB0aGlzLnRhZyA9ICcnO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uc3RydWN0aW9uRWxlbWVudCA9IENvbnN0cnVjdGlvbkVsZW1lbnQ7XG5jbGFzcyBQZXJzb25hbFByb25vdW5FbGVtZW50IGV4dGVuZHMgQ29uc3RydWN0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3J0aCA9IHN0cjtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuO1xuICAgIH1cbn1cbmV4cG9ydHMuUGVyc29uYWxQcm9ub3VuRWxlbWVudCA9IFBlcnNvbmFsUHJvbm91bkVsZW1lbnQ7XG5jbGFzcyBWZXJiRWxlbWVudCBleHRlbmRzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHN0cikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgICAgIHRoaXMucG9zID0gc3ltYm9sc18xLlBPU1RhZ3MudmVyYjtcbiAgICB9XG59XG5leHBvcnRzLlZlcmJFbGVtZW50ID0gVmVyYkVsZW1lbnQ7XG5jbGFzcyBFbmNsaXRpY0VsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wYXJ0aWNsZTtcbiAgICAgICAgdGhpcy5vcnRoID0gc3RyO1xuICAgIH1cbn1cbmV4cG9ydHMuRW5jbGl0aWNFbGVtZW50ID0gRW5jbGl0aWNFbGVtZW50O1xuY2xhc3MgUHJvbm91bkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9ub3VuRWxlbWVudCA9IFByb25vdW5FbGVtZW50O1xuY2xhc3MgTm91bkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5ub3VuO1xuICAgIH1cbn1cbmNsYXNzIFBhcnRpY2xlRWxlbWVudCBleHRlbmRzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHN0cikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBvcyA9IHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5QYXJ0aWNsZUVsZW1lbnQgPSBQYXJ0aWNsZUVsZW1lbnQ7XG5jbGFzcyBQcmVwb3NpdGlvbkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5hZHBvc2l0aW9uO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5QcmVwb3NpdGlvbkVsZW1lbnQgPSBQcmVwb3NpdGlvbkVsZW1lbnQ7XG5jbGFzcyBBdXhpbGlhcnlFbGVtZW50IGV4dGVuZHMgQ29uc3RydWN0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9zID0gc3ltYm9sc18xLlBPU1RhZ3MuYXV4aWxpYXJ5O1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5BdXhpbGlhcnlFbGVtZW50ID0gQXV4aWxpYXJ5RWxlbWVudDtcbmNsYXNzIEtleVdvcmRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLmxleGVtZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5wb3B1bGF0ZVdvcmRzKCk7XG4gICAgICAgIHRoaXMucG9wdWxhdGVMZXhlbWVzKCk7XG4gICAgfVxuICAgIGNyZWF0ZVdvcmQob3J0aCwgcG9zKSB7XG4gICAgICAgIGNvbnN0IHcxID0gbmV3IHZpc2l0b3JfMS5PcnRob1dvcmQoKTtcbiAgICAgICAgdzEuZm9ybSA9IG9ydGg7XG4gICAgICAgIGNvbnN0IGNlMSA9IG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgICAgIGNlMS5vcnRoID0gb3J0aDtcbiAgICAgICAgY2UxLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy53b3Jkcy5wdXNoKFt3MSwgY2UxXSk7XG4gICAgfVxuICAgIHBvcHVsYXRlV29yZHMoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlV29yZCgncWF6Jywgc3ltYm9sc18xLlBPU1RhZ3MuYXV4aWxpYXJ5KTtcbiAgICAgICAgdGhpcy5jcmVhdGVXb3JkKCdjaGUnLCBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuKTtcbiAgICB9XG4gICAgY3JlYXRlTGV4ZW1lKG9ydGgsIHBvcykge1xuICAgICAgICBjb25zdCBseDEgPSBuZXcgdmlzaXRvcl8xLk9ydGhvTGV4ZW1lKCk7XG4gICAgICAgIGx4MS5mb3JtID0gb3J0aDtcbiAgICAgICAgY29uc3QgaWx4MSA9IGNyZWF0b3JfMS5jcmVhdGVUb25hbEluZmxlY3Rpb25MZXhlbWUobHgxLmZvcm0sIG5ldyBtZXRhcGxhc21fMS5Ub25hbENvbWJpbmluZ0Zvcm1zKCkpO1xuICAgICAgICBseDEuaW5mbGVjdGVkLnB1c2goaWx4MS5nZXRGb3JtcygpWzBdLmxpdGVyYWwpO1xuICAgICAgICBjb25zdCBjZTEgPSBuZXcgQ29uc3RydWN0aW9uRWxlbWVudCgpO1xuICAgICAgICBjZTEub3J0aCA9IG9ydGg7XG4gICAgICAgIGNlMS5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMubGV4ZW1lcy5wdXNoKFtseDEsIGNlMV0pO1xuICAgIH1cbiAgICBwb3B1bGF0ZUxleGVtZXMoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlTGV4ZW1lKCdnb2F5Jywgc3ltYm9sc18xLlBPU1RhZ3MucHJvbm91bik7XG4gICAgICAgIHRoaXMuY3JlYXRlTGV4ZW1lKCdsb25neScsIHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlKTtcbiAgICAgICAgdGhpcy5jcmVhdGVMZXhlbWUoJ2JleicsIHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlKTtcbiAgICB9XG4gICAgbWF0Y2hMZXhlbWVzKHdvcmQpIHtcbiAgICAgICAgY29uc3QgdiA9IG5ldyB2aXNpdG9yXzEuVmlzaXRvck1hdGNoaW5nKCk7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMubGV4ZW1lcy5maWx0ZXIoaXQgPT4gaXRbMF0uYWNjZXB0KHYsIHdvcmQpKTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjZSA9IG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgICAgICAgICBjZS5vcnRoID0gd29yZDtcbiAgICAgICAgICAgIGNlLnBvcyA9IGFyclswXVsxXS5wb3M7XG4gICAgICAgICAgICByZXR1cm4gY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgfVxuICAgIG1hdGNoV29yZHMod29yZCkge1xuICAgICAgICBjb25zdCB2ID0gbmV3IHZpc2l0b3JfMS5WaXNpdG9yTWF0Y2hpbmcoKTtcbiAgICAgICAgY29uc3QgYXJyID0gdGhpcy53b3Jkcy5maWx0ZXIoaXQgPT4gaXRbMF0uYWNjZXB0KHYsIHdvcmQpKTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyWzBdWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0aW9uRWxlbWVudCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuS2V5V29yZHMgPSBLZXlXb3Jkcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXdvcmRzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/keywords.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/lexeme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/lexeme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lexeme_1 = __webpack_require__(/*! ../tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\n/** A word and its inflected forms. */\nclass TonalInflectionLexeme extends unit_1.Lexeme {\n    // TODO: should a member variable affixes be added and passed to metaplasm. check out member sounds in morpheme\n    constructor(morphemes, metaplasm) {\n        super();\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1]) {\n                // tonal ending needs to be assigned to sandhi lexeme\n                this.allomorphicEnding = this.assignAllomorphicEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                this.allomorphicEnding = new lexeme_1.AllomorphicEnding();\n            }\n        }\n        else {\n            this.allomorphicEnding = new lexeme_1.AllomorphicEnding();\n        }\n        if (morphemes.length > 0)\n            this.forms = this.assignWordForms(morphemes, metaplasm);\n    }\n    assignAllomorphicEnding(allomorph) {\n        let tse = new lexeme_1.AllomorphicEnding();\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            // replace the tonal ending\n            let fte = new lexeme_1.FreeAllomorphicEnding();\n            fte.allomorph = allomorph;\n            tse = fte;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            // append the tonal of the tonal ending\n            let cte = new lexeme_1.CheckedAllomorphicEnding();\n            cte.allomorph = allomorph;\n            tse = cte;\n        }\n        return tse;\n    }\n    getInflectionalEnding() {\n        if (this.allomorphicEnding)\n            return this.allomorphicEnding.allomorph.tonal.toString();\n        return '';\n    }\n    getAllomorphicEnding() {\n        if (this.allomorphicEnding)\n            return this.allomorphicEnding;\n        return '';\n    }\n    assignWordForms(ms, ti) {\n        return ti.apply(ms);\n    }\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInflectionLexeme = TonalInflectionLexeme;\n/** A word and its inserted forms. */\nclass TonalInsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    insertWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentSnds = preceding.morphemes[preceding.morphemes.length - 1].sounds;\n            let s = new unit_2.Sound();\n            if (adjacentSnds[adjacentSnds.length - 1].name ===\n                version2_1.TonalSoundTags.freeTonal &&\n                adjacentSnds[adjacentSnds.length - 2].name === version2_1.TonalSoundTags.nasalFinal) {\n                s = adjacentSnds[adjacentSnds.length - 2];\n            }\n            else if (adjacentSnds[adjacentSnds.length - 1].name === version2_1.TonalSoundTags.nasalFinal) {\n                s = adjacentSnds[adjacentSnds.length - 1];\n            }\n            const syls = this.morphemes[0].insertNasal(s);\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInsertionLexeme = TonalInsertionLexeme;\n/** A word and its inserted forms. */\nclass TonalUninsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninsertWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentSnds = preceding.morphemes[preceding.morphemes.length - 1].sounds;\n            let s = new unit_2.Sound();\n            if ((adjacentSnds[adjacentSnds.length - 1].name ===\n                version2_1.TonalSoundTags.freeTonal &&\n                adjacentSnds[adjacentSnds.length - 2].name ===\n                    version2_1.TonalSoundTags.nasalFinal) ||\n                adjacentSnds[adjacentSnds.length - 1].name === version2_1.TonalSoundTags.nasalFinal) {\n                s = adjacentSnds[adjacentSnds.length - 2];\n            }\n            const syls = this.morphemes[0].uninsertNasal();\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalUninsertionLexeme = TonalUninsertionLexeme;\nclass TonalInfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    infectWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0 &&\n            preceding.morphemes[preceding.morphemes.length - 1].sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization).length > 0) {\n            // if there is a nasalization in the preceding word\n            const syls = this.morphemes[0].infect();\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInfectionLexeme = TonalInfectionLexeme;\nclass TonalUninfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninfectWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentSnds = this.morphemes[this.morphemes.length - 1].sounds;\n            const n = preceding.morphemes[preceding.morphemes.length - 1].sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization);\n            if (n.length == 1 &&\n                adjacentSnds.filter(it => it.name === version2_1.TonalSoundTags.nasalization)\n                    .length == 1) {\n                // if there is a nasalization in thre preceding word and the current word\n                wrd.replaceSyllable(0, this.morphemes[0].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUninfectionLexeme = TonalUninfectionLexeme;\n/** A word and its mutated forms. */\nclass TonalMutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    mutateWith(following) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes.length > 0) {\n            const adjacentSnds = following.morphemes[following.morphemes.length - 1].sounds;\n            if (adjacentSnds[0].name === version2_1.TonalSoundTags.initial) {\n                const s = adjacentSnds[0];\n                const syls = this.morphemes[this.morphemes.length - 1].changeFinalPtkppttkk(s);\n                if (syls && syls.length > 0) {\n                    wrd.popSyllable();\n                    wrd.pushSyllable(syls[0]);\n                }\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalMutationLexeme = TonalMutationLexeme;\n/** A word and its unmutated forms. */\nclass TonalUnmutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    unmutateWith(following) {\n        const snds = this.morphemes[this.morphemes.length - 1].sounds;\n        const fnls = snds.filter(i => i.name === version2_1.TonalSoundTags.stopFinal);\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes[0].sounds[0].toString() === version2_1.TonalLetterTags.g) {\n            if (fnls[0].toString() === version2_1.TonalLetterTags.gg ||\n                fnls[0].toString() === version2_1.TonalLetterTags.g) {\n                wrd.replaceSyllable(0, this.morphemes[0].unmutateFinalConsonant(following.morphemes[0].sounds[0])[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUnmutationLexeme = TonalUnmutationLexeme;\nclass TonalInflectionLexemeMaker extends unit_1.LexemeMaker {\n    constructor(metaplasm) {\n        super();\n        this.metaplasm = metaplasm;\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        let isInflStemWithX = false; // inflectional stem with x in the middle\n        if (morphemes) {\n            isInflStemWithX = this.checkFifth(morphemes);\n            if (isInflStemWithX)\n                return new TonalInflectionLexeme([], this.metaplasm);\n        }\n        return new TonalInflectionLexeme(morphemes, this.metaplasm);\n    }\n    checkFifth(ms) {\n        for (let i = 0; i < ms.length; i++) {\n            if (ms[i] && ms[i].syllable.lastLetter.literal === version2_1.TonalLetterTags.x) {\n                if (i < ms.length - 1 && !ms[ms.length - 1].isAy()) {\n                    if (ms[ms.length - 1].syllable.lastLetter.literal === version2_1.TonalLetterTags.a) {\n                        break;\n                    }\n                    else {\n                        // tonal x can't not appear in them middle of an inflectional stem\n                        // if it is not preceding an ay or a\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.TonalInflectionLexemeMaker = TonalInflectionLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/metaplasm.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/metaplasm.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lexeme_1 = __webpack_require__(/*! ../tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\n/** Returns the combining forms of a syllable. */\nclass TonalCombiningForms extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n                else if (allomorph instanceof version2_1.AllomorphY) {\n                    s.popLetter();\n                    return [s];\n                }\n                else {\n                    s.popLetter();\n                    const tos = collections_1.combiningRules.get(allomorph.tonal.toString());\n                    const rets = [];\n                    if (tos) {\n                        for (let k = 0; k < tos.length; k++) {\n                            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                            rets.push(new morpheme_1.TonalSyllable(s.letters));\n                            s.popLetter();\n                        }\n                    }\n                    return rets;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // nothing to pop here\n                if (allomorph.tonal.toString().length > 0)\n                    return [];\n                const tos = collections_1.combiningRules.get(allomorph.final.toString());\n                const rets = [];\n                if (tos) {\n                    for (let k = 0; k < tos.length; k++) {\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                        rets.push(new morpheme_1.TonalSyllable(s.letters));\n                        s.popLetter();\n                    }\n                }\n                return rets;\n            }\n        }\n        return [];\n    }\n}\nexports.TonalCombiningForms = TonalCombiningForms;\n/** Changes to 3rd tone. */\nclass ThirdCombiningForm extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            const s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                if (allomorph.tonal.toString()) {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.ThirdCombiningForm = ThirdCombiningForm;\n/** Changes 4th tone to 1st tone. */\nclass FourthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.AllomorphH) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FourthToFirstCombining = FourthToFirstCombining;\n/** Changes 8th tone to 1st tone. */\nclass EighthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            const tnl = collections_1.eighthToFirst.get(allomorph.toString());\n            if (tnl) {\n                s.popLetter();\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tnl).characters));\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToFirstCombining = EighthToFirstCombining;\n/** Changes 8th tone to 2nd tone. */\nclass EighthToSecondCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.h).characters));\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToSecondCombining = EighthToSecondCombining;\n/** Returns the combining form of enclitic e. */\nclass AdnominalECombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        // 1->7, 7->7, 3->3\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        // it should loop only once\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.AdnominalECombining = AdnominalECombining;\n/** Returns the combining form of a phrasal verb particle. */\nclass PhrasalVerbParticleCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    toThird(syllable, final) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.popLetter();\n        const fnl = collections_1.finalOfPhrasalVerbParticle.get(final);\n        if (fnl) {\n            // h -> hh, p -> pp\n            s.pushLetter(version2_1.lowerLettersTonal.get(fnl));\n            s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n        }\n        return s;\n    }\n    toFirst(syllable) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f));\n        return s;\n    }\n    toSeventh(syllable) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.popLetter();\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z));\n        return s;\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.CheckedAllomorph) {\n                const ret = [];\n                let syl = new morpheme_1.TonalSyllable([]);\n                if (this.tone === version2_1.TonalLetterTags.f) {\n                    syl = this.toFirst(s);\n                }\n                else if (this.tone === version2_1.TonalLetterTags.w) {\n                    syl = this.toThird(s, sounds[sounds.length - 1].toString());\n                }\n                else if (this.tone === version2_1.TonalLetterTags.z) {\n                    syl = this.toSeventh(s);\n                }\n                ret.push(syl);\n                // TODO: free form of the syllable could be handle outside of this routine by popping out f/w and h/hh\n                return ret;\n            }\n        }\n        return [];\n    }\n}\nexports.PhrasalVerbParticleCombining = PhrasalVerbParticleCombining;\n/** Returns the combining form of enclitic le. */\nclass ConjunctiveLeCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph.tonal.toString() === version2_1.TonalLetterTags.z ||\n                    allomorph.tonal.toString() === version2_1.TonalLetterTags.w) {\n                    s.popLetter();\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.ConjunctiveLeCombining = ConjunctiveLeCombining;\n/** Returns the combining form of possesive case marker ex. */\nclass PossesiveExCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.PossesiveExCombining = PossesiveExCombining;\n/** Changes 4th tone to either 1st or 7th tone. */\nclass FirstSeventhCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    apply(sounds, allomorph) {\n        // from -h to 1 or 7\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (s.lastLetter.literal === version2_1.TonalLetterTags.h) {\n                s.popLetter();\n            }\n            if (this.tone === version2_1.TonalLetterTags.z) {\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z).characters));\n            }\n            else if (this.tone === version2_1.TonalLetterTags.zero &&\n                sounds[sounds.length - 1].toString() === version2_1.TonalLetterTags.t) {\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FirstSeventhCombining = FirstSeventhCombining;\n/** Inflects an inflectional suffix. */\nclass TonalDesinenceInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 0 && morphemes[morphemes.length - 1]) {\n            const last = morphemes[morphemes.length - 1];\n            const syls = last.getForms();\n            let rets = [];\n            if (syls) {\n                for (let i in syls) {\n                    let wd = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n                    wd.popSyllable();\n                    wd.pushSyllable(syls[i]);\n                    rets.push(wd);\n                }\n            }\n            return rets;\n        }\n        return [];\n    }\n}\nexports.TonalDesinenceInflection = TonalDesinenceInflection;\n/** Inflects a transfix. */\nclass TransfixInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        const rets = [];\n        if (morphemes.length > 0) {\n            const tw = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n            for (let i = 0; i < morphemes.length; i++) {\n                const form = morphemes[i].getForms()[0];\n                if (form)\n                    tw.replaceSyllable(i, form);\n            }\n            rets.push(tw);\n        }\n        return rets;\n    }\n}\nexports.TransfixInflection = TransfixInflection;\n/** Inserts an initial m, n, or ng to syllable ay. */\nclass Epenthesis extends metaplasm_1.TonalInsertionMetaplasm {\n    // adding of nasal consonants. insertion\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n            if (snds[snds.length - 2].name == version2_1.TonalSoundTags.nasalFinal &&\n                morphemes[morphemes.length - 1].syllable.letters[0].literal ===\n                    version2_1.TonalLetterTags.a) {\n                // m, n, ng followed by -ay. pass the preceding nasal to get forms\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].insertNasal(snds[snds.length - 2])[0]);\n                return [wrd];\n            }\n            // TODO: insert to syllable e. e.g. laggwex -> laggwgex\n        }\n        return [];\n    }\n}\nexports.Epenthesis = Epenthesis;\n/** Uninsert an initial m, n, or ng from syllable ~ay */\nclass Uninsertion extends metaplasm_1.TonalUninsertionMetaplasm {\n    // removal of nasal consonants\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (snds[snds.length - 2].name == version2_1.TonalSoundTags.nasalFinal &&\n                collections_1.nasalInitials.includes(morphemes[morphemes.length - 1].syllable.letters[0].literal) &&\n                morphemes[morphemes.length - 1].syllable.letters[1].literal ===\n                    version2_1.TonalLetterTags.a) {\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].uninsertNasal()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninsertion = Uninsertion;\n/** Infect the following syllable with nasalization. */\nclass Infection extends metaplasm_1.TonalInfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (snds.filter(it => it.name === version2_1.TonalSoundTags.nasalization).length == 1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].infect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Infection = Infection;\n/** Uninfect the following syllable which is infected by a nasalization. */\nclass Uninfection extends metaplasm_1.TonalUninfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (snds.filter(it => it.name === version2_1.TonalSoundTags.nasalization).length == 1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninfection = Uninfection;\n/** Mutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantMutation extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            // duplifix. pass the preceding initial to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].mutateInitialConsonant(snds[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantMutation = ConsonantMutation;\n/** Unmutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantUnmutation extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const snds = morphemes[morphemes.length - 2].sounds;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            // pass the initial of the following word to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].unmutateInitialConsonant(snds[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantUnmutation = ConsonantUnmutation;\n/** Returns the proceeding forms of a phrasal verb of length 2. */\nclass ConjugateToProceeding extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.getForms()[0], it])));\n            return ret;\n        }\n        else if (verb.getForms().length > 0) {\n            // equivalent to compound in terms of phrasal verb\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], particle.word])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.ConjugateToProceeding = ConjugateToProceeding;\n/** Returns the proceeding forms of a phrasal verb of length 3. */\nclass ConjugateVppToProceeding extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 || particleTwo.getForms().length > 0) {\n            return [\n                new phraseme_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]),\n            ];\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToProceeding = ConjugateVppToProceeding;\n/** Returns the transitive forms of a phrasal verb of length 3. */\nclass ConjugateVppToTransitive extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (verb.getForms().length > 0) {\n            return [\n                new phraseme_1.TonalPhrase([verb.getForms()[0], particle.word, particleTwo.word]),\n            ];\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToTransitive = ConjugateVppToTransitive;\n/** Returns the participle forms of a phrasal verb of length 2. */\nclass ConjugateToParticiple extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.getForms()[0], it])));\n            }\n            else {\n                forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.word, it])));\n            }\n            return ret;\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateToParticiple = ConjugateToParticiple;\n/** Returns the participle forms of a phrasal verb of length 3. */\nclass ConjugateVppToParticiple extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 && particleTwo.getForms().length > 0) {\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                ret.push(new phraseme_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]));\n            }\n            return ret;\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToParticiple = ConjugateVppToParticiple;\n/** Returns the adnominal forms of a possesive or e-adjective. */\nclass Adnominal extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(noun, particle) {\n        if (noun.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([noun.word, particle.getForms()[0]])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Adnominal = Adnominal;\n/** Returns the conjunctive form of le form. */\nclass Conjunctive extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, le) {\n        if (verb.word.literal === '' || le.word.literal === '')\n            return [];\n        if (le.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], le.getForms()[0]])];\n        }\n        else if (verb.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], le.word])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Conjunctive = Conjunctive;\n/** Insert an initial to the enclitic. */\nclass InsertionToEnclitic extends metaplasm_1.TonalPhrasalInsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.insertWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InsertionToEnclitic = InsertionToEnclitic;\n/** Uninsert an initial from the enclitic. */\nclass UninsertionFromEnclitic extends metaplasm_1.TonalPhrasalUninsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninsertWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninsertionFromEnclitic = UninsertionFromEnclitic;\n/** Infect the following word with a nasalization. */\nclass InfectionExternal extends metaplasm_1.TonalPhrasalInfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.infectWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InfectionExternal = InfectionExternal;\n/** Uninfect the following word which is infected by a nasalization. */\nclass UninfectionExternal extends metaplasm_1.TonalPhrasalUninfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninfectWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninfectionExternal = UninfectionExternal;\n/** Consonant mutation of the final of the preceding word. */\nclass FinalConsonantMutationExternal extends metaplasm_1.TonalPhrasalMutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.mutateWith(following);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantMutationExternal = FinalConsonantMutationExternal;\n/** Consonant unmutation of the final of the preceding word. */\nclass FinalConsonantUnmutationExternal extends metaplasm_1.TonalPhrasalUnmutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.unmutateWith(following);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantUnmutationExternal = FinalConsonantUnmutationExternal;\n/** Consonant mutation of the final of the preceding syllable. */\nclass FinalConsonantMutationInternal extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                if (morphemes[i].sounds[0].name === version2_1.TonalSoundTags.initial &&\n                    (morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.t ||\n                        morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.tt)) {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else if (morphemes[i].sounds[0].toString() === version2_1.TonalLetterTags.b &&\n                    morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.n) {\n                    const syls = morphemes[i - 1].changeFinalN(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0)\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantMutationInternal = FinalConsonantMutationInternal;\n/** Consonant unmutation of the final of the preceding syllable. */\nclass FinalConsonantUnmutationInternal extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                // combine b, g, h, j, l with m, n, ng\n                const initialsBghjlmnng = collections_1.initialsBghjl.concat(collections_1.nasalInitials);\n                const finalsBglbbggll = Array.from(collections_1.voicedVoicelessFinals.keys());\n                if (morphemes[i].sounds[0].name === version2_1.TonalSoundTags.initial &&\n                    finalsBglbbggll.includes(morphemes[i - 1].lastSecondLetter) &&\n                    initialsBghjlmnng.includes(morphemes[i].sounds[0].toString())) {\n                    const syls = morphemes[i - 1].toVoicelessFinal();\n                    wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantUnmutationInternal = FinalConsonantUnmutationInternal;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/morpheme.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/morpheme.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** A syllable and its combining forms. */\nclass TonalCombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.allomorph = this.assignAllomorph(this.syllable);\n        this.sounds = sounds;\n        this.forms = this.metaplasm.apply(this.sounds, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    isAy() {\n        if (this.sounds[this.sounds.length - 1].toString() === version2_1.TonalLetterTags.y &&\n            this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.a)\n            return true;\n        return false;\n    }\n    assignAllomorph(syllable) {\n        if (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.uncombinedCheckedAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.checkedTonalSounds.includes(syllable.lastLetter.literal) &&\n            (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastSecondLetter.literal) ||\n                collections_1.finalBgjlsbbggjjllss.has(syllable.lastSecondLetter.literal))) {\n            // in case of a final followed by a tonal\n            const ams = version2_1.combinedCheckedAllomorphs.get(syllable.lastSecondLetter.literal);\n            if (ams && ams.length > 0) {\n                const ret = ams.filter(it => it.tonal.toString() === syllable.lastLetter.literal);\n                return ret[0];\n            }\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.combinedFreeAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.combinedFreeAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph(); // return empty allomorph\n        }\n        return new version2_1.ZeroAllomorph();\n    }\n}\nexports.TonalCombiningMorpheme = TonalCombiningMorpheme;\n/** A syllable and its sound changing forms. */\nclass TonalSoundChangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds) {\n        super();\n        this.syllable = syllable;\n        this.sounds = sounds;\n    }\n    get lastSecondLetter() {\n        return this.sounds[this.sounds.length - 2].toString();\n    }\n    insertNasal(sound) {\n        if (sound) {\n            if (sound.name === version2_1.TonalSoundTags.nasalFinal) {\n                // insertion of nasals, both internal and external sandhi\n                const snds = this.sounds;\n                snds.splice(0, 0, sound);\n                return [\n                    new morpheme_1.TonalSyllable(snds.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    infect() {\n        const n = version2_1.nasalizationSounds.sounds[0];\n        if (n) {\n            if (n.name === version2_1.TonalSoundTags.nasalization) {\n                const snds = this.sounds;\n                if (snds[snds.length - 1].name === version2_1.TonalSoundTags.freeTonal) {\n                    snds.splice(snds.length - 1, 0, n);\n                }\n                else if (snds[snds.length - 1].name === version2_1.TonalSoundTags.medial) {\n                    snds.push(n);\n                }\n                return [\n                    new morpheme_1.TonalSyllable(snds.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    /** Mutate initial consonants. */\n    mutateInitialConsonant(sound) {\n        if (sound) {\n            if (sound.name === version2_1.TonalSoundTags.initial) {\n                const snds = this.sounds;\n                if (snds[0].toString() === sound.toString()) {\n                    const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                    s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.l));\n                    return [s];\n                }\n                return [\n                    new morpheme_1.TonalSyllable(snds.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    mutateFinalConsonant(sound) {\n        if (sound) {\n            const snds = this.sounds;\n            const syl = new morpheme_1.TonalSyllable(this.sounds.map(i => new unit_2.AlphabeticLetter(i.characters)));\n            const idx = snds.findIndex(i => i.name === version2_1.TonalSoundTags.stopFinal);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.gg));\n            return [syl];\n        }\n        return [];\n    }\n    changeFinalTTt(initial) {\n        // absolute assimilation. regressive\n        if ((this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.tt &&\n            Array.from(Object.values(collections_1.initialsForTT)).includes(initial.toString())) ||\n            (this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.t &&\n                Array.from(Object.values(collections_1.initialsForFinalT)).includes(initial.toString()))) {\n            const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            const fnl = collections_1.ttInitialTInitialPairs.get(this.sounds[this.sounds.length - 2].toString() + initial.toString());\n            if (fnl) {\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                if (collections_1.nasalInitials.includes(initial.toString())) {\n                    s.insertLetter(s.letters.length - 2, new unit_2.AlphabeticLetter(initial.characters));\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n    changeFinalHHh(initial) {\n        // TODO: mutate consonants hh and h.\n        return [];\n    }\n    changeFinalPPp(initial) {\n        // TODO: neutrals. pp -> hh. p -> h.\n        return [];\n    }\n    changeWithInitialMnng(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initial &&\n            collections_1.nasalInitials.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithMedial(medial) {\n        if (medial.name === version2_1.TonalSoundTags.medial &&\n            version2_1.medialSounds.includes(medial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithInitialBghjl(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initial &&\n            collections_1.initialsBghjl.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    /**\n     * Change a final with the beginning sound/letter of the following syllable\n     * @param beginning Beginning sound of the following syllable\n     */\n    changeFinalPtkppttkk(beginning) {\n        const sandhiTTt = this.changeFinalTTt(beginning);\n        if (sandhiTTt.length > 0)\n            return sandhiTTt;\n        const sandhiHHh = this.changeFinalHHh(beginning);\n        if (sandhiHHh.length > 0)\n            return sandhiHHh;\n        const sandhiPPp = this.changeFinalPPp(beginning);\n        if (sandhiPPp.length > 0)\n            return sandhiPPp;\n        const voicedWithMnng = this.changeWithInitialMnng(beginning);\n        if (voicedWithMnng.length > 0)\n            return voicedWithMnng;\n        const voicedWithMedial = this.changeWithMedial(beginning);\n        if (voicedWithMedial.length > 0)\n            return voicedWithMedial;\n        const voicedWithBghjl = this.changeWithInitialBghjl(beginning);\n        if (voicedWithBghjl.length > 0)\n            return voicedWithBghjl;\n    }\n    changeFinalN(initial) {\n        if (this.sounds[this.sounds.length - 2].name != version2_1.TonalSoundTags.stopFinal &&\n            this.sounds[this.sounds.length - 2].name != version2_1.TonalSoundTags.nasalFinal) {\n            return [];\n        }\n        if (initial.toString() === version2_1.TonalLetterTags.b &&\n            this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.n) {\n            // replace final n with final m\n            const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.m));\n            return [s];\n        }\n        return [];\n    }\n    voicedFinal() {\n        const fnl = collections_1.voicelessVoicedFinals.get(this.sounds[this.sounds.length - 2].toString());\n        if (fnl) {\n            const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundChangingMorpheme = TonalSoundChangingMorpheme;\n/** A syllable and its sound changing forms. */\nclass TonalSoundUnchangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds) {\n        super();\n        this.syllable = syllable;\n        this.sounds = sounds;\n    }\n    get lastSecondLetter() {\n        return this.sounds[this.sounds.length - 2].toString();\n    }\n    uninsertNasal() {\n        const snds = this.sounds;\n        snds.shift();\n        return [\n            new morpheme_1.TonalSyllable(snds.map(it => new unit_2.AlphabeticLetter(it.characters))),\n        ];\n    }\n    toVoicelessFinal() {\n        // unvoiced\n        if (collections_1.voicedVoicelessFinals.has(this.sounds[this.sounds.length - 2].toString())) {\n            const fnl = collections_1.voicedVoicelessFinals.get(this.sounds[this.sounds.length - 2].toString());\n            if (fnl) {\n                const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                return [s];\n            }\n        }\n        return [];\n    }\n    unmutateInitialConsonant(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initial &&\n            initial.toString() === version2_1.TonalLetterTags.d) {\n            // l -> d\n            const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.d));\n            return [s];\n        }\n        return [];\n    }\n    unmutateFinalConsonant(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initial &&\n            initial.toString() === version2_1.TonalLetterTags.g) {\n            // gg -> tt\n            const syl = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            const idx = this.sounds.findIndex(i => i.name === version2_1.TonalSoundTags.stopFinal);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return [syl];\n        }\n        return [];\n    }\n    uninfect() {\n        const n = this.sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization);\n        if (n.length == 1) {\n            let snds = this.sounds.filter(i => i.name !== version2_1.TonalSoundTags.nasalization);\n            const s = new morpheme_1.TonalSyllable(snds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundUnchangingMorpheme = TonalSoundUnchangingMorpheme;\nclass TonalCombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor(tsm) {\n        super();\n        this.metaplasm = tsm;\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(msp) {\n        const tcm = new TonalCombiningMorpheme(new morpheme_1.TonalSyllable(msp.letters), msp.pattern, this.metaplasm);\n        return tcm;\n    }\n    postprocess(patterns) {\n        let morphemes = this.createMorphemes();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalCombiningMorphemeMaker = TonalCombiningMorphemeMaker;\nclass TonalSoundChangingMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundChangingMorpheme(new morpheme_1.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        let morphemes = this.createMorphemes();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundChangingMorphemeMaker = TonalSoundChangingMorphemeMaker;\nclass TonalSoundUnchangingMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundUnchangingMorpheme(new morpheme_1.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        let morphemes = this.createMorphemes();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundUnchangingMorphemeMaker = TonalSoundUnchangingMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/mutator.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/mutator.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst assimilator_1 = __webpack_require__(/*! ./assimilator */ \"./node_modules/taipa/lib/dparser/assimilator.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nfunction getNoMutation(word) {\n    const mrphs = assimilator_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_2.TonalZeroMutationMetaplasm());\n    return lx;\n}\n/** Mutates the initial of the following syllable. */\nfunction mutateInitialOfFollowingSyllable(word) {\n    const ms = assimilator_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(ms, new metaplasm_1.ConsonantMutation());\n    return lx;\n}\nexports.mutateInitialOfFollowingSyllable = mutateInitialOfFollowingSyllable;\n/** Mutates the final of the preceding syllable. */\nfunction mutateFinalOfPrecedingSyllable(word) {\n    const mrphs = assimilator_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_1.FinalConsonantMutationInternal());\n    return lx;\n}\nexports.mutateFinalOfPrecedingSyllable = mutateFinalOfPrecedingSyllable;\n/** Mutates the final of the preceding word. */\nfunction mutateFinalOfPrecedingWord(preceding, following) {\n    const lxPreceding = getNoMutation(preceding);\n    const lxFollowing = getNoMutation(following);\n    const phmk = new phraseme_1.TonalMutationPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.FinalConsonantMutationExternal());\n}\nexports.mutateFinalOfPrecedingWord = mutateFinalOfPrecedingWord;\n//# sourceMappingURL=mutator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvbXV0YXRvci5qcz9mMjdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsaUJBQWlCLG1CQUFPLENBQUMsNERBQVU7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsc0VBQWU7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMsa0VBQWE7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvbXV0YXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbGV4ZW1lXzEgPSByZXF1aXJlKFwiLi9sZXhlbWVcIik7XG5jb25zdCBhc3NpbWlsYXRvcl8xID0gcmVxdWlyZShcIi4vYXNzaW1pbGF0b3JcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbmNvbnN0IG1ldGFwbGFzbV8yID0gcmVxdWlyZShcIi4uL21ldGFwbGFzbVwiKTtcbmNvbnN0IHBocmFzZW1lXzEgPSByZXF1aXJlKFwiLi9waHJhc2VtZVwiKTtcbmZ1bmN0aW9uIGdldE5vTXV0YXRpb24od29yZCkge1xuICAgIGNvbnN0IG1ycGhzID0gYXNzaW1pbGF0b3JfMS5tb3JwaEFuYWx5emVDaGFuZ2luZyh3b3JkKTtcbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbE11dGF0aW9uTGV4ZW1lKG1ycGhzLCBuZXcgbWV0YXBsYXNtXzIuVG9uYWxaZXJvTXV0YXRpb25NZXRhcGxhc20oKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuLyoqIE11dGF0ZXMgdGhlIGluaXRpYWwgb2YgdGhlIGZvbGxvd2luZyBzeWxsYWJsZS4gKi9cbmZ1bmN0aW9uIG11dGF0ZUluaXRpYWxPZkZvbGxvd2luZ1N5bGxhYmxlKHdvcmQpIHtcbiAgICBjb25zdCBtcyA9IGFzc2ltaWxhdG9yXzEubW9ycGhBbmFseXplQ2hhbmdpbmcod29yZCk7XG4gICAgY29uc3QgbHggPSBuZXcgbGV4ZW1lXzEuVG9uYWxNdXRhdGlvbkxleGVtZShtcywgbmV3IG1ldGFwbGFzbV8xLkNvbnNvbmFudE11dGF0aW9uKCkpO1xuICAgIHJldHVybiBseDtcbn1cbmV4cG9ydHMubXV0YXRlSW5pdGlhbE9mRm9sbG93aW5nU3lsbGFibGUgPSBtdXRhdGVJbml0aWFsT2ZGb2xsb3dpbmdTeWxsYWJsZTtcbi8qKiBNdXRhdGVzIHRoZSBmaW5hbCBvZiB0aGUgcHJlY2VkaW5nIHN5bGxhYmxlLiAqL1xuZnVuY3Rpb24gbXV0YXRlRmluYWxPZlByZWNlZGluZ1N5bGxhYmxlKHdvcmQpIHtcbiAgICBjb25zdCBtcnBocyA9IGFzc2ltaWxhdG9yXzEubW9ycGhBbmFseXplQ2hhbmdpbmcod29yZCk7XG4gICAgY29uc3QgbHggPSBuZXcgbGV4ZW1lXzEuVG9uYWxNdXRhdGlvbkxleGVtZShtcnBocywgbmV3IG1ldGFwbGFzbV8xLkZpbmFsQ29uc29uYW50TXV0YXRpb25JbnRlcm5hbCgpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLm11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdTeWxsYWJsZSA9IG11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdTeWxsYWJsZTtcbi8qKiBNdXRhdGVzIHRoZSBmaW5hbCBvZiB0aGUgcHJlY2VkaW5nIHdvcmQuICovXG5mdW5jdGlvbiBtdXRhdGVGaW5hbE9mUHJlY2VkaW5nV29yZChwcmVjZWRpbmcsIGZvbGxvd2luZykge1xuICAgIGNvbnN0IGx4UHJlY2VkaW5nID0gZ2V0Tm9NdXRhdGlvbihwcmVjZWRpbmcpO1xuICAgIGNvbnN0IGx4Rm9sbG93aW5nID0gZ2V0Tm9NdXRhdGlvbihmb2xsb3dpbmcpO1xuICAgIGNvbnN0IHBobWsgPSBuZXcgcGhyYXNlbWVfMS5Ub25hbE11dGF0aW9uUGhyYXNlbWVNYWtlcigpO1xuICAgIHJldHVybiBwaG1rLm1ha2VQaHJhc2VtZShseFByZWNlZGluZywgbHhGb2xsb3dpbmcsIG5ldyBtZXRhcGxhc21fMS5GaW5hbENvbnNvbmFudE11dGF0aW9uRXh0ZXJuYWwoKSk7XG59XG5leHBvcnRzLm11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdXb3JkID0gbXV0YXRlRmluYWxPZlByZWNlZGluZ1dvcmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdXRhdG9yLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/mutator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/phraseme.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/phraseme.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\n/** A phrase of length 2 and its inflected forms. */\nclass PhrasalVerbPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([verb.word, particle.word]);\n        this.forms = metaplasm.apply(verb, particle);\n    }\n    /** Returns proceeding forms or participle forms */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbPhraseme = PhrasalVerbPhraseme;\n/** A phrase of length 3 and its inflected forms. */\nclass PhrasalVerbVppPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, particleTwo, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([verb.word, particle.word, particleTwo.word]);\n        this.forms = metaplasm.applyVpp(verb, particle, particleTwo);\n    }\n    /** Returns proceeding forms, participle forms, or transitive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbVppPhraseme = PhrasalVerbVppPhraseme;\n/** A compound. */\nclass TonalCompoundPhraseme extends unit_1.Phraseme {\n    /** Separable phrasal verb. Separate compound verb. Separable verb. Tiappwsux gifchongwguy. Tiappwsux gifsiannzguy. Adverb + verb. Prepositional verb. */\n    constructor(preceding, following) {\n        super();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.getForms()[0], following.word]);\n    }\n}\nexports.TonalCompoundPhraseme = TonalCompoundPhraseme;\n/** A phrase and its inflected forms. */\nclass TonalMainParticlePhraseme extends unit_1.Phraseme {\n    /** E-adjective. Le form. Terminal form of possesive case. */\n    constructor(main, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([main.word, particle.word]);\n        this.forms = metaplasm.apply(main, particle);\n    }\n    /** Returns adnominal forms or conjunctive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMainParticlePhraseme = TonalMainParticlePhraseme;\n/** A phrase and its proceeding forms. */\nclass SerialPhraseme extends unit_1.Phraseme {\n    /** A series of lexemes. */\n    constructor(lexemes) {\n        super();\n        this.forms = new Array();\n        // the base form is equivalent to a compound when there are only 2 words\n        const words = [];\n        for (let i = 0; i < lexemes.length - 1; i++) {\n            if (lexemes[i].getForms().length > 0 && lexemes[i].getForms()[0]) {\n                words.push(lexemes[i].getForms()[0]);\n            }\n        }\n        if (lexemes[lexemes.length - 1] &&\n            lexemes[lexemes.length - 1].word.literal.length > 0) {\n            words.push(lexemes[lexemes.length - 1].word);\n        }\n        this.phrase = new phraseme_1.TonalPhrase(words);\n        const forms = lexemes\n            .filter(it => it.getForms().length > 0 && it.getForms()[0])\n            .map(it => it.getForms()[0]);\n        if (forms.length > 0)\n            this.forms = [new phraseme_1.TonalPhrase(forms)];\n        else\n            this.forms = [];\n    }\n    /** Returna a series of inflected words. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.SerialPhraseme = SerialPhraseme;\nclass TonalInflectionPhrasemeMaker {\n    makePhrasalVerbPhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToProceeding());\n    }\n    makePhrasalVerbVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToProceeding());\n    }\n    makeTransitiveVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToTransitive());\n    }\n    makeCompoundPhraseme(preceding, following) {\n        return new TonalCompoundPhraseme(preceding, following);\n    }\n    makeAdjectivePhraseme(adjectivalNoun, e) {\n        return new TonalMainParticlePhraseme(adjectivalNoun, e, new metaplasm_1.Adnominal());\n    }\n    makeConjunctivePhraseme(verb, le) {\n        return new TonalMainParticlePhraseme(verb, le, new metaplasm_1.Conjunctive());\n    }\n    makePossesivePhraseme(noun, ex) {\n        return new TonalMainParticlePhraseme(noun, ex, new metaplasm_1.Adnominal());\n    }\n    makeParticiplePhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToParticiple());\n    }\n    makeVppParticiplePhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToParticiple());\n    }\n    makeSerialPhraseme(lexemes) {\n        return new SerialPhraseme(lexemes);\n    }\n}\nexports.TonalInflectionPhrasemeMaker = TonalInflectionPhrasemeMaker;\nclass TonalInsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns inserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInsertionPhraseme = TonalInsertionPhraseme;\nclass TonalInsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInsertionPhrasemeMaker = TonalInsertionPhrasemeMaker;\nclass TonalUninsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninsertionPhraseme = TonalUninsertionPhraseme;\nclass TonalUninsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninsertionPhrasemeMaker = TonalUninsertionPhrasemeMaker;\nclass TonalInfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns infected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInfectionPhraseme = TonalInfectionPhraseme;\nclass TonalInfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInfectionPhrasemeMaker = TonalInfectionPhrasemeMaker;\nclass TonalUninfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninfected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninfectionPhraseme = TonalUninfectionPhraseme;\nclass TonalUninfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninfectionPhrasemeMaker = TonalUninfectionPhrasemeMaker;\n/** A phrase and its mutated form. */\nclass TonalMutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns mutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMutationPhraseme = TonalMutationPhraseme;\nclass TonalMutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalMutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalMutationPhrasemeMaker = TonalMutationPhrasemeMaker;\n/** A phrase and its unmutated form. */\nclass TonalUnmutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns unmutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUnmutationPhraseme = TonalUnmutationPhraseme;\nclass TonalUnmutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUnmutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUnmutationPhrasemeMaker = TonalUnmutationPhrasemeMaker;\n//# sourceMappingURL=phraseme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvcGhyYXNlbWUuanM/Yjg3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyxrRUFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdCQUF3QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL3BocmFzZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgcGhyYXNlbWVfMSA9IHJlcXVpcmUoXCIuLi90b25hbC9waHJhc2VtZVwiKTtcbi8qKiBBIHBocmFzZSBvZiBsZW5ndGggMiBhbmQgaXRzIGluZmxlY3RlZCBmb3Jtcy4gKi9cbmNsYXNzIFBocmFzYWxWZXJiUGhyYXNlbWUgZXh0ZW5kcyB1bml0XzEuUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKHZlcmIsIHBhcnRpY2xlLCBtZXRhcGxhc20pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFt2ZXJiLndvcmQsIHBhcnRpY2xlLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseSh2ZXJiLCBwYXJ0aWNsZSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHByb2NlZWRpbmcgZm9ybXMgb3IgcGFydGljaXBsZSBmb3JtcyAqL1xuICAgIGdldEZvcm1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtcztcbiAgICB9XG59XG5leHBvcnRzLlBocmFzYWxWZXJiUGhyYXNlbWUgPSBQaHJhc2FsVmVyYlBocmFzZW1lO1xuLyoqIEEgcGhyYXNlIG9mIGxlbmd0aCAzIGFuZCBpdHMgaW5mbGVjdGVkIGZvcm1zLiAqL1xuY2xhc3MgUGhyYXNhbFZlcmJWcHBQaHJhc2VtZSBleHRlbmRzIHVuaXRfMS5QaHJhc2VtZSB7XG4gICAgY29uc3RydWN0b3IodmVyYiwgcGFydGljbGUsIHBhcnRpY2xlVHdvLCBtZXRhcGxhc20pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFt2ZXJiLndvcmQsIHBhcnRpY2xlLndvcmQsIHBhcnRpY2xlVHdvLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseVZwcCh2ZXJiLCBwYXJ0aWNsZSwgcGFydGljbGVUd28pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBwcm9jZWVkaW5nIGZvcm1zLCBwYXJ0aWNpcGxlIGZvcm1zLCBvciB0cmFuc2l0aXZlIGZvcm1zLiAqL1xuICAgIGdldEZvcm1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtcztcbiAgICB9XG59XG5leHBvcnRzLlBocmFzYWxWZXJiVnBwUGhyYXNlbWUgPSBQaHJhc2FsVmVyYlZwcFBocmFzZW1lO1xuLyoqIEEgY29tcG91bmQuICovXG5jbGFzcyBUb25hbENvbXBvdW5kUGhyYXNlbWUgZXh0ZW5kcyB1bml0XzEuUGhyYXNlbWUge1xuICAgIC8qKiBTZXBhcmFibGUgcGhyYXNhbCB2ZXJiLiBTZXBhcmF0ZSBjb21wb3VuZCB2ZXJiLiBTZXBhcmFibGUgdmVyYi4gVGlhcHB3c3V4IGdpZmNob25nd2d1eS4gVGlhcHB3c3V4IGdpZnNpYW5uemd1eS4gQWR2ZXJiICsgdmVyYi4gUHJlcG9zaXRpb25hbCB2ZXJiLiAqL1xuICAgIGNvbnN0cnVjdG9yKHByZWNlZGluZywgZm9sbG93aW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGhyYXNlID0gbmV3IHBocmFzZW1lXzEuVG9uYWxQaHJhc2UoW3ByZWNlZGluZy5nZXRGb3JtcygpWzBdLCBmb2xsb3dpbmcud29yZF0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxDb21wb3VuZFBocmFzZW1lID0gVG9uYWxDb21wb3VuZFBocmFzZW1lO1xuLyoqIEEgcGhyYXNlIGFuZCBpdHMgaW5mbGVjdGVkIGZvcm1zLiAqL1xuY2xhc3MgVG9uYWxNYWluUGFydGljbGVQaHJhc2VtZSBleHRlbmRzIHVuaXRfMS5QaHJhc2VtZSB7XG4gICAgLyoqIEUtYWRqZWN0aXZlLiBMZSBmb3JtLiBUZXJtaW5hbCBmb3JtIG9mIHBvc3Nlc2l2ZSBjYXNlLiAqL1xuICAgIGNvbnN0cnVjdG9yKG1haW4sIHBhcnRpY2xlLCBtZXRhcGxhc20pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFttYWluLndvcmQsIHBhcnRpY2xlLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseShtYWluLCBwYXJ0aWNsZSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGFkbm9taW5hbCBmb3JtcyBvciBjb25qdW5jdGl2ZSBmb3Jtcy4gKi9cbiAgICBnZXRGb3JtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXM7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbE1haW5QYXJ0aWNsZVBocmFzZW1lID0gVG9uYWxNYWluUGFydGljbGVQaHJhc2VtZTtcbi8qKiBBIHBocmFzZSBhbmQgaXRzIHByb2NlZWRpbmcgZm9ybXMuICovXG5jbGFzcyBTZXJpYWxQaHJhc2VtZSBleHRlbmRzIHVuaXRfMS5QaHJhc2VtZSB7XG4gICAgLyoqIEEgc2VyaWVzIG9mIGxleGVtZXMuICovXG4gICAgY29uc3RydWN0b3IobGV4ZW1lcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEFycmF5KCk7XG4gICAgICAgIC8vIHRoZSBiYXNlIGZvcm0gaXMgZXF1aXZhbGVudCB0byBhIGNvbXBvdW5kIHdoZW4gdGhlcmUgYXJlIG9ubHkgMiB3b3Jkc1xuICAgICAgICBjb25zdCB3b3JkcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxleGVtZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGV4ZW1lc1tpXS5nZXRGb3JtcygpLmxlbmd0aCA+IDAgJiYgbGV4ZW1lc1tpXS5nZXRGb3JtcygpWzBdKSB7XG4gICAgICAgICAgICAgICAgd29yZHMucHVzaChsZXhlbWVzW2ldLmdldEZvcm1zKClbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsZXhlbWVzW2xleGVtZXMubGVuZ3RoIC0gMV0gJiZcbiAgICAgICAgICAgIGxleGVtZXNbbGV4ZW1lcy5sZW5ndGggLSAxXS53b3JkLmxpdGVyYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd29yZHMucHVzaChsZXhlbWVzW2xleGVtZXMubGVuZ3RoIC0gMV0ud29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5waHJhc2UgPSBuZXcgcGhyYXNlbWVfMS5Ub25hbFBocmFzZSh3b3Jkcyk7XG4gICAgICAgIGNvbnN0IGZvcm1zID0gbGV4ZW1lc1xuICAgICAgICAgICAgLmZpbHRlcihpdCA9PiBpdC5nZXRGb3JtcygpLmxlbmd0aCA+IDAgJiYgaXQuZ2V0Rm9ybXMoKVswXSlcbiAgICAgICAgICAgIC5tYXAoaXQgPT4gaXQuZ2V0Rm9ybXMoKVswXSk7XG4gICAgICAgIGlmIChmb3Jtcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgdGhpcy5mb3JtcyA9IFtuZXcgcGhyYXNlbWVfMS5Ub25hbFBocmFzZShmb3JtcyldO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmZvcm1zID0gW107XG4gICAgfVxuICAgIC8qKiBSZXR1cm5hIGEgc2VyaWVzIG9mIGluZmxlY3RlZCB3b3Jkcy4gKi9cbiAgICBnZXRGb3JtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXM7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJpYWxQaHJhc2VtZSA9IFNlcmlhbFBocmFzZW1lO1xuY2xhc3MgVG9uYWxJbmZsZWN0aW9uUGhyYXNlbWVNYWtlciB7XG4gICAgbWFrZVBocmFzYWxWZXJiUGhyYXNlbWUodmVyYiwgcGFydGljbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQaHJhc2FsVmVyYlBocmFzZW1lKHZlcmIsIHBhcnRpY2xlLCBuZXcgbWV0YXBsYXNtXzEuQ29uanVnYXRlVG9Qcm9jZWVkaW5nKCkpO1xuICAgIH1cbiAgICBtYWtlUGhyYXNhbFZlcmJWcHBQaHJhc2VtZSh2ZXJiLCBwYXJ0aWNsZSwgcGFydGljbGVUd28pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQaHJhc2FsVmVyYlZwcFBocmFzZW1lKHZlcmIsIHBhcnRpY2xlLCBwYXJ0aWNsZVR3bywgbmV3IG1ldGFwbGFzbV8xLkNvbmp1Z2F0ZVZwcFRvUHJvY2VlZGluZygpKTtcbiAgICB9XG4gICAgbWFrZVRyYW5zaXRpdmVWcHBQaHJhc2VtZSh2ZXJiLCBwYXJ0aWNsZSwgcGFydGljbGVUd28pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQaHJhc2FsVmVyYlZwcFBocmFzZW1lKHZlcmIsIHBhcnRpY2xlLCBwYXJ0aWNsZVR3bywgbmV3IG1ldGFwbGFzbV8xLkNvbmp1Z2F0ZVZwcFRvVHJhbnNpdGl2ZSgpKTtcbiAgICB9XG4gICAgbWFrZUNvbXBvdW5kUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb25hbENvbXBvdW5kUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcpO1xuICAgIH1cbiAgICBtYWtlQWRqZWN0aXZlUGhyYXNlbWUoYWRqZWN0aXZhbE5vdW4sIGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb25hbE1haW5QYXJ0aWNsZVBocmFzZW1lKGFkamVjdGl2YWxOb3VuLCBlLCBuZXcgbWV0YXBsYXNtXzEuQWRub21pbmFsKCkpO1xuICAgIH1cbiAgICBtYWtlQ29uanVuY3RpdmVQaHJhc2VtZSh2ZXJiLCBsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFRvbmFsTWFpblBhcnRpY2xlUGhyYXNlbWUodmVyYiwgbGUsIG5ldyBtZXRhcGxhc21fMS5Db25qdW5jdGl2ZSgpKTtcbiAgICB9XG4gICAgbWFrZVBvc3Nlc2l2ZVBocmFzZW1lKG5vdW4sIGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9uYWxNYWluUGFydGljbGVQaHJhc2VtZShub3VuLCBleCwgbmV3IG1ldGFwbGFzbV8xLkFkbm9taW5hbCgpKTtcbiAgICB9XG4gICAgbWFrZVBhcnRpY2lwbGVQaHJhc2VtZSh2ZXJiLCBwYXJ0aWNsZSkge1xuICAgICAgICByZXR1cm4gbmV3IFBocmFzYWxWZXJiUGhyYXNlbWUodmVyYiwgcGFydGljbGUsIG5ldyBtZXRhcGxhc21fMS5Db25qdWdhdGVUb1BhcnRpY2lwbGUoKSk7XG4gICAgfVxuICAgIG1ha2VWcHBQYXJ0aWNpcGxlUGhyYXNlbWUodmVyYiwgcGFydGljbGUsIHBhcnRpY2xlVHdvKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGhyYXNhbFZlcmJWcHBQaHJhc2VtZSh2ZXJiLCBwYXJ0aWNsZSwgcGFydGljbGVUd28sIG5ldyBtZXRhcGxhc21fMS5Db25qdWdhdGVWcHBUb1BhcnRpY2lwbGUoKSk7XG4gICAgfVxuICAgIG1ha2VTZXJpYWxQaHJhc2VtZShsZXhlbWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VyaWFsUGhyYXNlbWUobGV4ZW1lcyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbEluZmxlY3Rpb25QaHJhc2VtZU1ha2VyID0gVG9uYWxJbmZsZWN0aW9uUGhyYXNlbWVNYWtlcjtcbmNsYXNzIFRvbmFsSW5zZXJ0aW9uUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pIHtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFtwcmVjZWRpbmcud29yZCwgZm9sbG93aW5nLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseShwcmVjZWRpbmcsIGZvbGxvd2luZyk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGluc2VydGVkIGZvcm1zLiAqL1xuICAgIGdldEZvcm1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtcztcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsSW5zZXJ0aW9uUGhyYXNlbWUgPSBUb25hbEluc2VydGlvblBocmFzZW1lO1xuY2xhc3MgVG9uYWxJbnNlcnRpb25QaHJhc2VtZU1ha2VyIHtcbiAgICBtYWtlUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSkge1xuICAgICAgICByZXR1cm4gbmV3IFRvbmFsSW5zZXJ0aW9uUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbEluc2VydGlvblBocmFzZW1lTWFrZXIgPSBUb25hbEluc2VydGlvblBocmFzZW1lTWFrZXI7XG5jbGFzcyBUb25hbFVuaW5zZXJ0aW9uUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pIHtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFtwcmVjZWRpbmcud29yZCwgZm9sbG93aW5nLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseShwcmVjZWRpbmcsIGZvbGxvd2luZyk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHVuaW5zZXJ0ZWQgZm9ybXMuICovXG4gICAgZ2V0Rm9ybXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1zO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluc2VydGlvblBocmFzZW1lID0gVG9uYWxVbmluc2VydGlvblBocmFzZW1lO1xuY2xhc3MgVG9uYWxVbmluc2VydGlvblBocmFzZW1lTWFrZXIge1xuICAgIG1ha2VQaHJhc2VtZShwcmVjZWRpbmcsIGZvbGxvd2luZywgbWV0YXBsYXNtKSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9uYWxVbmluc2VydGlvblBocmFzZW1lKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluc2VydGlvblBocmFzZW1lTWFrZXIgPSBUb25hbFVuaW5zZXJ0aW9uUGhyYXNlbWVNYWtlcjtcbmNsYXNzIFRvbmFsSW5mZWN0aW9uUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pIHtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFtwcmVjZWRpbmcud29yZCwgZm9sbG93aW5nLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseShwcmVjZWRpbmcsIGZvbGxvd2luZyk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGluZmVjdGVkIGZvcm1zLiAqL1xuICAgIGdldEZvcm1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtcztcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsSW5mZWN0aW9uUGhyYXNlbWUgPSBUb25hbEluZmVjdGlvblBocmFzZW1lO1xuY2xhc3MgVG9uYWxJbmZlY3Rpb25QaHJhc2VtZU1ha2VyIHtcbiAgICBtYWtlUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSkge1xuICAgICAgICByZXR1cm4gbmV3IFRvbmFsSW5mZWN0aW9uUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbEluZmVjdGlvblBocmFzZW1lTWFrZXIgPSBUb25hbEluZmVjdGlvblBocmFzZW1lTWFrZXI7XG5jbGFzcyBUb25hbFVuaW5mZWN0aW9uUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pIHtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnBocmFzZSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsUGhyYXNlKFtwcmVjZWRpbmcud29yZCwgZm9sbG93aW5nLndvcmRdKTtcbiAgICAgICAgdGhpcy5mb3JtcyA9IG1ldGFwbGFzbS5hcHBseShwcmVjZWRpbmcsIGZvbGxvd2luZyk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHVuaW5mZWN0ZWQgZm9ybXMuICovXG4gICAgZ2V0Rm9ybXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1zO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluZmVjdGlvblBocmFzZW1lID0gVG9uYWxVbmluZmVjdGlvblBocmFzZW1lO1xuY2xhc3MgVG9uYWxVbmluZmVjdGlvblBocmFzZW1lTWFrZXIge1xuICAgIG1ha2VQaHJhc2VtZShwcmVjZWRpbmcsIGZvbGxvd2luZywgbWV0YXBsYXNtKSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9uYWxVbmluZmVjdGlvblBocmFzZW1lKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluZmVjdGlvblBocmFzZW1lTWFrZXIgPSBUb25hbFVuaW5mZWN0aW9uUGhyYXNlbWVNYWtlcjtcbi8qKiBBIHBocmFzZSBhbmQgaXRzIG11dGF0ZWQgZm9ybS4gKi9cbmNsYXNzIFRvbmFsTXV0YXRpb25QaHJhc2VtZSB7XG4gICAgY29uc3RydWN0b3IocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSkge1xuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMucGhyYXNlID0gbmV3IHBocmFzZW1lXzEuVG9uYWxQaHJhc2UoW3ByZWNlZGluZy53b3JkLCBmb2xsb3dpbmcud29yZF0pO1xuICAgICAgICB0aGlzLmZvcm1zID0gbWV0YXBsYXNtLmFwcGx5KHByZWNlZGluZywgZm9sbG93aW5nKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgbXV0YXRlZCBmb3Jtcy4gKi9cbiAgICBnZXRGb3JtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXM7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbE11dGF0aW9uUGhyYXNlbWUgPSBUb25hbE11dGF0aW9uUGhyYXNlbWU7XG5jbGFzcyBUb25hbE11dGF0aW9uUGhyYXNlbWVNYWtlciB7XG4gICAgbWFrZVBocmFzZW1lKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb25hbE11dGF0aW9uUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbE11dGF0aW9uUGhyYXNlbWVNYWtlciA9IFRvbmFsTXV0YXRpb25QaHJhc2VtZU1ha2VyO1xuLyoqIEEgcGhyYXNlIGFuZCBpdHMgdW5tdXRhdGVkIGZvcm0uICovXG5jbGFzcyBUb25hbFVubXV0YXRpb25QaHJhc2VtZSB7XG4gICAgY29uc3RydWN0b3IocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSkge1xuICAgICAgICB0aGlzLmZvcm1zID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMucGhyYXNlID0gbmV3IHBocmFzZW1lXzEuVG9uYWxQaHJhc2UoW3ByZWNlZGluZy53b3JkLCBmb2xsb3dpbmcud29yZF0pO1xuICAgICAgICB0aGlzLmZvcm1zID0gbWV0YXBsYXNtLmFwcGx5KHByZWNlZGluZywgZm9sbG93aW5nKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdW5tdXRhdGVkIGZvcm1zLiAqL1xuICAgIGdldEZvcm1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtcztcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsVW5tdXRhdGlvblBocmFzZW1lID0gVG9uYWxVbm11dGF0aW9uUGhyYXNlbWU7XG5jbGFzcyBUb25hbFVubXV0YXRpb25QaHJhc2VtZU1ha2VyIHtcbiAgICBtYWtlUGhyYXNlbWUocHJlY2VkaW5nLCBmb2xsb3dpbmcsIG1ldGFwbGFzbSkge1xuICAgICAgICByZXR1cm4gbmV3IFRvbmFsVW5tdXRhdGlvblBocmFzZW1lKHByZWNlZGluZywgZm9sbG93aW5nLCBtZXRhcGxhc20pO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbm11dGF0aW9uUGhyYXNlbWVNYWtlciA9IFRvbmFsVW5tdXRhdGlvblBocmFzZW1lTWFrZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waHJhc2VtZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/phraseme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/rules.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/rules.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst keywords_1 = __webpack_require__(/*! ./keywords */ \"./node_modules/taipa/lib/dparser/keywords.js\");\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst inflector_1 = __webpack_require__(/*! ./inflector */ \"./node_modules/taipa/lib/dparser/inflector.js\");\nconst visitor_1 = __webpack_require__(/*! ./visitor */ \"./node_modules/taipa/lib/dparser/visitor.js\");\nconst dictionary_1 = __webpack_require__(/*! ./dictionary */ \"./node_modules/taipa/lib/dparser/dictionary.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\n/** Construction of a phrase. */\nclass ConstructionOfPhrase {\n    constructor(arr) {\n        /** Part-of-speech of this phrase. */\n        this.pos = '';\n        /** Construction elements of this phrase. */\n        this.elements = new Array();\n        for (let key in arr) {\n            this.elements.push(arr[key]);\n        }\n    }\n}\nexports.ConstructionOfPhrase = ConstructionOfPhrase;\nclass PhrasalVerb extends ConstructionOfPhrase {\n    constructor(arr) {\n        super(arr);\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nexports.PhrasalVerb = PhrasalVerb;\nclass VerbPhrase extends ConstructionOfPhrase {\n    constructor() {\n        super([]);\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nclass PrepositionPhrase extends ConstructionOfPhrase {\n}\nclass NounPhrase extends ConstructionOfPhrase {\n}\nclass PhrasalVerbWithEnclitic extends VerbPhrase {\n    constructor(verb, particle, enclitic) {\n        super();\n        verb.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb);\n        particle.tag = symbols_1.Tagset.ppv;\n        this.elements.push(particle);\n        enclitic.tag = symbols_1.Tagset.psub;\n        this.elements.push(enclitic);\n    }\n}\nexports.PhrasalVerbWithEnclitic = PhrasalVerbWithEnclitic;\nclass VerbWithEnclitic extends VerbPhrase {\n    constructor(verb, enclitic) {\n        super();\n        verb.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb);\n        enclitic.tag = symbols_1.Tagset.psub;\n        this.elements.push(enclitic);\n    }\n}\nexports.VerbWithEnclitic = VerbWithEnclitic;\nclass PhrasalVerbs {\n    constructor() {\n        this.phvbs = new Array();\n        this.populatePhrasemes();\n    }\n    populatePhrasemes() {\n        dictionary_1.dictOfPhrasalVerbs\n            .map(it => inflector_1.inflectToProceeding(it[0], it[1]))\n            .map(it => {\n            const ol = new visitor_1.OrthoPhraseme();\n            ol.form = it.phrase.words[0].literal + ' ' + it.phrase.words[1].literal;\n            ol.inflected.push(it.getForms()[0].words[0].literal +\n                ' ' +\n                it.getForms()[0].words[1].literal);\n            this.phvbs.push(ol);\n        });\n        dictionary_1.dictOfPhrasalVerbTwos\n            .map(it => inflector_1.inflectVppToProceeding(it[0], it[1], it[2]))\n            .map(it => {\n            const ol = new visitor_1.OrthoPhraseme();\n            ol.form =\n                it.phrase.words[0].literal +\n                    ' ' +\n                    it.phrase.words[1].literal +\n                    ' ' +\n                    it.phrase.words[2].literal;\n            ol.inflected.push(it.getForms()[0].words[0].literal +\n                ' ' +\n                it.getForms()[0].words[1].literal +\n                ' ' +\n                it.getForms()[0].words[2].literal);\n            this.phvbs.push(ol);\n        });\n    }\n    match(sequence) {\n        // match any form, return the base one\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.phvbs.filter(it => it.accept(v, sequence));\n        if (arr.length > 0)\n            return arr[0].form;\n        return '';\n    }\n}\nexports.PhrasalVerbs = PhrasalVerbs;\nclass SeparateCompoundVerbs {\n    constructor() {\n        this.compounds = new Array();\n        this.populatePhrasemes();\n    }\n    populatePhrasemes() {\n        dictionary_1.dictOfSeperateVVCompounds.map(it => {\n            const oe = new visitor_1.OrthoPhraseme();\n            oe.form = it[0] + ' ' + it[1];\n            oe.inflected.push(creator_1.createCompoundPhraseme(it[0], it[1]).phrase.literal);\n            this.compounds.push(oe);\n        });\n    }\n    matchHead(head) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.compounds\n            .map(it => {\n            const oe = new visitor_1.OrthoCompoundHead();\n            // assign the inflected form to oe\n            oe.form = it.inflected[0];\n            return oe;\n        })\n            .filter(it => it.accept(v, head));\n        if (arr.length > 0 && arr[0])\n            return arr[0].form.split(' ')[1];\n        return '';\n    }\n}\nexports.SeparateCompoundVerbs = SeparateCompoundVerbs;\nclass SmallClause extends VerbPhrase {\n    constructor(verb1, pronoun, verb2) {\n        super();\n        verb1.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb1);\n        pronoun.tag = symbols_1.Tagset.npr;\n        this.elements.push(pronoun);\n        verb2.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb2);\n    }\n}\nclass SetOfSmallClauses {\n    constructor() {\n        this.constructions = [];\n        // obj. xcomp.\n        const sc = new SmallClause(new keywords_1.VerbElement('oannw'), new keywords_1.PersonalPronounElement('goa'), new keywords_1.VerbElement('churw'));\n        this.constructions.push(sc);\n    }\n}\nexports.SetOfSmallClauses = SetOfSmallClauses;\nclass Rules {\n    constructor() {\n        this.phrases = new Array();\n        this.keyWords = new keywords_1.KeyWords();\n        this.populatePatterns();\n    }\n    lookupDictionary(str) {\n        let phr;\n        if (dictionary_1.dictOfVerbs.includes(str)) {\n            let vs = new keywords_1.VerbElement(str);\n            if (vs.pos === symbols_1.POSTags.verb)\n                vs.tag = symbols_1.Tagset.vb;\n            phr = [new ConstructionOfPhrase([])];\n            phr[0].elements.push(vs);\n            phr[0].pos = symbols_1.POSTags.verb;\n            return phr;\n        }\n        return undefined;\n    }\n    lookupRules(sequence) {\n        const pvbs = new PhrasalVerbs();\n        if ((sequence.length == 2 && pvbs.match(sequence) != '') ||\n            pvbs.match([sequence[0], sequence[1]])) {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                ]),\n            ];\n        }\n        if (sequence.length == 3 && pvbs.match(sequence) != '') {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                    new keywords_1.ParticleElement(sequence[2]),\n                ]),\n            ];\n        }\n        if (sequence.length > 3 &&\n            pvbs.match([sequence[0], sequence[1], sequence[2]]) != '') {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                    new keywords_1.ParticleElement(sequence[2]),\n                ]),\n            ];\n        }\n        return [];\n    }\n    matchKeyWords(str) {\n        const ce1 = this.keyWords.matchWords(str);\n        if (ce1.orth.length > 0) {\n            return ce1;\n        }\n        const ce2 = this.keyWords.matchLexemes(str);\n        if (ce2.orth.length > 0) {\n            return ce2;\n        }\n    }\n    seperateMatches(str) {\n        const compounds = new SeparateCompoundVerbs();\n        const ptcl = compounds.matchHead(str);\n        if (ptcl)\n            return ptcl;\n    }\n    matches(sequence) {\n        const phrD = this.lookupDictionary(sequence[0]);\n        const phrR = this.lookupRules(sequence);\n        if (phrR && phrR.length > 0)\n            return phrR;\n        else if (phrD)\n            return phrD;\n        return undefined;\n    }\n    populatePatterns() {\n        this.phrases.push([new SetOfSmallClauses().constructions[0]]);\n    }\n}\nexports.Rules = Rules;\n//# sourceMappingURL=rules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/rules.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/symbols.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/symbols.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar POSTags;\n(function (POSTags) {\n    /*\n        Universal POS tags\n        https://universaldependencies.org/u/pos/\n      */\n    POSTags[\"adjective\"] = \"ADJ\";\n    POSTags[\"adposition\"] = \"ADP\";\n    POSTags[\"adverb\"] = \"ADV\";\n    POSTags[\"auxiliary\"] = \"AUX\";\n    POSTags[\"conjunction\"] = \"CONJ\";\n    POSTags[\"coordinatingConjunction\"] = \"CCONJ\";\n    POSTags[\"determiner\"] = \"DET\";\n    POSTags[\"interjection\"] = \"INTJ\";\n    POSTags[\"noun\"] = \"NOUN\";\n    POSTags[\"number\"] = \"NUM\";\n    POSTags[\"particle\"] = \"PART\";\n    POSTags[\"pronoun\"] = \"PRON\";\n    POSTags[\"properNoun\"] = \"PROPN\";\n    POSTags[\"punctuation\"] = \"PUNCT\";\n    POSTags[\"subordinatingConjunction\"] = \"SCONJ\";\n    POSTags[\"symbol\"] = \"SYM\";\n    POSTags[\"verb\"] = \"VERB\";\n    POSTags[\"other\"] = \"X\";\n})(POSTags = exports.POSTags || (exports.POSTags = {}));\nvar DependencyLabels;\n(function (DependencyLabels) {\n    /*\n        Universal Dependencies\n        https://universaldependencies.org/u/dep/all.html\n      */\n    DependencyLabels[\"acl\"] = \"acl\";\n    DependencyLabels[\"advcl\"] = \"advcl\";\n    DependencyLabels[\"amod\"] = \"amod\";\n    DependencyLabels[\"advmod\"] = \"advmod\";\n    DependencyLabels[\"aux\"] = \"aux\";\n    DependencyLabels[\"auxCaus\"] = \"aux:caus\";\n    DependencyLabels[\"case\"] = \"case\";\n    DependencyLabels[\"ccomp\"] = \"ccomp\";\n    DependencyLabels[\"compound\"] = \"compound\";\n    DependencyLabels[\"compoundPrt\"] = \"compound:prt\";\n    // comooundSvc = 'compound:svc', // serial verbs\n    DependencyLabels[\"cop\"] = \"cop\";\n    DependencyLabels[\"csubj\"] = \"csubj\";\n    DependencyLabels[\"det\"] = \"det\";\n    DependencyLabels[\"dislocated\"] = \"dislocated\";\n    DependencyLabels[\"fix\"] = \"fix\";\n    DependencyLabels[\"flat\"] = \"flat\";\n    DependencyLabels[\"obj\"] = \"obj\";\n    DependencyLabels[\"iobj\"] = \"iobj\";\n    DependencyLabels[\"iobjAgent\"] = \"iobj:agent\";\n    DependencyLabels[\"mark\"] = \"mark\";\n    DependencyLabels[\"nmod\"] = \"nmod\";\n    DependencyLabels[\"nobj\"] = \"nobj\";\n    DependencyLabels[\"nsubj\"] = \"nsubj\";\n    DependencyLabels[\"nsubjCaus\"] = \"nsubj:caus\";\n    DependencyLabels[\"obl\"] = \"obl\";\n    DependencyLabels[\"prt\"] = \"prt\";\n    DependencyLabels[\"root\"] = \"root\";\n    DependencyLabels[\"xcomp\"] = \"xcomp\";\n})(DependencyLabels = exports.DependencyLabels || (exports.DependencyLabels = {}));\nvar Tagset;\n(function (Tagset) {\n    Tagset[\"aux\"] = \"AUX\";\n    Tagset[\"adj\"] = \"ADJ\";\n    Tagset[\"adnom\"] = \"ADNOM\";\n    Tagset[\"adv\"] = \"ADV\";\n    Tagset[\"appr\"] = \"APPR\";\n    Tagset[\"appo\"] = \"APPO\";\n    Tagset[\"cl\"] = \"CL\";\n    Tagset[\"conj\"] = \"CONJ\";\n    Tagset[\"fil\"] = \"FIL\";\n    Tagset[\"intj\"] = \"INTJ\";\n    Tagset[\"nn\"] = \"NN\";\n    Tagset[\"nnp\"] = \"NNP\";\n    Tagset[\"npr\"] = \"NPR\";\n    Tagset[\"num\"] = \"NUM\";\n    Tagset[\"nv\"] = \"NV\";\n    Tagset[\"nadj\"] = \"NADJ\";\n    Tagset[\"nadv\"] = \"NADV\";\n    Tagset[\"par\"] = \"PAR\";\n    Tagset[\"pcs\"] = \"PCS\";\n    Tagset[\"pco\"] = \"PCO\";\n    Tagset[\"pcj\"] = \"PCJ\";\n    Tagset[\"pend\"] = \"PEND\";\n    Tagset[\"padv\"] = \"PADV\";\n    Tagset[\"ppv\"] = \"PPV\";\n    Tagset[\"psub\"] = \"PSUB\";\n    Tagset[\"pnc\"] = \"PNC\";\n    Tagset[\"px\"] = \"PX\";\n    Tagset[\"sx\"] = \"SX\";\n    Tagset[\"sym\"] = \"SYM\";\n    Tagset[\"vb\"] = \"VB\";\n})(Tagset = exports.Tagset || (exports.Tagset = {}));\nvar PronType;\n(function (PronType) {\n    /*\n        pronominal types\n        https://universaldependencies.org/u/feat/PronType.html\n      */\n    PronType[\"dem\"] = \"Dem\";\n    PronType[\"prs\"] = \"Prs\";\n    PronType[\"rel\"] = \"Rel\";\n})(PronType = exports.PronType || (exports.PronType = {}));\n//# sourceMappingURL=symbols.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvc3ltYm9scy5qcz81MGJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0VBQStFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlEQUFpRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVEQUF1RDtBQUN4RCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9zeW1ib2xzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUE9TVGFncztcbihmdW5jdGlvbiAoUE9TVGFncykge1xuICAgIC8qXG4gICAgICAgIFVuaXZlcnNhbCBQT1MgdGFnc1xuICAgICAgICBodHRwczovL3VuaXZlcnNhbGRlcGVuZGVuY2llcy5vcmcvdS9wb3MvXG4gICAgICAqL1xuICAgIFBPU1RhZ3NbXCJhZGplY3RpdmVcIl0gPSBcIkFESlwiO1xuICAgIFBPU1RhZ3NbXCJhZHBvc2l0aW9uXCJdID0gXCJBRFBcIjtcbiAgICBQT1NUYWdzW1wiYWR2ZXJiXCJdID0gXCJBRFZcIjtcbiAgICBQT1NUYWdzW1wiYXV4aWxpYXJ5XCJdID0gXCJBVVhcIjtcbiAgICBQT1NUYWdzW1wiY29uanVuY3Rpb25cIl0gPSBcIkNPTkpcIjtcbiAgICBQT1NUYWdzW1wiY29vcmRpbmF0aW5nQ29uanVuY3Rpb25cIl0gPSBcIkNDT05KXCI7XG4gICAgUE9TVGFnc1tcImRldGVybWluZXJcIl0gPSBcIkRFVFwiO1xuICAgIFBPU1RhZ3NbXCJpbnRlcmplY3Rpb25cIl0gPSBcIklOVEpcIjtcbiAgICBQT1NUYWdzW1wibm91blwiXSA9IFwiTk9VTlwiO1xuICAgIFBPU1RhZ3NbXCJudW1iZXJcIl0gPSBcIk5VTVwiO1xuICAgIFBPU1RhZ3NbXCJwYXJ0aWNsZVwiXSA9IFwiUEFSVFwiO1xuICAgIFBPU1RhZ3NbXCJwcm9ub3VuXCJdID0gXCJQUk9OXCI7XG4gICAgUE9TVGFnc1tcInByb3Blck5vdW5cIl0gPSBcIlBST1BOXCI7XG4gICAgUE9TVGFnc1tcInB1bmN0dWF0aW9uXCJdID0gXCJQVU5DVFwiO1xuICAgIFBPU1RhZ3NbXCJzdWJvcmRpbmF0aW5nQ29uanVuY3Rpb25cIl0gPSBcIlNDT05KXCI7XG4gICAgUE9TVGFnc1tcInN5bWJvbFwiXSA9IFwiU1lNXCI7XG4gICAgUE9TVGFnc1tcInZlcmJcIl0gPSBcIlZFUkJcIjtcbiAgICBQT1NUYWdzW1wib3RoZXJcIl0gPSBcIlhcIjtcbn0pKFBPU1RhZ3MgPSBleHBvcnRzLlBPU1RhZ3MgfHwgKGV4cG9ydHMuUE9TVGFncyA9IHt9KSk7XG52YXIgRGVwZW5kZW5jeUxhYmVscztcbihmdW5jdGlvbiAoRGVwZW5kZW5jeUxhYmVscykge1xuICAgIC8qXG4gICAgICAgIFVuaXZlcnNhbCBEZXBlbmRlbmNpZXNcbiAgICAgICAgaHR0cHM6Ly91bml2ZXJzYWxkZXBlbmRlbmNpZXMub3JnL3UvZGVwL2FsbC5odG1sXG4gICAgICAqL1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhY2xcIl0gPSBcImFjbFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhZHZjbFwiXSA9IFwiYWR2Y2xcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiYW1vZFwiXSA9IFwiYW1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhZHZtb2RcIl0gPSBcImFkdm1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhdXhcIl0gPSBcImF1eFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhdXhDYXVzXCJdID0gXCJhdXg6Y2F1c1wiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjYXNlXCJdID0gXCJjYXNlXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcImNjb21wXCJdID0gXCJjY29tcFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjb21wb3VuZFwiXSA9IFwiY29tcG91bmRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiY29tcG91bmRQcnRcIl0gPSBcImNvbXBvdW5kOnBydFwiO1xuICAgIC8vIGNvbW9vdW5kU3ZjID0gJ2NvbXBvdW5kOnN2YycsIC8vIHNlcmlhbCB2ZXJic1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjb3BcIl0gPSBcImNvcFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjc3VialwiXSA9IFwiY3N1YmpcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiZGV0XCJdID0gXCJkZXRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiZGlzbG9jYXRlZFwiXSA9IFwiZGlzbG9jYXRlZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJmaXhcIl0gPSBcImZpeFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJmbGF0XCJdID0gXCJmbGF0XCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm9ialwiXSA9IFwib2JqXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcImlvYmpcIl0gPSBcImlvYmpcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiaW9iakFnZW50XCJdID0gXCJpb2JqOmFnZW50XCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm1hcmtcIl0gPSBcIm1hcmtcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wibm1vZFwiXSA9IFwibm1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJub2JqXCJdID0gXCJub2JqXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm5zdWJqXCJdID0gXCJuc3VialwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJuc3ViakNhdXNcIl0gPSBcIm5zdWJqOmNhdXNcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wib2JsXCJdID0gXCJvYmxcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wicHJ0XCJdID0gXCJwcnRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wicm9vdFwiXSA9IFwicm9vdFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJ4Y29tcFwiXSA9IFwieGNvbXBcIjtcbn0pKERlcGVuZGVuY3lMYWJlbHMgPSBleHBvcnRzLkRlcGVuZGVuY3lMYWJlbHMgfHwgKGV4cG9ydHMuRGVwZW5kZW5jeUxhYmVscyA9IHt9KSk7XG52YXIgVGFnc2V0O1xuKGZ1bmN0aW9uIChUYWdzZXQpIHtcbiAgICBUYWdzZXRbXCJhdXhcIl0gPSBcIkFVWFwiO1xuICAgIFRhZ3NldFtcImFkalwiXSA9IFwiQURKXCI7XG4gICAgVGFnc2V0W1wiYWRub21cIl0gPSBcIkFETk9NXCI7XG4gICAgVGFnc2V0W1wiYWR2XCJdID0gXCJBRFZcIjtcbiAgICBUYWdzZXRbXCJhcHByXCJdID0gXCJBUFBSXCI7XG4gICAgVGFnc2V0W1wiYXBwb1wiXSA9IFwiQVBQT1wiO1xuICAgIFRhZ3NldFtcImNsXCJdID0gXCJDTFwiO1xuICAgIFRhZ3NldFtcImNvbmpcIl0gPSBcIkNPTkpcIjtcbiAgICBUYWdzZXRbXCJmaWxcIl0gPSBcIkZJTFwiO1xuICAgIFRhZ3NldFtcImludGpcIl0gPSBcIklOVEpcIjtcbiAgICBUYWdzZXRbXCJublwiXSA9IFwiTk5cIjtcbiAgICBUYWdzZXRbXCJubnBcIl0gPSBcIk5OUFwiO1xuICAgIFRhZ3NldFtcIm5wclwiXSA9IFwiTlBSXCI7XG4gICAgVGFnc2V0W1wibnVtXCJdID0gXCJOVU1cIjtcbiAgICBUYWdzZXRbXCJudlwiXSA9IFwiTlZcIjtcbiAgICBUYWdzZXRbXCJuYWRqXCJdID0gXCJOQURKXCI7XG4gICAgVGFnc2V0W1wibmFkdlwiXSA9IFwiTkFEVlwiO1xuICAgIFRhZ3NldFtcInBhclwiXSA9IFwiUEFSXCI7XG4gICAgVGFnc2V0W1wicGNzXCJdID0gXCJQQ1NcIjtcbiAgICBUYWdzZXRbXCJwY29cIl0gPSBcIlBDT1wiO1xuICAgIFRhZ3NldFtcInBjalwiXSA9IFwiUENKXCI7XG4gICAgVGFnc2V0W1wicGVuZFwiXSA9IFwiUEVORFwiO1xuICAgIFRhZ3NldFtcInBhZHZcIl0gPSBcIlBBRFZcIjtcbiAgICBUYWdzZXRbXCJwcHZcIl0gPSBcIlBQVlwiO1xuICAgIFRhZ3NldFtcInBzdWJcIl0gPSBcIlBTVUJcIjtcbiAgICBUYWdzZXRbXCJwbmNcIl0gPSBcIlBOQ1wiO1xuICAgIFRhZ3NldFtcInB4XCJdID0gXCJQWFwiO1xuICAgIFRhZ3NldFtcInN4XCJdID0gXCJTWFwiO1xuICAgIFRhZ3NldFtcInN5bVwiXSA9IFwiU1lNXCI7XG4gICAgVGFnc2V0W1widmJcIl0gPSBcIlZCXCI7XG59KShUYWdzZXQgPSBleHBvcnRzLlRhZ3NldCB8fCAoZXhwb3J0cy5UYWdzZXQgPSB7fSkpO1xudmFyIFByb25UeXBlO1xuKGZ1bmN0aW9uIChQcm9uVHlwZSkge1xuICAgIC8qXG4gICAgICAgIHByb25vbWluYWwgdHlwZXNcbiAgICAgICAgaHR0cHM6Ly91bml2ZXJzYWxkZXBlbmRlbmNpZXMub3JnL3UvZmVhdC9Qcm9uVHlwZS5odG1sXG4gICAgICAqL1xuICAgIFByb25UeXBlW1wiZGVtXCJdID0gXCJEZW1cIjtcbiAgICBQcm9uVHlwZVtcInByc1wiXSA9IFwiUHJzXCI7XG4gICAgUHJvblR5cGVbXCJyZWxcIl0gPSBcIlJlbFwiO1xufSkoUHJvblR5cGUgPSBleHBvcnRzLlByb25UeXBlIHx8IChleHBvcnRzLlByb25UeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bWJvbHMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/symbols.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/visitor.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/visitor.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Concrete visitor. */\nclass VisitorMatching {\n    /**\n     * Matches the phrase to the forms of a phraseme.\n     * @param phraseme A container of phrase forms.\n     * @param phrase The phrase to be matched.\n     */\n    visitPhraseme(phraseme, phrase) {\n        if (phrase === phraseme.form)\n            return true;\n        if (phraseme.inflected.filter(it => it === phrase).length > 0)\n            return true;\n        if (phraseme.assimilated.filter(it => it === phrase).length > 0)\n            return true;\n        return false;\n    }\n    /**\n     * Matches the word to the forms of a lexeme.\n     * @param lexeme A container of word forms.\n     * @param word The word to be matched.\n     */\n    visitLexeme(lexeme, word) {\n        // match a form of a lexeme\n        if (word === lexeme.form)\n            return true;\n        if (lexeme.inflected.filter(it => it === word).length > 0)\n            return true;\n        if (lexeme.assimilated.filter(it => it === word).length > 0)\n            return true;\n        return false;\n    }\n    /**\n     * Matches the word to the form.\n     * @param orth A container of a form.\n     * @param word The word to be matched.\n     */\n    visitWord(orth, word) {\n        if (word === orth.form)\n            return true;\n        return false;\n    }\n    /**\n     * Match a head to the head of the compound.\n     * @param compound A compound.\n     * @param head A head to be matched with the head of the compound.\n     */\n    visitCompoundHead(compound, head) {\n        if (head === compound.form.split(' ')[0])\n            return true;\n        return false;\n    }\n}\nexports.VisitorMatching = VisitorMatching;\n/** Orthographic phraseme. */\nclass OrthoPhraseme {\n    constructor() {\n        /** A base form that inflected forms or assimilated forms are based on. */\n        this.form = '';\n        this.inflected = [];\n        this.assimilated = [];\n    }\n    accept(visitor, words) {\n        return visitor.visitPhraseme(this, words.join(' '));\n    }\n}\nexports.OrthoPhraseme = OrthoPhraseme;\n/** Orthographic lexeme. */\nclass OrthoLexeme {\n    constructor() {\n        /** A base form that inflected forms or assimilated forms are based on. */\n        this.form = '';\n        this.inflected = [];\n        this.assimilated = [];\n    }\n    accept(visitor, word) {\n        return visitor.visitLexeme(this, word);\n    }\n}\nexports.OrthoLexeme = OrthoLexeme;\n/** Orthographic word. */\nclass OrthoWord {\n    constructor() {\n        /** A word form. */\n        this.form = '';\n    }\n    accept(visitor, word) {\n        return visitor.visitWord(this, word);\n    }\n}\nexports.OrthoWord = OrthoWord;\n/** Orthographic compound whose head will be used to match another head. */\nclass OrthoCompoundHead {\n    constructor() {\n        /** Compound as a phrase of length 2. */\n        this.form = '';\n    }\n    /**\n     * Accepts a visitor and the head of a compound.\n     * @param visitor A visitor.\n     * @param head Head of a compound.\n     */\n    accept(visitor, head) {\n        return visitor.visitCompoundHead(this, head);\n    }\n}\nexports.OrthoCompoundHead = OrthoCompoundHead;\n//# sourceMappingURL=visitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvdmlzaXRvci5qcz9lNjFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci92aXNpdG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiogQ29uY3JldGUgdmlzaXRvci4gKi9cbmNsYXNzIFZpc2l0b3JNYXRjaGluZyB7XG4gICAgLyoqXG4gICAgICogTWF0Y2hlcyB0aGUgcGhyYXNlIHRvIHRoZSBmb3JtcyBvZiBhIHBocmFzZW1lLlxuICAgICAqIEBwYXJhbSBwaHJhc2VtZSBBIGNvbnRhaW5lciBvZiBwaHJhc2UgZm9ybXMuXG4gICAgICogQHBhcmFtIHBocmFzZSBUaGUgcGhyYXNlIHRvIGJlIG1hdGNoZWQuXG4gICAgICovXG4gICAgdmlzaXRQaHJhc2VtZShwaHJhc2VtZSwgcGhyYXNlKSB7XG4gICAgICAgIGlmIChwaHJhc2UgPT09IHBocmFzZW1lLmZvcm0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHBocmFzZW1lLmluZmxlY3RlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHBocmFzZSkubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAocGhyYXNlbWUuYXNzaW1pbGF0ZWQuZmlsdGVyKGl0ID0+IGl0ID09PSBwaHJhc2UpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHRoZSB3b3JkIHRvIHRoZSBmb3JtcyBvZiBhIGxleGVtZS5cbiAgICAgKiBAcGFyYW0gbGV4ZW1lIEEgY29udGFpbmVyIG9mIHdvcmQgZm9ybXMuXG4gICAgICogQHBhcmFtIHdvcmQgVGhlIHdvcmQgdG8gYmUgbWF0Y2hlZC5cbiAgICAgKi9cbiAgICB2aXNpdExleGVtZShsZXhlbWUsIHdvcmQpIHtcbiAgICAgICAgLy8gbWF0Y2ggYSBmb3JtIG9mIGEgbGV4ZW1lXG4gICAgICAgIGlmICh3b3JkID09PSBsZXhlbWUuZm9ybSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAobGV4ZW1lLmluZmxlY3RlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHdvcmQpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGxleGVtZS5hc3NpbWlsYXRlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHdvcmQpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHRoZSB3b3JkIHRvIHRoZSBmb3JtLlxuICAgICAqIEBwYXJhbSBvcnRoIEEgY29udGFpbmVyIG9mIGEgZm9ybS5cbiAgICAgKiBAcGFyYW0gd29yZCBUaGUgd29yZCB0byBiZSBtYXRjaGVkLlxuICAgICAqL1xuICAgIHZpc2l0V29yZChvcnRoLCB3b3JkKSB7XG4gICAgICAgIGlmICh3b3JkID09PSBvcnRoLmZvcm0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBhIGhlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSBjb21wb3VuZCBBIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSBoZWFkIEEgaGVhZCB0byBiZSBtYXRjaGVkIHdpdGggdGhlIGhlYWQgb2YgdGhlIGNvbXBvdW5kLlxuICAgICAqL1xuICAgIHZpc2l0Q29tcG91bmRIZWFkKGNvbXBvdW5kLCBoZWFkKSB7XG4gICAgICAgIGlmIChoZWFkID09PSBjb21wb3VuZC5mb3JtLnNwbGl0KCcgJylbMF0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuVmlzaXRvck1hdGNoaW5nID0gVmlzaXRvck1hdGNoaW5nO1xuLyoqIE9ydGhvZ3JhcGhpYyBwaHJhc2VtZS4gKi9cbmNsYXNzIE9ydGhvUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQSBiYXNlIGZvcm0gdGhhdCBpbmZsZWN0ZWQgZm9ybXMgb3IgYXNzaW1pbGF0ZWQgZm9ybXMgYXJlIGJhc2VkIG9uLiAqL1xuICAgICAgICB0aGlzLmZvcm0gPSAnJztcbiAgICAgICAgdGhpcy5pbmZsZWN0ZWQgPSBbXTtcbiAgICAgICAgdGhpcy5hc3NpbWlsYXRlZCA9IFtdO1xuICAgIH1cbiAgICBhY2NlcHQodmlzaXRvciwgd29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQaHJhc2VtZSh0aGlzLCB3b3Jkcy5qb2luKCcgJykpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3J0aG9QaHJhc2VtZSA9IE9ydGhvUGhyYXNlbWU7XG4vKiogT3J0aG9ncmFwaGljIGxleGVtZS4gKi9cbmNsYXNzIE9ydGhvTGV4ZW1lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIEEgYmFzZSBmb3JtIHRoYXQgaW5mbGVjdGVkIGZvcm1zIG9yIGFzc2ltaWxhdGVkIGZvcm1zIGFyZSBiYXNlZCBvbi4gKi9cbiAgICAgICAgdGhpcy5mb3JtID0gJyc7XG4gICAgICAgIHRoaXMuaW5mbGVjdGVkID0gW107XG4gICAgICAgIHRoaXMuYXNzaW1pbGF0ZWQgPSBbXTtcbiAgICB9XG4gICAgYWNjZXB0KHZpc2l0b3IsIHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMZXhlbWUodGhpcywgd29yZCk7XG4gICAgfVxufVxuZXhwb3J0cy5PcnRob0xleGVtZSA9IE9ydGhvTGV4ZW1lO1xuLyoqIE9ydGhvZ3JhcGhpYyB3b3JkLiAqL1xuY2xhc3MgT3J0aG9Xb3JkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIEEgd29yZCBmb3JtLiAqL1xuICAgICAgICB0aGlzLmZvcm0gPSAnJztcbiAgICB9XG4gICAgYWNjZXB0KHZpc2l0b3IsIHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRXb3JkKHRoaXMsIHdvcmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3J0aG9Xb3JkID0gT3J0aG9Xb3JkO1xuLyoqIE9ydGhvZ3JhcGhpYyBjb21wb3VuZCB3aG9zZSBoZWFkIHdpbGwgYmUgdXNlZCB0byBtYXRjaCBhbm90aGVyIGhlYWQuICovXG5jbGFzcyBPcnRob0NvbXBvdW5kSGVhZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKiBDb21wb3VuZCBhcyBhIHBocmFzZSBvZiBsZW5ndGggMi4gKi9cbiAgICAgICAgdGhpcy5mb3JtID0gJyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSB2aXNpdG9yIGFuZCB0aGUgaGVhZCBvZiBhIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSB2aXNpdG9yIEEgdmlzaXRvci5cbiAgICAgKiBAcGFyYW0gaGVhZCBIZWFkIG9mIGEgY29tcG91bmQuXG4gICAgICovXG4gICAgYWNjZXB0KHZpc2l0b3IsIGhlYWQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDb21wb3VuZEhlYWQodGhpcywgaGVhZCk7XG4gICAgfVxufVxuZXhwb3J0cy5PcnRob0NvbXBvdW5kSGVhZCA9IE9ydGhvQ29tcG91bmRIZWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlzaXRvci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/visitor.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// client\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/taipa/lib/client.js\");\nexports.Client = client_1.Client;\n// API\nvar analyzer_1 = __webpack_require__(/*! ./tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\nexports.tonalLemmatizationAnalyzer = analyzer_1.tonalLemmatizationAnalyzer;\nexports.graphAnalyzeTonal = analyzer_1.graphAnalyzeTonal;\nvar analyzer_2 = __webpack_require__(/*! ./dparser/analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nexports.tonalInflectionAnalyzer = analyzer_2.tonalInflectionAnalyzer;\nvar analyzer_3 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nexports.kanaLemmatizationAnalyzer = analyzer_3.kanaLemmatizationAnalyzer;\nexports.graphAnalyzeKana = analyzer_3.graphAnalyzeKana;\nvar unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nexports.GraphemeMaker = unit_1.GraphemeMaker;\nvar lexicalroots2_1 = __webpack_require__(/*! ./tonal/lexicalroots2 */ \"./node_modules/taipa/lib/tonal/lexicalroots2.js\");\nexports.lexicalRoots = lexicalroots2_1.lexicalRoots;\nvar version2_1 = __webpack_require__(/*! ./tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nexports.lowerLettersTonal = version2_1.lowerLettersTonal;\nexports.TonalLetterTags = version2_1.TonalLetterTags;\nexports.TonalSoundTags = version2_1.TonalSoundTags;\nvar kana_1 = __webpack_require__(/*! ./kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nexports.KanaLetterTags = kana_1.KanaLetterTags;\nvar lemmatizer_1 = __webpack_require__(/*! ./tonal/lemmatizer */ \"./node_modules/taipa/lib/tonal/lemmatizer.js\");\nexports.lemmatize = lemmatizer_1.lemmatize;\nvar creator_1 = __webpack_require__(/*! ./dparser/creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nexports.createTonalPhrase = creator_1.createTonalPhrase;\nexports.createTonalInflectionLexeme = creator_1.createTonalInflectionLexeme;\nexports.createCompoundPhraseme = creator_1.createCompoundPhraseme;\nvar inflector_1 = __webpack_require__(/*! ./dparser/inflector */ \"./node_modules/taipa/lib/dparser/inflector.js\");\nexports.inflectDesinence = inflector_1.inflectDesinence;\nexports.inflectTransfix = inflector_1.inflectTransfix;\nexports.inflectEncliticE = inflector_1.inflectEncliticE;\nexports.inflectPhrasalVerbParticle = inflector_1.inflectPhrasalVerbParticle;\nexports.inflectEncliticLe = inflector_1.inflectEncliticLe;\nexports.inflectPossesiveEx = inflector_1.inflectPossesiveEx;\nexports.inflectTo = inflector_1.inflectTo;\nexports.inflectEighthToFirst = inflector_1.inflectEighthToFirst;\nexports.inflectEighthToSecond = inflector_1.inflectEighthToSecond;\nexports.inflectToProceeding = inflector_1.inflectToProceeding;\nexports.inflectVppToProceeding = inflector_1.inflectVppToProceeding;\nexports.inflectVppToTransitive = inflector_1.inflectVppToTransitive;\nexports.inflectEToAdnominal = inflector_1.inflectEToAdnominal;\nexports.inflectLeToConjunctive = inflector_1.inflectLeToConjunctive;\nexports.inflectPossesive = inflector_1.inflectPossesive;\nexports.inflectToParticiple = inflector_1.inflectToParticiple;\nexports.inflectVppToParticiple = inflector_1.inflectVppToParticiple;\nexports.inflectSerial = inflector_1.inflectSerial;\nvar inserter_1 = __webpack_require__(/*! ./dparser/inserter */ \"./node_modules/taipa/lib/dparser/inserter.js\");\nexports.insertToFollowingSyllable = inserter_1.insertToFollowingSyllable;\nvar mutator_1 = __webpack_require__(/*! ./dparser/mutator */ \"./node_modules/taipa/lib/dparser/mutator.js\");\nexports.mutateFinalOfPrecedingSyllable = mutator_1.mutateFinalOfPrecedingSyllable;\nvar token_1 = __webpack_require__(/*! ./token */ \"./node_modules/taipa/lib/token.js\");\nexports.TokenAnalysis = token_1.TokenAnalysis;\nvar unit_2 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nexports.AlphabeticGrapheme = unit_2.AlphabeticGrapheme;\nvar morpheme_1 = __webpack_require__(/*! ./dparser/morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nexports.TonalCombiningMorpheme = morpheme_1.TonalCombiningMorpheme;\nvar morpheme_2 = __webpack_require__(/*! ./tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nexports.TonalUncombiningMorpheme = morpheme_2.TonalUncombiningMorpheme;\nvar lexeme_1 = __webpack_require__(/*! ./dparser/lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nexports.TonalInflectionLexeme = lexeme_1.TonalInflectionLexeme;\nexports.TonalInsertionLexeme = lexeme_1.TonalInsertionLexeme;\nvar lexeme_2 = __webpack_require__(/*! ./tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nexports.TonalLemmatizationLexeme = lexeme_2.TonalLemmatizationLexeme;\nvar phraseme_1 = __webpack_require__(/*! ./dparser/phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nexports.PhrasalVerbPhraseme = phraseme_1.PhrasalVerbPhraseme;\nexports.PhrasalVerbVppPhraseme = phraseme_1.PhrasalVerbVppPhraseme;\nexports.TonalMainParticlePhraseme = phraseme_1.TonalMainParticlePhraseme;\nexports.TonalCompoundPhraseme = phraseme_1.TonalCompoundPhraseme;\nexports.SerialPhraseme = phraseme_1.SerialPhraseme;\nvar morpheme_3 = __webpack_require__(/*! ./kana/morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nexports.KanaUncombiningMorpheme = morpheme_3.KanaUncombiningMorpheme;\nvar lexeme_3 = __webpack_require__(/*! ./tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nexports.TonalWord = lexeme_3.TonalWord;\nvar phraseme_2 = __webpack_require__(/*! ./tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\nexports.TonalPhrase = phraseme_2.TonalPhrase;\nvar unit_3 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nexports.Sound = unit_3.Sound;\nexports.SoundGeneration = unit_3.SoundGeneration;\nvar metaplasm_1 = __webpack_require__(/*! ./dparser/metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nexports.TonalDesinenceInflection = metaplasm_1.TonalDesinenceInflection;\nexports.TonalCombiningForms = metaplasm_1.TonalCombiningForms;\nvar prediction_1 = __webpack_require__(/*! ./tonal/prediction */ \"./node_modules/taipa/lib/tonal/prediction.js\");\nexports.predict = prediction_1.predict;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/interface.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/interface.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Metaplasm {\n}\nexports.Metaplasm = Metaplasm;\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2ludGVyZmFjZS5qcz8xYTAyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2ludGVyZmFjZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgTWV0YXBsYXNtIHtcbn1cbmV4cG9ydHMuTWV0YXBsYXNtID0gTWV0YXBsYXNtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/interface.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/analyzer.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/analyzer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeKana(str) {\n    const gm = new unit_1.GraphemeMaker(kana_1.lowerLettersKana);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeKana = graphAnalyzeKana;\n/** Analyzes a string into morphemes. */\nexports.kanaLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x) {\n        let graphemes = [];\n        if (typeof x == 'object') {\n            graphemes = x;\n        }\n        else if (typeof x == 'string') {\n            graphemes = graphAnalyzeKana(x);\n        }\n        const mm = new morpheme_1.KanaUncombiningMorphemeMaker(new metaplasm_1.KanaCombiningMetaplasm());\n        return mm.makeMorphemes(graphemes);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2thbmEvYW5hbHl6ZXIuanM/ZDJjZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyw2REFBWTtBQUN2QyxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBrYW5hXzEgPSByZXF1aXJlKFwiLi9rYW5hXCIpO1xuY29uc3QgbWV0YXBsYXNtXzEgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuLyoqXG4gKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIGdyYXBoZW1lcy4gR3JhcGhlbWljIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHN0cmluZ1xuICovXG5mdW5jdGlvbiBncmFwaEFuYWx5emVLYW5hKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKGthbmFfMS5sb3dlckxldHRlcnNLYW5hKTtcbiAgICByZXR1cm4gZ20ubWFrZUdyYXBoZW1lcyhzdHIpO1xufVxuZXhwb3J0cy5ncmFwaEFuYWx5emVLYW5hID0gZ3JhcGhBbmFseXplS2FuYTtcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcy4gKi9cbmV4cG9ydHMua2FuYUxlbW1hdGl6YXRpb25BbmFseXplciA9IHtcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBncmFwaGVtZXMgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgZ3JhcGhlbWVzXG4gICAgICovXG4gICAgbW9ycGhBbmFseXplKHgpIHtcbiAgICAgICAgbGV0IGdyYXBoZW1lcyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IGdyYXBoQW5hbHl6ZUthbmEoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5LYW5hVW5jb21iaW5pbmdNb3JwaGVtZU1ha2VyKG5ldyBtZXRhcGxhc21fMS5LYW5hQ29tYmluaW5nTWV0YXBsYXNtKCkpO1xuICAgICAgICByZXR1cm4gbW0ubWFrZU1vcnBoZW1lcyhncmFwaGVtZXMpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/init.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/init.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction checkNumberOfLettersKana() {\n    if (kana_1.kanaPositionalSound.size !== kana_1.lowerLettersKana.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLettersKana = checkNumberOfLettersKana;\nfunction checkChouon(previousLetter, nextLetter) {\n    if (previousLetter === nextLetter)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.e && nextLetter === kana_1.KanaLetterTags.i)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.o && nextLetter === kana_1.KanaLetterTags.u)\n        return true;\n    return false;\n}\nfunction lookUp(str) {\n    let kanas = kana_1.hiraganaKatakana.get(str);\n    if (kanas == undefined) {\n        kanas = kana_1.gailaigo.get(str);\n    }\n    if (kanas == undefined) {\n        kanas = kana_1.special.get(str);\n    }\n    return kanas;\n}\nfunction lookUpOtherKanas(str) {\n    if (kana_1.otherKanas.has(str)) {\n        return kana_1.otherKanas.get(str);\n    }\n}\nfunction getKanaBlocks(morphemes) {\n    // string one is hiragana, string two is katakana, string three is chouon\n    const kanaSequences = []; //[string, string, string] = ['', '', ''];\n    kanaSequences[0] = '';\n    kanaSequences[1] = '';\n    kanaSequences[2] = '';\n    let previous = '';\n    for (const m of morphemes) {\n        let ks = lookUp(m.syllable.literal);\n        if (ks != undefined && ks[0] != undefined) {\n            // in case the kana is absent, we check against ks[0]\n            kanaSequences[0] += ks[0];\n            kanaSequences[1] += ks[1];\n            if (previous.length > 0 &&\n                checkChouon(previous[previous.length - 1], m.syllable.literal[m.syllable.literal.length - 1]) &&\n                kana_1.initialConsonantsKana.includes(m.syllable.literal) == false &&\n                m.syllable.literal.length == 1) {\n                // a vowel does not begin with a consonant and is of length 1\n                // a vowel follows a previous vowel\n                kanaSequences[2] += 'ー';\n            }\n            else {\n                kanaSequences[2] += ks[1];\n            }\n            if (morphemes.length == 1) {\n                const got = lookUpOtherKanas(m.syllable.literal);\n                if (got) {\n                    if (got[0])\n                        kanaSequences.push(got[0]);\n                    if (got[1])\n                        kanaSequences.push(got[1]);\n                }\n            }\n        }\n        else if (kana_1.finalConsonantsKana.includes(m.syllable.literal[m.syllable.literal.length - 1]) == true) {\n            ks = lookUp(m.syllable.literal.substring(0, m.syllable.literal.length - 1));\n            if (ks != undefined && ks[0] != undefined) {\n                kanaSequences[0] += ks[0];\n                kanaSequences[1] += ks[1];\n                kanaSequences[2] += ks[1];\n            }\n            if (kana_1.hatsuonKana.includes(m.syllable.literal[m.syllable.literal.length - 1])) {\n                ks = kana_1.hatsuon.get('n');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n            else {\n                ks = kana_1.kogakimoji.get('chu');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n        }\n        else {\n            let first = m.syllable.literal[0];\n            let second = m.syllable.literal[1];\n            if (first === second &&\n                kana_1.germinatedConsonantsKana.includes(first) == true) {\n                ks = kana_1.kogakimoji.get('chu');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n                ks = kana_1.hiraganaKatakana.get(m.syllable.literal.substring(1, m.syllable.literal.length));\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n        }\n        previous = m.syllable.literal;\n    }\n    // remove duplicates\n    if (kanaSequences[1] === kanaSequences[2])\n        kanaSequences[2] = '';\n    return kanaSequences;\n}\nexports.getKanaBlocks = getKanaBlocks;\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2thbmEvaW5pdC5qcz82OThmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9pbml0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBrYW5hXzEgPSByZXF1aXJlKFwiLi9rYW5hXCIpO1xuZnVuY3Rpb24gY2hlY2tOdW1iZXJPZkxldHRlcnNLYW5hKCkge1xuICAgIGlmIChrYW5hXzEua2FuYVBvc2l0aW9uYWxTb3VuZC5zaXplICE9PSBrYW5hXzEubG93ZXJMZXR0ZXJzS2FuYS5zaXplKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzaXplcyB1bm1hdGNoZWQnKTtcbiAgICB9XG59XG5leHBvcnRzLmNoZWNrTnVtYmVyT2ZMZXR0ZXJzS2FuYSA9IGNoZWNrTnVtYmVyT2ZMZXR0ZXJzS2FuYTtcbmZ1bmN0aW9uIGNoZWNrQ2hvdW9uKHByZXZpb3VzTGV0dGVyLCBuZXh0TGV0dGVyKSB7XG4gICAgaWYgKHByZXZpb3VzTGV0dGVyID09PSBuZXh0TGV0dGVyKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAocHJldmlvdXNMZXR0ZXIgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy5lICYmIG5leHRMZXR0ZXIgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy5pKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAocHJldmlvdXNMZXR0ZXIgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy5vICYmIG5leHRMZXR0ZXIgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy51KVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBsb29rVXAoc3RyKSB7XG4gICAgbGV0IGthbmFzID0ga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KHN0cik7XG4gICAgaWYgKGthbmFzID09IHVuZGVmaW5lZCkge1xuICAgICAgICBrYW5hcyA9IGthbmFfMS5nYWlsYWlnby5nZXQoc3RyKTtcbiAgICB9XG4gICAgaWYgKGthbmFzID09IHVuZGVmaW5lZCkge1xuICAgICAgICBrYW5hcyA9IGthbmFfMS5zcGVjaWFsLmdldChzdHIpO1xuICAgIH1cbiAgICByZXR1cm4ga2FuYXM7XG59XG5mdW5jdGlvbiBsb29rVXBPdGhlckthbmFzKHN0cikge1xuICAgIGlmIChrYW5hXzEub3RoZXJLYW5hcy5oYXMoc3RyKSkge1xuICAgICAgICByZXR1cm4ga2FuYV8xLm90aGVyS2FuYXMuZ2V0KHN0cik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0S2FuYUJsb2Nrcyhtb3JwaGVtZXMpIHtcbiAgICAvLyBzdHJpbmcgb25lIGlzIGhpcmFnYW5hLCBzdHJpbmcgdHdvIGlzIGthdGFrYW5hLCBzdHJpbmcgdGhyZWUgaXMgY2hvdW9uXG4gICAgY29uc3Qga2FuYVNlcXVlbmNlcyA9IFtdOyAvL1tzdHJpbmcsIHN0cmluZywgc3RyaW5nXSA9IFsnJywgJycsICcnXTtcbiAgICBrYW5hU2VxdWVuY2VzWzBdID0gJyc7XG4gICAga2FuYVNlcXVlbmNlc1sxXSA9ICcnO1xuICAgIGthbmFTZXF1ZW5jZXNbMl0gPSAnJztcbiAgICBsZXQgcHJldmlvdXMgPSAnJztcbiAgICBmb3IgKGNvbnN0IG0gb2YgbW9ycGhlbWVzKSB7XG4gICAgICAgIGxldCBrcyA9IGxvb2tVcChtLnN5bGxhYmxlLmxpdGVyYWwpO1xuICAgICAgICBpZiAoa3MgIT0gdW5kZWZpbmVkICYmIGtzWzBdICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGUga2FuYSBpcyBhYnNlbnQsIHdlIGNoZWNrIGFnYWluc3Qga3NbMF1cbiAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0ga3NbMF07XG4gICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzFdICs9IGtzWzFdO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBjaGVja0Nob3VvbihwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXSwgbS5zeWxsYWJsZS5saXRlcmFsW20uc3lsbGFibGUubGl0ZXJhbC5sZW5ndGggLSAxXSkgJiZcbiAgICAgICAgICAgICAgICBrYW5hXzEuaW5pdGlhbENvbnNvbmFudHNLYW5hLmluY2x1ZGVzKG0uc3lsbGFibGUubGl0ZXJhbCkgPT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICBtLnN5bGxhYmxlLmxpdGVyYWwubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBhIHZvd2VsIGRvZXMgbm90IGJlZ2luIHdpdGggYSBjb25zb25hbnQgYW5kIGlzIG9mIGxlbmd0aCAxXG4gICAgICAgICAgICAgICAgLy8gYSB2b3dlbCBmb2xsb3dzIGEgcHJldmlvdXMgdm93ZWxcbiAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzJdICs9ICfjg7wnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1syXSArPSBrc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb3JwaGVtZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnb3QgPSBsb29rVXBPdGhlckthbmFzKG0uc3lsbGFibGUubGl0ZXJhbCk7XG4gICAgICAgICAgICAgICAgaWYgKGdvdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ290WzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlcy5wdXNoKGdvdFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnb3RbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzLnB1c2goZ290WzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2FuYV8xLmZpbmFsQ29uc29uYW50c0thbmEuaW5jbHVkZXMobS5zeWxsYWJsZS5saXRlcmFsW20uc3lsbGFibGUubGl0ZXJhbC5sZW5ndGggLSAxXSkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAga3MgPSBsb29rVXAobS5zeWxsYWJsZS5saXRlcmFsLnN1YnN0cmluZygwLCBtLnN5bGxhYmxlLmxpdGVyYWwubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgaWYgKGtzICE9IHVuZGVmaW5lZCAmJiBrc1swXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzBdICs9IGtzWzBdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0ga3NbMV07XG4gICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1syXSArPSBrc1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrYW5hXzEuaGF0c3VvbkthbmEuaW5jbHVkZXMobS5zeWxsYWJsZS5saXRlcmFsW20uc3lsbGFibGUubGl0ZXJhbC5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgICAgICBrcyA9IGthbmFfMS5oYXRzdW9uLmdldCgnbicpO1xuICAgICAgICAgICAgICAgIGlmIChrcykge1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzBdICs9IGtzWzBdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzFdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzJdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtzID0ga2FuYV8xLmtvZ2FraW1vamkuZ2V0KCdjaHUnKTtcbiAgICAgICAgICAgICAgICBpZiAoa3MpIHtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1swXSArPSBrc1swXTtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1sxXSArPSBrc1sxXTtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1syXSArPSBrc1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSBtLnN5bGxhYmxlLmxpdGVyYWxbMF07XG4gICAgICAgICAgICBsZXQgc2Vjb25kID0gbS5zeWxsYWJsZS5saXRlcmFsWzFdO1xuICAgICAgICAgICAgaWYgKGZpcnN0ID09PSBzZWNvbmQgJiZcbiAgICAgICAgICAgICAgICBrYW5hXzEuZ2VybWluYXRlZENvbnNvbmFudHNLYW5hLmluY2x1ZGVzKGZpcnN0KSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAga3MgPSBrYW5hXzEua29nYWtpbW9qaS5nZXQoJ2NodScpO1xuICAgICAgICAgICAgICAgIGlmIChrcykge1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzBdICs9IGtzWzBdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzFdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzJdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrcyA9IGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChtLnN5bGxhYmxlLmxpdGVyYWwuc3Vic3RyaW5nKDEsIG0uc3lsbGFibGUubGl0ZXJhbC5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICBpZiAoa3MpIHtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1swXSArPSBrc1swXTtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1sxXSArPSBrc1sxXTtcbiAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1syXSArPSBrc1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBtLnN5bGxhYmxlLmxpdGVyYWw7XG4gICAgfVxuICAgIC8vIHJlbW92ZSBkdXBsaWNhdGVzXG4gICAgaWYgKGthbmFTZXF1ZW5jZXNbMV0gPT09IGthbmFTZXF1ZW5jZXNbMl0pXG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gPSAnJztcbiAgICByZXR1cm4ga2FuYVNlcXVlbmNlcztcbn1cbmV4cG9ydHMuZ2V0S2FuYUJsb2NrcyA9IGdldEthbmFCbG9ja3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/kana.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/kana.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nvar KanaLetterTags;\n(function (KanaLetterTags) {\n    KanaLetterTags[\"a\"] = \"a\";\n    KanaLetterTags[\"e\"] = \"e\";\n    KanaLetterTags[\"i\"] = \"i\";\n    KanaLetterTags[\"o\"] = \"o\";\n    KanaLetterTags[\"u\"] = \"u\";\n    KanaLetterTags[\"b\"] = \"b\";\n    KanaLetterTags[\"c\"] = \"c\";\n    KanaLetterTags[\"ch\"] = \"ch\";\n    KanaLetterTags[\"d\"] = \"d\";\n    KanaLetterTags[\"f\"] = \"f\";\n    KanaLetterTags[\"g\"] = \"g\";\n    KanaLetterTags[\"h\"] = \"h\";\n    KanaLetterTags[\"j\"] = \"j\";\n    KanaLetterTags[\"k\"] = \"k\";\n    KanaLetterTags[\"l\"] = \"l\";\n    KanaLetterTags[\"m\"] = \"m\";\n    KanaLetterTags[\"r\"] = \"r\";\n    KanaLetterTags[\"s\"] = \"s\";\n    KanaLetterTags[\"v\"] = \"v\";\n    KanaLetterTags[\"z\"] = \"z\";\n    KanaLetterTags[\"p\"] = \"p\";\n    KanaLetterTags[\"t\"] = \"t\";\n    KanaLetterTags[\"w\"] = \"w\";\n    KanaLetterTags[\"y\"] = \"y\";\n    KanaLetterTags[\"n\"] = \"n\";\n    KanaLetterTags[\"ng\"] = \"ng\";\n})(KanaLetterTags = exports.KanaLetterTags || (exports.KanaLetterTags = {}));\nclass LettersOfKana extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'ng'.length && listLength == 26) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'g') {\n                // handling final n and initial ng in kana\n                if (characters[0].character === 'n' &&\n                    characters[beginOfLetter + 1].character === 'g') {\n                    ms.characters[0] = new unit_1.Character('n');\n                    ms.characters[1] = new unit_1.Character('g');\n                    return ms;\n                }\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfKana = LettersOfKana;\nexports.lowerLettersKana = new LettersOfKana([\n    KanaLetterTags.a,\n    KanaLetterTags.e,\n    KanaLetterTags.i,\n    KanaLetterTags.o,\n    KanaLetterTags.u,\n    KanaLetterTags.b,\n    KanaLetterTags.c,\n    KanaLetterTags.ch,\n    KanaLetterTags.d,\n    KanaLetterTags.f,\n    KanaLetterTags.g,\n    KanaLetterTags.h,\n    KanaLetterTags.j,\n    KanaLetterTags.k,\n    KanaLetterTags.l,\n    KanaLetterTags.m,\n    KanaLetterTags.r,\n    KanaLetterTags.s,\n    KanaLetterTags.v,\n    KanaLetterTags.z,\n    KanaLetterTags.p,\n    KanaLetterTags.t,\n    KanaLetterTags.w,\n    KanaLetterTags.y,\n    KanaLetterTags.n,\n    KanaLetterTags.ng,\n]);\nvar KanaSoundTags;\n(function (KanaSoundTags) {\n    KanaSoundTags[\"germinatedConsonant\"] = \"germinatedConsonant\";\n    KanaSoundTags[\"initialConsonant\"] = \"initialConsonant\";\n    KanaSoundTags[\"semivowel\"] = \"semivowel\";\n    KanaSoundTags[\"vowel\"] = \"vowel\";\n    KanaSoundTags[\"finalConsonant\"] = \"finalConsonant\";\n})(KanaSoundTags = exports.KanaSoundTags || (exports.KanaSoundTags = {}));\nclass GerminatedConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.germinatedConsonant;\n    }\n}\nclass InitialConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.initialConsonant;\n    }\n}\nclass Semivowel extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.semivowel;\n    }\n}\nclass Vowel extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.vowel;\n    }\n}\nclass FinalConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.finalConsonant;\n    }\n}\nclass InitialConsonantB extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass InitialConsonantC extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass InitialConsonantCH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ch);\n    }\n}\nclass InitialConsonantD extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass InitialConsonantF extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.f);\n    }\n}\nclass InitialConsonantG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass InitialConsonantH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.h);\n    }\n}\nclass InitialConsonantJ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.j);\n    }\n}\nclass InitialConsonantK extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass InitialConsonantL extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.l);\n    }\n}\nclass InitialConsonantM extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.m);\n    }\n}\nclass InitialConsonantN extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass InitialConsonantNG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ng);\n    }\n}\nclass InitialConsonantP extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass InitialConsonantR extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.r);\n    }\n}\nclass InitialConsonantS extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass InitialConsonantT extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass InitialConsonantV extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.v);\n    }\n}\nclass InitialConsonantW extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass InitialConsonantY extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass InitialConsonantZ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.z);\n    }\n}\nclass SemivowelW extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass SemivowelY extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass VowelA extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.a);\n    }\n}\nclass VowelE extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.e);\n    }\n}\nclass VowelI extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.i);\n    }\n}\nclass VowelO extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.o);\n    }\n}\nclass VowelU extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.u);\n    }\n}\nclass FinalConsonantB extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass FinalConsonantD extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass FinalConsonantG extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass FinalConsonantK extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass FinalConsonantH extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.h);\n    }\n}\nclass FinalConsonantN extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass FinalConsonantP extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass FinalConsonantS extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass FinalConsonantT extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass GerminatedConsonantB extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass GerminatedConsonantC extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass GerminatedConsonantD extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass GerminatedConsonantG extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass GerminatedConsonantK extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass GerminatedConsonantP extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass GerminatedConsonantS extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass GerminatedConsonantT extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nexports.initialConsonantsKana = unit_1.setOfSounds([\n    new InitialConsonantB(),\n    new InitialConsonantC(),\n    new InitialConsonantCH(),\n    new InitialConsonantD(),\n    new InitialConsonantF(),\n    new InitialConsonantG(),\n    new InitialConsonantH(),\n    new InitialConsonantJ(),\n    new InitialConsonantK(),\n    new InitialConsonantL(),\n    new InitialConsonantM(),\n    new InitialConsonantN(),\n    new InitialConsonantNG(),\n    new InitialConsonantP(),\n    new InitialConsonantR(),\n    new InitialConsonantS(),\n    new InitialConsonantT(),\n    new InitialConsonantV(),\n    new InitialConsonantW(),\n    new InitialConsonantY(),\n    new InitialConsonantZ(),\n]);\nexports.vowelsKana = unit_1.setOfSounds([\n    new VowelA(),\n    new VowelI(),\n    new VowelU(),\n    new VowelE(),\n    new VowelO(),\n]);\nexports.germinatedConsonantsKana = unit_1.setOfSounds([\n    new GerminatedConsonantB(),\n    new GerminatedConsonantC(),\n    new GerminatedConsonantD(),\n    new GerminatedConsonantG(),\n    new GerminatedConsonantK(),\n    new GerminatedConsonantP(),\n    new GerminatedConsonantS(),\n    new GerminatedConsonantT(),\n]);\nexports.semivowelsKana = unit_1.setOfSounds([new SemivowelW(), new SemivowelY()]);\nexports.finalConsonantsKana = unit_1.setOfSounds([\n    new FinalConsonantB(),\n    new FinalConsonantD(),\n    new FinalConsonantG(),\n    new FinalConsonantK(),\n    new FinalConsonantN(),\n    new FinalConsonantP(),\n    new FinalConsonantS(),\n    new FinalConsonantT(),\n]);\nexports.hatsuonKana = unit_1.setOfSounds([new FinalConsonantN()]);\nfunction positionalSound(sounds) {\n    return (t) => {\n        for (let i in sounds) {\n            if (sounds[i].name === t)\n                return sounds[i];\n        }\n        return new unit_1.Sound();\n    };\n}\nexports.positionalSound = positionalSound;\nconst psA = positionalSound([new VowelA()]);\nconst psB = positionalSound([\n    new InitialConsonantB(),\n    new FinalConsonantB(),\n    new GerminatedConsonantB(),\n]);\nconst psC = positionalSound([\n    new InitialConsonantC(),\n    new GerminatedConsonantC(),\n]);\nconst psCh = positionalSound([new InitialConsonantCH()]);\nconst psD = positionalSound([\n    new InitialConsonantD(),\n    new FinalConsonantD(),\n    new GerminatedConsonantD(),\n]);\nconst psE = positionalSound([new VowelE()]);\nconst psF = positionalSound([new InitialConsonantF()]);\nconst psG = positionalSound([\n    new InitialConsonantG(),\n    new FinalConsonantG(),\n    new GerminatedConsonantG(),\n]);\nconst psH = positionalSound([new InitialConsonantH()]);\nconst psI = positionalSound([new VowelI()]);\nconst psJ = positionalSound([new InitialConsonantJ()]);\nconst psK = positionalSound([\n    new InitialConsonantK(),\n    new FinalConsonantK(),\n    new GerminatedConsonantK(),\n]);\nconst psL = positionalSound([new InitialConsonantL()]);\nconst psM = positionalSound([new InitialConsonantM()]);\nconst psN = positionalSound([new InitialConsonantN(), new FinalConsonantN()]);\nconst psNg = positionalSound([new InitialConsonantNG()]);\nconst psO = positionalSound([new VowelO()]);\nconst psP = positionalSound([\n    new InitialConsonantP(),\n    new FinalConsonantP(),\n    new GerminatedConsonantP(),\n]);\nconst psR = positionalSound([new InitialConsonantR()]);\nconst psS = positionalSound([\n    new InitialConsonantS(),\n    new FinalConsonantS(),\n    new GerminatedConsonantS(),\n]);\nconst psT = positionalSound([\n    new InitialConsonantT(),\n    new FinalConsonantT(),\n    new GerminatedConsonantT(),\n]);\nconst psU = positionalSound([new VowelU()]);\nconst psV = positionalSound([new InitialConsonantV()]);\nconst psW = positionalSound([new InitialConsonantW(), new SemivowelW()]);\nconst psY = positionalSound([new InitialConsonantY(), new SemivowelY()]);\nconst psZ = positionalSound([new InitialConsonantZ()]);\nexports.kanaPositionalSound = new Map()\n    .set(KanaLetterTags.a, psA)\n    .set(KanaLetterTags.b, psB)\n    .set(KanaLetterTags.c, psC)\n    .set(KanaLetterTags.ch, psCh)\n    .set(KanaLetterTags.d, psD)\n    .set(KanaLetterTags.e, psE)\n    .set(KanaLetterTags.f, psF)\n    .set(KanaLetterTags.g, psG)\n    .set(KanaLetterTags.h, psH)\n    .set(KanaLetterTags.i, psI)\n    .set(KanaLetterTags.j, psJ)\n    .set(KanaLetterTags.k, psK)\n    .set(KanaLetterTags.l, psL)\n    .set(KanaLetterTags.m, psM)\n    .set(KanaLetterTags.n, psN)\n    .set(KanaLetterTags.ng, psNg)\n    .set(KanaLetterTags.o, psO)\n    .set(KanaLetterTags.p, psP)\n    .set(KanaLetterTags.r, psR)\n    .set(KanaLetterTags.s, psS)\n    .set(KanaLetterTags.t, psT)\n    .set(KanaLetterTags.u, psU)\n    .set(KanaLetterTags.v, psV)\n    .set(KanaLetterTags.w, psW)\n    .set(KanaLetterTags.y, psY)\n    .set(KanaLetterTags.z, psZ);\nexports.kogakimoji = new Map().set(KanaLetterTags.ch + KanaLetterTags.u, ['っ', 'ッ']);\nexports.hatsuon = new Map().set(KanaLetterTags.n, [\n    'ん',\n    'ン',\n]);\nexports.otherKanas = new Map()\n    .set(KanaLetterTags.a, ['ぁ', 'ァ'])\n    .set(KanaLetterTags.i, ['ぃ', 'ィ'])\n    .set(KanaLetterTags.u, ['ぅ', 'ゥ'])\n    .set(KanaLetterTags.e, ['ぇ', 'ェ'])\n    .set(KanaLetterTags.o, ['ぉ', 'ォ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['', 'ㇵ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['', 'ㇶ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'ㇷ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['', 'ㇸ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['', 'ㇹ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['ゕ', 'ヵ'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['ゖ', 'ヶ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['', 'ㇰ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['', 'ㇻ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['', 'ㇼ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['', 'ㇽ'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['', 'ㇾ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['', 'ㇿ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['', 'ㇺ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['', 'ㇴ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['', 'ㇷ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'ㇱ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['', 'ㇲ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['', 'ㇳ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['ゃ', 'ャ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゅ', 'ュ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['ょ', 'ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['ゎ', 'ヮ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', '\\u{1b166}'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['', 'ㇷ゙']) // 'ㇷ'+ '\\u{3099}'\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['', 'ㇰ゙']) // 'ㇰ'+ '\\u{3099}'\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['', 'ㇲ゙']) // 'ㇲ'+ '\\u{3099}'\n    .set(KanaLetterTags.n, ['', '\\u{1B167}'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['ぢ', 'ヂ']) // moved from hiraganaKatakana\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['づ', 'ヅ']); // moved from hiraganaKatakana\nexports.hiraganaKatakana = new Map()\n    .set(KanaLetterTags.a, ['あ', 'ア'])\n    .set(KanaLetterTags.i, ['い', 'イ'])\n    .set(KanaLetterTags.u, ['う', 'ウ'])\n    .set(KanaLetterTags.e, ['え', 'エ'])\n    .set(KanaLetterTags.o, ['お', 'オ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['か', 'カ'])\n    .set(KanaLetterTags.k + KanaLetterTags.i, ['き', 'キ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['く', 'ク'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['け', 'ケ'])\n    .set(KanaLetterTags.k + KanaLetterTags.o, ['こ', 'コ'])\n    .set(KanaLetterTags.s + KanaLetterTags.a, ['さ', 'サ'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['し', 'シ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['す', 'ス'])\n    .set(KanaLetterTags.s + KanaLetterTags.e, ['せ', 'セ'])\n    .set(KanaLetterTags.s + KanaLetterTags.o, ['そ', 'ソ'])\n    .set(KanaLetterTags.t + KanaLetterTags.a, ['た', 'タ'])\n    .set(KanaLetterTags.c + KanaLetterTags.i, ['ち', 'チ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['つ', 'ツ'])\n    .set(KanaLetterTags.t + KanaLetterTags.e, ['て', 'テ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['と', 'ト'])\n    .set(KanaLetterTags.n + KanaLetterTags.a, ['な', 'ナ'])\n    .set(KanaLetterTags.n + KanaLetterTags.i, ['に', 'ニ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['ぬ', 'ヌ'])\n    .set(KanaLetterTags.n + KanaLetterTags.e, ['ね', 'ネ'])\n    .set(KanaLetterTags.n + KanaLetterTags.o, ['の', 'ノ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['は', 'ハ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['ひ', 'ヒ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['ふ', 'フ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['へ', 'ヘ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['ほ', 'ホ'])\n    .set(KanaLetterTags.m + KanaLetterTags.a, ['ま', 'マ'])\n    .set(KanaLetterTags.m + KanaLetterTags.i, ['み', 'ミ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['む', 'ム'])\n    .set(KanaLetterTags.m + KanaLetterTags.e, ['め', 'メ'])\n    .set(KanaLetterTags.m + KanaLetterTags.o, ['も', 'モ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['や', 'ヤ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゆ', 'ユ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['よ', 'ヨ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['ら', 'ラ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['り', 'リ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['る', 'ル'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['れ', 'レ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['ろ', 'ロ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['わ', 'ワ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['ゐ', 'ヰ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['ゑ', 'ヱ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['を', 'ヲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.a, ['が', 'ガ'])\n    .set(KanaLetterTags.g + KanaLetterTags.i, ['ぎ', 'ギ'])\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['ぐ', 'グ'])\n    .set(KanaLetterTags.g + KanaLetterTags.e, ['げ', 'ゲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.o, ['ご', 'ゴ'])\n    .set(KanaLetterTags.z + KanaLetterTags.a, ['ざ', 'ザ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['じ', 'ジ'])\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['ず', 'ズ'])\n    .set(KanaLetterTags.z + KanaLetterTags.e, ['ぜ', 'ゼ'])\n    .set(KanaLetterTags.z + KanaLetterTags.o, ['ぞ', 'ゾ'])\n    .set(KanaLetterTags.d + KanaLetterTags.a, ['だ', 'ダ'])\n    .set(KanaLetterTags.d + KanaLetterTags.e, ['で', 'デ'])\n    .set(KanaLetterTags.d + KanaLetterTags.o, ['ど', 'ド'])\n    .set(KanaLetterTags.b + KanaLetterTags.a, ['ば', 'バ'])\n    .set(KanaLetterTags.b + KanaLetterTags.i, ['び', 'ビ'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['ぶ', 'ブ'])\n    .set(KanaLetterTags.b + KanaLetterTags.e, ['べ', 'ベ'])\n    .set(KanaLetterTags.b + KanaLetterTags.o, ['ぼ', 'ボ'])\n    .set(KanaLetterTags.p + KanaLetterTags.a, ['ぱ', 'パ'])\n    .set(KanaLetterTags.p + KanaLetterTags.i, ['ぴ', 'ピ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['ぷ', 'プ'])\n    .set(KanaLetterTags.p + KanaLetterTags.e, ['ぺ', 'ペ'])\n    .set(KanaLetterTags.p + KanaLetterTags.o, ['ぽ', 'ポ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.a, ['きゃ', 'キャ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.u, ['きゅ', 'キュ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.o, ['きょ', 'キョ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['しゃ', 'シャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['しゅ', 'シュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['しょ', 'ショ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.a, ['ちゃ', 'チャ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.u, ['ちゅ', 'チュ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.o, ['ちょ', 'チョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.a, ['にゃ', 'ニャ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.u, ['にゅ', 'ニュ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.o, ['にょ', 'ニョ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.a, ['ひゃ', 'ヒャ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.u, ['ひゅ', 'ヒュ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.o, ['ひょ', 'ヒョ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.a, ['みゃ', 'ミャ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.u, ['みゅ', 'みょ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.o, ['ミュ', 'ミョ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.a, ['りゃ', 'リャ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.u, ['りゅ', 'リュ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.o, ['りょ', 'リョ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.a, ['ぎゃ', 'ギャ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.u, ['ぎゅ', 'ギュ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.o, ['ぎょ', 'ギョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.a, ['じゃ', 'ジャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['じゅ', 'ジュ'])\n    .set(KanaLetterTags.j + KanaLetterTags.o, ['じょ', 'ジョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.a, ['ぢゃ', 'ヂャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.u, [\n    'ぢ゙ゅ',\n    'ヂュ',\n])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぢ゙ょ',\n    'ヂョ',\n])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.a, ['びゃ', 'ビャ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.u, ['びゅ', 'ビュ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.o, ['びょ', 'ビョ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.a, ['ぴゃ', 'ピャ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.u, ['ぴゅ', 'ピュ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぴょ',\n    'ピョ',\n]);\nexports.gailaigo = new Map()\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'スィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'シェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ズィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.e, ['', 'ジェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.a, ['', 'ジュァ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.i, ['', 'ジュィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.e, ['', 'ジュェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.o, ['', 'ジュォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.i, ['', 'ティ'])\n    .set(KanaLetterTags.t + KanaLetterTags.u, ['', 'トゥ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.e, ['', 'チェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヂェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.a, ['', 'チュァ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.i, ['', 'チュィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.e, ['', 'チュェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.o, ['', 'チュォ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.a, ['', 'ツァ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.i, ['', 'ツィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.e, ['', 'ツェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.o, ['', 'ツォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.i, ['', 'ディ'])\n    .set(KanaLetterTags.d + KanaLetterTags.u, ['', 'ドゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.a, ['', 'ファ'])\n    .set(KanaLetterTags.f + KanaLetterTags.i, ['', 'フィ'])\n    .set(KanaLetterTags.f + KanaLetterTags.e, ['', 'フェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.o, ['', 'フォ'])\n    .set(KanaLetterTags.y + KanaLetterTags.i, ['', 'イィ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'イェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['', 'ウァ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['', 'ウィ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['', 'ウェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', 'ウォ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヴァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヴィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.u, ['', 'ヴ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヴェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヴォ']);\nexports.gailaigoY = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.i, ['', 'キィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.e, ['', 'キェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.i, ['', 'ギィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.e, ['', 'ギェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['', 'スャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['', 'スュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'スィェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['', 'スョ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.a, ['', 'ズャ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.u, ['', 'ズュ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.e, ['', 'ズィェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.o, ['', 'ズョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.a, ['', 'テャ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.u, ['', 'テュ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'ティェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.o, ['', 'テョ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.a, ['', 'デャ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.u, ['', 'デュ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.e, [\n    '',\n    'デェ',\n    'ディェ',\n])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.o, ['', 'デョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.i, ['', 'ニィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.e, ['', 'ニェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヒィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヒェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.a, ['', 'フャ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.u, ['', 'フュ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.e, ['', 'フィェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.o, ['', 'フョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.e, ['', 'ビェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.e, ['', 'ピェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.i, ['', 'ミィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.e, ['', 'ミェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.i, ['', 'リィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.e, ['', 'リェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ウャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ウュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ウョ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヴャ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヴュ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヴィェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヴョ']);\nexports.gailaigoW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クァ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.i, ['', 'クィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.u, ['', 'クゥ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.e, ['', 'クェ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.o, ['', 'クォ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グァ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.i, ['', 'グィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.u, ['', 'グゥ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.e, ['', 'グェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.o, ['', 'グォ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.a, ['', 'スァ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.i, ['', 'スゥィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.e, ['', 'スェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.o, ['', 'スォ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヌァ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヌィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヌェ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヌォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.a, ['', 'ブァ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.i, ['', 'ブィ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.e, ['', 'ブェ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.o, ['', 'ブォ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.a, ['', 'プァ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.i, ['', 'プィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.e, ['', 'プェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.o, ['', 'プォ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.a, ['', 'ムァ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.i, ['', 'ムィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.e, ['', 'ムェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.o, ['', 'ムォ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.a, ['', 'ルァ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.i, ['', 'ルィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.e, ['', 'ルェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.o, ['', 'ルォ']);\nexports.special = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.a, ['', 'カ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.i, ['', 'キ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.u, ['', 'ク゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.e, ['', 'ケ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.o, ['', 'コ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'セィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ゼィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.i, ['', 'シィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['', 'ジィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.i, ['', 'チィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['', 'ツゥ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヂィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.u, ['', 'ホゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'フゥ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'ユェ'])\n    .set(KanaLetterTags.l + KanaLetterTags.a, ['', 'ラ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.i, ['', 'リ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.u, ['', 'ル゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.e, ['', 'レ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.o, ['', 'ロ゚'])\n    .set(KanaLetterTags.w + KanaLetterTags.u, ['', 'ウゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヷ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヸ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヹ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヺ']);\nexports.specialY = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.a, ['', 'キ゚ャ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.u, ['', 'キ゚ュ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.o, ['', 'キ゚ョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'テェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.a, ['', 'ツャ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.u, ['', 'ツュ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.o, ['', 'ツョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.i, ['', 'ビィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.i, ['', 'ピィ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.a, ['', 'リ゚ャ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.u, ['', 'リ゚ュ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.o, ['', 'リ゚ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヰャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヰュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヰョ']);\nexports.specialW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クヮ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グヮ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.u, ['', 'スゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.a, ['', 'ズァ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.i, ['', 'ズゥィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.o, ['', 'ズォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トゥァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トゥィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.u, ['', 'トゥゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トゥェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トゥォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドゥァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドゥィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.u, ['', 'ドゥゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドゥェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドゥォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヌゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.a, ['', 'ホゥァ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.i, ['', 'ホゥィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.u, ['', 'ホゥゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.e, ['', 'ホゥェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.o, ['', 'ホゥォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.u, ['', 'ブゥ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.u, ['', 'プゥ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.u, ['', 'ムゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヴゥァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヴゥィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヴゥゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヴゥェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヴゥォ']);\nexports.specialH = new Map()\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.a, ['', 'テァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.u, ['', 'テゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.o, ['', 'テォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.a, ['', 'デァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.u, ['', 'デゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.o, ['', 'デォ']);\n//# sourceMappingURL=kana.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/kana.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/morpheme.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/morpheme.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/kana/soundgen.js\");\nclass KanaSyllable extends unit_1.Syllable {\n}\nexports.KanaSyllable = KanaSyllable;\n/** A syllable. */\nclass KanaUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, kcm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = kcm;\n        this.sounds = new Array();\n        this.sounds = sounds;\n    }\n}\nexports.KanaUncombiningMorpheme = KanaUncombiningMorpheme;\nfunction syllabifyKana(letters, beginOfSyllable) {\n    let literal = '';\n    let matched = '';\n    let lookahead = '';\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    const vwls = kana_1.vowelsKana;\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        if (kana_1.hiraganaKatakana.has(literal) || kana_1.gailaigo.has(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            if (i + 1 < letters.length)\n                lookahead = letters[i + 1].literal; // look-ahead\n        }\n        else if (literal.length == 3 &&\n            letters[0].literal === kana_1.KanaLetterTags.ng &&\n            kana_1.vowelsKana.includes(letters[1].literal)) {\n            // ng~\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n        }\n        else if (literal.length == 3 &&\n            literal[0] === literal[1] &&\n            vwls.includes(literal[2])) {\n            // for consonant germination of sokuon\n            matched = literal;\n            ltrs.shift(); // shift the germinated consonants\n            Object.assign(matchedLtrs, ltrs);\n        }\n    }\n    let list = new Array();\n    if (matched.length > 0) {\n        // console.log(matchedLtrs, lookahead);\n        const ksg = new soundgen_1.KanaSoundGenerator();\n        list = ksg.generate(matchedLtrs, lookahead);\n        // console.log(list);\n    }\n    let arraysOfLetters = new Array();\n    let mp = new unit_1.MatchedPattern();\n    let sounds = new Array();\n    for (let m in list) {\n        let min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        if (n + 1 == min) {\n                            // copy the matched letters\n                            let arr = new Array();\n                            for (let q = 0; q < min; q++) {\n                                arr[q] = letters[beginOfSyllable + q];\n                            }\n                            arraysOfLetters.push(arr);\n                            sounds = list[m];\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (arraysOfLetters.length == 1) {\n        // only one matched\n        // copy the matched letters\n        for (let q = 0; q < arraysOfLetters[0].length; q++) {\n            mp.letters[q] = letters[beginOfSyllable + q];\n            mp.pattern[q] = sounds[q];\n        }\n        return mp;\n    }\n    if (arraysOfLetters.length > 1) {\n        let longerEntry = -1; // length of the longest matched entry\n        let shorterEntry = -1;\n        let index = 0;\n        for (let j = 0; j < arraysOfLetters.length; j++) {\n            if (arraysOfLetters[j].length > arraysOfLetters[index].length) {\n                index = j;\n            }\n        }\n        if (index > 0) {\n            longerEntry = index;\n            shorterEntry = 0;\n        }\n        else {\n            longerEntry = 0;\n            shorterEntry = 1;\n        }\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length) {\n            if (kana_1.hatsuonKana.includes(arraysOfLetters[longerEntry][arraysOfLetters[longerEntry].length - 1]\n                .literal)) {\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n                return mp;\n            }\n            // return the shorter one\n            for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = sounds[q];\n            }\n            return mp;\n        }\n        // look ahead for 1 letter\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.initialConsonantsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // consonant-ending\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n            }\n            else {\n                // vowel ending\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n            }\n            return mp;\n        }\n        // look ahead for 2 letters\n        if (letters.length - beginOfSyllable >\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.vowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true ||\n                kana_1.semivowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n                return mp;\n            }\n            // return the longer one\n            for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = sounds[q];\n            }\n        }\n    }\n    return mp;\n}\nclass KanaUncombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor(kcm) {\n        super();\n        this.metaplasm = kcm;\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(msp) {\n        return new KanaUncombiningMorpheme(new KanaSyllable(msp.letters), msp.pattern, this.metaplasm);\n    }\n    postprocess(patterns) {\n        let morphemes = this.createMorphemes();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, syllabifyKana);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.KanaUncombiningMorphemeMaker = KanaUncombiningMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/soundgen.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/soundgen.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction initialConsonant(sg) {\n    const sics = kana_1.initialConsonantsKana;\n    if (sics.includes(sg.letters[sg.sounds.length])) {\n        const ps = kana_1.kanaPositionalSound.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(kana_1.KanaSoundTags.initialConsonant);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction semivowel(sg) {\n    const ssvs = kana_1.semivowelsKana;\n    if (ssvs.includes(sg.letters[sg.sounds.length])) {\n        const ps = kana_1.kanaPositionalSound.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(kana_1.KanaSoundTags.semivowel);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    const svs = kana_1.vowelsKana;\n    if (svs.includes(sg.letters[sg.sounds.length])) {\n        const ps = kana_1.kanaPositionalSound.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(kana_1.KanaSoundTags.vowel);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    return sg;\n}\nfunction finalConsonant(sg) {\n    const sfcs = kana_1.finalConsonantsKana;\n    if (sfcs.includes(sg.letters[sg.sounds.length])) {\n        const ps = kana_1.kanaPositionalSound.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(kana_1.KanaSoundTags.finalConsonant);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    return sg;\n}\nfunction germinatedConsonant(sg) {\n    const sgcs = kana_1.germinatedConsonantsKana;\n    if (sgcs.includes(sg.letters[sg.sounds.length])) {\n        const ps = kana_1.kanaPositionalSound.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(kana_1.KanaSoundTags.germinatedConsonant);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    return sg;\n}\nconst scV = unit_1.sgPipe(vowel);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scCVC = unit_1.sgPipe(initialConsonant, vowel, finalConsonant);\nconst scCSV = unit_1.sgPipe(initialConsonant, semivowel, vowel);\nconst scCCV = unit_1.sgPipe(germinatedConsonant, initialConsonant, vowel);\nclass KanaSoundGenerator {\n    constructor() {\n        this.sylCompositions = [scV, scCV, scCVC, scCSV, scCCV];\n    }\n    genSokuonAndGerminated(letters, lookahead) {\n        let strs = new Array();\n        strs.push(letters);\n        // consonant germination\n        if (kana_1.germinatedConsonantsKana.includes(letters[0]) == true) {\n            let syl = new Array();\n            syl.push(letters[0].charAt(0));\n            for (let e of letters) {\n                syl.push(e);\n            }\n            strs.push(syl);\n        }\n        // sokuon\n        let fcs = kana_1.finalConsonantsKana;\n        for (let e of fcs.sounds) {\n            let syl = new Array();\n            Object.assign(syl, letters);\n            syl.push(e.toString());\n            if (e.toString() === lookahead)\n                strs.push(syl);\n        }\n        return strs;\n    }\n    generate(letters, lookahead) {\n        let strs = new Array();\n        let sequences = new Array(); // to be returned\n        strs = this.genSokuonAndGerminated(letters, lookahead);\n        // console.log(strs);\n        for (let i in strs) {\n            // generates all needed sounds to be processed\n            for (let j = 0; j < this.sylCompositions.length; j++) {\n                let sg = new unit_1.SoundGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = this.sylCompositions[j](sg);\n                if (sg.letters.length == sg.sounds.length && sg.matching == true) {\n                    sequences.push(sg.sounds);\n                    break;\n                }\n            }\n        }\n        // console.log(sequences);\n        return sequences;\n    }\n}\nexports.KanaSoundGenerator = KanaSoundGenerator;\n//# sourceMappingURL=soundgen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2thbmEvc291bmRnZW4uanM/ZGU1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlDQUFpQztBQUM1RDtBQUNBO0FBQ0Esb0NBQW9DLEVBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2thbmEvc291bmRnZW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3Qga2FuYV8xID0gcmVxdWlyZShcIi4va2FuYVwiKTtcbmZ1bmN0aW9uIGluaXRpYWxDb25zb25hbnQoc2cpIHtcbiAgICBjb25zdCBzaWNzID0ga2FuYV8xLmluaXRpYWxDb25zb25hbnRzS2FuYTtcbiAgICBpZiAoc2ljcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwcyA9IGthbmFfMS5rYW5hUG9zaXRpb25hbFNvdW5kLmdldChzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcHMoa2FuYV8xLkthbmFTb3VuZFRhZ3MuaW5pdGlhbENvbnNvbmFudCk7XG4gICAgICAgICAgICBpZiAocylcbiAgICAgICAgICAgICAgICBzZy5zb3VuZHMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHNnLm1hdGNoaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHNnO1xufVxuZnVuY3Rpb24gc2VtaXZvd2VsKHNnKSB7XG4gICAgY29uc3Qgc3N2cyA9IGthbmFfMS5zZW1pdm93ZWxzS2FuYTtcbiAgICBpZiAoc3N2cy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwcyA9IGthbmFfMS5rYW5hUG9zaXRpb25hbFNvdW5kLmdldChzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcHMoa2FuYV8xLkthbmFTb3VuZFRhZ3Muc2VtaXZvd2VsKTtcbiAgICAgICAgICAgIGlmIChzKVxuICAgICAgICAgICAgICAgIHNnLnNvdW5kcy5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZztcbn1cbmZ1bmN0aW9uIHZvd2VsKHNnKSB7XG4gICAgY29uc3Qgc3ZzID0ga2FuYV8xLnZvd2Vsc0thbmE7XG4gICAgaWYgKHN2cy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwcyA9IGthbmFfMS5rYW5hUG9zaXRpb25hbFNvdW5kLmdldChzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcHMoa2FuYV8xLkthbmFTb3VuZFRhZ3Mudm93ZWwpO1xuICAgICAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICAgICAgc2cuc291bmRzLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNnO1xufVxuZnVuY3Rpb24gZmluYWxDb25zb25hbnQoc2cpIHtcbiAgICBjb25zdCBzZmNzID0ga2FuYV8xLmZpbmFsQ29uc29uYW50c0thbmE7XG4gICAgaWYgKHNmY3MuaW5jbHVkZXMoc2cubGV0dGVyc1tzZy5zb3VuZHMubGVuZ3RoXSkpIHtcbiAgICAgICAgY29uc3QgcHMgPSBrYW5hXzEua2FuYVBvc2l0aW9uYWxTb3VuZC5nZXQoc2cubGV0dGVyc1tzZy5zb3VuZHMubGVuZ3RoXSk7XG4gICAgICAgIGlmIChwcykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHBzKGthbmFfMS5LYW5hU291bmRUYWdzLmZpbmFsQ29uc29uYW50KTtcbiAgICAgICAgICAgIGlmIChzKVxuICAgICAgICAgICAgICAgIHNnLnNvdW5kcy5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZztcbn1cbmZ1bmN0aW9uIGdlcm1pbmF0ZWRDb25zb25hbnQoc2cpIHtcbiAgICBjb25zdCBzZ2NzID0ga2FuYV8xLmdlcm1pbmF0ZWRDb25zb25hbnRzS2FuYTtcbiAgICBpZiAoc2djcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwcyA9IGthbmFfMS5rYW5hUG9zaXRpb25hbFNvdW5kLmdldChzZy5sZXR0ZXJzW3NnLnNvdW5kcy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcHMoa2FuYV8xLkthbmFTb3VuZFRhZ3MuZ2VybWluYXRlZENvbnNvbmFudCk7XG4gICAgICAgICAgICBpZiAocylcbiAgICAgICAgICAgICAgICBzZy5zb3VuZHMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2c7XG59XG5jb25zdCBzY1YgPSB1bml0XzEuc2dQaXBlKHZvd2VsKTtcbmNvbnN0IHNjQ1YgPSB1bml0XzEuc2dQaXBlKGluaXRpYWxDb25zb25hbnQsIHZvd2VsKTtcbmNvbnN0IHNjQ1ZDID0gdW5pdF8xLnNnUGlwZShpbml0aWFsQ29uc29uYW50LCB2b3dlbCwgZmluYWxDb25zb25hbnQpO1xuY29uc3Qgc2NDU1YgPSB1bml0XzEuc2dQaXBlKGluaXRpYWxDb25zb25hbnQsIHNlbWl2b3dlbCwgdm93ZWwpO1xuY29uc3Qgc2NDQ1YgPSB1bml0XzEuc2dQaXBlKGdlcm1pbmF0ZWRDb25zb25hbnQsIGluaXRpYWxDb25zb25hbnQsIHZvd2VsKTtcbmNsYXNzIEthbmFTb3VuZEdlbmVyYXRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3lsQ29tcG9zaXRpb25zID0gW3NjViwgc2NDViwgc2NDVkMsIHNjQ1NWLCBzY0NDVl07XG4gICAgfVxuICAgIGdlblNva3VvbkFuZEdlcm1pbmF0ZWQobGV0dGVycywgbG9va2FoZWFkKSB7XG4gICAgICAgIGxldCBzdHJzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHN0cnMucHVzaChsZXR0ZXJzKTtcbiAgICAgICAgLy8gY29uc29uYW50IGdlcm1pbmF0aW9uXG4gICAgICAgIGlmIChrYW5hXzEuZ2VybWluYXRlZENvbnNvbmFudHNLYW5hLmluY2x1ZGVzKGxldHRlcnNbMF0pID09IHRydWUpIHtcbiAgICAgICAgICAgIGxldCBzeWwgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgIHN5bC5wdXNoKGxldHRlcnNbMF0uY2hhckF0KDApKTtcbiAgICAgICAgICAgIGZvciAobGV0IGUgb2YgbGV0dGVycykge1xuICAgICAgICAgICAgICAgIHN5bC5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Rycy5wdXNoKHN5bCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc29rdW9uXG4gICAgICAgIGxldCBmY3MgPSBrYW5hXzEuZmluYWxDb25zb25hbnRzS2FuYTtcbiAgICAgICAgZm9yIChsZXQgZSBvZiBmY3Muc291bmRzKSB7XG4gICAgICAgICAgICBsZXQgc3lsID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHN5bCwgbGV0dGVycyk7XG4gICAgICAgICAgICBzeWwucHVzaChlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYgKGUudG9TdHJpbmcoKSA9PT0gbG9va2FoZWFkKVxuICAgICAgICAgICAgICAgIHN0cnMucHVzaChzeWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJzO1xuICAgIH1cbiAgICBnZW5lcmF0ZShsZXR0ZXJzLCBsb29rYWhlYWQpIHtcbiAgICAgICAgbGV0IHN0cnMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgbGV0IHNlcXVlbmNlcyA9IG5ldyBBcnJheSgpOyAvLyB0byBiZSByZXR1cm5lZFxuICAgICAgICBzdHJzID0gdGhpcy5nZW5Tb2t1b25BbmRHZXJtaW5hdGVkKGxldHRlcnMsIGxvb2thaGVhZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cnMpO1xuICAgICAgICBmb3IgKGxldCBpIGluIHN0cnMpIHtcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyBhbGwgbmVlZGVkIHNvdW5kcyB0byBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5zeWxDb21wb3NpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2cgPSBuZXcgdW5pdF8xLlNvdW5kR2VuZXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHNnLmxldHRlcnMgPSBzdHJzW2ldO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYGo6ICR7an1gKVxuICAgICAgICAgICAgICAgIHNnID0gdGhpcy5zeWxDb21wb3NpdGlvbnNbal0oc2cpO1xuICAgICAgICAgICAgICAgIGlmIChzZy5sZXR0ZXJzLmxlbmd0aCA9PSBzZy5zb3VuZHMubGVuZ3RoICYmIHNnLm1hdGNoaW5nID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VzLnB1c2goc2cuc291bmRzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNlcXVlbmNlcyk7XG4gICAgICAgIHJldHVybiBzZXF1ZW5jZXM7XG4gICAgfVxufVxuZXhwb3J0cy5LYW5hU291bmRHZW5lcmF0b3IgPSBLYW5hU291bmRHZW5lcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3VuZGdlbi5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/soundgen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/metaplasm.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/metaplasm.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst interface_1 = __webpack_require__(/*! ./interface */ \"./node_modules/taipa/lib/interface.js\");\nclass TonalCombiningMetaplasm extends interface_1.Metaplasm {\n    apply(sounds, allomorph) {\n        return [];\n    }\n}\nexports.TonalCombiningMetaplasm = TonalCombiningMetaplasm;\nclass TonalZeroCombining extends TonalCombiningMetaplasm {\n}\nexports.TonalZeroCombining = TonalZeroCombining;\nclass RemovingEpenthesisOfAy extends TonalCombiningMetaplasm {\n    applyToLetters(letters) {\n        letters.shift();\n        return letters;\n    }\n    applyToString(str) {\n        return str.slice(1, 2);\n    }\n}\nexports.RemovingEpenthesisOfAy = RemovingEpenthesisOfAy;\nclass RemovingNasalizationOfAy extends TonalCombiningMetaplasm {\n}\nexports.RemovingNasalizationOfAy = RemovingNasalizationOfAy;\nclass KanaCombiningMetaplasm extends interface_1.Metaplasm {\n}\nexports.KanaCombiningMetaplasm = KanaCombiningMetaplasm;\nclass TonalInflectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInflectionMetaplasm = TonalInflectionMetaplasm;\nclass TonalZeroInflection extends TonalInflectionMetaplasm {\n}\nexports.TonalZeroInflection = TonalZeroInflection;\nclass TonalInsertionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInsertionMetaplasm = TonalInsertionMetaplasm;\nclass TonalUninsertionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninsertionMetaplasm = TonalUninsertionMetaplasm;\nclass TonalZeroInsertionMetaplasm extends TonalInsertionMetaplasm {\n}\nexports.TonalZeroInsertionMetaplasm = TonalZeroInsertionMetaplasm;\nclass TonalZeroUninsertionMetaplasm extends TonalUninsertionMetaplasm {\n}\nexports.TonalZeroUninsertionMetaplasm = TonalZeroUninsertionMetaplasm;\nclass TonalInfectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInfectionMetaplasm = TonalInfectionMetaplasm;\nclass TonalUninfectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninfectionMetaplasm = TonalUninfectionMetaplasm;\nclass TonalZeroInfectionMetaplasm extends TonalInfectionMetaplasm {\n}\nexports.TonalZeroInfectionMetaplasm = TonalZeroInfectionMetaplasm;\nclass TonalZeroUninfectionMetaplasm extends TonalUninfectionMetaplasm {\n}\nexports.TonalZeroUninfectionMetaplasm = TonalZeroUninfectionMetaplasm;\nclass TonalMutationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalMutationMetaplasm = TonalMutationMetaplasm;\nclass TonalUnmutationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUnmutationMetaplasm = TonalUnmutationMetaplasm;\nclass TonalZeroMutationMetaplasm extends TonalMutationMetaplasm {\n}\nexports.TonalZeroMutationMetaplasm = TonalZeroMutationMetaplasm;\nclass TonalZeroUnmutationMetaplasm extends TonalUnmutationMetaplasm {\n}\nexports.TonalZeroUnmutationMetaplasm = TonalZeroUnmutationMetaplasm;\nclass TonalLemmatizationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return [];\n    }\n}\nexports.TonalLemmatizationMetaplasm = TonalLemmatizationMetaplasm;\nclass TonalPhrasalInflectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n    applyVpp(lexemeOne, lexemeTwo, lexemeThree) {\n        return [];\n    }\n}\nexports.TonalPhrasalInflectionMetaplasm = TonalPhrasalInflectionMetaplasm;\nclass TonalPhrasalZeroInflection extends TonalPhrasalInflectionMetaplasm {\n}\nexports.TonalPhrasalZeroInflection = TonalPhrasalZeroInflection;\nclass TonalPhrasalInsertionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInsertionMetaplasm = TonalPhrasalInsertionMetaplasm;\nclass TonalPhrasalUninsertionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninsertionMetaplasm = TonalPhrasalUninsertionMetaplasm;\nclass TonalPhrasalInfectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInfectionMetaplasm = TonalPhrasalInfectionMetaplasm;\nclass TonalPhrasalUninfectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninfectionMetaplasm = TonalPhrasalUninfectionMetaplasm;\nclass TonalPhrasalMutationMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalMutationMetaplasm = TonalPhrasalMutationMetaplasm;\nclass TonalPhrasalUnmutationMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUnmutationMetaplasm = TonalPhrasalUnmutationMetaplasm;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL21ldGFwbGFzbS5qcz81MjVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsb0JBQW9CLG1CQUFPLENBQUMsMERBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvbWV0YXBsYXNtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL2ludGVyZmFjZVwiKTtcbmNsYXNzIFRvbmFsQ29tYmluaW5nTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShzb3VuZHMsIGFsbG9tb3JwaCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbENvbWJpbmluZ01ldGFwbGFzbSA9IFRvbmFsQ29tYmluaW5nTWV0YXBsYXNtO1xuY2xhc3MgVG9uYWxaZXJvQ29tYmluaW5nIGV4dGVuZHMgVG9uYWxDb21iaW5pbmdNZXRhcGxhc20ge1xufVxuZXhwb3J0cy5Ub25hbFplcm9Db21iaW5pbmcgPSBUb25hbFplcm9Db21iaW5pbmc7XG5jbGFzcyBSZW1vdmluZ0VwZW50aGVzaXNPZkF5IGV4dGVuZHMgVG9uYWxDb21iaW5pbmdNZXRhcGxhc20ge1xuICAgIGFwcGx5VG9MZXR0ZXJzKGxldHRlcnMpIHtcbiAgICAgICAgbGV0dGVycy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gbGV0dGVycztcbiAgICB9XG4gICAgYXBwbHlUb1N0cmluZyhzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zbGljZSgxLCAyKTtcbiAgICB9XG59XG5leHBvcnRzLlJlbW92aW5nRXBlbnRoZXNpc09mQXkgPSBSZW1vdmluZ0VwZW50aGVzaXNPZkF5O1xuY2xhc3MgUmVtb3ZpbmdOYXNhbGl6YXRpb25PZkF5IGV4dGVuZHMgVG9uYWxDb21iaW5pbmdNZXRhcGxhc20ge1xufVxuZXhwb3J0cy5SZW1vdmluZ05hc2FsaXphdGlvbk9mQXkgPSBSZW1vdmluZ05hc2FsaXphdGlvbk9mQXk7XG5jbGFzcyBLYW5hQ29tYmluaW5nTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbn1cbmV4cG9ydHMuS2FuYUNvbWJpbmluZ01ldGFwbGFzbSA9IEthbmFDb21iaW5pbmdNZXRhcGxhc207XG5jbGFzcyBUb25hbEluZmxlY3Rpb25NZXRhcGxhc20gZXh0ZW5kcyBpbnRlcmZhY2VfMS5NZXRhcGxhc20ge1xuICAgIGFwcGx5KG1vcnBoZW1lcykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbEluZmxlY3Rpb25NZXRhcGxhc20gPSBUb25hbEluZmxlY3Rpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFplcm9JbmZsZWN0aW9uIGV4dGVuZHMgVG9uYWxJbmZsZWN0aW9uTWV0YXBsYXNtIHtcbn1cbmV4cG9ydHMuVG9uYWxaZXJvSW5mbGVjdGlvbiA9IFRvbmFsWmVyb0luZmxlY3Rpb247XG5jbGFzcyBUb25hbEluc2VydGlvbk1ldGFwbGFzbSBleHRlbmRzIGludGVyZmFjZV8xLk1ldGFwbGFzbSB7XG4gICAgYXBwbHkobW9ycGhlbWVzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsSW5zZXJ0aW9uTWV0YXBsYXNtID0gVG9uYWxJbnNlcnRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFVuaW5zZXJ0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShtb3JwaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluc2VydGlvbk1ldGFwbGFzbSA9IFRvbmFsVW5pbnNlcnRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFplcm9JbnNlcnRpb25NZXRhcGxhc20gZXh0ZW5kcyBUb25hbEluc2VydGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsWmVyb0luc2VydGlvbk1ldGFwbGFzbSA9IFRvbmFsWmVyb0luc2VydGlvbk1ldGFwbGFzbTtcbmNsYXNzIFRvbmFsWmVyb1VuaW5zZXJ0aW9uTWV0YXBsYXNtIGV4dGVuZHMgVG9uYWxVbmluc2VydGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsWmVyb1VuaW5zZXJ0aW9uTWV0YXBsYXNtID0gVG9uYWxaZXJvVW5pbnNlcnRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbEluZmVjdGlvbk1ldGFwbGFzbSBleHRlbmRzIGludGVyZmFjZV8xLk1ldGFwbGFzbSB7XG4gICAgYXBwbHkobW9ycGhlbWVzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsSW5mZWN0aW9uTWV0YXBsYXNtID0gVG9uYWxJbmZlY3Rpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFVuaW5mZWN0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShtb3JwaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxVbmluZmVjdGlvbk1ldGFwbGFzbSA9IFRvbmFsVW5pbmZlY3Rpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFplcm9JbmZlY3Rpb25NZXRhcGxhc20gZXh0ZW5kcyBUb25hbEluZmVjdGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsWmVyb0luZmVjdGlvbk1ldGFwbGFzbSA9IFRvbmFsWmVyb0luZmVjdGlvbk1ldGFwbGFzbTtcbmNsYXNzIFRvbmFsWmVyb1VuaW5mZWN0aW9uTWV0YXBsYXNtIGV4dGVuZHMgVG9uYWxVbmluZmVjdGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsWmVyb1VuaW5mZWN0aW9uTWV0YXBsYXNtID0gVG9uYWxaZXJvVW5pbmZlY3Rpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbE11dGF0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShtb3JwaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxNdXRhdGlvbk1ldGFwbGFzbSA9IFRvbmFsTXV0YXRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFVubXV0YXRpb25NZXRhcGxhc20gZXh0ZW5kcyBpbnRlcmZhY2VfMS5NZXRhcGxhc20ge1xuICAgIGFwcGx5KG1vcnBoZW1lcykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFVubXV0YXRpb25NZXRhcGxhc20gPSBUb25hbFVubXV0YXRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFplcm9NdXRhdGlvbk1ldGFwbGFzbSBleHRlbmRzIFRvbmFsTXV0YXRpb25NZXRhcGxhc20ge1xufVxuZXhwb3J0cy5Ub25hbFplcm9NdXRhdGlvbk1ldGFwbGFzbSA9IFRvbmFsWmVyb011dGF0aW9uTWV0YXBsYXNtO1xuY2xhc3MgVG9uYWxaZXJvVW5tdXRhdGlvbk1ldGFwbGFzbSBleHRlbmRzIFRvbmFsVW5tdXRhdGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsWmVyb1VubXV0YXRpb25NZXRhcGxhc20gPSBUb25hbFplcm9Vbm11dGF0aW9uTWV0YXBsYXNtO1xuY2xhc3MgVG9uYWxMZW1tYXRpemF0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShtb3JwaGVtZXMsIGluZmxlY3Rpb25hbEVuZGluZykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbExlbW1hdGl6YXRpb25NZXRhcGxhc20gPSBUb25hbExlbW1hdGl6YXRpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFBocmFzYWxJbmZsZWN0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShsZXhlbWVPbmUsIGxleGVtZVR3bykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFwcGx5VnBwKGxleGVtZU9uZSwgbGV4ZW1lVHdvLCBsZXhlbWVUaHJlZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzYWxJbmZsZWN0aW9uTWV0YXBsYXNtID0gVG9uYWxQaHJhc2FsSW5mbGVjdGlvbk1ldGFwbGFzbTtcbmNsYXNzIFRvbmFsUGhyYXNhbFplcm9JbmZsZWN0aW9uIGV4dGVuZHMgVG9uYWxQaHJhc2FsSW5mbGVjdGlvbk1ldGFwbGFzbSB7XG59XG5leHBvcnRzLlRvbmFsUGhyYXNhbFplcm9JbmZsZWN0aW9uID0gVG9uYWxQaHJhc2FsWmVyb0luZmxlY3Rpb247XG5jbGFzcyBUb25hbFBocmFzYWxJbnNlcnRpb25NZXRhcGxhc20gZXh0ZW5kcyBpbnRlcmZhY2VfMS5NZXRhcGxhc20ge1xuICAgIGFwcGx5KGxleGVtZU9uZSwgbGV4ZW1lVHdvKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsUGhyYXNhbEluc2VydGlvbk1ldGFwbGFzbSA9IFRvbmFsUGhyYXNhbEluc2VydGlvbk1ldGFwbGFzbTtcbmNsYXNzIFRvbmFsUGhyYXNhbFVuaW5zZXJ0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShsZXhlbWVPbmUsIGxleGVtZVR3bykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzYWxVbmluc2VydGlvbk1ldGFwbGFzbSA9IFRvbmFsUGhyYXNhbFVuaW5zZXJ0aW9uTWV0YXBsYXNtO1xuY2xhc3MgVG9uYWxQaHJhc2FsSW5mZWN0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShsZXhlbWVPbmUsIGxleGVtZVR3bykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzYWxJbmZlY3Rpb25NZXRhcGxhc20gPSBUb25hbFBocmFzYWxJbmZlY3Rpb25NZXRhcGxhc207XG5jbGFzcyBUb25hbFBocmFzYWxVbmluZmVjdGlvbk1ldGFwbGFzbSBleHRlbmRzIGludGVyZmFjZV8xLk1ldGFwbGFzbSB7XG4gICAgYXBwbHkobGV4ZW1lT25lLCBsZXhlbWVUd28pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxQaHJhc2FsVW5pbmZlY3Rpb25NZXRhcGxhc20gPSBUb25hbFBocmFzYWxVbmluZmVjdGlvbk1ldGFwbGFzbTtcbmNsYXNzIFRvbmFsUGhyYXNhbE11dGF0aW9uTWV0YXBsYXNtIGV4dGVuZHMgaW50ZXJmYWNlXzEuTWV0YXBsYXNtIHtcbiAgICBhcHBseShsZXhlbWVPbmUsIGxleGVtZVR3bykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzYWxNdXRhdGlvbk1ldGFwbGFzbSA9IFRvbmFsUGhyYXNhbE11dGF0aW9uTWV0YXBsYXNtO1xuY2xhc3MgVG9uYWxQaHJhc2FsVW5tdXRhdGlvbk1ldGFwbGFzbSBleHRlbmRzIGludGVyZmFjZV8xLk1ldGFwbGFzbSB7XG4gICAgYXBwbHkobGV4ZW1lT25lLCBsZXhlbWVUd28pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9uYWxQaHJhc2FsVW5tdXRhdGlvbk1ldGFwbGFzbSA9IFRvbmFsUGhyYXNhbFVubXV0YXRpb25NZXRhcGxhc207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhcGxhc20uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/token.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/token.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst symbols_1 = __webpack_require__(/*! ./dparser/symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst rules_1 = __webpack_require__(/*! ./dparser/rules */ \"./node_modules/taipa/lib/dparser/rules.js\");\nconst unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lemmatizer_1 = __webpack_require__(/*! ./tonal/lemmatizer */ \"./node_modules/taipa/lib/tonal/lemmatizer.js\");\nclass Token {\n    /**\n     * Constructor of Token.\n     * @param text The text of the token\n     */\n    constructor(text) {\n        this.text = text;\n        /** The simple part-of-speech tag. */\n        this.pos = ''; // upos\n        /** The detailed part-of-speech tag. */\n        this.tag = ''; // xpos\n        /** The base form of the word. */\n        this.lemma = '';\n        /** Syntactic dependnecy */\n        this.dep = ''; // deprel\n        /** The head of this token */\n        this.head = undefined;\n    }\n}\nexports.Token = Token;\nclass TokenAnalysis {\n    constructor() {\n        /** Analyzed token. */\n        this.word = new unit_1.Word();\n        /** Base forms of the word. */\n        this.lemmas = new Array();\n        /** Inflectional suffix. */\n        this.inflectionalEnding = '';\n        /** Sound sequences. */\n        this.soundSequences = new Array();\n        /** Syllabic block or syllabogram sequences. */\n        this.blockSequences = [];\n        /** Uncombining form sequences. */\n        this.uncombiningSequences = new Array(); // uncombining form sequences\n    }\n}\nexports.TokenAnalysis = TokenAnalysis;\nclass TokenLemmaLookup {\n    getTonalLemmas(doc) {\n        const sophv = new rules_1.PhrasalVerbs();\n        let j = 0;\n        let k = 0;\n        let len = 0;\n        for (let i = 0; i < doc.tokens.length; i++) {\n            if (len == i) {\n                // loop over the doc.speeches sequence\n                if (j < doc.phrases.length) {\n                    len += doc.phrases[j].elements.length;\n                    if (j + 1 < doc.phrases.length)\n                        j++;\n                    k = 0;\n                }\n            }\n            else {\n                k++;\n            }\n            if (doc.tokens[i].text === 'che' || doc.tokens[i].text === 'he') {\n                doc.tokens[i].lemma = doc.tokens[i].text;\n                continue; // defective\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.psub ||\n                doc.tokens[i].tag === symbols_1.Tagset.aux) {\n                doc.tokens[i].lemma = doc.tokens[i].text;\n                continue;\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.vb && i + 1 < doc.tokens.length) {\n                if (i + 2 < doc.tokens.length && doc.tokens[i + 2].tag === symbols_1.Tagset.ppv) {\n                    // phrasal verbs of length 3\n                    const base = sophv.match([\n                        doc.tokens[i].text,\n                        doc.tokens[i + 1].text,\n                        doc.tokens[i + 2].text,\n                    ]);\n                    if (base != '') {\n                        const lemmas = base.split(' ');\n                        doc.tokens[i].lemma = lemmas[0];\n                        doc.tokens[i + 1].lemma = lemmas[1];\n                        doc.tokens[i + 2].lemma = lemmas[2];\n                        i++;\n                    }\n                    continue;\n                }\n                else if (doc.tokens[i + 1].tag === symbols_1.Tagset.ppv ||\n                    doc.tokens[i + 1].tag === symbols_1.Tagset.appr) {\n                    // phrasal verbs of length 2\n                    const base = sophv.match([\n                        doc.tokens[i].text,\n                        doc.tokens[i + 1].text,\n                    ]);\n                    if (base != '') {\n                        const lemmas = base.split(' ');\n                        doc.tokens[i].lemma = lemmas[0];\n                        doc.tokens[i + 1].lemma = lemmas[1];\n                        i++;\n                    }\n                    continue;\n                }\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.vb) {\n                if (i + 1 < doc.tokens.length &&\n                    doc.tokens[i + 1].tag === symbols_1.Tagset.psub) {\n                    doc.tokens[i].lemma = doc.tokens[i].text; // copy the base form\n                    continue;\n                }\n            }\n            if (doc.phrases[j] && k + 1 == doc.phrases[j].elements.length) {\n                // at the end of a speech\n                // need to further check if the speech is a noun chunk or verb phrase\n                doc.tokens[i].lemma = doc.tokens[i].text; // copy the base form\n                continue;\n            }\n            let lemmas = [];\n            lemmas = lemmatizer_1.lemmatize(doc.tokens[i].text).getLemmas();\n            if (lemmas.length > 0)\n                doc.tokens[i].lemma = lemmas[0].literal;\n        }\n        return doc;\n    }\n}\nexports.TokenLemmaLookup = TokenLemmaLookup;\n//# sourceMappingURL=token.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/token.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/analyzer.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/analyzer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeTonal(str) {\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeTonal = graphAnalyzeTonal;\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalUncombiningMorphemeMaker();\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or uncombining morphemes\n     */\n    lexAnalyze(x) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x);\n        }\n        const lm = new lexeme_1.TonalLemmatizationLexemeMaker();\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2FuYWx5emVyLmpzPzEwOTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RCxpQkFBaUIsbUJBQU8sQ0FBQywwREFBVTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEMsbUJBQW1CLG1CQUFPLENBQUMsOERBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsOERBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbGV4ZW1lXzEgPSByZXF1aXJlKFwiLi9sZXhlbWVcIik7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IHZlcnNpb24yXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uMlwiKTtcbmNvbnN0IG1vcnBoZW1lXzEgPSByZXF1aXJlKFwiLi9tb3JwaGVtZVwiKTtcbi8qKlxuICogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBncmFwaGVtZXMuIEdyYXBoZW1pYyBhbmFseXNpcy5cbiAqIEBwYXJhbSBzdHIgQSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ3JhcGhBbmFseXplVG9uYWwoc3RyKSB7XG4gICAgY29uc3QgZ20gPSBuZXcgdW5pdF8xLkdyYXBoZW1lTWFrZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbCk7XG4gICAgcmV0dXJuIGdtLm1ha2VHcmFwaGVtZXMoc3RyKTtcbn1cbmV4cG9ydHMuZ3JhcGhBbmFseXplVG9uYWwgPSBncmFwaEFuYWx5emVUb25hbDtcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcyBvciBsZXhlbWUuICovXG5leHBvcnRzLnRvbmFsTGVtbWF0aXphdGlvbkFuYWx5emVyID0ge1xuICAgIC8qKlxuICAgICAqIEFuYWx5emVzIGEgc3RyaW5nIG9yIGdyYXBoZW1lcyBpbnRvIG1vcnBoZW1lcy4gTW9ycGhvbG9naWNhbCBhbmFseXNpcy5cbiAgICAgKiBAcGFyYW0geCBBIHN0cmluZyBvciBncmFwaGVtZXNcbiAgICAgKi9cbiAgICBtb3JwaEFuYWx5emUoeCkge1xuICAgICAgICBsZXQgZ3MgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBncyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdzID0gZ3JhcGhBbmFseXplVG9uYWwoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5Ub25hbFVuY29tYmluaW5nTW9ycGhlbWVNYWtlcigpO1xuICAgICAgICByZXR1cm4gbW0ubWFrZU1vcnBoZW1lcyhncyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBtb3JwaGVtZXMgaW50byBhIGxleGVtZS4gTGV4aWNhbCBhbmFseXNpcy5cbiAgICAgKiBAcGFyYW0geCBBIHN0cmluZyBvciB1bmNvbWJpbmluZyBtb3JwaGVtZXNcbiAgICAgKi9cbiAgICBsZXhBbmFseXplKHgpIHtcbiAgICAgICAgbGV0IG1zID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgbXMgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtcyA9IHRoaXMubW9ycGhBbmFseXplKHgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxtID0gbmV3IGxleGVtZV8xLlRvbmFsTGVtbWF0aXphdGlvbkxleGVtZU1ha2VyKCk7XG4gICAgICAgIHJldHVybiBsbS5tYWtlTGV4ZW1lcyhtcyk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmFseXplci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/collections.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/collections.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\n// m, n, ng\nconst nasals = [\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nexports.nasalInitials = nasals;\nexports.nasalFinals = nasals;\nexports.combiningRules = new Map()\n    .set(version2_1.TonalLetterTags.zero, [version2_1.TonalLetterTags.z])\n    .set(version2_1.TonalLetterTags.y, [version2_1.TonalLetterTags.zero, version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.y])\n    .set(version2_1.TonalLetterTags.x, [version2_1.TonalLetterTags.z, version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.z, [version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.p, [version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.t, [version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.k, [version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.h, [version2_1.TonalLetterTags.y, version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.pp, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.tt, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.kk, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.hh, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x]);\n// w, x\nexports.tonalsWx = [\n    version2_1.TonalLetterTags.w.toString(),\n    version2_1.TonalLetterTags.x.toString(),\n];\n// b, l, g, m, n\nexports.epentheticSounds = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n];\n// j, l, s\nexports.finalsJls = [\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n// b, g, k, p\nexports.finalsBgkp = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.p.toString(),\n];\n// jj, ll, ss\nexports.finalsJJllss = [\n    version2_1.TonalLetterTags.jj.toString(),\n    version2_1.TonalLetterTags.ll.toString(),\n    version2_1.TonalLetterTags.ss.toString(),\n];\n// bb, gg, kk, pp\nexports.finalsBBggkkpp = [\n    version2_1.TonalLetterTags.bb.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.pp.toString(),\n];\nexports.initialsForFinalT = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    q: version2_1.TonalLetterTags.q.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    v: version2_1.TonalLetterTags.v.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\nexports.initialsForTT = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    q: version2_1.TonalLetterTags.q.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    v: version2_1.TonalLetterTags.v.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\n// tt, t\nexports.ttInitialTInitialPairs = new Map()\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.p, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.v, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.k, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.q, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.g, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.j, version2_1.TonalLetterTags.j)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.m, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.n, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.ng, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.p, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.v, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.k, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.q, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.g, version2_1.TonalLetterTags.gg)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.b, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.j, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.s, version2_1.TonalLetterTags.ss)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.m, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.n, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.ng, version2_1.TonalLetterTags.hh);\n// b, g, h, j, l\nexports.initialsBghjl = [\n    // turn preceding finals to voiced ones\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.h.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n];\n// 8 to 1\nexports.eighthToFirst = new Map()\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.hh, version2_1.TonalLetterTags.h);\nexports.finalOfPhrasalVerbParticle = new Map()\n    .set(version2_1.TonalLetterTags.h, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.pp);\n/** Turn preceding finals to voiced ones. Unvoiced to voiced */\nexports.voicelessVoicedFinals = new Map()\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.b)\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.l)\n    .set(version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.bb)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.gg);\nexports.voicedVoicelessFinals = new Map()\n    .set(version2_1.TonalLetterTags.b, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.l, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.g, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.bb, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.ll, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.gg, version2_1.TonalLetterTags.kk);\n/** unchanged sounds for b, g, j, l, s, bb, gg, jj, ll, ss */\nexports.finalBgjlsbbggjjllss = new Map()\n    .set(version2_1.TonalLetterTags.b, [version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.g, [version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.j, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.l, [version2_1.TonalLetterTags.l, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.s, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.bb, [version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.gg, [version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.jj, [version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ll, [version2_1.TonalLetterTags.ll, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ss, [version2_1.TonalLetterTags.tt]);\nexports.fourthFinals = [\n    version2_1.TonalLetterTags.p.toString(),\n    version2_1.TonalLetterTags.t.toString(),\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.h.toString(),\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/collections.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/init.js":
/*!**********************************************!*\
  !*** ./node_modules/taipa/lib/tonal/init.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst kana_1 = __webpack_require__(/*! ../kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction checkNumberOfLetterTonal() {\n    if (version2_1.tonalPositionalSounds.size !== version2_1.lowerLettersTonal.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLetterTonal = checkNumberOfLetterTonal;\nconst combiningOverline = '\\u0305';\nconst combiningDotBelow = '\\u0323';\nfunction handleCombiningDotBelowOverline(initial, medial) {\n    const got = kanaInitials(mappingInitial.get(initial))(medial);\n    if (got && got[0]) {\n        if (initialWithCombiningDotBelow.aspirated.includes(initial)) {\n            if (initialWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline + combiningDotBelow;\n            }\n            return got[0] + combiningDotBelow;\n        }\n        else if (initialWithCombiningDotBelow.withoutADotOrOverline.includes(initial)) {\n            return got[0];\n        }\n        else if (initialWithCombiningDotBelow.withOverline.includes(initial)) {\n            if (initialWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline;\n            }\n            return got[0];\n        }\n    }\n    return '';\n}\nfunction handleToneSymbolForFourthEighth(kanas, sounds, i) {\n    if (sounds[sounds.length - 1].name != version2_1.TonalSoundTags.checkedTonal) {\n        // 4th tone and 8th tone\n        const mapped = mappingSymbolForTones.get(sounds[i].toString());\n        if (mapped) {\n            kanas += mapped[0];\n        }\n    }\n    return kanas;\n}\nfunction insertIReplaceWithSmall(kanas, sounds, i) {\n    if (sounds[i - 1].name === version2_1.TonalSoundTags.medial) {\n        if (sounds[0].toString() === version2_1.TonalLetterTags.e) {\n            // insert kana for i before kana for e\n            const got = kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.i);\n            if (got) {\n                kanas = got[1] + kanas;\n            }\n        }\n    }\n    if (kanas.length > 1) {\n        // replace the kana before the final with a smaller one\n        const medials = sounds.filter(i => i.name === version2_1.TonalSoundTags.medial);\n        if ((medials.length > 0 && medials[0].toString() === version2_1.TonalLetterTags.e) ||\n            medials.length > 1) {\n            kanas = replaceWithSmall(kanas, sounds, i);\n        }\n        else if (medials.length > 0 &&\n            medials[0].toString() === version2_1.TonalLetterTags.ir &&\n            sounds[0].name === version2_1.TonalSoundTags.initial) {\n            kanas = replaceWithSmall(kanas, sounds, i);\n        }\n    }\n    return kanas;\n}\nfunction replicateVowel(kanas, sounds, i, replica) {\n    if ((i == 0 &&\n        sounds[0].name === version2_1.TonalSoundTags.medial &&\n        (sounds.length == 1 ||\n            (sounds.length == 2 &&\n                sounds[sounds.length - 1].name === version2_1.TonalSoundTags.freeTonal) ||\n            sounds[sounds.length - 1].name === version2_1.TonalSoundTags.nasalization)) ||\n        (sounds.length == 3 &&\n            sounds[sounds.length - 2].name === version2_1.TonalSoundTags.nasalization &&\n            sounds[sounds.length - 1].name === version2_1.TonalSoundTags.freeTonal) ||\n        (sounds.length == 2 &&\n            sounds[0].name === version2_1.TonalSoundTags.medial &&\n            (sounds[1].toString() === version2_1.TonalLetterTags.h ||\n                sounds[1].toString() === version2_1.TonalLetterTags.hh)) ||\n        (sounds.length == 3 &&\n            sounds[0].name === version2_1.TonalSoundTags.medial &&\n            (sounds[1].toString() === version2_1.TonalLetterTags.h ||\n                sounds[1].toString() === version2_1.TonalLetterTags.hh) &&\n            sounds[2].name === version2_1.TonalSoundTags.checkedTonal)) {\n        // reduplicate the vowel for open syllables without an initial\n        // in case of a, e, ax, ex.\n        // in case of enn, ennx\n        // in case of ah, ehh\n        // in case of ahy\n        kanas = kanas + replica;\n    }\n    return kanas;\n}\nfunction replaceWithSmall(kanas, sounds, i) {\n    if (smallFormIRor.includes(sounds[i - 1].toString())) {\n        // an extra vowel is already been appended to the initial kana\n        // when there is an initial and followed by a vowel, an or kana should be replaced with a small form\n        const mapped = mappingMedialSmallForm.get(sounds[i - 1].toString());\n        if (mapped) {\n            const sliced = kanas.slice(0, kanas.length - 2);\n            kanas = sliced + mapped[1] + combiningOverline;\n        }\n    }\n    else {\n        const sliced = kanas.slice(0, kanas.length - 1);\n        // replace the middle medial with a small form.\n        const got = kana_1.otherKanas.get(sounds[i - 1].toString());\n        if (got) {\n            kanas = sliced + got[1];\n        }\n    }\n    return kanas;\n}\nfunction lookup(morphemes) {\n    let seqs = [];\n    let kanas = '';\n    let checkedKanasWithoutBullet = '';\n    let idxNasalization = 0;\n    for (const mr of morphemes) {\n        for (let i = 0; i < mr.sounds.length; i++) {\n            if (i == 0 &&\n                mr.sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization).length > 0) {\n                idxNasalization = kanas.length; // beginning of the nasalized syllable\n            }\n            if (mr.sounds[i].name === version2_1.TonalSoundTags.initial) {\n                const initials = kanaInitials(mappingInitial.get(mr.sounds[i].toString()))();\n                initials.map(it => seqs.push(it));\n            }\n            else if (mr.sounds[i].name === version2_1.TonalSoundTags.medial) {\n                if (mr.sounds[0].name === version2_1.TonalSoundTags.initial) {\n                    // remove all of the initials previously populated with kanaInitials\n                    seqs = [];\n                    if (mr.sounds[i].toString() === version2_1.TonalLetterTags.or ||\n                        mr.sounds[i].toString() === version2_1.TonalLetterTags.ir) {\n                        const mapped = mappingMedial.get(mr.sounds[i].toString());\n                        if (mapped) {\n                            kanas +=\n                                handleCombiningDotBelowOverline(mr.sounds[0].toString(), mr.sounds[i].toString()) +\n                                    mapped[1] +\n                                    combiningOverline;\n                        }\n                    }\n                    else if (mr.sounds[i].toString() === version2_1.TonalLetterTags.ur) {\n                        const mapped = mappingMedial.get(mr.sounds[i].toString());\n                        if (mapped && mr.sounds[i - 1].name == version2_1.TonalSoundTags.initial) {\n                            // if the preceding letter is an initial\n                            kanas +=\n                                handleCombiningDotBelowOverline(mr.sounds[0].toString(), mr.sounds[i].toString()) + mapped[1];\n                        }\n                        else if (mapped) {\n                            // if the preceding letter is not an initial\n                            const mapped = mappingMedial.get(mr.sounds[i].toString());\n                            if (mapped) {\n                                kanas += mapped[1];\n                            }\n                        }\n                    }\n                    else {\n                        if (i > 1) {\n                            const got = kana_1.hiraganaKatakana.get(mr.sounds[i].toString());\n                            if (got) {\n                                if (i > 2 &&\n                                    mr.sounds[i - 1].name === version2_1.TonalSoundTags.medial &&\n                                    mr.sounds[i - 2].name === version2_1.TonalSoundTags.medial) {\n                                    kanas = replaceWithSmall(kanas, mr.sounds, i);\n                                }\n                                else if (i > 1 &&\n                                    mr.sounds[i].name === version2_1.TonalSoundTags.medial &&\n                                    mr.sounds[i - 1].name === version2_1.TonalSoundTags.medial &&\n                                    mr.sounds[i - 2].name === version2_1.TonalSoundTags.initial &&\n                                    smallFormIRor.includes(mr.sounds[i - 1].toString())) {\n                                    kanas = replaceWithSmall(kanas, mr.sounds, i);\n                                }\n                                kanas = kanas + got[1];\n                            }\n                        }\n                        else {\n                            const nasalizations = mr.sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization);\n                            const finals = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinal ||\n                                it.name === version2_1.TonalSoundTags.stopFinal);\n                            if (mr.sounds[i].toString() === version2_1.TonalLetterTags.e &&\n                                finals.length > 0 &&\n                                nasalizations.length == 0) {\n                                const finalsForEToKanaIE = mr.sounds.filter(i => (i.name === version2_1.TonalSoundTags.stopFinal &&\n                                    finalsForEKegekkeggeng.includes(i.toString())) ||\n                                    (i.name === version2_1.TonalSoundTags.nasalFinal &&\n                                        finalsForEKegekkeggeng.includes(i.toString())));\n                                if (finalsForEToKanaIE.length > 0) {\n                                    // if there is a final, e should be replaced with i for retrieving initial kana\n                                    // in the case of ~eng or -ek\n                                    kanas += handleCombiningDotBelowOverline(mr.sounds[0].toString(), version2_1.TonalLetterTags.i);\n                                    if (mr.sounds[i].toString() === version2_1.TonalLetterTags.e) {\n                                        // for letter e, an extra kana small e is appended to the preceding -i\n                                        const got = kana_1.otherKanas.get(mr.sounds[i].toString());\n                                        if (got) {\n                                            kanas += got[1];\n                                        }\n                                    }\n                                }\n                                else {\n                                    // e.g. qen, qet, chet, gehh, etc. syllables with an e and do not end with -k, -kk, or -ng\n                                    kanas += handleCombiningDotBelowOverline(mr.sounds[0].toString(), mr.sounds[i].toString());\n                                    const got = kana_1.hiraganaKatakana.get(mr.sounds[i].toString());\n                                    if (got && got[1]) {\n                                        // replicate the vowel and append it\n                                        kanas += got[1];\n                                    }\n                                }\n                            }\n                            else {\n                                kanas += handleCombiningDotBelowOverline(mr.sounds[0].toString(), mr.sounds[i].toString());\n                                const stopFinalsExceptForHHh = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.stopFinal &&\n                                    stopFinalsPPttkkbbggjjllssptkbgjls.includes(it.toString()));\n                                const nasalFinals = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinal);\n                                const medials = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.medial);\n                                if (stopFinalsExceptForHHh.length == 0 &&\n                                    nasalFinals.length == 0 &&\n                                    medials.length == 1) {\n                                    // open syllables with an initial, except for ~h, ~hh\n                                    const got = kana_1.hiraganaKatakana.get(mr.sounds[i].toString());\n                                    if (got && got[1]) {\n                                        // replicate the vowel and append it\n                                        kanas += got[1];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (i > 1 &&\n                        mr.sounds[i].name === version2_1.TonalSoundTags.medial &&\n                        mr.sounds[i - 1].name === version2_1.TonalSoundTags.medial &&\n                        mr.sounds[i - 2].name === version2_1.TonalSoundTags.medial) {\n                        // replace the middle medial with a small kana\n                        kanas = replaceWithSmall(kanas, mr.sounds, i);\n                    }\n                    let got;\n                    if (mr.sounds[i].toString() === version2_1.TonalLetterTags.o &&\n                        i == 0 &&\n                        mr.sounds.length > 1 &&\n                        mr.sounds[i + 1].name === version2_1.TonalSoundTags.medial) {\n                        // map o to wo\n                        got = kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o);\n                    }\n                    else {\n                        // map o to o\n                        got = kana_1.hiraganaKatakana.get(mr.sounds[i].toString());\n                    }\n                    if (got) {\n                        kanas = kanas + got[1];\n                        kanas = replicateVowel(kanas, mr.sounds, i, got[1]);\n                    }\n                    else {\n                        if (mr.sounds[i].toString() === version2_1.TonalLetterTags.or ||\n                            mr.sounds[i].toString() === version2_1.TonalLetterTags.ir) {\n                            const mapped = mappingMedial.get(mr.sounds[i].toString());\n                            if (mapped) {\n                                kanas += mapped[1] + combiningOverline;\n                                kanas = replicateVowel(kanas, mr.sounds, i, mapped[1] + combiningOverline);\n                            }\n                        }\n                        else if (mr.sounds[i].toString() === version2_1.TonalLetterTags.ur ||\n                            mr.sounds[i].toString() === version2_1.TonalLetterTags.er) {\n                            const mapped = mappingMedial.get(mr.sounds[i].toString());\n                            if (mapped) {\n                                kanas += mapped[1];\n                                kanas = replicateVowel(kanas, mr.sounds, i, mapped[1]);\n                            }\n                        }\n                        else if (version2_1.materLectionisSounds.includes(mr.sounds[i].toString())) {\n                            // mater lectionis: m, n, ng.\n                            const mapped = mappingMedial.get(mr.sounds[i].toString());\n                            if (mapped) {\n                                kanas += mapped[1];\n                            }\n                        }\n                    }\n                }\n            }\n            else if (mr.sounds[i].name === version2_1.TonalSoundTags.nasalization) {\n                const slicedHead = kanas.slice(0, idxNasalization);\n                const slicedTail = kanas.slice(idxNasalization + 1, kanas.length);\n                if (mr.sounds[0].name === version2_1.TonalSoundTags.initial) {\n                    const got = mappingNasalization.get(mr.sounds[0].toString() + mr.sounds[1].toString());\n                    if (got)\n                        kanas = slicedHead + got + slicedTail;\n                }\n                else {\n                    const got = mappingNasalization.get(mr.sounds[0].toString());\n                    if (got)\n                        kanas = slicedHead + got + slicedTail;\n                }\n            }\n            else if (mr.sounds[i].name === version2_1.TonalSoundTags.freeTonal ||\n                mr.sounds[i].name === version2_1.TonalSoundTags.checkedTonal) {\n                kanas += mappingSymbolForTones.get(mr.sounds[i].toString());\n            }\n            else if (mr.sounds[i].name === version2_1.TonalSoundTags.stopFinal) {\n                // syllable finals\n                kanas = insertIReplaceWithSmall(kanas, mr.sounds, i);\n                const mappedFinal = mappingStopFinal.get(mr.sounds[i].toString());\n                if (mappedFinal && mappedFinal[1]) {\n                    // stop finals p, t, k, pp, tt, kk\n                    kanas += mappedFinal[1];\n                    if (collections_1.fourthFinals.includes(mr.sounds[i].toString())) {\n                        checkedKanasWithoutBullet = kanas;\n                    }\n                    kanas = handleToneSymbolForFourthEighth(kanas, mr.sounds, i);\n                }\n                else {\n                    // stop final h, hh\n                    const sliced = kanas.slice(0, kanas.length - 1);\n                    const medials = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.medial);\n                    const nasalFinals = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinal);\n                    if (medials.length > 0) {\n                        let mapped;\n                        if (nasalFinals.length == 0) {\n                            mapped = mappingMedialSmallForm.get(medials[medials.length - 1].toString());\n                        }\n                        else if (mr.sounds[mr.sounds.length - 2].name === version2_1.TonalSoundTags.nasalFinal) {\n                            // in case of vowel + ngh. e.g. sangh, langh\n                            mapped = mappingMedialSmallForm.get(mr.sounds[mr.sounds.length - 2].toString());\n                        }\n                        else if (mr.sounds[mr.sounds.length - 3].name === version2_1.TonalSoundTags.nasalFinal) {\n                            // in case of mhf, nhf, nghf, mhhw, nhhw, nghhw\n                            mapped = mappingMedialSmallForm.get(mr.sounds[mr.sounds.length - 3].toString());\n                        }\n                        if (mapped) {\n                            if (mr.sounds[0].name === version2_1.TonalSoundTags.initial) {\n                                // except for ngh which has no initials. the same for mhf, nhf, nghf, mhhw, nhhw, nghhw.\n                                kanas = sliced + mapped[1];\n                            }\n                        }\n                    }\n                    else if (medials.length == 0) {\n                        const nasalFinals = mr.sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinal);\n                        if (nasalFinals.length > 0) {\n                            const mapped = mappingMedialSmallForm.get(nasalFinals[0].toString());\n                            if (mapped) {\n                                kanas = sliced + mapped[1];\n                            }\n                        }\n                    }\n                    if (collections_1.fourthFinals.includes(mr.sounds[i].toString())) {\n                        if (!(mr.sounds[0].toString() === version2_1.TonalLetterTags.ng &&\n                            mr.sounds[1].toString() === version2_1.TonalLetterTags.h)) {\n                            // except for ngh\n                            checkedKanasWithoutBullet = kanas;\n                        }\n                    }\n                    kanas = handleToneSymbolForFourthEighth(kanas, mr.sounds, i);\n                }\n            }\n            else if (mr.sounds[i].name === version2_1.TonalSoundTags.nasalFinal) {\n                // syllable finals\n                if (i == 1 && mr.sounds[0].name === version2_1.TonalSoundTags.initial) {\n                    // remove all of the initials previously populated with kanaInitials\n                    seqs = [];\n                    const got = kanaInitials(mappingInitial.get(mr.sounds[0].toString()))(version2_1.TonalLetterTags.ng);\n                    if (got && got[0]) {\n                        kanas += handleCombiningDotBelowOverline(mr.sounds[0].toString(), mr.sounds[i].toString());\n                    }\n                }\n                kanas = insertIReplaceWithSmall(kanas, mr.sounds, i);\n                const got = mappingNasalFinal.get(mr.sounds[i].toString());\n                if (got && got[1])\n                    kanas += got[1];\n            }\n        }\n    }\n    seqs.push(kanas);\n    if (checkedKanasWithoutBullet.length > 0 && morphemes.length == 1)\n        seqs.push(checkedKanasWithoutBullet);\n    return seqs;\n}\n/** Get Taiwanese Kana blocks. */\nfunction getTaiKanaBlocks(morphemes) {\n    const kanaSequences = lookup(morphemes);\n    return kanaSequences;\n}\nexports.getTaiKanaBlocks = getTaiKanaBlocks;\nconst kanaInitials = function (map) {\n    return function (following) {\n        if (following) {\n            if (map && map.has(following)) {\n                const got = map.get(following);\n                if (got && got[1]) {\n                    return [got[1]];\n                }\n            }\n        }\n        else {\n            if (map) {\n                /*\n                const kanas = Array.from(map.values());\n                const dupes = Array.from(kanas.map(it => (it ? it[1] : '')));\n                const dedupes = dupes.reduce(function (\n                  accumulator: string[],\n                  curr: string\n                ) {\n                  if (accumulator.filter(it => it === curr).length == 0) {\n                    accumulator.push(curr);\n                  }\n                  return accumulator;\n                },\n                []);\n                return dedupes;\n                */\n            }\n        }\n        return [];\n    };\n};\nconst initialWithCombiningOverline = [\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.or.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.ur.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.ir.toString(),\n];\nconst initialWithCombiningDotBelow = {\n    // whether the dot should be combined\n    aspirated: [\n        // with a dot\n        version2_1.TonalLetterTags.k.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.p.toString(),\n        version2_1.TonalLetterTags.t.toString(),\n    ],\n    withoutADotOrOverline: [\n        version2_1.TonalLetterTags.q.toString(),\n        version2_1.TonalLetterTags.g.toString(),\n        version2_1.TonalLetterTags.b.toString(),\n        version2_1.TonalLetterTags.v.toString(),\n        version2_1.TonalLetterTags.j.toString(),\n        version2_1.TonalLetterTags.l.toString(),\n        version2_1.TonalLetterTags.h.toString(),\n        version2_1.TonalLetterTags.s.toString(),\n        version2_1.TonalLetterTags.m.toString(),\n        version2_1.TonalLetterTags.n.toString(),\n        version2_1.TonalLetterTags.ng.toString(),\n    ],\n    withOverline: [\n        version2_1.TonalLetterTags.ch.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.d.toString(),\n    ],\n};\n// includes mater lectionis\nconst mappingMedial = new Map()\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.er, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst smallFormIRor = [\n    version2_1.TonalLetterTags.ir.toString(),\n    version2_1.TonalLetterTags.or.toString(),\n];\nconst stopFinalsPPttkkbbggjjllssptkbgjls = [\n    version2_1.TonalLetterTags.p.toString(),\n    version2_1.TonalLetterTags.t.toString(),\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.pp.toString(),\n    version2_1.TonalLetterTags.tt.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n    version2_1.TonalLetterTags.bb.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.jj.toString(),\n    version2_1.TonalLetterTags.ll.toString(),\n    version2_1.TonalLetterTags.ss.toString(),\n];\nconst mappingMedialSmallForm = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.otherKanas.get(kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.otherKanas.get(kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.otherKanas.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.or, kana_1.otherKanas.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.otherKanas.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.otherKanas.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.otherKanas.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.otherKanas.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.otherKanas.get(kana_1.KanaLetterTags.n));\nconst mappingSymbolForTones = new Map()\n    .set(version2_1.TonalLetterTags.f, '⍭') // apl functional symbol stile tilde (U+236D)\n    .set(version2_1.TonalLetterTags.y, '⎛') // left parenthesis upper hook (U+239B)\n    .set(version2_1.TonalLetterTags.w, '⎝') // left parenthesis lower hook (U+239D)\n    .set(version2_1.TonalLetterTags.x, '⟨') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.zx, '⟩') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.z, '⎸') // left vertical box line (U+23B8)\n    .set(version2_1.TonalLetterTags.xx, '⫽') // double solidus operator (U+2AFD)\n    .set(version2_1.TonalLetterTags.p, '⤆') // leftwards double arrow from bar (U+2906)\n    .set(version2_1.TonalLetterTags.t, '⤆')\n    .set(version2_1.TonalLetterTags.k, '⤆')\n    .set(version2_1.TonalLetterTags.h, '⤆')\n    .set(version2_1.TonalLetterTags.b, '⤆')\n    .set(version2_1.TonalLetterTags.g, '⤆')\n    .set(version2_1.TonalLetterTags.j, '⤆')\n    .set(version2_1.TonalLetterTags.l, '⤆')\n    .set(version2_1.TonalLetterTags.s, '⤆')\n    .set(version2_1.TonalLetterTags.pp, '⤇') // rightwards double arrow from bar (U+2907)\n    .set(version2_1.TonalLetterTags.tt, '⤇')\n    .set(version2_1.TonalLetterTags.kk, '⤇')\n    .set(version2_1.TonalLetterTags.hh, '⤇')\n    .set(version2_1.TonalLetterTags.bb, '⤇')\n    .set(version2_1.TonalLetterTags.gg, '⤇')\n    .set(version2_1.TonalLetterTags.jj, '⤇')\n    .set(version2_1.TonalLetterTags.ll, '⤇')\n    .set(version2_1.TonalLetterTags.ss, '⤇');\nconst mappingStopFinal = new Map()\n    .set(version2_1.TonalLetterTags.p, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.t, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.k, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.b, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.g, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.j, kana_1.otherKanas.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.l, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.s, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.pp, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.tt, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.kk, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.bb, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.gg, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ll, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ss, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingNasalization = new Map()\n    .set(version2_1.TonalLetterTags.a, '㋐')\n    .set(version2_1.TonalLetterTags.i, '㋑')\n    .set(version2_1.TonalLetterTags.u, '㋒')\n    .set(version2_1.TonalLetterTags.e, '㋓')\n    .set(version2_1.TonalLetterTags.o, '㋔')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.i, '㋛')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}')\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}')\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}')\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.a, '㋩')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.i, '㋪')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.e, '㋬')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.o, '㋭')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}') // ㋩゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}') // ㋪゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}') // ㋬゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}'); // ㋭゚\nconst finalsForEKegekkeggeng = [\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nconst mappingNasalFinal = new Map()\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst mappingInitialB = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o));\nconst mappingInitialC = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u));\nconst mappingInitialG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o));\nconst mappingInitialH = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o));\nconst mappingInitialJ = new Map()\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u));\nconst mappingInitialK = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u));\nconst mappingInitialL = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o));\nconst mappingInitialM = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u));\nconst mappingInitialN = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u));\nconst mappingInitialNG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.o));\nconst mappingInitialP = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o));\nconst mappingInitialS = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingInitialT = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o));\nconst mappingInitial = new Map()\n    .set(version2_1.TonalLetterTags.b, mappingInitialB)\n    .set(version2_1.TonalLetterTags.c, mappingInitialC)\n    .set(version2_1.TonalLetterTags.ch, mappingInitialC)\n    .set(version2_1.TonalLetterTags.d, mappingInitialT)\n    .set(version2_1.TonalLetterTags.g, mappingInitialG)\n    .set(version2_1.TonalLetterTags.h, mappingInitialH)\n    .set(version2_1.TonalLetterTags.j, mappingInitialJ)\n    .set(version2_1.TonalLetterTags.k, mappingInitialK)\n    .set(version2_1.TonalLetterTags.l, mappingInitialL)\n    .set(version2_1.TonalLetterTags.m, mappingInitialM)\n    .set(version2_1.TonalLetterTags.n, mappingInitialN)\n    .set(version2_1.TonalLetterTags.ng, mappingInitialNG)\n    .set(version2_1.TonalLetterTags.p, mappingInitialP)\n    .set(version2_1.TonalLetterTags.q, mappingInitialK)\n    .set(version2_1.TonalLetterTags.s, mappingInitialS)\n    .set(version2_1.TonalLetterTags.t, mappingInitialT)\n    .set(version2_1.TonalLetterTags.v, mappingInitialP);\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lemmatizer.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lemmatizer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\n/**\n * Lemmatizes a word.\n * @param word A word to be lemmatized.\n */\nfunction lemmatize(word) {\n    const mrphs = analyzer_1.tonalLemmatizationAnalyzer.morphAnalyze(word);\n    const lx = analyzer_1.tonalLemmatizationAnalyzer.lexAnalyze(mrphs);\n    return lx;\n}\nexports.lemmatize = lemmatize;\n//# sourceMappingURL=lemmatizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2xlbW1hdGl6ZXIuanM/NDU0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2xlbW1hdGl6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi9hbmFseXplclwiKTtcbi8qKlxuICogTGVtbWF0aXplcyBhIHdvcmQuXG4gKiBAcGFyYW0gd29yZCBBIHdvcmQgdG8gYmUgbGVtbWF0aXplZC5cbiAqL1xuZnVuY3Rpb24gbGVtbWF0aXplKHdvcmQpIHtcbiAgICBjb25zdCBtcnBocyA9IGFuYWx5emVyXzEudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIubW9ycGhBbmFseXplKHdvcmQpO1xuICAgIGNvbnN0IGx4ID0gYW5hbHl6ZXJfMS50b25hbExlbW1hdGl6YXRpb25BbmFseXplci5sZXhBbmFseXplKG1ycGhzKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLmxlbW1hdGl6ZSA9IGxlbW1hdGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbW1hdGl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lemmatizer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lexeme.js":
/*!************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lexeme.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst version2_2 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/tonal/metaplasm.js\");\nclass Ending {\n}\nclass InflectionalEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.affix = new version2_2.TonalAffix(); // the affix of this word\n    }\n    toString() {\n        return this.affix.toString();\n    }\n}\nexports.InflectionalEnding = InflectionalEnding;\nclass FreeInflectionalEnding extends InflectionalEnding {\n}\nexports.FreeInflectionalEnding = FreeInflectionalEnding;\nclass CheckedInflectionalEnding extends InflectionalEnding {\n}\nexports.CheckedInflectionalEnding = CheckedInflectionalEnding;\nclass AllomorphicEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.allomorph = new version2_1.Allomorph();\n    }\n    toString() {\n        return this.allomorph.toString();\n    }\n}\nexports.AllomorphicEnding = AllomorphicEnding;\nclass FreeAllomorphicEnding extends AllomorphicEnding {\n}\nexports.FreeAllomorphicEnding = FreeAllomorphicEnding;\nclass CheckedAllomorphicEnding extends AllomorphicEnding {\n}\nexports.CheckedAllomorphicEnding = CheckedAllomorphicEnding;\n/** A word made of syllables. */\nclass TonalWord extends unit_1.Word {\n    constructor(syllables) {\n        super();\n        this.syllables = new Array();\n        if (syllables != undefined) {\n            this.syllables = syllables;\n            this.concat();\n        }\n    }\n    popSyllable() {\n        this.syllables = this.syllables.slice(0, this.syllables.length - 1);\n        this.concat();\n    }\n    pushSyllable(syllable) {\n        this.syllables.push(syllable);\n        this.concat();\n    }\n    shiftSyllable() {\n        const syl = this.syllables.shift();\n        this.concat();\n        return syl;\n    }\n    unshiftSyllable(syllable) {\n        const num = this.syllables.unshift(syllable);\n        this.concat();\n        return num;\n    }\n    replaceSyllable(i, syllable) {\n        if (i < this.syllables.length) {\n            this.syllables.splice(i, 1, syllable);\n        }\n        this.concat();\n    }\n    concat() {\n        this.literal = this.syllables.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.TonalWord = TonalWord;\n/** A word and its lemmas/base forms. */\nclass TonalLemmatizationLexeme extends unit_1.Lexeme {\n    constructor(morphemes, metaplasm) {\n        super();\n        this.lemmata = new Array(); // lexical forms. underlying forms\n        if (morphemes.length == 0)\n            this.word = new TonalWord([]);\n        else\n            this.word = new TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1].allomorph) {\n                this.inflectionalEnding = this.assignInflectionalEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                this.inflectionalEnding = new InflectionalEnding();\n            }\n        }\n        else {\n            this.inflectionalEnding = new InflectionalEnding();\n        }\n        if (morphemes.length > 0)\n            this.lemmata = metaplasm.apply(morphemes, this.inflectionalEnding);\n    }\n    getLemmas() {\n        // this must be called after populateLemmata is called\n        return this.lemmata;\n    }\n    getInflectionalEnding() {\n        if (this.inflectionalEnding)\n            return this.inflectionalEnding.toString();\n        return '';\n    }\n    assignInflectionalEnding(allomorph) {\n        let infe = new InflectionalEnding();\n        // change allomorph to affix\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            let fie = new FreeInflectionalEnding();\n            fie.affix.tonal = allomorph.tonal;\n            infe = fie;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            let cie = new CheckedInflectionalEnding();\n            cie.affix.tonal = allomorph.tonal;\n            infe = cie;\n        }\n        // this word is already in base form, and its last syllable is checked tone\n        return infe;\n    }\n}\nexports.TonalLemmatizationLexeme = TonalLemmatizationLexeme;\nclass TonalLemmatizationLexemeMaker extends unit_1.LexemeMaker {\n    constructor() {\n        super();\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        let isInflStemWithX = false; // inflectional stem with x in the middle\n        return new TonalLemmatizationLexeme(morphemes, new metaplasm_1.TonalLemmatization());\n    }\n}\nexports.TonalLemmatizationLexemeMaker = TonalLemmatizationLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2xleGVtZS5qcz9mOTljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLGdFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2xleGVtZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCB2ZXJzaW9uMl8xID0gcmVxdWlyZShcIi4vdmVyc2lvbjJcIik7XG5jb25zdCB2ZXJzaW9uMl8yID0gcmVxdWlyZShcIi4vdmVyc2lvbjJcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbmNsYXNzIEVuZGluZyB7XG59XG5jbGFzcyBJbmZsZWN0aW9uYWxFbmRpbmcgZXh0ZW5kcyBFbmRpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmFmZml4ID0gbmV3IHZlcnNpb24yXzIuVG9uYWxBZmZpeCgpOyAvLyB0aGUgYWZmaXggb2YgdGhpcyB3b3JkXG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZmZpeC50b1N0cmluZygpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5mbGVjdGlvbmFsRW5kaW5nID0gSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgRnJlZUluZmxlY3Rpb25hbEVuZGluZyBleHRlbmRzIEluZmxlY3Rpb25hbEVuZGluZyB7XG59XG5leHBvcnRzLkZyZWVJbmZsZWN0aW9uYWxFbmRpbmcgPSBGcmVlSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgQ2hlY2tlZEluZmxlY3Rpb25hbEVuZGluZyBleHRlbmRzIEluZmxlY3Rpb25hbEVuZGluZyB7XG59XG5leHBvcnRzLkNoZWNrZWRJbmZsZWN0aW9uYWxFbmRpbmcgPSBDaGVja2VkSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgQWxsb21vcnBoaWNFbmRpbmcgZXh0ZW5kcyBFbmRpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmFsbG9tb3JwaCA9IG5ldyB2ZXJzaW9uMl8xLkFsbG9tb3JwaCgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsb21vcnBoLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuZXhwb3J0cy5BbGxvbW9ycGhpY0VuZGluZyA9IEFsbG9tb3JwaGljRW5kaW5nO1xuY2xhc3MgRnJlZUFsbG9tb3JwaGljRW5kaW5nIGV4dGVuZHMgQWxsb21vcnBoaWNFbmRpbmcge1xufVxuZXhwb3J0cy5GcmVlQWxsb21vcnBoaWNFbmRpbmcgPSBGcmVlQWxsb21vcnBoaWNFbmRpbmc7XG5jbGFzcyBDaGVja2VkQWxsb21vcnBoaWNFbmRpbmcgZXh0ZW5kcyBBbGxvbW9ycGhpY0VuZGluZyB7XG59XG5leHBvcnRzLkNoZWNrZWRBbGxvbW9ycGhpY0VuZGluZyA9IENoZWNrZWRBbGxvbW9ycGhpY0VuZGluZztcbi8qKiBBIHdvcmQgbWFkZSBvZiBzeWxsYWJsZXMuICovXG5jbGFzcyBUb25hbFdvcmQgZXh0ZW5kcyB1bml0XzEuV29yZCB7XG4gICAgY29uc3RydWN0b3Ioc3lsbGFibGVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3lsbGFibGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGlmIChzeWxsYWJsZXMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bGxhYmxlcyA9IHN5bGxhYmxlcztcbiAgICAgICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9wU3lsbGFibGUoKSB7XG4gICAgICAgIHRoaXMuc3lsbGFibGVzID0gdGhpcy5zeWxsYWJsZXMuc2xpY2UoMCwgdGhpcy5zeWxsYWJsZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgfVxuICAgIHB1c2hTeWxsYWJsZShzeWxsYWJsZSkge1xuICAgICAgICB0aGlzLnN5bGxhYmxlcy5wdXNoKHN5bGxhYmxlKTtcbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICB9XG4gICAgc2hpZnRTeWxsYWJsZSgpIHtcbiAgICAgICAgY29uc3Qgc3lsID0gdGhpcy5zeWxsYWJsZXMuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICAgICAgcmV0dXJuIHN5bDtcbiAgICB9XG4gICAgdW5zaGlmdFN5bGxhYmxlKHN5bGxhYmxlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IHRoaXMuc3lsbGFibGVzLnVuc2hpZnQoc3lsbGFibGUpO1xuICAgICAgICB0aGlzLmNvbmNhdCgpO1xuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICByZXBsYWNlU3lsbGFibGUoaSwgc3lsbGFibGUpIHtcbiAgICAgICAgaWYgKGkgPCB0aGlzLnN5bGxhYmxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3lsbGFibGVzLnNwbGljZShpLCAxLCBzeWxsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICB9XG4gICAgY29uY2F0KCkge1xuICAgICAgICB0aGlzLmxpdGVyYWwgPSB0aGlzLnN5bGxhYmxlcy5tYXAoeCA9PiAoeCA/IHgubGl0ZXJhbCA6ICcnKSkuam9pbignJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFdvcmQgPSBUb25hbFdvcmQ7XG4vKiogQSB3b3JkIGFuZCBpdHMgbGVtbWFzL2Jhc2UgZm9ybXMuICovXG5jbGFzcyBUb25hbExlbW1hdGl6YXRpb25MZXhlbWUgZXh0ZW5kcyB1bml0XzEuTGV4ZW1lIHtcbiAgICBjb25zdHJ1Y3Rvcihtb3JwaGVtZXMsIG1ldGFwbGFzbSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxlbW1hdGEgPSBuZXcgQXJyYXkoKTsgLy8gbGV4aWNhbCBmb3Jtcy4gdW5kZXJseWluZyBmb3Jtc1xuICAgICAgICBpZiAobW9ycGhlbWVzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgdGhpcy53b3JkID0gbmV3IFRvbmFsV29yZChbXSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMud29yZCA9IG5ldyBUb25hbFdvcmQobW9ycGhlbWVzLm1hcCh4ID0+IHguc3lsbGFibGUpKTtcbiAgICAgICAgaWYgKG1vcnBoZW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAobW9ycGhlbWVzW21vcnBoZW1lcy5sZW5ndGggLSAxXS5hbGxvbW9ycGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZmxlY3Rpb25hbEVuZGluZyA9IHRoaXMuYXNzaWduSW5mbGVjdGlvbmFsRW5kaW5nKG1vcnBoZW1lc1ttb3JwaGVtZXMubGVuZ3RoIC0gMV0uYWxsb21vcnBoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5mbGVjdGlvbmFsRW5kaW5nID0gbmV3IEluZmxlY3Rpb25hbEVuZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbmZsZWN0aW9uYWxFbmRpbmcgPSBuZXcgSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vcnBoZW1lcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgdGhpcy5sZW1tYXRhID0gbWV0YXBsYXNtLmFwcGx5KG1vcnBoZW1lcywgdGhpcy5pbmZsZWN0aW9uYWxFbmRpbmcpO1xuICAgIH1cbiAgICBnZXRMZW1tYXMoKSB7XG4gICAgICAgIC8vIHRoaXMgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgcG9wdWxhdGVMZW1tYXRhIGlzIGNhbGxlZFxuICAgICAgICByZXR1cm4gdGhpcy5sZW1tYXRhO1xuICAgIH1cbiAgICBnZXRJbmZsZWN0aW9uYWxFbmRpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLmluZmxlY3Rpb25hbEVuZGluZylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZmxlY3Rpb25hbEVuZGluZy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGFzc2lnbkluZmxlY3Rpb25hbEVuZGluZyhhbGxvbW9ycGgpIHtcbiAgICAgICAgbGV0IGluZmUgPSBuZXcgSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgIC8vIGNoYW5nZSBhbGxvbW9ycGggdG8gYWZmaXhcbiAgICAgICAgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuRnJlZUFsbG9tb3JwaCkge1xuICAgICAgICAgICAgbGV0IGZpZSA9IG5ldyBGcmVlSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgICAgICBmaWUuYWZmaXgudG9uYWwgPSBhbGxvbW9ycGgudG9uYWw7XG4gICAgICAgICAgICBpbmZlID0gZmllO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuQ2hlY2tlZEFsbG9tb3JwaCkge1xuICAgICAgICAgICAgbGV0IGNpZSA9IG5ldyBDaGVja2VkSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgICAgICBjaWUuYWZmaXgudG9uYWwgPSBhbGxvbW9ycGgudG9uYWw7XG4gICAgICAgICAgICBpbmZlID0gY2llO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgd29yZCBpcyBhbHJlYWR5IGluIGJhc2UgZm9ybSwgYW5kIGl0cyBsYXN0IHN5bGxhYmxlIGlzIGNoZWNrZWQgdG9uZVxuICAgICAgICByZXR1cm4gaW5mZTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsTGVtbWF0aXphdGlvbkxleGVtZSA9IFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZTtcbmNsYXNzIFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZU1ha2VyIGV4dGVuZHMgdW5pdF8xLkxleGVtZU1ha2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgbWFrZUxleGVtZXMobW9ycGhlbWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ha2UobW9ycGhlbWVzKTtcbiAgICB9XG4gICAgbWFrZShtb3JwaGVtZXMpIHtcbiAgICAgICAgbGV0IGlzSW5mbFN0ZW1XaXRoWCA9IGZhbHNlOyAvLyBpbmZsZWN0aW9uYWwgc3RlbSB3aXRoIHggaW4gdGhlIG1pZGRsZVxuICAgICAgICByZXR1cm4gbmV3IFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZShtb3JwaGVtZXMsIG5ldyBtZXRhcGxhc21fMS5Ub25hbExlbW1hdGl6YXRpb24oKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbExlbW1hdGl6YXRpb25MZXhlbWVNYWtlciA9IFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZU1ha2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV4ZW1lLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lexicalroots2.js":
/*!*******************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lexicalroots2.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isInLexcialRoots(strToFind) {\n    if (exports.lexicalRoots.includes(strToFind))\n        return true;\n    if (extraLexicalRoots.includes(strToFind))\n        return true;\n    if (addonLexicalRootsForSyllabary.includes(strToFind))\n        return true;\n    return false;\n}\nexports.isInLexcialRoots = isInLexcialRoots;\n// prettier-ignore\nconst toBeVerified = [\n    'cett', 'choa',\n    'dom',\n    'hioh',\n    'jex', 'jek', 'jeng', 'jih', 'jirnx', 'jirtt',\n    'len', 'lirey', 'lng',\n    'mah',\n    'na',\n    'oehh',\n    'qanh', 'qih', 'qoaiz', 'qngh',\n    'simh',\n    'toehh', 'tom', 'tomz',\n    'vann', 'virt',\n];\n// prettier-ignore\nconst addonLexicalRoots = [\n    'ainn', 'ainny', 'ainnx', 'anny', 'aunn', 'aunny', 'aunnz',\n    'borh', 'borhh', 'borx', 'bory', 'borz',\n    'cainn', 'cainny', 'cainnw', 'cainnx', 'cannh', 'cennh', 'cennx', 'cennz', 'cennhh', 'cor', 'corh', 'corw', 'corx', 'cory', 'corz', 'cinnw', 'cinnh', 'cinnz', 'cir', 'cirinn', 'cirinny', 'cirw', 'ciry', 'cirx', 'coanny', 'coannw', 'coannz', 'cuinn', 'cuinny', 'cuinnw',\n    'chainn', 'chainnw', 'chainnx', 'channw', 'channx', 'chennx', 'chor', 'choreh', 'chorehh', 'chorew', 'chorex', 'chorez', 'chorh', 'chorhh', 'chorw', 'chorz', 'chir', 'chirinny', 'chirinnx', 'chirm', 'chirw', 'chiry', 'chirx', 'chirz', 'chiunnx', 'chm', 'chuinn', 'chuinny', 'chuinnw', 'chuinnx', 'chuinnz',\n    'dainyy', 'dainnw', 'dainnx', 'dainnz', 'dainnhh', 'denny', 'dennx', 'dorex', 'dorey', 'dorez', 'dorh', 'dorhh', 'dorw', 'dory', 'dorz', 'diann', 'diannw', 'dinnh', 'dinnw', 'dir', 'dirinnw', 'dirinnz', 'dirw', 'dirx', 'dirz', 'dirng', 'doanny', 'duinny', 'duinnw', 'duinnx', 'duinnz',\n    'enny', 'ennh', 'ennz', 'ennhh', 'or', 'ore', 'orehh', 'orex', 'orey', 'orez', 'orh', 'orw', 'orx', 'orz', 'orehh',\n    'goreh', 'gorehh', 'gorhh', 'gorex', 'gorez', 'gorx', 'giauh', 'girnx', 'girnz', 'girt', 'girx', 'giry', 'girz',\n    'hainny', 'hainnh', 'hainnz', 'hann', 'hannhh', 'henny', 'hennz', 'hennhh', 'hor', 'horez', 'horw', 'horx', 'hory', 'horz', 'haunn', 'haunny', 'haunnw', 'haunnh', 'haunnx', 'haunnhh', 'hinnh', 'hinnx', 'hio', 'hir', 'hirinnx', 'hirinnz', 'hirny', 'hirnz', 'hirw', 'hirx', 'hiry', 'hirtt', 'hirk', 'hiunny', 'hiunnw', 'hiunnz', 'hmhh', 'hmz', 'hngw', 'hoainnh', 'hoannw', 'honnz', 'hop', 'huinn', 'huinnh', 'huinnx', 'huinnz',\n    'ionn', 'innh', 'innhh', 'ir', 'irinnx', 'irn', 'irny', 'irpp', 'irw', 'irx', 'iry', 'irz',\n    'jiaunny', 'jiaunnw', 'jiaunnx', 'jinny', 'jiry', 'jirx', 'jorx',\n    'kannx', 'kainnh', 'kainnw', 'kaunnhh', 'kennh', 'kennx', 'kor', 'kore', 'koreh', 'korew', 'korw', 'korh', 'korx', 'kiann', 'kiannw', 'kinn', 'kir', 'kirnx', 'kirny', 'kirw', 'kngz', 'koainn', 'koainnw', 'konny', 'kuinnw',\n    'lorehh', 'lorex', 'lorh', 'lorx', 'liry', 'lirx', 'lirz',\n    'maix', 'mih', 'mihh', 'mng', 'moaix', 'moaiz', 'moex', 'moez', 'mui', 'muiz',\n    'naih', 'naix', 'ney', 'new', 'nez', 'nehh', 'niauw', 'niauh', 'niaw', 'nirix', 'niriz', 'niu', 'nngh', 'nox', 'nui', 'nuiy', 'nuiw', 'nuix', 'nuiz',\n    'ngai', 'ngaiy', 'ngauy', 'ngauh', 'ngauhh', 'ngaw', 'ngaz', 'nge', 'ngh', 'nghh', 'ngiahh', 'ngiriy', 'ngiuy', 'ngiux', 'ngiz', 'ngoeh', 'ngoehh',\n    'oainn', 'oainnh', 'oainnz', 'oainnhh', 'oannx',\n    'painn', 'pennw', 'por', 'porhh', 'porw', 'porx', 'porz', 'pinny', 'pinnhh', 'png', 'pngy', 'pngw', 'pngz', 'pnghh', 'poannx', 'ponn', 'puinn', 'puinnw', 'puinnx',\n    'qainny', 'qainnw', 'qainnz', 'qannhh', 'qore', 'qoreh', 'qorew', 'qorex', 'qorey', 'qorez', 'qorh', 'qorw', 'qory', 'qiaunnhh', 'qinny', 'qinnh', 'qinnhh', 'qir', 'qirinn', 'qirinny', 'qirn', 'qirnw', 'qirnz', 'qirw', 'qirx', 'qiry', 'qirz', 'qiunnx', 'qiunnz', 'qnghh', 'qoainnw', 'qoainnx', 'qoainnhh', 'qoannw', 'qoenny', 'qonnz', 'quinn', 'quinny', 'quinnw',\n    'sainn', 'sanny', 'sannw', 'sannx', 'sore', 'sorew', 'sorew', 'sorh', 'sorhh', 'sorx', 'sorw', 'sorz', 'sinnx', 'sinnhh', 'sir', 'sirinn', 'sirm', 'sirp', 'sirw', 'sirx', 'siry', 'sirz', 'sm', 'smw', 'smh', 'snghh', 'soainn', 'soainnh', 'soainnx', 'soainnhh', 'soenn', 'soenny', 'soennw', 'suinn', 'suinny', 'suinnw',\n    'tainnw', 'tainnz', 'tannx', 'tannz', 'tenn', 'tor', 'tore', 'torehh', 'torew', 'torhh', 'torw', 'tinnw', 'tinnx', 'tirx', 'tiry', 'tiunny', 'toannx', 'tuinnw', 'tuinnx', 'tuinnz',\n    'uihh', 'uinn', 'uinny', 'uinnx', 'uinnz',\n    'vainny', 'vainnx', 'vainnz', 'vor', 'vory', 'vorw', 'vorx', 'vorz', 'vinnx', 'vngx', 'vuinn', 'vuinny', 'vuinnx', 'vuinnz',\n];\n// prettier-ignore\nconst addonLexicalRootsForSyllabary = [\n    // TODO: some lexical roots may not be found in Taiwanese but present in dictionary. need to further check\n    'bam', 'bek', 'biet', 'bit', 'biu', 'boa', 'boat', 'bor',\n    'coa', 'coai', 'coang', 'coat', 'com', 'cor', 'core',\n    'chap', 'chiak', 'chio', 'chir', 'chiri', 'choai', 'choang', 'choe', 'chom', 'chor', 'chore',\n    'diang', 'dim', 'dio', 'dir', 'diri', 'diur', 'doa', 'doe', 'dom', 'dor', 'dore', 'dut',\n    'er', 'erng',\n    'ga', 'gai', 'gak', 'gang', 'gap', 'ge', 'gir', 'go', 'goe', 'gok', 'goat', 'gong', 'gor', 'gore', 'gur',\n    'hiap', 'hio', 'hir', 'hiri', 'hirn', 'hiur', 'hoai', 'hoang', 'hop', 'hor', 'hore',\n    'iak', 'ionn', 'ir', 'iri', 'irn',\n    'je', 'jek', 'jeng', 'jiak', 'jiap', 'jien', 'jiet', 'jin', 'jir', 'jit', 'jiu', 'jiur', 'jo', 'joa', 'joe', 'jor', 'jun', 'jur',\n    'kir', 'kor',\n    'lai', 'lat', 'lia', 'liak', 'liet', 'lir', 'lo', 'loa', 'loat', 'loe', 'lop', 'lom', 'lor', 'lore',\n    'm', 'mia', 'min', 'moai', 'moe', 'mu',\n    'nio', 'no', 'nui',\n    'nga',\n    'or', 'ore',\n    'qen', 'qet', 'qiak', 'qiang', 'qio', 'qip', 'qir', 'qiri', 'qirn', 'qit', 'qiur', 'qor',\n    'oa', 'oak',\n    'por',\n    'sir', 'siri', 'sop', 'sor', 'sore',\n    'ta', 'tia', 'tor',\n    'via', 'viang', 'viri', 'voa', 'vor',\n];\n// prettier-ignore\nconst extraLexicalRoots = [\n    'aih',\n    'coaih',\n    'dngh',\n    'gehh', 'gih', 'giuh', 'gimw',\n    'homz',\n    'jip',\n    'kiaih', 'kuih',\n    'laih', 'langh', 'lip', 'lih', 'lit', 'litt', 'loaih', 'loaiz', 'loeh', 'loeih', 'lurih',\n    'mnghh',\n    'n',\n    'ngh',\n    'oh', 'op',\n    'sangh', 'sennh', 'sienh', 'sinnh',\n];\n// prettier-ignore\nexports.lexicalRoots = [\n    'a', 'ay', 'az', 'ah', 'ahh', 'ai', 'aiy', 'aiw', 'ainnz', 'ak', 'am',\n    'amy', 'amw', 'amx', 'amz', 'an', 'any', 'anw', 'anx', 'anz', 'ang',\n    'angw', 'angx', 'angz', 'annw', 'annx', 'annz', 'ap', 'app', 'at', 'au',\n    'auy', 'auw', 'aux', 'auz',\n    'ba', 'bax', 'baz', 'bah', 'bai', 'baiy', 'baix', 'bak', 'bakk', 'ban',\n    'bany', 'banx', 'banz', 'bangy', 'bangw', 'bangx', 'bangz', 'bat', 'batt',\n    'bauy', 'bauz', 'bey', 'bex', 'bez', 'beh', 'behh', 'biy', 'bix', 'biz',\n    'bieny', 'bienx', 'bienz', 'biett', 'biauy', 'biaux', 'biauz', 'bih',\n    'bihh', 'bekk', 'biny', 'binx', 'binz', 'bengy', 'bengx', 'bengz', 'biury',\n    'biurx', 'biurz', 'bitt', 'biuz', 'bury', 'burx', 'burz', 'bok', 'bokk',\n    'bong', 'bongy', 'bongw', 'bongx', 'bongz', 'boy', 'box', 'boz', 'buy',\n    'bux', 'buz', 'boax', 'boah', 'boahh', 'boany', 'boatt', 'boey', 'boex',\n    'boez', 'boehh', 'bui', 'buny', 'bunw', 'bunx', 'bunz', 'but', 'butt',\n    'ca', 'cay', 'cax', 'caz', 'cah', 'cai', 'caiy', 'caiw', 'caix', 'caiz',\n    'cak', 'cakk', 'cam', 'camy', 'camw', 'camx', 'can', 'canw', 'canx',\n    'cang', 'cangy', 'cangw', 'canny', 'cannz', 'cap', 'capp', 'cat', 'catt',\n    'cau', 'cauy', 'cauw', 'cauhh', 'ce', 'cey', 'cew', 'cex', 'cez', 'ceh',\n    'cenn', 'cenny', 'cennw', 'ci', 'ciy', 'ciw', 'cix', 'ciz', 'cia', 'ciax',\n    'ciah', 'ciakk', 'ciam', 'ciamy', 'cien', 'cieny', 'cienx', 'ciangy',\n    'ciangw', 'ciangx', 'ciangz', 'ciann', 'cianny', 'ciannw', 'ciannx', 'ciap',\n    'ciet', 'ciau', 'ciauw', 'ciaux', 'cih', 'cihh', 'cek', 'cekk', 'cim',\n    'cimy', 'cin', 'cinw', 'ceng', 'cengy', 'cengw', 'cengx', 'cengz', 'cinn',\n    'cinny', 'cinnx', 'ciur', 'ciurw', 'ciurz', 'ciurh', 'ciurhh', 'ciok',\n    'ciokk', 'ciong', 'ciongw', 'cip', 'cit', 'ciu', 'ciuy', 'ciux', 'ciuz',\n    'ciunn', 'ciunny', 'ciunnw', 'ciunnx', 'ciunnz', 'cng', 'cngy', 'cngw',\n    'cngx', 'cngh', 'cnghh', 'cur', 'cury', 'curw', 'curh', 'cok', 'cokk',\n    'cong', 'congy', 'congw', 'congx', 'co', 'coy', 'cow', 'cu', 'cuy', 'cuw',\n    'cuz', 'coaw', 'coaz', 'coah', 'coahh', 'coan', 'coan', 'coanw', 'coanx',\n    'coangw', 'coann', 'coannw', 'coe', 'coey', 'coex', 'coez', 'cuh', 'cuhh',\n    'cui', 'cuiy', 'cuiw', 'cun', 'cuny', 'cunw', 'cunx', 'cunz', 'cut',\n    'cha', 'chay', 'chaw', 'chah', 'chahh', 'chai', 'chaiy', 'chaiw', 'chaix',\n    'chaiz', 'chainny', 'chak', 'chakk', 'cham', 'chamy', 'chamw', 'chamz',\n    'chan', 'chany', 'chanw', 'chanx', 'chanz', 'chang', 'changy', 'changw',\n    'changx', 'channy', 'channz', 'chapp', 'chat', 'chatt', 'chau', 'chauy',\n    'chauw', 'chaux', 'chauz', 'che', 'chey', 'chew', 'chex', 'chez', 'cheh',\n    'chehh', 'chenn', 'chenny', 'chennw', 'chennz', 'chi', 'chiy', 'chiw',\n    'chix', 'chiz', 'chia', 'chiay', 'chiaw', 'chiaz', 'chiah', 'chiahh',\n    'chiam', 'chiamw', 'chiamx', 'chiamz', 'chien', 'chieny', 'chienw',\n    'chienx', 'chienz', 'chiang', 'chiangy', 'chiangw', 'chiann', 'chianny',\n    'chiannw', 'chiannx', 'chiannz', 'chiap', 'chiapp', 'chiet', 'chiett',\n    'chiau', 'chiauy', 'chiauw', 'chiaux', 'chih', 'chihh', 'chek', 'chekk',\n    'chim', 'chimy', 'chimw', 'chimx', 'chin', 'chiny', 'chinw', 'chinx',\n    'chinz', 'cheng', 'chengy', 'chengw', 'chengx', 'chengz', 'chinn',\n    'chinny', 'chinnw', 'chinnx', 'chinnz', 'chiur', 'chiury', 'chiurw',\n    'chiurh', 'chiurhh', 'chiok', 'chiong', 'chiongy', 'chiongw', 'chiongx',\n    'chiongz', 'chip', 'chipp', 'chit', 'chitt', 'chiu', 'chiuy', 'chiuw',\n    'chiuz', 'chiunn', 'chiunny', 'chiunnw', 'chiunnz', 'chng', 'chngy',\n    'chngw', 'chngx', 'chngz', 'chur', 'chury', 'churw', 'churx', 'churz',\n    'churh', 'chok', 'chokk', 'chong', 'chongy', 'chongw', 'chongx', 'chongz',\n    'cho', 'choy', 'choz', 'chu', 'chuy', 'chuw', 'chux', 'chuxz', 'choay',\n    'choax', 'choaz', 'choah', 'choahh', 'choainnz', 'choan', 'choany',\n    'choanw', 'choanx', 'choanz', 'choann', 'choanny', 'choannw', 'choannx',\n    'choannz', 'choat', 'choew', 'choez', 'chuh', 'chui', 'chuiy', 'chuiw',\n    'chuix', 'chuiz', 'chun', 'chuny', 'chunw', 'chunx', 'chunz', 'chut',\n    'chutt',\n    'da', 'day', 'daw', 'dah', 'dahh', 'dai', 'daiy', 'daiw', 'daix', 'daiz',\n    'dainn', 'dainny', 'dak', 'dakk', 'dam', 'damy', 'damw', 'damx', 'damz',\n    'dan', 'dany', 'danw', 'danx', 'danz', 'dang', 'dangy', 'dangw', 'dangx',\n    'dangz', 'dann', 'danny', 'dannw', 'dannx', 'dannz', 'dap', 'dapp', 'dat',\n    'datt', 'dau', 'dauy', 'dauw', 'daux', 'dauz', 'dauh', 'dauhh', 'de', 'dey',\n    'dew', 'dex', 'dez', 'deh', 'denn', 'dennw', 'dennz', 'di', 'diy', 'diw',\n    'dix', 'diz', 'dia', 'diah', 'diahh', 'diak', 'diakk', 'diam', 'diamy',\n    'diamw', 'diamx', 'diamz', 'dien', 'dieny', 'dienx', 'dienz', 'dianny',\n    'diannx', 'diannz', 'diap', 'diapp', 'diet', 'diett', 'diau', 'diauw',\n    'diaux', 'diauz', 'dih', 'dihh', 'dek', 'dekk', 'dimw', 'dimx', 'dimz',\n    'din', 'diny', 'dinw', 'dinx', 'dinz', 'deng', 'dengy', 'dengw', 'dengx',\n    'dengz', 'dinn', 'dinnx', 'dinnz', 'dinnhh', 'diurw', 'diurx', 'diurz',\n    'diurh', 'diurhh', 'diok', 'diokk', 'diong', 'diongy', 'diongw', 'diongx',\n    'diongz', 'dit', 'ditt', 'diu', 'diuy', 'diuw', 'diux', 'diuz', 'diuh',\n    'diunn', 'diunny', 'diunnw', 'diunnx', 'diunnz', 'dng', 'dngy', 'dngw',\n    'dngx', 'dngz', 'dur', 'dury', 'durw', 'durx', 'durz', 'durh', 'durhh',\n    'dok', 'dokk', 'domx', 'dong', 'dongy', 'dongw', 'dongx', 'dongz', 'do',\n    'doy', 'dow', 'dox', 'doz', 'du', 'duy', 'duw', 'dux', 'duz', 'doaw',\n    'doaz', 'doan', 'doany', 'doanw', 'doanz', 'doann', 'doannw', 'doannx',\n    'doannz', 'doat', 'doatt', 'doew', 'doex', 'doez', 'duh', 'duhh', 'dui',\n    'duiw', 'duix', 'duiz', 'dun', 'duny', 'dunw', 'dunz', 'dutt',\n    'e', 'ey', 'ew', 'ex', 'ez', 'eh', 'ehh', 'enn', 'ennx',\n    'ek', 'ekk', 'eng', 'engy', 'engw', 'engx', 'engz',\n    'gax', 'gaz', 'gaix', 'gaiz', 'gakk', 'gamy', 'gamx', 'gamz', 'gany',\n    'ganw', 'ganx', 'ganz', 'gangz', 'gaux', 'gew', 'gex', 'gez', 'giy', 'gix',\n    'giz', 'giax', 'giah', 'giahh', 'giamy', 'giamx', 'giamz', 'gieny', 'gienw',\n    'gienx', 'gienz', 'giang', 'giangw', 'giangz', 'giap', 'giapp', 'giet',\n    'giett', 'giaux', 'gekk', 'gimy', 'gimx', 'gimz', 'giny', 'ginx', 'ginz',\n    'gengy', 'gengx', 'giury', 'giurx', 'giurhh', 'giok', 'giokk', 'giongy',\n    'giuy', 'giux', 'gurx', 'gurz', 'gokk', 'gongx', 'gongz', 'gox', 'goz',\n    'guy', 'gux', 'guz', 'goay', 'goaz', 'goany', 'goanx', 'goanz', 'goatt',\n    'goez', 'goehh', 'guix', 'guiz',\n    'ha', 'haw', 'hax', 'haz', 'hah', 'hahh', 'hai', 'haiy', 'haix', 'haiz',\n    'hainn', 'hainnw', 'hainnx', 'hak', 'hakk', 'ham', 'hamy', 'hamw', 'hamx',\n    'hamz', 'han', 'hany', 'hanw', 'hanx', 'hanz', 'hang', 'hangw', 'hangx',\n    'hangz', 'hanny', 'hannx', 'hannz', 'hannh', 'hap', 'happ', 'hat', 'hatt',\n    'hau', 'hauy', 'hauw', 'haux', 'hauz', 'he', 'hey', 'hew', 'hex', 'hez',\n    'heh', 'hennw', 'hennx', 'hennh', 'hi', 'hiy', 'hiw', 'hix', 'hia', 'hiaz',\n    'hiah', 'hiahh', 'hiam', 'hiamy', 'hiamw', 'hiamx', 'hien', 'hieny',\n    'hienw', 'hienx', 'hienz', 'hiang', 'hiangy', 'hiangw', 'hiann', 'hianny',\n    'hiannw', 'hiannx', 'hiannz', 'hiannh', 'hiapp', 'hiet', 'hiett', 'hiau',\n    'hiauy', 'hiaux', 'hiauh', 'hek', 'hekk', 'him', 'himx', 'hin', 'hinx',\n    'hinz', 'heng', 'hengw', 'hengx', 'hengz', 'hinn', 'hinnw', 'hinnz',\n    'hiurx', 'hiurz', 'hiurh', 'hiurhh', 'hiok', 'hiong', 'hiongy', 'hiongw',\n    'hiongx', 'hip', 'hit', 'hitt', 'hiu', 'hiuy', 'hiuw', 'hiux', 'hiunn',\n    'hiunnhh', 'hmy', 'hmx', 'hmh', 'hmhh', 'hng', 'hngy', 'hngx', 'hngz',\n    'hngh', 'hnghh', 'hury', 'hurx', 'hurz', 'hurhh', 'hok', 'hokk', 'hong',\n    'hongy', 'hongw', 'hongx', 'hongz', 'honn', 'honny', 'honnw', 'honnh', 'ho',\n    'hoy', 'how', 'hox', 'hoz', 'hu', 'huy', 'huw', 'hux', 'huz', 'hoa', 'hoaw',\n    'hoax', 'hoaz', 'hoah', 'hoahh', 'hoaix', 'hoaiz', 'hoainnx', 'hoan',\n    'hoany', 'hoanw', 'hoanx', 'hoanz', 'hoann', 'hoanny', 'hoannx', 'hoannz',\n    'hoat', 'hoatt', 'hoe', 'hoey', 'hoew', 'hoex', 'hoez', 'hoeh', 'hui',\n    'huiy', 'huiw', 'huix', 'huiz', 'hun', 'huny', 'hunw', 'hunx', 'hunz',\n    'hut', 'hutt',\n    'i', 'iy', 'iw', 'ix', 'iz', 'ia', 'iay', 'iaw', 'iax', 'iaz', 'iah',\n    'iahh', 'iam', 'iamy', 'iamx', 'iamz', 'ien', 'ieny', 'ienw', 'ienx',\n    'iang', 'iangz', 'iann', 'ianny', 'iannw', 'iannx', 'iannz', 'iap', 'iapp',\n    'iet', 'iett', 'iau', 'iauy', 'iauw', 'iaux', 'iauz', 'iaunn', 'im', 'imy',\n    'imw', 'imx', 'in', 'iny', 'inw', 'inx', 'inz', 'inn', 'inny', 'innw',\n    'innx', 'innz', 'iur', 'iury', 'iurx', 'iurh', 'iurhh', 'iok', 'iokk',\n    'iong', 'iongy', 'iongw', 'iongx', 'iongz', 'ip', 'it', 'itt', 'iu', 'iuy',\n    'iuw', 'iux', 'iuz', 'iunn', 'iunny', 'iunnx', 'iunnz',\n    'jiy', 'jix', 'jiz', 'jia', 'jiay', 'jiamy', 'jienx', 'jiangy', 'jiapp',\n    'jiett', 'jiauy', 'jiauw', 'jiaux', 'jimy', 'jimx', 'jimz', 'jinx', 'jinz',\n    'jiurz', 'jiok', 'jiokk', 'jiongy', 'jiongx', 'jiongz', 'jipp', 'jitt',\n    'jiux', 'juy', 'jux', 'juz', 'joahh', 'joex', 'joez', 'junz',\n    'ka', 'kay', 'kaw', 'kah', 'kahh', 'kai', 'kaiy', 'kaiw', 'kainn', 'kainny',\n    'kak', 'kakk', 'kam', 'kamy', 'kamw', 'kan', 'kanw', 'kang', 'kangy',\n    'kangw', 'kann', 'kap', 'kapp', 'kat', 'kau', 'kauy', 'kauw', 'ke', 'key',\n    'kew', 'kex', 'keh', 'kehh', 'kenn', 'kennhh', 'ki', 'kiy', 'kiw', 'kix',\n    'kiz', 'kia', 'kiax', 'kiaz', 'kiah', 'kiakk', 'kiam', 'kiamw', 'kiamx',\n    'kiamz', 'kien', 'kieny', 'kienw', 'kienx', 'kiang', 'kiangw', 'kiap',\n    'kiet', 'kiett', 'kiau', 'kiauy', 'kiauw', 'kiauh', 'kih', 'kek', 'kim',\n    'kimy', 'kimx', 'kin', 'kiny', 'kinx', 'keng', 'kengy', 'kengw', 'kengx',\n    'kengz', 'kinnx', 'kiury', 'kiurw', 'kiurh', 'kiok', 'kiong', 'kiongy',\n    'kiongx', 'kip', 'kipp', 'kit', 'kitt', 'kiu', 'kiuy', 'kiux', 'kiuz',\n    'kiunn', 'kiunnz', 'kng', 'kngw', 'kur', 'kury', 'kurw', 'kurx', 'kok',\n    'kokk', 'kong', 'kongy', 'kongw', 'kongz', 'ko', 'koy', 'kow', 'ku', 'kux',\n    'kuz', 'koa', 'koay', 'koaw', 'koah', 'koaiw', 'koan', 'koany', 'koanw',\n    'koanx', 'koann', 'koanny', 'koannw', 'koat', 'koe', 'koew', 'koex', 'koeh',\n    'kuh', 'kui', 'kuiy', 'kuiw', 'kun', 'kuny', 'kunw', 'kunx', 'kut', 'kutt',\n    'la', 'lax', 'laz', 'lah', 'lahh', 'laix', 'laiz', 'lak', 'lakk', 'lam',\n    'lamy', 'lamw', 'lamx', 'lamz', 'lan', 'lany', 'lanx', 'lanz', 'lang',\n    'langy', 'langw', 'langx', 'langz', 'lap', 'lapp', 'latt', 'lauy', 'lauw',\n    'laux', 'lauz', 'lauhh', 'le', 'ley', 'lew', 'lex', 'lez', 'leh', 'lehh',\n    'li', 'liy', 'liw', 'lix', 'liz', 'liah', 'liahh', 'liam', 'liamy', 'liamw',\n    'liamx', 'liamz', 'lien', 'lieny', 'lienx', 'lienz', 'liang', 'liangy',\n    'liangx', 'liangz', 'liap', 'liapp', 'liett', 'liauy', 'liauw', 'liaux',\n    'liauz', 'lihh', 'lek', 'lekk', 'lim', 'limy', 'limx', 'limz', 'lin',\n    'liny', 'linw', 'linx', 'limz', 'leng', 'lengy', 'lengw', 'lengx', 'lengz',\n    'liury', 'liurx', 'liurz', 'liurhh', 'liok', 'liokk', 'liongy', 'liongw',\n    'liongx', 'liongz', 'lipp', 'liu', 'liuy', 'liuw', 'liux', 'liuz', 'lur',\n    'lury', 'lurw', 'lurx', 'lurz', 'lurh', 'lurhh', 'lok', 'lokk', 'long',\n    'longy', 'longw', 'longx', 'longz', 'loy', 'lox', 'loz', 'lu', 'luy',\n    'luw', 'lux', 'luz', 'loax', 'loaz', 'loah', 'loahh', 'loany', 'loanx',\n    'loanz', 'loatt', 'loex', 'loez', 'lui', 'luiy', 'luiw', 'luix', 'luiz',\n    'lun', 'luny', 'lunx', 'lunz', 'lut', 'lutt',\n    'my', 'mx', 'mz', 'ma', 'may', 'maw', 'max', 'maz', 'mai', 'maiy', 'maiw',\n    'maiz', 'mau', 'maux', 'mauz', 'mauh', 'me', 'mey', 'mex', 'mez', 'meh',\n    'mehh', 'mi', 'miy', 'mix', 'miz', 'miax', 'miaz', 'miauz', 'mih', 'mihh',\n    'mngy', 'mngx', 'mngz', 'mo', 'moy', 'mox', 'moz', 'moh', 'mohh', 'moa',\n    'moay', 'moax', 'moaz', 'muiy', 'muix',\n    'nay', 'naw', 'nax', 'naz', 'nah', 'nai', 'naiy', 'naiz', 'nauy', 'nauz',\n    'nauh', 'ne', 'nex', 'neh', 'ni', 'niy', 'nix', 'niz', 'niay', 'niax',\n    'niaz', 'niau', 'niauy', 'nih', 'niuy', 'niux', 'niuz', 'nng', 'nngy',\n    'nngw', 'nngx', 'nngz', 'noy', 'noz', 'noay', 'noaw', 'noax', 'noaz',\n    'ng', 'ngy', 'ngw', 'ngx', 'ngz', 'ngay', 'ngaiz', 'ngaux', 'ngauz', 'ngey',\n    'ngez', 'ngeh', 'ngehh', 'ngiax', 'ngiau', 'ngiauy', 'ngiauh', 'ngiauhh',\n    'ngoy', 'ngox', 'ngoz',\n    'o', 'oy', 'ox', 'oz', 'ok', 'om', 'omz', 'ong', 'ongy', 'ongx', 'ongz',\n    'onn', 'onnw',\n    'oa', 'oay', 'oax', 'oahh', 'oai', 'oainny', 'oan', 'oany', 'oanw', 'oanx',\n    'oanz', 'oang', 'oann', 'oanny', 'oannw', 'oannz', 'oat', 'oatt', 'oe',\n    'oey', 'oew', 'oex', 'oez', 'oeh',\n    'pa', 'paw', 'paz', 'pah', 'paiw', 'painny', 'painnz', 'pak', 'pakk', 'pan',\n    'pan', 'pang', 'pangy', 'pangw', 'pangx', 'pangz', 'pannw', 'pannz', 'pau',\n    'pauy', 'pauw', 'pauz', 'pauhh', 'pe', 'pey', 'pew', 'pez', 'penn', 'pennx',\n    'pennz', 'pi', 'piy', 'piw', 'pix', 'piz', 'piah', 'piahh', 'piak', 'piakk',\n    'pien', 'pienw', 'pienx', 'piang', 'piangz', 'piann', 'pianny', 'piannx',\n    'piet', 'piau', 'piauw', 'piaux', 'pih', 'pihh', 'pek', 'piny', 'pinx',\n    'pinz', 'peng', 'pengw', 'pengx', 'pengz', 'pinn', 'pinnw', 'pinnx',\n    'pinnz', 'piurw', 'piurx', 'pit', 'pngh', 'pur', 'pury', 'purw', 'purz',\n    'purh', 'pok', 'pokk', 'pong', 'pongy', 'pongw', 'pongx', 'pongz', 'po',\n    'poy', 'pow', 'pox', 'poz', 'puy', 'pux', 'puz', 'poaw', 'poah', 'poahh',\n    'poan', 'poanx', 'poanz', 'poann', 'poannw', 'poannz', 'poat', 'poe',\n    'poey', 'poew', 'poex', 'poez', 'poehh', 'puhh', 'puiy', 'puiw', 'pun',\n    'puny', 'punw', 'punx', 'put', 'putt',\n    'qa', 'qay', 'qaw', 'qaz', 'qah', 'qai', 'qaiy', 'qaiw', 'qainn', 'qainnx',\n    'qak', 'qakk', 'qam', 'qamy', 'qamw', 'qamx', 'qan', 'qany', 'qanw', 'qang',\n    'qangy', 'qangw', 'qangx', 'qangz', 'qann', 'qanny', 'qannw', 'qannx',\n    'qap', 'qat', 'qau', 'qauy', 'qauw', 'qaux', 'qauz', 'qauh', 'qe', 'qey',\n    'qew', 'qez', 'qeh', 'qehh', 'qenn', 'qenny', 'qennw', 'qi', 'qiy', 'qiw',\n    'qix', 'qiz', 'qia', 'qiaw', 'qiaz', 'qiahh', 'qiam', 'qiamy', 'qiamw',\n    'qiamx', 'qien', 'qieny', 'qienw', 'qienz', 'qiann', 'qianny', 'qiannw',\n    'qiannx', 'qiannz', 'qiap', 'qiet', 'qiett', 'qiau', 'qiauy', 'qiaux',\n    'qiauz', 'qek', 'qekk', 'qim', 'qimy', 'qimw', 'qimz', 'qin', 'qiny',\n    'qinw', 'qinz', 'qeng', 'qengy', 'qengw', 'qengx', 'qengz', 'qinn', 'qinnw',\n    'qinnx', 'qiurw', 'qiurx', 'qiurz', 'qiurh', 'qiok', 'qiokk', 'qiong',\n    'qiongy', 'qiongx', 'qiongz', 'qip', 'qipp', 'qitt', 'qiu', 'qiuy', 'qiuw',\n    'qiux', 'qiuz', 'qiunn', 'qng', 'qngy', 'qngw', 'qur', 'qury', 'qurw',\n    'qurx', 'qurz', 'qurh', 'qok', 'qokk', 'qong', 'qongy', 'qongw', 'qongx',\n    'qonnx', 'qo', 'qoy', 'qow', 'qox', 'qoz', 'qu', 'quy', 'quw', 'quz', 'qoa',\n    'qoay', 'qoaw', 'qoaz', 'qoah', 'qoai', 'qoaiy', 'qoaiw', 'qoainn',\n    'qoainny', 'qoainnz', 'qoan', 'qoany', 'qoanw', 'qoanx', 'qoanz', 'qoann',\n    'qoanny', 'qoannx', 'qoannz', 'qoat', 'qoe', 'qoey', 'qoew', 'qoeh', 'qui',\n    'quiy', 'quiw', 'quix', 'quiz', 'qun', 'quny', 'qunw', 'qunx', 'qunz',\n    'qut', 'qutt',\n    'sa', 'say', 'saw', 'sah', 'sahh', 'sai', 'saiy', 'saiw', 'saix', 'saiz',\n    'sak', 'sam', 'samy', 'samw', 'samx', 'san', 'sany', 'sanw', 'sang',\n    'sangy', 'sangw', 'sann', 'sannh', 'sap', 'sat', 'sau', 'sauw', 'se', 'sey',\n    'sew', 'sex', 'seh', 'sehh', 'senn', 'senny', 'sennw', 'si', 'siy', 'siw',\n    'six', 'siz', 'sia', 'siay', 'siaw', 'siax', 'siaz', 'siah', 'siahh',\n    'siak', 'siam', 'siamy', 'siamw', 'siamx', 'sien', 'sieny', 'sienw',\n    'sienx', 'sienz', 'siang', 'siangy', 'siangw', 'siangx', 'siangz', 'siann',\n    'sianny', 'siannw', 'siannx', 'siannz', 'siap', 'siapp', 'siet', 'siett',\n    'siau', 'siauy', 'siauw', 'siaux', 'siauz', 'sih', 'sihh', 'sek', 'sekk',\n    'sim', 'simy', 'simw', 'simx', 'simz', 'sin', 'sinw', 'sinx', 'sinz',\n    'seng', 'sengy', 'sengw', 'sengx', 'sengz', 'sinn', 'sinnw', 'sinnz',\n    'siur', 'siury', 'siurx', 'siurh', 'siurhh', 'siok', 'siokk', 'siong',\n    'siongy', 'siongw', 'siongx', 'siongz', 'sip', 'sipp', 'sit', 'sitt', 'siu',\n    'siuy', 'siuw', 'siux', 'siuz', 'siunn', 'siunny', 'siunnw', 'siunnx',\n    'siunnz', 'sng', 'sngy', 'sngw', 'sngx', 'sngh', 'sur', 'sury', 'surw',\n    'surx', 'surz', 'surh', 'sok', 'som', 'song', 'songy', 'songw', 'songx',\n    'so', 'soy', 'sow', 'su', 'suy', 'suw', 'sux', 'suz', 'soa', 'soay', 'soaw',\n    'soah', 'soai', 'soainnz', 'soan', 'soany', 'soanw', 'soanx', 'soanz',\n    'soann', 'soanny', 'soannw', 'soat', 'soe', 'soey', 'soew', 'soex', 'soeh',\n    'suh', 'sui', 'suiy', 'suiw', 'suix', 'suiz', 'sun', 'suny', 'sunw', 'sunx',\n    'sunz', 'sut', 'sutt',\n    'taw', 'tah', 'tahh', 'tai', 'taiy', 'taiw', 'taix', 'taiz', 'tak', 'takk',\n    'tam', 'tamw', 'tamx', 'tamz', 'tan', 'tany', 'tanw', 'tanx', 'tang',\n    'tangy', 'tangw', 'tangx', 'tann', 'tanny', 'tap', 'tat', 'tau', 'tauy',\n    'tauw', 'taux', 'tauz', 'te', 'tey', 'tew', 'tex', 'tez', 'teh', 'tehh',\n    'tennw', 'tennx', 'ti', 'tiy', 'tiw', 'tix', 'tiz', 'tiah', 'tiam', 'tiamy',\n    'tiamz', 'tien', 'tieny', 'tiann', 'tiannw', 'tiannx', 'tiannz', 'tiap',\n    'tiapp', 'tiet', 'tiau', 'tiauy', 'tiauw', 'tiaux', 'tiauz', 'tih', 'tihh',\n    'tek', 'tekk', 'tim', 'tin', 'tinx', 'tinz', 'teng', 'tengy', 'tengw',\n    'tengx', 'tinn', 'tinnz', 'tiur', 'tiurw', 'tiurx', 'tiok', 'tiong',\n    'tiongy', 'tiongw', 'tiongx', 'tiu', 'tiuy', 'tng', 'tngw', 'tngx', 'tngz',\n    'tur', 'tury', 'turw', 'turx', 'turh', 'turhh', 'tok', 'tokk', 'tong',\n    'tongy', 'tongw', 'tongz', 'toy', 'tow', 'tox', 'tuy', 'toa', 'toaz',\n    'toah', 'toanx', 'toann', 'toanny', 'toannw', 'toat', 'tuh', 'tui', 'tuiy',\n    'tuiw', 'tuix', 'tun', 'tuny', 'tunx', 'tunz', 'tut', 'tutt',\n    'u', 'uy', 'uw', 'ux', 'uz', 'uh', 'ui', 'uiy', 'uiw', 'uix', 'uiz', 'un',\n    'uny', 'unw', 'unx', 'unz', 'ut',\n    'ur', 'urw', 'urx', 'urh', 'urhh',\n    'va', 'vay', 'vaw', 'vax', 'vaz', 'vah', 'vai', 'vaiy', 'vaiw', 'vaix',\n    'vaiz', 'vak', 'vakk', 'van', 'vany', 'vanx', 'vanz', 'vang', 'vangy',\n    'vangw', 'vangx', 'vat', 'vatt', 'vau', 'vauy', 'vaux', 'vauz', 've', 'vey',\n    'vew', 'vex', 'vez', 'veh', 'vehh', 'venn', 'vennw', 'vennx', 'vennz', 'vi',\n    'viy', 'viw', 'vix', 'viz', 'viah', 'viak', 'viakk', 'vien', 'vieny',\n    'vienw', 'vienz', 'viangw', 'viangz', 'viann', 'vianny', 'viannw', 'viannx',\n    'viet', 'viett', 'viau', 'viauy', 'vih', 'vek', 'vekk', 'vin', 'viny',\n    'vinw', 'vinx', 'veng', 'vengy', 'vengw', 'vengx', 'vengz', 'vinn', 'vinny',\n    'vinnw', 'vinnz', 'viur', 'viury', 'viurz', 'vit', 'vitt', 'viu', 'vng',\n    'vngy', 'vngz', 'vur', 'vury', 'vurw', 'vurx', 'vurz', 'vurh', 'vurhh',\n    'vok', 'vokk', 'vongy', 'vongw', 'vongx', 'vongz', 'vo', 'voy', 'vow',\n    'vox', 'voz', 'vu', 'vuw', 'vux', 'vuz', 'voaw', 'voah', 'voahh',\n    'voan', 'voanw', 'voanx', 'voanz', 'voann', 'voanny', 'voannw', 'voannx',\n    'voannz', 'voat', 'voatt', 'voe', 'voey', 'voew', 'voex', 'voez', 'voeh',\n    'voehh', 'vuh', 'vui', 'vuix', 'vuiz', 'vun', 'vuny', 'vunw', 'vunx',\n    'vunz', 'vut', 'vutt',\n];\n//# sourceMappingURL=lexicalroots2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lexicalroots2.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/matcher.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/matcher.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n// mhf, nhf, nghf\nexports.regexMnngHF = /(m|ng?)hf/g;\n// mhf, nhf, nghf\nexports.smMnngHF = function (nasalFinal, neutralFinalH, firstTonalF) {\n    if (collections_1.nasalFinals.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.h === neutralFinalH &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// mhhw, mhhx, nhhw, nhhx, nghhw, nghhx\nexports.regexMnngHhWx = /(m|ng?)hh(w|x)/g;\n// mhhw\nexports.smMHhW = function (nasalFinal, neutralFinalHh, thirdTonalW) {\n    if (nasalFinal === version2_1.TonalLetterTags.m &&\n        neutralFinalHh === version2_1.TonalLetterTags.hh &&\n        thirdTonalW === version2_1.TonalLetterTags.w)\n        return true;\n    return false;\n};\n// mhhw, mhhx, nhhw, nhhx, nghhw, nghhx\nexports.smMnngHHWx = function (nasalFinal, neutralFinalHh, tonalWX) {\n    if (collections_1.nasalFinals.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.hh === neutralFinalHh &&\n        collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// jf, lf, sf\nexports.regexJlsF = /(j|l|s)f/g;\n// jf, lf, sf\nexports.smJlsF = function (finalJls, firstTonalF) {\n    if (collections_1.finalsJls.includes(finalJls) && version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// bf, gf, kf, pf\nexports.smBgkpF = function (finalBgkp, firstTonalF) {\n    if (collections_1.finalsBgkp.includes(finalBgkp) && version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// jjw, jjx, llw, llx, ssw, ssx\nexports.regexJjllssWx = /(jj|ll|ss)(w|x)/g;\n// jjw, jjx, llw, llx, ssw, ssx\nexports.smJJllssWx = function (finalJJllss, tonalWX) {\n    if (collections_1.finalsJJllss.includes(finalJJllss) && collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bbw, bbx, ggw, ggx, kkw, kkx, ppw, ppx\nexports.smBbggkkppWx = function (finalBBggjjkkllppss, tonalWX) {\n    if (collections_1.finalsBBggkkpp.includes(finalBBggjjkkllppss) &&\n        collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bf, gf, jf, kf, lf, pf, sf\nexports.smBgjklpsF = function (finalBgjklps, firstTonalF) {\n    if (version2_1.stopFinalSoundsBgjklps.includes(finalBgjklps) &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// bbw, bbx, ggw, ggx, jjw, jjx, kkw, kkx, llw, llx, ppw, ppx, ssw, ssx\nexports.smBbggjjkkllppssWx = function (finalBBggjjkkllppss, tonalWX) {\n    const efs = version2_1.stopFinalSoundsBBggjjkkllppss;\n    if (efs.includes(finalBBggjjkkllppss) && collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n//# sourceMappingURL=matcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL21hdGNoZXIuanM/N2UwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvdG9uYWwvbWF0Y2hlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb24yXCIpO1xuY29uc3QgY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25zXCIpO1xuLy8gbWhmLCBuaGYsIG5naGZcbmV4cG9ydHMucmVnZXhNbm5nSEYgPSAvKG18bmc/KWhmL2c7XG4vLyBtaGYsIG5oZiwgbmdoZlxuZXhwb3J0cy5zbU1ubmdIRiA9IGZ1bmN0aW9uIChuYXNhbEZpbmFsLCBuZXV0cmFsRmluYWxILCBmaXJzdFRvbmFsRikge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLm5hc2FsRmluYWxzLmluY2x1ZGVzKG5hc2FsRmluYWwpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmggPT09IG5ldXRyYWxGaW5hbEggJiZcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZiA9PT0gZmlyc3RUb25hbEYpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBtaGh3LCBtaGh4LCBuaGh3LCBuaGh4LCBuZ2hodywgbmdoaHhcbmV4cG9ydHMucmVnZXhNbm5nSGhXeCA9IC8obXxuZz8paGgod3x4KS9nO1xuLy8gbWhod1xuZXhwb3J0cy5zbU1IaFcgPSBmdW5jdGlvbiAobmFzYWxGaW5hbCwgbmV1dHJhbEZpbmFsSGgsIHRoaXJkVG9uYWxXKSB7XG4gICAgaWYgKG5hc2FsRmluYWwgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm0gJiZcbiAgICAgICAgbmV1dHJhbEZpbmFsSGggPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmhoICYmXG4gICAgICAgIHRoaXJkVG9uYWxXID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy53KVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gbWhodywgbWhoeCwgbmhodywgbmhoeCwgbmdoaHcsIG5naGh4XG5leHBvcnRzLnNtTW5uZ0hIV3ggPSBmdW5jdGlvbiAobmFzYWxGaW5hbCwgbmV1dHJhbEZpbmFsSGgsIHRvbmFsV1gpIHtcbiAgICBpZiAoY29sbGVjdGlvbnNfMS5uYXNhbEZpbmFscy5pbmNsdWRlcyhuYXNhbEZpbmFsKSAmJlxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oaCA9PT0gbmV1dHJhbEZpbmFsSGggJiZcbiAgICAgICAgY29sbGVjdGlvbnNfMS50b25hbHNXeC5pbmNsdWRlcyh0b25hbFdYKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIGpmLCBsZiwgc2ZcbmV4cG9ydHMucmVnZXhKbHNGID0gLyhqfGx8cylmL2c7XG4vLyBqZiwgbGYsIHNmXG5leHBvcnRzLnNtSmxzRiA9IGZ1bmN0aW9uIChmaW5hbEpscywgZmlyc3RUb25hbEYpIHtcbiAgICBpZiAoY29sbGVjdGlvbnNfMS5maW5hbHNKbHMuaW5jbHVkZXMoZmluYWxKbHMpICYmIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmYsIGdmLCBrZiwgcGZcbmV4cG9ydHMuc21CZ2twRiA9IGZ1bmN0aW9uIChmaW5hbEJna3AsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxzQmdrcC5pbmNsdWRlcyhmaW5hbEJna3ApICYmIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gamp3LCBqangsIGxsdywgbGx4LCBzc3csIHNzeFxuZXhwb3J0cy5yZWdleEpqbGxzc1d4ID0gLyhqanxsbHxzcykod3x4KS9nO1xuLy8gamp3LCBqangsIGxsdywgbGx4LCBzc3csIHNzeFxuZXhwb3J0cy5zbUpKbGxzc1d4ID0gZnVuY3Rpb24gKGZpbmFsSkpsbHNzLCB0b25hbFdYKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxzSkpsbHNzLmluY2x1ZGVzKGZpbmFsSkpsbHNzKSAmJiBjb2xsZWN0aW9uc18xLnRvbmFsc1d4LmluY2x1ZGVzKHRvbmFsV1gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmJ3LCBiYngsIGdndywgZ2d4LCBra3csIGtreCwgcHB3LCBwcHhcbmV4cG9ydHMuc21CYmdna2twcFd4ID0gZnVuY3Rpb24gKGZpbmFsQkJnZ2pqa2tsbHBwc3MsIHRvbmFsV1gpIHtcbiAgICBpZiAoY29sbGVjdGlvbnNfMS5maW5hbHNCQmdna2twcC5pbmNsdWRlcyhmaW5hbEJCZ2dqamtrbGxwcHNzKSAmJlxuICAgICAgICBjb2xsZWN0aW9uc18xLnRvbmFsc1d4LmluY2x1ZGVzKHRvbmFsV1gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmYsIGdmLCBqZiwga2YsIGxmLCBwZiwgc2ZcbmV4cG9ydHMuc21CZ2prbHBzRiA9IGZ1bmN0aW9uIChmaW5hbEJnamtscHMsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKHZlcnNpb24yXzEuc3RvcEZpbmFsU291bmRzQmdqa2xwcy5pbmNsdWRlcyhmaW5hbEJnamtscHMpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmJ3LCBiYngsIGdndywgZ2d4LCBqancsIGpqeCwga2t3LCBra3gsIGxsdywgbGx4LCBwcHcsIHBweCwgc3N3LCBzc3hcbmV4cG9ydHMuc21CYmdnampra2xscHBzc1d4ID0gZnVuY3Rpb24gKGZpbmFsQkJnZ2pqa2tsbHBwc3MsIHRvbmFsV1gpIHtcbiAgICBjb25zdCBlZnMgPSB2ZXJzaW9uMl8xLnN0b3BGaW5hbFNvdW5kc0JCZ2dqamtrbGxwcHNzO1xuICAgIGlmIChlZnMuaW5jbHVkZXMoZmluYWxCQmdnampra2xscHBzcykgJiYgY29sbGVjdGlvbnNfMS50b25hbHNXeC5pbmNsdWRlcyh0b25hbFdYKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGNoZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/matcher.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/metaplasm.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/metaplasm.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** Returns the uncombining forms of a syllable. */\nclass TonalUncombiningForms extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    // push y to make tone 2\n                    // 1 to 2\n                    const s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n                    const tnls = version2_1.freeAllomorphUncombiningRules.get('zero');\n                    if (tnls)\n                        s.pushLetter(new unit_1.AlphabeticLetter(tnls[0].characters));\n                    return [s];\n                }\n                else {\n                    // the 7th tone has two baseforms\n                    const ret = [];\n                    const rules = version2_1.freeAllomorphUncombiningRules.get(allomorph.toString());\n                    const tnls = !rules ? [] : rules;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n                        if (!(tnls[i] instanceof version2_1.ZeroAllomorph)) {\n                            // 2 to 3. 3 to 7. 7 to 5. 3 to 5.\n                            // replace z with f or x\n                            s.popLetter();\n                            s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                            ret.push(s);\n                        }\n                        else {\n                            // 7 to 1\n                            // pop z\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // pop the tone letter\n                // 1 to 4. 3 to 8. 2 to 4. 5 to 8.\n                if (allomorph.tonal.toString() === '')\n                    return [];\n                const s = new morpheme_1.TonalSyllable(sounds.map(x => new unit_1.AlphabeticLetter(x.characters)));\n                s.popLetter();\n                if (collections_1.finalBgjlsbbggjjllss.has(s.lastLetter.literal)) {\n                    const fnls = collections_1.finalBgjlsbbggjjllss.get(s.lastLetter.literal);\n                    if (fnls) {\n                        const clones = fnls.map(it => {\n                            const clone = Object.create(s);\n                            clone.replaceLetter(s.letters.length - 1, version2_1.lowerLettersTonal.get(it.toString()));\n                            return clone;\n                        });\n                        const ret = [];\n                        clones.map(it => ret.push(it));\n                        return clones;\n                    }\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUncombiningForms = TonalUncombiningForms;\n/** Returns the uncombining forms of the syllable preceding ay */\nclass UncombiningPrecedingAyex extends metaplasm_1.TonalCombiningMetaplasm {\n    undoChangedFinal(syllable, sounds) {\n        const keysFinalsPrecedingAy = Array.from(collections_1.voicedVoicelessFinals.keys());\n        if (keysFinalsPrecedingAy.includes(sounds[sounds.length - 2].toString())) {\n            if (collections_1.voicedVoicelessFinals.has(syllable.lastLetter.literal)) {\n                const ltr = collections_1.voicedVoicelessFinals.get(syllable.lastLetter.literal);\n                if (ltr)\n                    syllable.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(ltr));\n            }\n        }\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (allomorph.tonal.toString() === version2_1.TonalLetterTags.f) {\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(sounds.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                        // 1 to 2. 1 to 3\n                        // replace f with y or w\n                        s.popLetter();\n                        s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                        ret.push(s);\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    const s = new morpheme_1.TonalSyllable(sounds.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                    // pop f\n                    s.popLetter();\n                    this.undoChangedFinal(s, sounds);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.x) {\n                // 5 to 1. 5 to 7. 5 to 5.\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(sounds.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                        if (!(tnls[i] instanceof version2_1.ZeroTonal)) {\n                            if (tnls[i] instanceof version2_1.FreeTonalZ) {\n                                // 5 to 7\n                                // replace x with z\n                                s.popLetter();\n                                s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                                ret.push(s);\n                            }\n                            else if (tnls[i] instanceof version2_1.FreeTonalX) {\n                                // 5 to 5\n                                ret.push(s);\n                            }\n                        }\n                        else {\n                            // 5 to 1\n                            // pop x\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    // 5 to 8.\n                    const s = new morpheme_1.TonalSyllable(sounds.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                    // pop x\n                    s.popLetter();\n                    this.undoChangedFinal(s, sounds);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.y) {\n                return [];\n            }\n        }\n        return [];\n    }\n}\nexports.UncombiningPrecedingAyex = UncombiningPrecedingAyex;\n/** Returns the last syllable of a double or triple construction as an uncombining form. */\nclass TonalReduplication extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(sounds) {\n        super();\n        this.sounds = sounds;\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            // skip the last syllable. it is the base form of the preceding 2 syllables.\n            if (this.sounds[this.sounds.length - 1].toString() ===\n                sounds[sounds.length - 1].toString())\n                return [];\n            const s = new morpheme_1.TonalSyllable(this.sounds.map(it => new unit_1.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalReduplication = TonalReduplication;\n/** Lemmatizes a word and returns its base forms. */\nclass TonalLemmatization extends metaplasm_2.TonalLemmatizationMetaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return this.populateLemmata(morphemes, inflectionalEnding);\n    }\n    getLemmas(morphemes, inflectionalEnding) {\n        if (inflectionalEnding) {\n            if (inflectionalEnding instanceof lexeme_1.FreeInflectionalEnding) {\n                const ret = [];\n                const arr = morphemes[morphemes.length - 1].getForms();\n                for (let key in arr) {\n                    const wrd = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n                    wrd.popSyllable();\n                    wrd.pushSyllable(arr[key]);\n                    ret.push(wrd);\n                }\n                return ret;\n            }\n            else if (inflectionalEnding instanceof lexeme_1.CheckedInflectionalEnding) {\n                if (morphemes[morphemes.length - 1].getForms().length == 0)\n                    return [];\n                const wrd = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].getForms()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n    populateLemmata(morphemes, inflectionalEnding) {\n        let lemmata = new Array();\n        // turn morphemes into lemmas\n        let lms = this.getLemmas(morphemes, inflectionalEnding);\n        if (lms.length > 0) {\n            for (let key in lms) {\n                lemmata.push(lms[key]);\n            }\n        }\n        return lemmata;\n    }\n}\nexports.TonalLemmatization = TonalLemmatization;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/morpheme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/morpheme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nconst lexicalroots2_1 = __webpack_require__(/*! ./lexicalroots2 */ \"./node_modules/taipa/lib/tonal/lexicalroots2.js\");\nconst matcher_1 = __webpack_require__(/*! ./matcher */ \"./node_modules/taipa/lib/tonal/matcher.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/tonal/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nfunction syllabifyTonal(letters, beginOfSyllable) {\n    // get the longest matched syllable pattern\n    let literal = '';\n    let matched = '';\n    let begin = 0;\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        // console.log(`begining of the loop: ${literal}. ${ltrs}`);\n        if (lexicalroots2_1.isInLexcialRoots(literal) &&\n            version2_1.freeTonalSounds.includes(letters[i].literal)) {\n            // console.log(`i: ${i}, literal: ${literal}, tone: ${letters[i].literal}, letters[i+1]: ${letters[i + 1].literal}`)\n            if (begin === beginOfSyllable) {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if (lexicalroots2_1.isInLexcialRoots(literal) &&\n            version2_1.stopFinalSounds.includes(letters[i].literal)) {\n            //console.log(`i: ${i}, literal: ${literal}, stopFinal: ${letters[i].literal}`)\n            //console.log(`begin: ${begin}, beginOfSyllable: ${beginOfSyllable}`)\n            if (begin === beginOfSyllable) {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if (version2_1.freeTonalSounds.includes(letters[i].literal)) {\n            // check tonals is the subset of free tonals\n            // console.log('i: %d', i);\n            // console.log(\n            //   `i: ${i}, literal: ${literal}, letters[i].literal, ${letters[i].literal}`\n            // );\n            // when there are tonals\n            if (literal.length > 1 &&\n                letters[i] &&\n                letters[i - 1] &&\n                (matcher_1.smBgkpF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smBbggkkppWx(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smJlsF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smJJllssWx(letters[i - 1].literal, letters[i].literal))) {\n                // b, g, bb, gg, l, j, s, ll, jj, ss need to be handled in TonalCombiningMorpheme.assignAllomorph\n                // this combining form is not present in the pool.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            else if (literal.length > 2 &&\n                letters[i] &&\n                letters[i - 1] &&\n                letters[i - 2] &&\n                matcher_1.smMHhW(letters[i - 2].literal, letters[i - 1].literal, letters[i].literal)) {\n                // for lexical roots end with ~mhhw.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            // tone sandhi of free allomorph\n            const rulesFa = version2_1.freeAllomorphUncombiningRules.get(letters[i].literal);\n            const tnlsFa = !rulesFa ? [] : rulesFa.map(x => x.toString());\n            // tone sandhi of ay\n            const rulesAy = version2_1.uncombiningRulesAy.get(letters[i].literal);\n            const tnlsAy = !rulesAy ? [] : rulesAy.map(x => x.toString());\n            // merge the above twoo arrays\n            const tnls = tnlsFa.concat(tnlsAy.filter(item => tnlsFa.indexOf(item) < 0));\n            //console.log(ts)\n            if (tnls.length > 0) {\n                for (let t of tnls) {\n                    //console.log(lit + t.toString())\n                    if (lexicalroots2_1.isInLexcialRoots(letters\n                        .slice(beginOfSyllable, i)\n                        .map(x => x.literal)\n                        .join('') + t)) {\n                        // this combining form is not present in the pool,\n                        // but its uncombining forms are. e.g. aw.\n                        matched = literal;\n                        //begin = beginOfSyllable;\n                        Object.assign(matchedLtrs, ltrs);\n                        break;\n                    }\n                }\n                if (matched.length > 0 && matchedLtrs.length > 0)\n                    break;\n            }\n            else {\n                // no uncombining forms for this combining form. e.g. ax.\n                matched = '';\n                matchedLtrs = [];\n            }\n        }\n        else if (lexicalroots2_1.isInLexcialRoots(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            begin = beginOfSyllable;\n            // console.log(matched);\n        }\n        else {\n            //console.log('no matched for syllabifyTonal:' + ltrs)\n            // when there are no tonals\n            if (letters[i].literal === version2_1.TonalLetterTags.gg) {\n                // for surface form gg whose underlying form could be tt or kk.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            else if (!version2_1.freeTonalSounds.includes(letters[i].literal)) {\n                // free first tone without a free tonal\n                const rules = version2_1.freeAllomorphUncombiningRules.get(version2_1.TonalLetterTags.zero);\n                const tnls = !rules ? [] : rules;\n                for (let t of tnls) {\n                    // append second tonal letter\n                    // check the uncombining forms\n                    if (lexicalroots2_1.isInLexcialRoots(literal + t.toString())) {\n                        // if the free first tone's lemma is included\n                        matched = literal;\n                        Object.assign(matchedLtrs, ltrs);\n                        //break;\n                    }\n                }\n            }\n            // when there is no matched lexcial roots for this syllable, we still assign begin\n            begin = beginOfSyllable;\n        }\n    }\n    // console.log(`literal: ${literal}. matched: ${matched}`);\n    // console.log(matchedLtrs);\n    if (matched.length > 0 && literal.length > matched.length) {\n        // when ~ay is longer than ~a by one letter y\n        // for those first tone lexcial roots that are present\n        matched = '';\n        matchedLtrs = [];\n    }\n    //console.log('matched: ' + matched)\n    const tsg = new soundgen_1.TonalSoundGenerator();\n    //console.log('matched: ' + matched)\n    let list = new Array();\n    if (matched.length > 0) {\n        list = tsg.generate(matchedLtrs);\n    }\n    else {\n        if (ltrs.length == 3 && ltrs[1] === 'a' && ltrs[2] === 'y') {\n            const rea = new metaplasm_2.RemovingEpenthesisOfAy();\n            const done = rea.applyToString(literal);\n            //console.log(done.toString())\n            if (collections_1.epentheticSounds.includes(ltrs[0]) && lexicalroots2_1.isInLexcialRoots(done)) {\n                list = tsg.generate(ltrs);\n            }\n        }\n    }\n    // console.log(list);\n    let matchedLen = 0;\n    let mp = new unit_1.MatchedPattern();\n    for (let m in list) {\n        const min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        //console.log(syllabary[m])\n                        if (n + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                mp.letters[q] = letters[beginOfSyllable + q];\n                            }\n                            // copy the pattern of sounds\n                            mp.pattern = list[m];\n                            //console.log(syllabary.list[m])\n                            //console.log(mp.letters)\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return mp;\n}\nexports.syllabifyTonal = syllabifyTonal;\nclass TonalSyllable extends unit_1.Syllable {\n    popLetter() {\n        this.letters = this.letters.slice(0, this.letters.length - 1);\n        this.concat();\n    }\n    get lastLetter() {\n        if (this.letters.length >= 1)\n            return this.letters[this.letters.length - 1];\n        return new unit_2.AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length >= 2)\n            return this.letters[this.letters.length - 2];\n        return new unit_2.AlphabeticLetter([]);\n    }\n}\nexports.TonalSyllable = TonalSyllable;\n/** A syllable and its uncombining forms. */\nclass TonalUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.allomorph = this.assignAllomorph(this.syllable);\n        this.sounds = sounds;\n        this.forms = this.metaplasm.apply(this.sounds, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    assignAllomorph(syllable) {\n        let allomorph = new version2_1.ZeroAllomorph();\n        // assign the matched allomorph for this syllable\n        let aoas = []; // array of allomorphs\n        let keys = Array.from(version2_1.checkedAllomorphs.keys());\n        for (let k = 0; k < keys.length; k++) {\n            let am = version2_1.checkedAllomorphs.get(keys[k]);\n            if (am && am instanceof version2_1.CheckedAllomorph) {\n                if (am.tonal) {\n                    if (am.tonal.toString() === syllable.lastLetter.literal &&\n                        am.final.toString() === syllable.lastSecondLetter.literal) {\n                        aoas.push(am);\n                        break;\n                    }\n                    else {\n                        if (am.final.toString() === syllable.lastLetter.literal) {\n                            aoas.push(am);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (aoas.length > 0) {\n            // there is only one match after processing, we just assign it\n            let ret = aoas.shift();\n            if (ret)\n                return ret;\n        }\n        // after matching with checked allomorphs, we go on matching free allomorphs\n        aoas = [];\n        if (version2_1.freeAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.freeAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                aoas.push(am);\n            else\n                aoas.push(new version2_1.Allomorph());\n        }\n        if (aoas.length == 0) {\n            // tone 1 has no allomorph\n            allomorph = new version2_1.ZeroAllomorph();\n        }\n        else if (aoas.length == 1) {\n            // are there multiple allomorphs? there should be only one.\n            for (let i = 0; i < aoas.length; i++) {\n                if (aoas[i].tonal.toString() === new version2_1.AllomorphX().tonal.toString()) {\n                    // this syllable is already in base form\n                    // in order to display this inflectional ending, we have to assign\n                    allomorph = aoas[i];\n                }\n                else {\n                    allomorph = aoas[i];\n                }\n            }\n        }\n        return allomorph;\n    }\n}\nexports.TonalUncombiningMorpheme = TonalUncombiningMorpheme;\nclass TonalUncombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n        this.sandhiFinals = new Array();\n        this.sandhiFinalTonals = new Array();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(matched, metaplasm) {\n        const tum = new TonalUncombiningMorpheme(new TonalSyllable(matched.letters), matched.pattern, metaplasm);\n        return tum;\n    }\n    isCombiningAyex(patterns) {\n        const keysAy = Array.from(version2_1.uncombiningRulesAy.keys());\n        if (patterns.length == 2 &&\n            keysAy.filter(it => it === patterns[patterns.length - 2].lastLetter.literal).length > 0 &&\n            ((patterns[patterns.length - 1].lastSecondLetter.literal ===\n                version2_1.TonalLetterTags.a &&\n                patterns[patterns.length - 1].lastLetter.literal ===\n                    version2_1.TonalLetterTags.y) ||\n                patterns[patterns.length - 1].lastLetter.literal === version2_1.TonalLetterTags.a)) {\n            return true;\n        }\n        return false;\n    }\n    isDoublet(matches) {\n        if (matches.length == 2) {\n            const stms = matches\n                .map(it => it.pattern.filter(s => s.name !== version2_1.TonalSoundTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = matches\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSoundTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // compare 2 strings/lexical stems\n            if (stms[0] === stms[1])\n                return true; // identical\n        }\n        return false;\n    }\n    isTriplet(matches) {\n        if (matches.length == 3) {\n            const stms = matches\n                .map(it => it.pattern.filter(s => s.name !== version2_1.TonalSoundTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = matches\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSoundTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // compare 3 strings/lexical stems\n            if (stms.every((v, i, a) => v === a[0]))\n                return true; // identical\n        }\n        return false;\n    }\n    preprocessSandhiFinal(letters) {\n        this.sandhiFinals.push(letters[letters.length - 1]);\n        return letters.slice(0, letters.length - 1);\n    }\n    preprocessSandhiFinalTonal(letters, literal, regex, len) {\n        const arr = literal.match(regex);\n        // console.log(arr)\n        let indx = -1;\n        if (len == 1) {\n            for (let i = 0; i < letters.length - 1; i++) {\n                if (matcher_1.smJlsF(letters[i].literal, letters[i + 1].literal) ||\n                    matcher_1.smJJllssWx(letters[i].literal, letters[i + 1].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        else if (len == 2) {\n            for (let i = 0; i < letters.length - 2; i++) {\n                if (matcher_1.smMnngHF(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal) ||\n                    matcher_1.smMnngHHWx(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        if (arr) {\n            for (let i in arr) {\n                const idxl = literal.search(arr[i]);\n                const sub1 = literal.substring(0, idxl);\n                const sub2 = literal.substring(idxl + arr[i].length);\n                // in case of hmhhw or hmhhwhmhhw\n                // check if the previous letter is a consonant\n                if (version2_1.initialSounds.includes(sub1))\n                    return letters;\n                let fnl;\n                if (version2_1.TonalLetterTags.f === arr[i].charAt(arr[i].length - 1)) {\n                    literal = sub1.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.f, sub2);\n                    fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                }\n                else if (collections_1.tonalsWx.includes(arr[i].charAt(arr[i].length - 1))) {\n                    if (arr[i].charAt(arr[i].length - 1) === version2_1.TonalLetterTags.w)\n                        literal = sub1.concat(version2_1.TonalLetterTags.tt + version2_1.TonalLetterTags.w, sub2);\n                    else if (arr[i].charAt(arr[i].length - 1) === version2_1.TonalLetterTags.x)\n                        literal = sub1.concat(version2_1.TonalLetterTags.tt + version2_1.TonalLetterTags.x, sub2);\n                    fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n                }\n                // console.log(literal)\n                if (fnl && len == 1)\n                    this.sandhiFinalTonals.push({ index: indx, letters: [fnl[0]] });\n                else if (fnl && len == 2)\n                    this.sandhiFinalTonals.push({\n                        index: indx,\n                        letters: [fnl[0], fnl[1]],\n                    });\n            }\n        }\n        return letters;\n    }\n    replaceSandhiFinal(letters) {\n        const slicedLetters = letters.slice(0, letters.length - 1);\n        const literal = slicedLetters.map(it => it.literal).join('');\n        if (letters.length > 0 &&\n            letters[letters.length - 1].literal === version2_1.TonalLetterTags.gg &&\n            lexicalroots2_1.isInLexcialRoots(literal + version2_1.TonalLetterTags.tt) &&\n            !lexicalroots2_1.isInLexcialRoots(literal + version2_1.TonalLetterTags.kk)) {\n            // for surface form gg whose underlying form is tt but not kk\n            const ls = this.preprocessSandhiFinal(letters);\n            ls.push(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return ls;\n        }\n        return letters;\n    }\n    replaceSandhiFinalTonal(letters) {\n        let literal = letters.map(x => x.literal).join('');\n        if (literal.length > 1 && matcher_1.regexJlsF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexJlsF, 1);\n            return ls;\n        }\n        else if (literal.length > 1 && matcher_1.regexJjllssWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexJjllssWx, 1);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHF, 2);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHhWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHhWx, 2);\n            return ls;\n        }\n        return letters;\n    }\n    preprocess(graphemes) {\n        let ltrs = new Array();\n        ltrs = graphemes.map(it => it.letter);\n        ltrs = this.replaceSandhiFinal(ltrs);\n        ltrs = this.replaceSandhiFinalTonal(ltrs);\n        return ltrs;\n    }\n    postprocessSandhiTTt(pattern) {\n        if ((pattern.letters[pattern.letters.length - 1].literal ===\n            version2_1.TonalLetterTags.t ||\n            pattern.letters[pattern.letters.length - 1].literal ===\n                version2_1.TonalLetterTags.tt) &&\n            this.sandhiFinals.length > 0) {\n            pattern.letters.pop();\n            pattern.pattern.pop();\n            const fnl = this.sandhiFinals.pop();\n            if (fnl) {\n                pattern.letters.push(fnl);\n                const snd = version2_1.tonalPositionalSounds.get(fnl.literal);\n                if (snd)\n                    pattern.pattern.push(snd(version2_1.TonalSoundTags.stopFinal));\n            }\n        }\n        else if (this.sandhiFinalTonals.length > 0) {\n            const fnl = this.sandhiFinalTonals.pop();\n            if (fnl) {\n                if (fnl.letters.length == 1) {\n                    pattern.letters.splice(fnl.index, 1, fnl.letters[0]);\n                    const snd = version2_1.tonalPositionalSounds.get(fnl.letters[0].literal);\n                    if (snd)\n                        pattern.pattern.splice(fnl.index, 1, snd(version2_1.TonalSoundTags.stopFinal));\n                }\n                else if (fnl.letters.length == 2) {\n                    // console.log(pattern)\n                    pattern.letters.splice(fnl.index, 1, fnl.letters[0], fnl.letters[1]);\n                    const snd1 = version2_1.tonalPositionalSounds.get(fnl.letters[0].literal);\n                    const snd2 = version2_1.tonalPositionalSounds.get(fnl.letters[1].literal);\n                    if (snd1 && snd2)\n                        pattern.pattern.splice(fnl.index, 1, snd1(version2_1.TonalSoundTags.nasalFinal), snd2(version2_1.TonalSoundTags.stopFinal));\n                    // console.log(pattern)\n                }\n            }\n        }\n        return pattern;\n    }\n    postprocess(matched) {\n        const morphemes = this.createMorphemes();\n        for (let i in matched) {\n            const ptn = this.postprocessSandhiTTt(matched[i]);\n            if (this.isCombiningAyex(matched)) {\n                // ~fa, ~xa, fay, or ~xay. ex.\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.UncombiningPrecedingAyex()));\n            }\n            else if (this.isTriplet(matched)) {\n                // triplet construction\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalReduplication(matched[2].pattern)));\n            }\n            else if (this.isDoublet(matched)) {\n                // doublet construction\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalReduplication(matched[1].pattern)));\n            }\n            else {\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms()));\n            }\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = this.preprocess(graphemes);\n        const ptns = this.make(ltrs, syllabifyTonal);\n        const ms = this.postprocess(ptns);\n        // TODO: to further check if the lexical roots valid, given the following syllable\n        return ms;\n    }\n}\nexports.TonalUncombiningMorphemeMaker = TonalUncombiningMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/phraseme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/phraseme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\n/** A phrase made of words. */\nclass TonalPhrase extends unit_1.Phrase {\n    constructor(words) {\n        super();\n        this.words = new Array();\n        if (words) {\n            this.words = words;\n            this.concat();\n        }\n    }\n    popWord() {\n        // get rid off the last word from array\n        this.words = this.words.slice(0, this.words.length - 1);\n        this.concat();\n    }\n    pushWord(w) {\n        this.words.push(w);\n        this.concat();\n    }\n    concat() {\n        if (this.words.length > 0) {\n            if (this.words.filter(x => x && x.literal.length > 0).length == 0) {\n                this.literal = '';\n            }\n            else\n                this.literal = this.words.map(x => (x ? x.literal : '')).join(' ');\n        }\n    }\n}\nexports.TonalPhrase = TonalPhrase;\n//# sourceMappingURL=phraseme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3BocmFzZW1lLmpzPzY2ZDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RCxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3BocmFzZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbi8qKiBBIHBocmFzZSBtYWRlIG9mIHdvcmRzLiAqL1xuY2xhc3MgVG9uYWxQaHJhc2UgZXh0ZW5kcyB1bml0XzEuUGhyYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3Jkcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGlmICh3b3Jkcykge1xuICAgICAgICAgICAgdGhpcy53b3JkcyA9IHdvcmRzO1xuICAgICAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwb3BXb3JkKCkge1xuICAgICAgICAvLyBnZXQgcmlkIG9mZiB0aGUgbGFzdCB3b3JkIGZyb20gYXJyYXlcbiAgICAgICAgdGhpcy53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCwgdGhpcy53b3Jkcy5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICB9XG4gICAgcHVzaFdvcmQodykge1xuICAgICAgICB0aGlzLndvcmRzLnB1c2godyk7XG4gICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgfVxuICAgIGNvbmNhdCgpIHtcbiAgICAgICAgaWYgKHRoaXMud29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud29yZHMuZmlsdGVyKHggPT4geCAmJiB4LmxpdGVyYWwubGVuZ3RoID4gMCkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpdGVyYWwgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmxpdGVyYWwgPSB0aGlzLndvcmRzLm1hcCh4ID0+ICh4ID8geC5saXRlcmFsIDogJycpKS5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlRvbmFsUGhyYXNlID0gVG9uYWxQaHJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waHJhc2VtZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/phraseme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/prediction.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/prediction.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lexicalroots2_1 = __webpack_require__(/*! ./lexicalroots2 */ \"./node_modules/taipa/lib/tonal/lexicalroots2.js\");\n/** Predicts the following letters. Return them as an array of strings when available. If the lexical roots are not present, an empty array will be returned. */\nfunction predict(strs) {\n    const soundSeqs = new Array();\n    for (let j = 0; j < soundgen_1.syllableCompositions.length; j++) {\n        let sg = new unit_1.SoundGeneration();\n        sg.predictive = true;\n        sg.letters = strs;\n        sg = soundgen_1.syllableCompositions[j](sg);\n        if (sg.letters.length != sg.sounds.length || sg.matching != true) {\n            // the pattern is not matched, the first unmatched set of sounds\n            // is then returned as a possible prediction\n            sg.predictions.map(x => soundSeqs.push(x));\n        }\n    }\n    const dupes = new Array();\n    soundSeqs.map(i => i.map(j => dupes.push([j.toString(), j.name])));\n    const dedupes = dupes.reduce(function (accumulator, curr) {\n        if (accumulator.filter(x => x[0] === curr[0]).length == 0) {\n            accumulator.push(curr);\n        }\n        return accumulator;\n    }, []);\n    // for valid predictions\n    const predictions = dedupes.filter(x => lexicalroots2_1.isInLexcialRoots(strs.join('') + x[0]));\n    return predictions;\n}\nexports.predict = predict;\n//# sourceMappingURL=prediction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3ByZWRpY3Rpb24uanM/ZGE4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RUFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvdG9uYWwvcHJlZGljdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc291bmRnZW5fMSA9IHJlcXVpcmUoXCIuL3NvdW5kZ2VuXCIpO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBsZXhpY2Fscm9vdHMyXzEgPSByZXF1aXJlKFwiLi9sZXhpY2Fscm9vdHMyXCIpO1xuLyoqIFByZWRpY3RzIHRoZSBmb2xsb3dpbmcgbGV0dGVycy4gUmV0dXJuIHRoZW0gYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aGVuIGF2YWlsYWJsZS4gSWYgdGhlIGxleGljYWwgcm9vdHMgYXJlIG5vdCBwcmVzZW50LCBhbiBlbXB0eSBhcnJheSB3aWxsIGJlIHJldHVybmVkLiAqL1xuZnVuY3Rpb24gcHJlZGljdChzdHJzKSB7XG4gICAgY29uc3Qgc291bmRTZXFzID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzb3VuZGdlbl8xLnN5bGxhYmxlQ29tcG9zaXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBzZyA9IG5ldyB1bml0XzEuU291bmRHZW5lcmF0aW9uKCk7XG4gICAgICAgIHNnLnByZWRpY3RpdmUgPSB0cnVlO1xuICAgICAgICBzZy5sZXR0ZXJzID0gc3RycztcbiAgICAgICAgc2cgPSBzb3VuZGdlbl8xLnN5bGxhYmxlQ29tcG9zaXRpb25zW2pdKHNnKTtcbiAgICAgICAgaWYgKHNnLmxldHRlcnMubGVuZ3RoICE9IHNnLnNvdW5kcy5sZW5ndGggfHwgc2cubWF0Y2hpbmcgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gdGhlIHBhdHRlcm4gaXMgbm90IG1hdGNoZWQsIHRoZSBmaXJzdCB1bm1hdGNoZWQgc2V0IG9mIHNvdW5kc1xuICAgICAgICAgICAgLy8gaXMgdGhlbiByZXR1cm5lZCBhcyBhIHBvc3NpYmxlIHByZWRpY3Rpb25cbiAgICAgICAgICAgIHNnLnByZWRpY3Rpb25zLm1hcCh4ID0+IHNvdW5kU2Vxcy5wdXNoKHgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkdXBlcyA9IG5ldyBBcnJheSgpO1xuICAgIHNvdW5kU2Vxcy5tYXAoaSA9PiBpLm1hcChqID0+IGR1cGVzLnB1c2goW2oudG9TdHJpbmcoKSwgai5uYW1lXSkpKTtcbiAgICBjb25zdCBkZWR1cGVzID0gZHVwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgY3Vycikge1xuICAgICAgICBpZiAoYWNjdW11bGF0b3IuZmlsdGVyKHggPT4geFswXSA9PT0gY3VyclswXSkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnB1c2goY3Vycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0sIFtdKTtcbiAgICAvLyBmb3IgdmFsaWQgcHJlZGljdGlvbnNcbiAgICBjb25zdCBwcmVkaWN0aW9ucyA9IGRlZHVwZXMuZmlsdGVyKHggPT4gbGV4aWNhbHJvb3RzMl8xLmlzSW5MZXhjaWFsUm9vdHMoc3Rycy5qb2luKCcnKSArIHhbMF0pKTtcbiAgICByZXR1cm4gcHJlZGljdGlvbnM7XG59XG5leHBvcnRzLnByZWRpY3QgPSBwcmVkaWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZGljdGlvbi5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/prediction.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/soundgen.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/soundgen.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction initialConsonant(sg) {\n    if (version2_1.initialSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.initial);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction stopFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.stopFinalSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.stopFinal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.stopFinalSounds.sounds);\n    }\n    return sg;\n}\nfunction neutralFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.neutralFinalSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.stopFinal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.neutralFinalSounds.sounds);\n    }\n    return sg;\n}\nfunction nasalFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.nasalFinalSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.nasalFinal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalFinalSounds.sounds);\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    let toBePredicted = true;\n    let matches = 0;\n    for (let i = sg.sounds.length; i < sg.letters.length; i++) {\n        // console.log(`sg.sounds.length: ${sg.sounds.length}`);\n        if (version2_1.medialSounds.includes(sg.letters[i])) {\n            toBePredicted = false;\n            const ps = version2_1.tonalPositionalSounds.get(sg.letters[i]);\n            if (ps) {\n                const s = ps(version2_1.TonalSoundTags.medial);\n                matches++;\n                if (s)\n                    sg.sounds.push(s);\n            }\n        }\n        else {\n            toBePredicted = false;\n            if (matches == 0)\n                sg.matching = false;\n            break;\n        }\n    }\n    if (toBePredicted) {\n        if (sg.predictive && sg.letters.length > 0)\n            sg.predictions.push(version2_1.medialSounds.sounds);\n        sg.matching = false;\n    }\n    return sg;\n}\nfunction materLectionis(sg) {\n    if (version2_1.materLectionisSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.medial);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction nasalization(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.nasalizationSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.nasalization);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalizationSounds.sounds);\n    }\n    return sg;\n}\nfunction freeTone(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.freeTonalSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.freeTonal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.freeTonalSounds.sounds);\n    }\n    return sg;\n}\nfunction checkedTone(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.checkedTonalSounds.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.checkedTonal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length && sg.predictive)\n            sg.predictions.push(version2_1.checkedTonalSounds.sounds);\n    }\n    return sg;\n}\nfunction sandhiFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.stopFinalSoundsBgjklps.includes(sg.letters[sg.sounds.length]) ||\n        version2_1.stopFinalSoundsBBggjjkkllppss.includes(sg.letters[sg.sounds.length])) {\n        const ps = version2_1.tonalPositionalSounds.get(sg.letters[sg.sounds.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSoundTags.stopFinal);\n            if (s)\n                sg.sounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.sounds.length &&\n            sg.predictive &&\n            sg.predictSandhiFinal) {\n            sg.predictions.push(version2_1.stopFinalSoundsBgjklps.sounds);\n            sg.predictions.push(version2_1.stopFinalSoundsBBggjjkkllppss.sounds);\n        }\n    }\n    return sg;\n}\n// common syllables\nconst scV = unit_1.sgPipe(vowel);\nconst scM = unit_1.sgPipe(materLectionis);\nconst scVT = unit_1.sgPipe(vowel, freeTone);\nconst scMT = unit_1.sgPipe(materLectionis, freeTone);\nconst scMC = unit_1.sgPipe(materLectionis, neutralFinalConsonant);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scVC1 = unit_1.sgPipe(vowel, stopFinalConsonant);\nconst scVC2 = unit_1.sgPipe(vowel, nasalFinalConsonant);\nconst scVCT1 = unit_1.sgPipe(vowel, stopFinalConsonant, checkedTone);\nconst scVCT2 = unit_1.sgPipe(vowel, nasalFinalConsonant, freeTone);\nconst scCVT = unit_1.sgPipe(initialConsonant, vowel, freeTone);\nconst scCVC1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant);\nconst scCVC2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant);\nconst scCVCT1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant, checkedTone);\nconst scCVCT2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, freeTone);\nconst scCVCC = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant);\n// consonant syllables\nconst scCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant);\nconst scCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, freeTone);\nconst scCCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant);\nconst scCCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant, checkedTone);\n// nasalization syllables\nconst scVN = unit_1.sgPipe(vowel, nasalization);\nconst scVNT = unit_1.sgPipe(vowel, nasalization, freeTone);\nconst scCVN = unit_1.sgPipe(initialConsonant, vowel, nasalization);\nconst scCVNT = unit_1.sgPipe(initialConsonant, vowel, nasalization, freeTone);\n//const scVNC = sgPipe(vowel, nasalization, neutralFinalConsonant);\n//const scVNCT = sgPipe(vowel, nasalization, neutralFinalConsonant, checkedTone);\nconst scCVNC = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant);\nconst scCVNCT = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant, checkedTone);\n// sandhi syllables\nconst scVC3 = unit_1.sgPipe(vowel, sandhiFinalConsonant);\nconst scVCT3 = unit_1.sgPipe(vowel, sandhiFinalConsonant, checkedTone);\nconst scCVC3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant);\nconst scCVCT3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant, checkedTone);\nconst scCVCCT = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant, checkedTone);\n// prettier-ignore\nexports.syllableCompositions = [\n    // syllable compositions or patterns\n    scV, scM, scVT, scMT, scMC, scCV, scVC1, scVC2, scVCT1, scVCT2, scCVT, scCVC1,\n    scCVC2, scCVCT1, scCVCT2, scCVCC,\n    scCC, scCCT, scCCC, scCCCT,\n    scVN, scVNT, scCVN, scCVNT, scCVNC, scCVNCT,\n    scVC3, scVCT3, scCVC3, scCVCT3, scCVCCT,\n];\nclass TonalSoundGenerator {\n    isStopFinal(str) {\n        if (version2_1.stopFinalSounds.includes(str))\n            return true;\n        return false;\n    }\n    genChecked(ltrs) {\n        const tos = collections_1.combiningRules.get(ltrs[ltrs.length - 1]);\n        let strs = new Array();\n        strs.push(ltrs);\n        // console.debug(tos);\n        if (tos) {\n            for (let i in tos) {\n                let syl = new Array();\n                Object.assign(syl, ltrs);\n                syl.push(version2_1.lowerLettersTonal.get(tos[i]).literal);\n                strs.push(syl);\n            }\n        }\n        return strs;\n    }\n    generate(letters) {\n        let strs = new Array();\n        const sequences = new Array(); // to be returned\n        if (this.isStopFinal(letters[letters.length - 1])) {\n            strs = this.genChecked(letters);\n        }\n        else {\n            strs.push(letters);\n        }\n        for (let i in strs) {\n            // generates all needed sounds to be processed\n            for (let j = 0; j < exports.syllableCompositions.length; j++) {\n                let sg = new unit_1.SoundGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = exports.syllableCompositions[j](sg);\n                if (sg.letters.length == sg.sounds.length && sg.matching == true) {\n                    sequences.push(sg.sounds);\n                    break;\n                }\n            }\n        }\n        // console.log(letters, sequences);\n        return sequences;\n    }\n}\nexports.TonalSoundGenerator = TonalSoundGenerator;\n//# sourceMappingURL=soundgen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/soundgen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/version2.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/version2.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nclass Morph {\n}\nexports.Morph = Morph;\nclass Allomorph extends Morph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        if (this.tonal.toString().length == 0) {\n            // return string 'zero' for first tone. member variable characters of graph is still null.\n            return TonalLetterTags.zero;\n        }\n        else\n            return this.tonal.toString();\n    }\n}\nexports.Allomorph = Allomorph;\nclass FreeAllomorph extends Allomorph {\n}\nexports.FreeAllomorph = FreeAllomorph;\nclass CheckedAllomorph extends Allomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new Final();\n    }\n    toString() {\n        if (this.tonal.toString()) {\n            return this.final.toString() + this.tonal.toString();\n        }\n        return this.final.toString();\n    }\n}\nexports.CheckedAllomorph = CheckedAllomorph;\nclass TonalAffix extends Morph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        return this.tonal.toString();\n    }\n}\nexports.TonalAffix = TonalAffix;\nclass FreeAffix extends TonalAffix {\n}\nclass CheckedAffix extends TonalAffix {\n}\nvar TonalLetterTags;\n(function (TonalLetterTags) {\n    TonalLetterTags[\"a\"] = \"a\";\n    TonalLetterTags[\"e\"] = \"e\";\n    TonalLetterTags[\"i\"] = \"i\";\n    TonalLetterTags[\"o\"] = \"o\";\n    TonalLetterTags[\"u\"] = \"u\";\n    TonalLetterTags[\"ur\"] = \"ur\";\n    TonalLetterTags[\"c\"] = \"c\";\n    TonalLetterTags[\"d\"] = \"d\";\n    TonalLetterTags[\"ch\"] = \"ch\";\n    TonalLetterTags[\"j\"] = \"j\";\n    TonalLetterTags[\"q\"] = \"q\";\n    TonalLetterTags[\"s\"] = \"s\";\n    TonalLetterTags[\"v\"] = \"v\";\n    TonalLetterTags[\"m\"] = \"m\";\n    TonalLetterTags[\"n\"] = \"n\";\n    TonalLetterTags[\"ng\"] = \"ng\";\n    TonalLetterTags[\"nn\"] = \"nn\";\n    TonalLetterTags[\"f\"] = \"f\";\n    TonalLetterTags[\"w\"] = \"w\";\n    TonalLetterTags[\"x\"] = \"x\";\n    TonalLetterTags[\"xx\"] = \"xx\";\n    TonalLetterTags[\"y\"] = \"y\";\n    TonalLetterTags[\"z\"] = \"z\";\n    TonalLetterTags[\"zx\"] = \"zx\";\n    TonalLetterTags[\"b\"] = \"b\";\n    TonalLetterTags[\"g\"] = \"g\";\n    TonalLetterTags[\"l\"] = \"l\";\n    TonalLetterTags[\"k\"] = \"k\";\n    TonalLetterTags[\"p\"] = \"p\";\n    TonalLetterTags[\"t\"] = \"t\";\n    TonalLetterTags[\"kk\"] = \"kk\";\n    TonalLetterTags[\"pp\"] = \"pp\";\n    TonalLetterTags[\"tt\"] = \"tt\";\n    TonalLetterTags[\"hh\"] = \"hh\";\n    TonalLetterTags[\"bb\"] = \"bb\";\n    TonalLetterTags[\"gg\"] = \"gg\";\n    TonalLetterTags[\"jj\"] = \"jj\";\n    TonalLetterTags[\"ll\"] = \"ll\";\n    TonalLetterTags[\"ss\"] = \"ss\";\n    TonalLetterTags[\"h\"] = \"h\";\n    TonalLetterTags[\"zero\"] = \"zero\";\n    TonalLetterTags[\"er\"] = \"er\";\n    TonalLetterTags[\"ir\"] = \"ir\";\n    TonalLetterTags[\"or\"] = \"or\";\n})(TonalLetterTags = exports.TonalLetterTags || (exports.TonalLetterTags = {}));\nclass LettersOfTonal extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'nng'.length && listLength == 43) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'n' &&\n                characters[beginOfLetter + 2].character === 'g') {\n                // at the beginning of a letter, we should always prefer 'n' to 'nn'\n                // 'nn' is not able to begin a syllable\n                // 'ng' has higher associativity than 'nn' when in 'nng'\n                // special case for 'nng'\n                // copy the matched letter\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfTonal = LettersOfTonal;\nexports.lowerLettersTonal = new LettersOfTonal([\n    TonalLetterTags.a,\n    TonalLetterTags.e,\n    TonalLetterTags.i,\n    TonalLetterTags.o,\n    TonalLetterTags.u,\n    TonalLetterTags.ur,\n    TonalLetterTags.c,\n    TonalLetterTags.d,\n    TonalLetterTags.ch,\n    TonalLetterTags.j,\n    TonalLetterTags.q,\n    TonalLetterTags.s,\n    TonalLetterTags.v,\n    TonalLetterTags.m,\n    TonalLetterTags.n,\n    TonalLetterTags.ng,\n    TonalLetterTags.nn,\n    TonalLetterTags.w,\n    TonalLetterTags.xx,\n    TonalLetterTags.z,\n    TonalLetterTags.zx,\n    TonalLetterTags.x,\n    TonalLetterTags.y,\n    TonalLetterTags.b,\n    TonalLetterTags.g,\n    TonalLetterTags.l,\n    TonalLetterTags.k,\n    TonalLetterTags.p,\n    TonalLetterTags.t,\n    TonalLetterTags.kk,\n    TonalLetterTags.pp,\n    TonalLetterTags.tt,\n    TonalLetterTags.hh,\n    TonalLetterTags.bb,\n    TonalLetterTags.gg,\n    TonalLetterTags.jj,\n    TonalLetterTags.ll,\n    TonalLetterTags.ss,\n    TonalLetterTags.f,\n    TonalLetterTags.h,\n    TonalLetterTags.er,\n    TonalLetterTags.ir,\n    TonalLetterTags.or,\n]);\nvar TonalSoundTags;\n(function (TonalSoundTags) {\n    TonalSoundTags[\"initial\"] = \"initial\";\n    TonalSoundTags[\"medial\"] = \"medial\";\n    TonalSoundTags[\"nasalization\"] = \"nasalization\";\n    TonalSoundTags[\"stopFinal\"] = \"stopFinal\";\n    TonalSoundTags[\"nasalFinal\"] = \"nasalFinal\";\n    TonalSoundTags[\"checkedTonal\"] = \"checkedTonal\";\n    TonalSoundTags[\"freeTonal\"] = \"freeTonal\";\n})(TonalSoundTags = exports.TonalSoundTags || (exports.TonalSoundTags = {}));\nclass Initial extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.initial;\n    }\n}\nexports.Initial = Initial;\nclass Medial extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.medial;\n    }\n}\nexports.Medial = Medial;\nclass Final extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Final = Final;\nclass Nasalization extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.nasalization;\n    }\n}\nexports.Nasalization = Nasalization;\nclass Tonal extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Tonal = Tonal;\nclass FreeTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.freeTonal;\n    }\n}\nexports.FreeTonal = FreeTonal;\nclass CheckedTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.checkedTonal;\n    }\n}\nexports.CheckedTonal = CheckedTonal;\nclass StopFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.stopFinal;\n    }\n}\nexports.StopFinal = StopFinal;\nclass NasalFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.nasalFinal;\n    }\n}\nexports.NasalFinal = NasalFinal;\nclass MedialA extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.a);\n    }\n}\nclass MedialE extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.e);\n    }\n}\nclass MedialI extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.i);\n    }\n}\nclass MedialO extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.o);\n    }\n}\nclass MedialU extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.u);\n    }\n}\nclass MedialUR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ur);\n    }\n}\nclass MedialER extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.er);\n    }\n}\nclass MedialIR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ir);\n    }\n}\nclass MedialOR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.or);\n    }\n}\nclass MaterLectionisM extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass MaterLectionisN extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass MaterLectionisNG extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass InitialC extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.c);\n    }\n}\nclass InitialCH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ch);\n    }\n}\nclass InitialJ extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass InitialL extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass InitialQ extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.q);\n    }\n}\nclass InitialS extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass InitialV extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.v);\n    }\n}\nclass InitialH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nclass InitialP extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nclass InitialT extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nclass InitialK extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nclass InitialB extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass InitialD extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.d);\n    }\n}\nclass InitialG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass InitialM extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass InitialN extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass InitialNG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass ZeroTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.characters = [];\n    }\n}\nexports.ZeroTonal = ZeroTonal;\nclass FreeTonalZ extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.z);\n    }\n}\nexports.FreeTonalZ = FreeTonalZ;\nclass FreeTonalW extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.FreeTonalW = FreeTonalW;\nclass FreeTonalF extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.FreeTonalF = FreeTonalF;\nclass FreeTonalXX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.xx);\n    }\n}\nexports.FreeTonalXX = FreeTonalXX;\nclass FreeTonalZX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.zx);\n    }\n}\nexports.FreeTonalZX = FreeTonalZX;\nclass FreeTonalX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.FreeTonalX = FreeTonalX;\nclass FreeTonalY extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.FreeTonalY = FreeTonalY;\nclass CheckedTonalW extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.CheckedTonalW = CheckedTonalW;\nclass CheckedTonalF extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.CheckedTonalF = CheckedTonalF;\nclass CheckedTonalX extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.CheckedTonalX = CheckedTonalX;\nclass CheckedTonalY extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.CheckedTonalY = CheckedTonalY;\nclass FinalP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nexports.FinalP = FinalP;\nclass FinalT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nexports.FinalT = FinalT;\nclass FinalK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nexports.FinalK = FinalK;\nclass FinalH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nexports.FinalH = FinalH;\nclass FinalPP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.pp);\n    }\n}\nexports.FinalPP = FinalPP;\nclass FinalTT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.tt);\n    }\n}\nexports.FinalTT = FinalTT;\nclass FinalKK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.kk);\n    }\n}\nexports.FinalKK = FinalKK;\nclass FinalHH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.hh);\n    }\n}\nexports.FinalHH = FinalHH;\nclass FinalB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass FinalL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass FinalG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass FinalJ extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass FinalS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass FinalBB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.bb);\n    }\n}\nclass FinalLL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ll);\n    }\n}\nclass FinalGG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.gg);\n    }\n}\nclass FinalJJ extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.jj);\n    }\n}\nclass FinalSS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ss);\n    }\n}\nclass FinalM extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass FinalN extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass FinalNG extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass NasalizationNN extends Nasalization {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.nn);\n    }\n}\nexports.nasalizationSounds = unit_1.setOfSounds([new NasalizationNN()]);\nexports.nasalFinalSounds = unit_1.setOfSounds([\n    new FinalM(),\n    new FinalN(),\n    new FinalNG(),\n]);\nexports.neutralFinalSounds = unit_1.setOfSounds([new FinalH(), new FinalHH()]);\nexports.medialSounds = unit_1.setOfSounds([\n    new MedialA(),\n    new MedialE(),\n    new MedialI(),\n    new MedialO(),\n    new MedialU(),\n    new MedialUR(),\n    new MedialIR(),\n    new MedialOR(),\n    new MedialER(),\n]);\nexports.materLectionisSounds = unit_1.setOfSounds([\n    new MaterLectionisM(),\n    new MaterLectionisN(),\n    new MaterLectionisNG(),\n]);\nexports.initialSounds = unit_1.setOfSounds([\n    new InitialP(),\n    new InitialT(),\n    new InitialK(),\n    new InitialB(),\n    new InitialD(),\n    new InitialG(),\n    new InitialH(),\n    new InitialC(),\n    new InitialCH(),\n    new InitialJ(),\n    new InitialL(),\n    new InitialQ(),\n    new InitialS(),\n    new InitialV(),\n    new InitialM(),\n    new InitialN(),\n    new InitialNG(),\n]);\nexports.freeTonalSounds = unit_1.setOfSounds([\n    new FreeTonalZ(),\n    new FreeTonalW(),\n    new FreeTonalXX(),\n    new FreeTonalF(),\n    new FreeTonalZX(),\n    new FreeTonalX(),\n    new FreeTonalY(),\n]);\nexports.checkedTonalSounds = unit_1.setOfSounds([\n    new CheckedTonalF(),\n    new CheckedTonalY(),\n    new CheckedTonalW(),\n    new CheckedTonalX(),\n]);\nexports.stopFinalSounds = unit_1.setOfSounds([\n    new FinalP(),\n    new FinalT(),\n    new FinalK(),\n    new FinalH(),\n    new FinalPP(),\n    new FinalTT(),\n    new FinalKK(),\n    new FinalHH(),\n]);\nexports.stopFinalSoundsBgjklps = unit_1.setOfSounds([\n    new FinalB(),\n    new FinalG(),\n    new FinalJ(),\n    new FinalK(),\n    new FinalL(),\n    new FinalP(),\n    new FinalS(),\n]);\nexports.stopFinalSoundsBBggjjkkllppss = unit_1.setOfSounds([\n    new FinalBB(),\n    new FinalGG(),\n    new FinalJJ(),\n    new FinalKK(),\n    new FinalLL(),\n    new FinalPP(),\n    new FinalSS(),\n]);\nfunction positionalSound(sounds) {\n    return (t) => {\n        for (let i in sounds) {\n            if (sounds[i].name === t)\n                return sounds[i];\n        }\n        return new unit_1.Sound();\n    };\n}\nexports.positionalSound = positionalSound;\nconst psA = positionalSound([new MedialA()]);\nconst psB = positionalSound([new InitialB(), new FinalB()]);\nconst psBb = positionalSound([new FinalBB()]);\nconst psC = positionalSound([new InitialC()]);\nconst psCh = positionalSound([new InitialCH()]);\nconst psD = positionalSound([new InitialD()]);\nconst psE = positionalSound([new MedialE()]);\nconst psEr = positionalSound([new MedialER()]);\nconst psF = positionalSound([new FreeTonalF(), new CheckedTonalF()]);\nconst psG = positionalSound([new InitialG(), new FinalG()]);\nconst psGg = positionalSound([new FinalGG()]);\nconst psH = positionalSound([new InitialH(), new FinalH()]);\nconst psHh = positionalSound([new FinalHH()]);\nconst psI = positionalSound([new MedialI()]);\nconst psIr = positionalSound([new MedialIR()]);\nconst psJ = positionalSound([new InitialJ(), new FinalJ()]);\nconst psJj = positionalSound([new FinalJJ()]);\nconst psK = positionalSound([new InitialK(), new FinalK()]);\nconst psKk = positionalSound([new FinalKK()]);\nconst psL = positionalSound([new InitialL(), new FinalL()]);\nconst psLl = positionalSound([new FinalLL()]);\nconst psM = positionalSound([\n    new InitialM(),\n    new MaterLectionisM(),\n    new FinalM(),\n]);\nconst psN = positionalSound([\n    new InitialN(),\n    new MaterLectionisN(),\n    new FinalN(),\n]);\nconst psNn = positionalSound([new NasalizationNN()]);\nconst psNg = positionalSound([\n    new InitialNG(),\n    new MaterLectionisNG(),\n    new FinalNG(),\n]);\nconst psO = positionalSound([new MedialO()]);\nconst psOr = positionalSound([new MedialOR()]);\nconst psP = positionalSound([new InitialP(), new FinalP()]);\nconst psPp = positionalSound([new FinalPP()]);\nconst psQ = positionalSound([new InitialQ()]);\nconst psS = positionalSound([new InitialS(), new FinalS()]);\nconst psSs = positionalSound([new FinalSS()]);\nconst psT = positionalSound([new InitialT(), new FinalT()]);\nconst psTt = positionalSound([new FinalTT()]);\nconst psU = positionalSound([new MedialU()]);\nconst psUr = positionalSound([new MedialUR()]);\nconst psV = positionalSound([new InitialV()]);\nconst psW = positionalSound([new FreeTonalW(), new CheckedTonalW()]);\nconst psX = positionalSound([new FreeTonalX(), new CheckedTonalX()]);\nconst psXx = positionalSound([new FreeTonalXX()]);\nconst psY = positionalSound([new FreeTonalY(), new CheckedTonalY()]);\nconst psZ = positionalSound([new FreeTonalZ()]);\nconst psZx = positionalSound([new FreeTonalZX()]);\nexports.tonalPositionalSounds = new Map()\n    .set(TonalLetterTags.a, psA)\n    .set(TonalLetterTags.b, psB)\n    .set(TonalLetterTags.bb, psBb)\n    .set(TonalLetterTags.c, psC)\n    .set(TonalLetterTags.ch, psCh)\n    .set(TonalLetterTags.d, psD)\n    .set(TonalLetterTags.e, psE)\n    .set(TonalLetterTags.er, psEr)\n    .set(TonalLetterTags.f, psF)\n    .set(TonalLetterTags.g, psG)\n    .set(TonalLetterTags.gg, psGg)\n    .set(TonalLetterTags.h, psH)\n    .set(TonalLetterTags.hh, psHh)\n    .set(TonalLetterTags.i, psI)\n    .set(TonalLetterTags.ir, psIr)\n    .set(TonalLetterTags.j, psJ)\n    .set(TonalLetterTags.jj, psJj)\n    .set(TonalLetterTags.k, psK)\n    .set(TonalLetterTags.kk, psKk)\n    .set(TonalLetterTags.l, psL)\n    .set(TonalLetterTags.ll, psLl)\n    .set(TonalLetterTags.m, psM)\n    .set(TonalLetterTags.n, psN)\n    .set(TonalLetterTags.nn, psNn)\n    .set(TonalLetterTags.ng, psNg)\n    .set(TonalLetterTags.o, psO)\n    .set(TonalLetterTags.or, psOr)\n    .set(TonalLetterTags.p, psP)\n    .set(TonalLetterTags.pp, psPp)\n    .set(TonalLetterTags.q, psQ)\n    .set(TonalLetterTags.s, psS)\n    .set(TonalLetterTags.ss, psSs)\n    .set(TonalLetterTags.t, psT)\n    .set(TonalLetterTags.tt, psTt)\n    .set(TonalLetterTags.u, psU)\n    .set(TonalLetterTags.ur, psUr)\n    .set(TonalLetterTags.v, psV)\n    .set(TonalLetterTags.w, psW)\n    .set(TonalLetterTags.x, psX)\n    .set(TonalLetterTags.xx, psXx)\n    .set(TonalLetterTags.y, psY)\n    .set(TonalLetterTags.z, psZ)\n    .set(TonalLetterTags.zx, psZx);\nclass ZeroAllomorph extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new ZeroTonal();\n    }\n}\nexports.ZeroAllomorph = ZeroAllomorph;\nclass AllomorphF extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalF();\n    }\n}\nclass AllomorphZ extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZ();\n    }\n}\nexports.AllomorphZ = AllomorphZ;\nclass AllomorphY extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalY();\n    }\n}\nexports.AllomorphY = AllomorphY;\nclass AllomorphW extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalW();\n    }\n}\nexports.AllomorphW = AllomorphW;\nclass AllomorphX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalX();\n    }\n}\nexports.AllomorphX = AllomorphX;\nclass AllomorphXX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalXX();\n    }\n}\nclass AllomorphZX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZX();\n    }\n}\nexports.freeAllomorphs = new Map()\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.xx, new AllomorphXX())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.zx, new AllomorphZX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.x, new AllomorphX());\nclass AllomorphP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n    }\n}\nclass AllomorphT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n    }\n}\nclass AllomorphK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n    }\n}\nclass AllomorphH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n    }\n}\nexports.AllomorphH = AllomorphH;\nclass AllomorphPP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalPP();\n    }\n}\nclass AllomorphTT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalTT();\n    }\n}\nclass AllomorphKK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalKK();\n    }\n}\nclass AllomorphHH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalHH();\n    }\n}\nclass AllomorphPF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphTF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphKF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHY extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalY();\n    }\n}\nexports.AllomorphHY = AllomorphHY;\nclass AllomorphPPW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalPP();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphTTW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalTT();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphKKW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalKK();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphHHW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalHH();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphPPX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalPP();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphTTX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalTT();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphKKX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalKK();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphHHX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalHH();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphBF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphGF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphJF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalJ();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphLF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphSF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalS();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphBBW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalBB();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphGGW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalGG();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphJJW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalJJ();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphLLW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalLL();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphSSW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalSS();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphBBX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalBB();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphGGX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalGG();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphJJX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalJJ();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphLLX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalLL();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphSSX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalSS();\n        this.tonal = new CheckedTonalX();\n    }\n}\nexports.checkedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH())\n    .set(TonalLetterTags.p + TonalLetterTags.f, new AllomorphPF())\n    .set(TonalLetterTags.t + TonalLetterTags.f, new AllomorphTF())\n    .set(TonalLetterTags.k + TonalLetterTags.f, new AllomorphKF())\n    .set(TonalLetterTags.h + TonalLetterTags.f, new AllomorphHF())\n    .set(TonalLetterTags.b + TonalLetterTags.f, new AllomorphBF())\n    .set(TonalLetterTags.g + TonalLetterTags.f, new AllomorphGF())\n    .set(TonalLetterTags.j + TonalLetterTags.f, new AllomorphJF())\n    .set(TonalLetterTags.l + TonalLetterTags.f, new AllomorphLF())\n    .set(TonalLetterTags.s + TonalLetterTags.f, new AllomorphSF())\n    .set(TonalLetterTags.pp + TonalLetterTags.w, new AllomorphPPW())\n    .set(TonalLetterTags.tt + TonalLetterTags.w, new AllomorphTTW())\n    .set(TonalLetterTags.kk + TonalLetterTags.w, new AllomorphKKW())\n    .set(TonalLetterTags.hh + TonalLetterTags.w, new AllomorphHHW())\n    .set(TonalLetterTags.bb + TonalLetterTags.w, new AllomorphBBW())\n    .set(TonalLetterTags.gg + TonalLetterTags.w, new AllomorphGGW())\n    .set(TonalLetterTags.jj + TonalLetterTags.w, new AllomorphJJW())\n    .set(TonalLetterTags.ll + TonalLetterTags.w, new AllomorphLLW())\n    .set(TonalLetterTags.ss + TonalLetterTags.w, new AllomorphSSW())\n    .set(TonalLetterTags.h + TonalLetterTags.y, new AllomorphHY())\n    .set(TonalLetterTags.pp + TonalLetterTags.x, new AllomorphPPX())\n    .set(TonalLetterTags.tt + TonalLetterTags.x, new AllomorphTTX())\n    .set(TonalLetterTags.kk + TonalLetterTags.x, new AllomorphKKX())\n    .set(TonalLetterTags.hh + TonalLetterTags.x, new AllomorphHHX())\n    .set(TonalLetterTags.bb + TonalLetterTags.x, new AllomorphBBX())\n    .set(TonalLetterTags.gg + TonalLetterTags.x, new AllomorphGGX())\n    .set(TonalLetterTags.jj + TonalLetterTags.x, new AllomorphJJX())\n    .set(TonalLetterTags.ll + TonalLetterTags.x, new AllomorphLLX())\n    .set(TonalLetterTags.ss + TonalLetterTags.x, new AllomorphSSX());\nexports.combinedFreeAllomorphs = new Map()\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.x, new AllomorphX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.xx, new AllomorphXX());\nexports.uncombinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH());\nexports.combinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p, [new AllomorphPF()])\n    .set(TonalLetterTags.t, [new AllomorphTF()])\n    .set(TonalLetterTags.k, [new AllomorphKF()])\n    .set(TonalLetterTags.h, [new AllomorphHF(), new AllomorphHY()])\n    .set(TonalLetterTags.b, [new AllomorphBF()])\n    .set(TonalLetterTags.g, [new AllomorphGF()])\n    .set(TonalLetterTags.j, [new AllomorphJF()])\n    .set(TonalLetterTags.l, [new AllomorphLF()])\n    .set(TonalLetterTags.s, [new AllomorphSF()])\n    .set(TonalLetterTags.pp, [new AllomorphPPW(), new AllomorphPPX()])\n    .set(TonalLetterTags.tt, [new AllomorphTTW(), new AllomorphTTX()])\n    .set(TonalLetterTags.kk, [new AllomorphKKW(), new AllomorphKKX()])\n    .set(TonalLetterTags.hh, [new AllomorphHHW(), new AllomorphHHX()])\n    .set(TonalLetterTags.bb, [new AllomorphBBW(), new AllomorphBBX()])\n    .set(TonalLetterTags.gg, [new AllomorphGGW(), new AllomorphGGX()])\n    .set(TonalLetterTags.jj, [new AllomorphJJW(), new AllomorphJJX()])\n    .set(TonalLetterTags.ll, [new AllomorphLLW(), new AllomorphLLX()])\n    .set(TonalLetterTags.ss, [new AllomorphSSW(), new AllomorphSSX()]);\nexports.freeAllomorphUncombiningRules = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY()])\n    .set(TonalLetterTags.w, [new FreeTonalZ(), new FreeTonalX()])\n    .set(TonalLetterTags.xx, [\n    new FreeTonalZ(),\n    new FreeTonalF(),\n    new FreeTonalX(),\n])\n    .set(TonalLetterTags.z, [new FreeTonalX(), new FreeTonalF(), new ZeroTonal()])\n    .set(TonalLetterTags.zx, [])\n    .set(TonalLetterTags.x, [])\n    .set(TonalLetterTags.y, [new FreeTonalW()])\n    .set(TonalLetterTags.zero, [new FreeTonalY()]);\nexports.uncombiningRulesAy = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY(), new FreeTonalW()])\n    .set(TonalLetterTags.x, [\n    new ZeroTonal(),\n    new FreeTonalX(),\n    new FreeTonalZ(),\n]);\n//# sourceMappingURL=version2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/version2.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unit.js":
/*!****************************************!*\
  !*** ./node_modules/taipa/lib/unit.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Character {\n    constructor(s) {\n        this.character = s;\n    }\n}\nexports.Character = Character;\nclass Characters {\n    constructor() {\n        this.carr = [\n            'a',\n            'b',\n            'c',\n            'd',\n            'e',\n            'f',\n            'g',\n            'h',\n            'i',\n            'j',\n            'k',\n            'l',\n            'm',\n            'n',\n            'o',\n            'p',\n            'q',\n            'r',\n            's',\n            't',\n            'u',\n            'v',\n            'w',\n            'x',\n            'y',\n            'z',\n        ];\n        this.o = new Map();\n        for (let e of this.carr) {\n            this.assign(e);\n        }\n    }\n    assign(e) {\n        this.o.set(e, new Character(e));\n    }\n    get(key) {\n        let value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new Character('');\n    }\n    get size() {\n        return this.o.size;\n    }\n}\nexports.characters = new Characters();\nclass Grapheme {\n}\nexports.Grapheme = Grapheme;\nclass AlphabeticGrapheme extends Grapheme {\n    constructor(letter) {\n        super();\n        this.letter = letter;\n    }\n}\nexports.AlphabeticGrapheme = AlphabeticGrapheme;\nclass Letter {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Letter = Letter;\nclass AlphabeticLetter extends Letter {\n    constructor(characters) {\n        super();\n        this.characters = new Array();\n        if (characters) {\n            this.characters = characters;\n            this.concat();\n        }\n    }\n    pushCharacter(c) {\n        this.characters.push(c);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.characters.map(x => (x ? x.character : '')).join('');\n    }\n}\nexports.AlphabeticLetter = AlphabeticLetter;\nclass MatchedSequence {\n    constructor() {\n        this.characters = new Array();\n    }\n    get matchedLength() {\n        return this.characters.length;\n    }\n    toString() {\n        let str = '';\n        for (let i in this.characters) {\n            str += this.characters[i].character;\n        }\n        return str;\n    }\n}\nexports.MatchedSequence = MatchedSequence;\nclass Letters {\n    constructor(larr) {\n        this.o = new Map();\n        this.arr = larr;\n        for (let i = 0; i < this.arr.length; i++) {\n            this.assign(this.arr[i]);\n        }\n    }\n    assign(e) {\n        let carr = [];\n        for (let i = 0; i < e.length; i++) {\n            let c = exports.characters.get(e[i]);\n            if (c) {\n                carr.push(c);\n            }\n        }\n        this.o.set(e, new AlphabeticLetter(carr));\n    }\n    handleN(characters, beginOfLetter, listLength) {\n        return new MatchedSequence();\n    }\n    get(key) {\n        let value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new AlphabeticLetter([]);\n    }\n    get size() {\n        return this.o.size;\n    }\n    get values() {\n        return this.o.values();\n    }\n}\nexports.Letters = Letters;\n/** Turn a string into graphemes. */\nclass GraphemeMaker {\n    constructor(lowerLetters) {\n        this.lowerLetters = lowerLetters;\n        this.listOfLetters = new Array();\n        this.listOfLetters = Array.from(lowerLetters.values);\n    }\n    makeGraphemes(str) {\n        const characters = new Array();\n        if (str) {\n            for (let i = 0; i < str.length; i++) {\n                if (str.charAt(i) != '\\0') {\n                    characters.push(new Character(str.charAt(i)));\n                }\n            }\n        }\n        const graphemes = this.make(characters);\n        return graphemes;\n    }\n    getMatchedSequence(characters, beginOfLetter, candidates) {\n        let ms = new MatchedSequence();\n        let matchedLen = 0;\n        //console.log(characters)\n        if (characters[beginOfLetter].character === 'n') {\n            // ms = this.handler.handleN(\n            ms = this.lowerLetters.handleN(characters, beginOfLetter, this.listOfLetters.length);\n            if (ms.matchedLength > 0)\n                return ms;\n        }\n        for (let j in candidates) {\n            let min = Math.min(characters.length - beginOfLetter, candidates[j].literal.length);\n            if (candidates[j].literal.length == min) {\n                for (let k = 0; k < min; k++) {\n                    if (characters[beginOfLetter + k].character === candidates[j].literal[k]) {\n                        if (k + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                ms.characters[q] = characters[beginOfLetter + q];\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        return ms;\n    }\n    make(characters) {\n        let graphemes = new Array();\n        let beginOfLetter = 0;\n        let letters = new Array();\n        for (let i = 0; i < characters.length; i++) {\n            // console.log('examining character: %s. length of characters: %d', characters[i].character, characters.length);\n            //console.log(\"metadata letter array looping.\");\n            if (i - beginOfLetter == 0) {\n                //console.log(\"matchedLen: %d\", ms.matchedLength);\n                // let candidates = this.list.filter(\n                let candidates = this.listOfLetters.filter(l => l.characters[0].character === characters[i].character);\n                let ms = this.getMatchedSequence(characters, beginOfLetter, candidates);\n                if (ms.matchedLength > 0) {\n                    for (let key in candidates) {\n                        // console.log(candidates[key].literal + ' - ' + ms.toString());\n                        if (candidates[key].literal ===\n                            new AlphabeticLetter(ms.characters).literal) {\n                            letters.push(candidates[key]);\n                        }\n                    }\n                }\n            }\n            if (letters.length == 0) {\n                for (let j in characters) {\n                    //console.log(characters[j].character)\n                }\n                // 'length of letters is zero'\n            }\n            else if (letters.length == 1) {\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d. ls[0]:\", i, ls[0].characters.length, ls[0])\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d\", i, ls[0].characters.length);\n                if (i + 1 - beginOfLetter == letters[0].characters.length) {\n                    // when index i plus one equals the length of the matched syllable\n                    let l = letters.shift();\n                    if (l) {\n                        beginOfLetter += l.characters.length;\n                        // pack letters into sounds\n                        let gr = new AlphabeticGrapheme(l);\n                        graphemes.push(gr);\n                    }\n                }\n            }\n        }\n        //console.log(\"metadata letter array length %d\", letters.length);\n        return graphemes;\n    }\n}\nexports.GraphemeMaker = GraphemeMaker;\nclass Sound {\n    constructor() {\n        this.name = '';\n        // an array of character objects. can be used to make a word object.\n        this.characters = new Array();\n    }\n    // we still need a method for combinning characters from each character objects.\n    // this is different from an array of character objects. it is a string.\n    toString() {\n        let l = '';\n        // there is no characters for 1st tone\n        if (this.characters != null) {\n            // when it is not 1st tone\n            for (let k in this.characters) {\n                l += this.characters[k].character;\n            }\n        }\n        return l;\n    }\n    makeCharacters(str) {\n        let arr = new Array();\n        for (let i = 0; i < str.length; i++) {\n            arr.push(new Character(str[i]));\n        }\n        return arr;\n    }\n}\nexports.Sound = Sound;\nexports.setOfSounds = function (sounds) {\n    return {\n        sounds,\n        includes(str) {\n            for (let i in this.sounds) {\n                if (str && this.sounds[i] && str === this.sounds[i].toString())\n                    return true;\n            }\n            return false;\n        },\n    };\n};\nexports.sgPipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n/** Sound generation for syllable compositions. */\nclass SoundGeneration {\n    constructor() {\n        /** The letters to be matched. */\n        this.letters = [];\n        /** Matched sounds accumulator. */\n        this.sounds = new Array();\n        /** flag for syllable matching process. */\n        this.matching = true;\n        /** Will populate `predictions` when set to true. */\n        this.predictive = false;\n        /** Predicted sounds */\n        this.predictions = new Array();\n        this.predictSandhiFinal = false;\n    }\n}\nexports.SoundGeneration = SoundGeneration;\nclass MatchedPattern {\n    constructor() {\n        this.letters = new Array();\n        this.pattern = new Array();\n    }\n    get matchedLength() {\n        return this.letters.length;\n    } // length of pattern can be optionally returned\n    get lastLetter() {\n        if (this.letters.length > 0)\n            return this.letters[this.letters.length - 1];\n        return new AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length > 1)\n            return this.letters[this.letters.length - 2];\n        return new AlphabeticLetter([]);\n    }\n}\nexports.MatchedPattern = MatchedPattern;\nclass Morpheme {\n}\nexports.Morpheme = Morpheme;\nclass Syllable {\n    constructor(letters) {\n        this.literal = '';\n        this.letters = new Array();\n        if (letters) {\n            this.letters = letters;\n            this.concat();\n        }\n    }\n    pushLetter(l) {\n        this.letters.push(l);\n        this.concat();\n    }\n    replaceLetter(i, l) {\n        this.letters.splice(i, 1, l);\n        this.concat();\n    }\n    insertLetter(i, l) {\n        this.letters.splice(i, 0, l);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.letters.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.Syllable = Syllable;\nclass MorphemeMaker {\n    make(letters, syllabify) {\n        let patterns = new Array();\n        let beginOfSyllable = 0;\n        for (let i = 0; i < letters.length; i++) {\n            let msp = new MatchedPattern();\n            if (i - beginOfSyllable == 0) {\n                msp = syllabify(letters, beginOfSyllable);\n                if (msp.matchedLength == 0) {\n                    //console.log('no matched syllables found. the syllable might need to be added')\n                }\n                // console.log('matchedLen: %d', msp.matchedLength);\n                // console.log(msp.pattern);\n                // console.log(msp.letters);\n                if (msp.letters.length > 0) {\n                    for (let j in msp.letters) {\n                        //console.log(\"msp.letters: %s\", msp.letters[j].literal)\n                    }\n                    patterns.push(msp);\n                }\n                beginOfSyllable += msp.matchedLength;\n            }\n            if (patterns.length == 0) {\n                //console.log('nothing matched')\n            }\n            else if (patterns.length >= 1) {\n                if (msp == undefined)\n                    break;\n                if (msp.matchedLength > 0) {\n                    i += beginOfSyllable - i - 1;\n                }\n            }\n        }\n        return patterns;\n    }\n}\nexports.MorphemeMaker = MorphemeMaker;\nclass Lexeme {\n}\nexports.Lexeme = Lexeme;\nclass Word {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Word = Word;\nclass LexemeMaker {\n}\nexports.LexemeMaker = LexemeMaker;\nclass ToneGroup {\n    constructor() {\n        this.inflectionalEndings = new Array();\n    }\n}\nexports.ToneGroup = ToneGroup;\nclass ToneSandhiGroup extends ToneGroup {\n}\nclass Phraseme {\n}\nexports.Phraseme = Phraseme;\nclass Phrase {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Phrase = Phrase;\n//# sourceMappingURL=unit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unit.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanM/ODJiMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ }),

/***/ "./pages/word.tsx":
/*!************************!*\
  !*** ./pages/word.tsx ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! taipa */ \"./node_modules/taipa/lib/index.js\");\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(taipa__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _src_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../src/process */ \"./src/process.ts\");\nvar _jsxFileName = \"/Users/jslv/Projects/keyin/pages/word.tsx\",\n    _s = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\nfunction WordPage() {\n  _s();\n\n  var _this = this;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(''),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var tla = taipa__WEBPACK_IMPORTED_MODULE_1__[\"tonalLemmatizationAnalyzer\"];\n  var letters = Object(taipa__WEBPACK_IMPORTED_MODULE_1__[\"graphAnalyzeTonal\"])(input).map(function (x) {\n    return x.letter && x.letter.literal;\n  });\n  var soudnSeqs = Object(_src_process__WEBPACK_IMPORTED_MODULE_2__[\"getSoundSequences\"])(tla.morphAnalyze(input).map(function (x) {\n    return x.sounds;\n  }));\n  var uncombiningFormSeqs = tla.morphAnalyze(input).map(function (it) {\n    return it.getForms().map(function (it) {\n      return it.literal;\n    }).join(', ');\n  }).filter(function (it) {\n    return it.length > 0;\n  });\n  var lxLemma = Object(taipa__WEBPACK_IMPORTED_MODULE_1__[\"lemmatize\"])(input);\n  var stems = Object(_src_process__WEBPACK_IMPORTED_MODULE_2__[\"getStems\"])(lxLemma.word.literal, lxLemma.getInflectionalEnding());\n  var inflectionalSuffixes = Object(_src_process__WEBPACK_IMPORTED_MODULE_2__[\"getInflectionalSuffixes\"])(lxLemma.getInflectionalEnding());\n  var lemmas = lxLemma.getLemmas().map(function (x) {\n    return x.literal;\n  });\n  var lxInflect = Object(taipa__WEBPACK_IMPORTED_MODULE_1__[\"inflectDesinence\"])(input);\n  var proceedingForms = lxInflect.getForms().map(function (x) {\n    return x.literal;\n  });\n\n  var handleChange = function handleChange(e) {\n    setInput(e.target.value);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, \"\\u62CD\\u7F85\\u99AC\\u5B57, \\u8F38\\u51FA lemmas, stem, inflectional suffix, proceeding forms, sound sequences, uncombining form sequences, \\u7532 letters\", __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), \"lemmas\", lemmas.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, x);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), \"stem\", stems.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, x);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), \"inflectional suffix\", inflectionalSuffixes.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, x);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), \"proceeding forms\", proceedingForms.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, x);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), \"sound sequences\", soudnSeqs.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, x[0] + ' - ' + x[1]);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), \"uncombining form sequences\", uncombiningFormSeqs.map(function (x) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, x);\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), \"letters: \", letters.join(', '));\n}\n\n_s(WordPage, \"WVveI0ACa0LqOSOlGzu58xcz+KE=\");\n\n_c = WordPage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (WordPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"WordPage\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWdlcy93b3JkLnRzeD9jN2U2Il0sIm5hbWVzIjpbIldvcmRQYWdlIiwidXNlU3RhdGUiLCJpbnB1dCIsInNldElucHV0IiwidGxhIiwidG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIiLCJsZXR0ZXJzIiwiZ3JhcGhBbmFseXplVG9uYWwiLCJtYXAiLCJ4IiwibGV0dGVyIiwibGl0ZXJhbCIsInNvdWRuU2VxcyIsImdldFNvdW5kU2VxdWVuY2VzIiwibW9ycGhBbmFseXplIiwic291bmRzIiwidW5jb21iaW5pbmdGb3JtU2VxcyIsIml0IiwiZ2V0Rm9ybXMiLCJqb2luIiwiZmlsdGVyIiwibGVuZ3RoIiwibHhMZW1tYSIsImxlbW1hdGl6ZSIsInN0ZW1zIiwiZ2V0U3RlbXMiLCJ3b3JkIiwiZ2V0SW5mbGVjdGlvbmFsRW5kaW5nIiwiaW5mbGVjdGlvbmFsU3VmZml4ZXMiLCJnZXRJbmZsZWN0aW9uYWxTdWZmaXhlcyIsImxlbW1hcyIsImdldExlbW1hcyIsImx4SW5mbGVjdCIsImluZmxlY3REZXNpbmVuY2UiLCJwcm9jZWVkaW5nRm9ybXMiLCJoYW5kbGVDaGFuZ2UiLCJlIiwidGFyZ2V0IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQU1BOztBQU1BLFNBQVNBLFFBQVQsR0FBb0I7QUFBQTs7QUFBQTs7QUFBQSxrQkFDUUMsc0RBQVEsQ0FBQyxFQUFELENBRGhCO0FBQUEsTUFDWEMsS0FEVztBQUFBLE1BQ0pDLFFBREk7O0FBR2xCLE1BQU1DLEdBQUcsR0FBR0MsZ0VBQVo7QUFFQSxNQUFNQyxPQUFPLEdBQUdDLCtEQUFpQixDQUFDTCxLQUFELENBQWpCLENBQXlCTSxHQUF6QixDQUNkLFVBQUFDLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNDLE1BQUYsSUFBWUQsQ0FBQyxDQUFDQyxNQUFGLENBQVNDLE9BQXpCO0FBQUEsR0FEYSxDQUFoQjtBQUlBLE1BQU1DLFNBQVMsR0FBR0Msc0VBQWlCLENBQ2pDVCxHQUFHLENBQUNVLFlBQUosQ0FBaUJaLEtBQWpCLEVBQXdCTSxHQUF4QixDQUE0QixVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDTSxNQUFOO0FBQUEsR0FBN0IsQ0FEaUMsQ0FBbkM7QUFHQSxNQUFNQyxtQkFBbUIsR0FBR1osR0FBRyxDQUM1QlUsWUFEeUIsQ0FDWlosS0FEWSxFQUV6Qk0sR0FGeUIsQ0FFckIsVUFBQVMsRUFBRTtBQUFBLFdBQ0xBLEVBQUUsQ0FDQ0MsUUFESCxHQUVHVixHQUZILENBRU8sVUFBQVMsRUFBRTtBQUFBLGFBQUlBLEVBQUUsQ0FBQ04sT0FBUDtBQUFBLEtBRlQsRUFHR1EsSUFISCxDQUdRLElBSFIsQ0FESztBQUFBLEdBRm1CLEVBUXpCQyxNQVJ5QixDQVFsQixVQUFBSCxFQUFFO0FBQUEsV0FBSUEsRUFBRSxDQUFDSSxNQUFILEdBQVksQ0FBaEI7QUFBQSxHQVJnQixDQUE1QjtBQVVBLE1BQU1DLE9BQU8sR0FBR0MsdURBQVMsQ0FBQ3JCLEtBQUQsQ0FBekI7QUFDQSxNQUFNc0IsS0FBSyxHQUFHQyw2REFBUSxDQUFDSCxPQUFPLENBQUNJLElBQVIsQ0FBYWYsT0FBZCxFQUF1QlcsT0FBTyxDQUFDSyxxQkFBUixFQUF2QixDQUF0QjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHQyw0RUFBdUIsQ0FDbERQLE9BQU8sQ0FBQ0sscUJBQVIsRUFEa0QsQ0FBcEQ7QUFHQSxNQUFNRyxNQUFNLEdBQUdSLE9BQU8sQ0FBQ1MsU0FBUixHQUFvQnZCLEdBQXBCLENBQXdCLFVBQUFDLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUNFLE9BQU47QUFBQSxHQUF6QixDQUFmO0FBRUEsTUFBTXFCLFNBQVMsR0FBR0MsOERBQWdCLENBQUMvQixLQUFELENBQWxDO0FBQ0EsTUFBTWdDLGVBQWUsR0FBR0YsU0FBUyxDQUFDZCxRQUFWLEdBQXFCVixHQUFyQixDQUF5QixVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDRSxPQUFOO0FBQUEsR0FBMUIsQ0FBeEI7O0FBRUEsTUFBTXdCLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVDLENBQVYsRUFBa0Q7QUFDckVqQyxZQUFRLENBQUNpQyxDQUFDLENBQUNDLE1BQUYsQ0FBU0MsS0FBVixDQUFSO0FBQ0QsR0FGRDs7QUFJQSxTQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZ0tBR0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFERixFQUVFO0FBQU8sUUFBSSxFQUFDLE1BQVo7QUFBbUIsU0FBSyxFQUFFcEMsS0FBMUI7QUFBaUMsWUFBUSxFQUFFaUMsWUFBM0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUZGLENBSEYsRUFPRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUEYsWUFTR0wsTUFBTSxDQUFDdEIsR0FBUCxDQUFXLFVBQUFDLENBQUM7QUFBQSxXQUNYO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBS0EsQ0FBTCxDQURXO0FBQUEsR0FBWixDQVRILEVBWUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVpGLFVBY0dlLEtBQUssQ0FBQ2hCLEdBQU4sQ0FBVSxVQUFBQyxDQUFDO0FBQUEsV0FDVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQUtBLENBQUwsQ0FEVTtBQUFBLEdBQVgsQ0FkSCxFQWlCRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBakJGLHlCQW1CR21CLG9CQUFvQixDQUFDcEIsR0FBckIsQ0FBeUIsVUFBQUMsQ0FBQztBQUFBLFdBQ3pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBS0EsQ0FBTCxDQUR5QjtBQUFBLEdBQTFCLENBbkJILEVBc0JFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUF0QkYsc0JBd0JHeUIsZUFBZSxDQUFDMUIsR0FBaEIsQ0FBb0IsVUFBQUMsQ0FBQztBQUFBLFdBQ3BCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBS0EsQ0FBTCxDQURvQjtBQUFBLEdBQXJCLENBeEJILEVBMkJFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUEzQkYscUJBNkJHRyxTQUFTLENBQUNKLEdBQVYsQ0FBYyxVQUFBQyxDQUFDO0FBQUEsV0FDZDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQUtBLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBTyxLQUFQLEdBQWVBLENBQUMsQ0FBQyxDQUFELENBQXJCLENBRGM7QUFBQSxHQUFmLENBN0JILEVBZ0NFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFoQ0YsZ0NBa0NHTyxtQkFBbUIsQ0FBQ1IsR0FBcEIsQ0FBd0IsVUFBQUMsQ0FBQztBQUFBLFdBQ3hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBS0EsQ0FBTCxDQUR3QjtBQUFBLEdBQXpCLENBbENILEVBcUNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFyQ0YsZUFzQ1lILE9BQU8sQ0FBQ2EsSUFBUixDQUFhLElBQWIsQ0F0Q1osQ0FERjtBQTBDRDs7R0E5RVFuQixROztLQUFBQSxRO0FBZ0ZNQSx1RUFBZiIsImZpbGUiOiIuL3BhZ2VzL3dvcmQudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICB0b25hbExlbW1hdGl6YXRpb25BbmFseXplcixcbiAgbGVtbWF0aXplLFxuICBncmFwaEFuYWx5emVUb25hbCxcbiAgaW5mbGVjdERlc2luZW5jZSxcbn0gZnJvbSAndGFpcGEnO1xuaW1wb3J0IHtcbiAgZ2V0SW5mbGVjdGlvbmFsU3VmZml4ZXMsXG4gIGdldFN0ZW1zLFxuICBnZXRTb3VuZFNlcXVlbmNlcyxcbn0gZnJvbSAnLi4vc3JjL3Byb2Nlc3MnO1xuXG5mdW5jdGlvbiBXb3JkUGFnZSgpIHtcbiAgY29uc3QgW2lucHV0LCBzZXRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgdGxhID0gdG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXI7XG5cbiAgY29uc3QgbGV0dGVycyA9IGdyYXBoQW5hbHl6ZVRvbmFsKGlucHV0KS5tYXAoXG4gICAgeCA9PiB4LmxldHRlciAmJiB4LmxldHRlci5saXRlcmFsXG4gICk7XG5cbiAgY29uc3Qgc291ZG5TZXFzID0gZ2V0U291bmRTZXF1ZW5jZXMoXG4gICAgdGxhLm1vcnBoQW5hbHl6ZShpbnB1dCkubWFwKHggPT4geC5zb3VuZHMpXG4gICk7XG4gIGNvbnN0IHVuY29tYmluaW5nRm9ybVNlcXMgPSB0bGFcbiAgICAubW9ycGhBbmFseXplKGlucHV0KVxuICAgIC5tYXAoaXQgPT5cbiAgICAgIGl0XG4gICAgICAgIC5nZXRGb3JtcygpXG4gICAgICAgIC5tYXAoaXQgPT4gaXQubGl0ZXJhbClcbiAgICAgICAgLmpvaW4oJywgJylcbiAgICApXG4gICAgLmZpbHRlcihpdCA9PiBpdC5sZW5ndGggPiAwKTtcblxuICBjb25zdCBseExlbW1hID0gbGVtbWF0aXplKGlucHV0KTtcbiAgY29uc3Qgc3RlbXMgPSBnZXRTdGVtcyhseExlbW1hLndvcmQubGl0ZXJhbCwgbHhMZW1tYS5nZXRJbmZsZWN0aW9uYWxFbmRpbmcoKSk7XG4gIGNvbnN0IGluZmxlY3Rpb25hbFN1ZmZpeGVzID0gZ2V0SW5mbGVjdGlvbmFsU3VmZml4ZXMoXG4gICAgbHhMZW1tYS5nZXRJbmZsZWN0aW9uYWxFbmRpbmcoKVxuICApO1xuICBjb25zdCBsZW1tYXMgPSBseExlbW1hLmdldExlbW1hcygpLm1hcCh4ID0+IHgubGl0ZXJhbCk7XG5cbiAgY29uc3QgbHhJbmZsZWN0ID0gaW5mbGVjdERlc2luZW5jZShpbnB1dCk7XG4gIGNvbnN0IHByb2NlZWRpbmdGb3JtcyA9IGx4SW5mbGVjdC5nZXRGb3JtcygpLm1hcCh4ID0+IHgubGl0ZXJhbCk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgc2V0SW5wdXQoZS50YXJnZXQudmFsdWUpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIOaLjee+hemmrOWtlywg6Ly45Ye6IGxlbW1hcywgc3RlbSwgaW5mbGVjdGlvbmFsIHN1ZmZpeCwgcHJvY2VlZGluZyBmb3Jtcywgc291bmRcbiAgICAgIHNlcXVlbmNlcywgdW5jb21iaW5pbmcgZm9ybSBzZXF1ZW5jZXMsIOeUsiBsZXR0ZXJzXG4gICAgICA8bGFiZWw+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17aW5wdXR9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IC8+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGJyIC8+XG4gICAgICBsZW1tYXNcbiAgICAgIHtsZW1tYXMubWFwKHggPT4gKFxuICAgICAgICA8bGk+e3h9PC9saT5cbiAgICAgICkpfVxuICAgICAgPGJyIC8+XG4gICAgICBzdGVtXG4gICAgICB7c3RlbXMubWFwKHggPT4gKFxuICAgICAgICA8bGk+e3h9PC9saT5cbiAgICAgICkpfVxuICAgICAgPGJyIC8+XG4gICAgICBpbmZsZWN0aW9uYWwgc3VmZml4XG4gICAgICB7aW5mbGVjdGlvbmFsU3VmZml4ZXMubWFwKHggPT4gKFxuICAgICAgICA8bGk+e3h9PC9saT5cbiAgICAgICkpfVxuICAgICAgPGJyIC8+XG4gICAgICBwcm9jZWVkaW5nIGZvcm1zXG4gICAgICB7cHJvY2VlZGluZ0Zvcm1zLm1hcCh4ID0+IChcbiAgICAgICAgPGxpPnt4fTwvbGk+XG4gICAgICApKX1cbiAgICAgIDxiciAvPlxuICAgICAgc291bmQgc2VxdWVuY2VzXG4gICAgICB7c291ZG5TZXFzLm1hcCh4ID0+IChcbiAgICAgICAgPGxpPnt4WzBdICsgJyAtICcgKyB4WzFdfTwvbGk+XG4gICAgICApKX1cbiAgICAgIDxiciAvPlxuICAgICAgdW5jb21iaW5pbmcgZm9ybSBzZXF1ZW5jZXNcbiAgICAgIHt1bmNvbWJpbmluZ0Zvcm1TZXFzLm1hcCh4ID0+IChcbiAgICAgICAgPGxpPnt4fTwvbGk+XG4gICAgICApKX1cbiAgICAgIDxiciAvPlxuICAgICAgbGV0dGVyczoge2xldHRlcnMuam9pbignLCAnKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgV29yZFBhZ2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/word.tsx\n");

/***/ }),

/***/ "./src/process.ts":
/*!************************!*\
  !*** ./src/process.ts ***!
  \************************/
/*! exports provided: getInflectionalSuffixes, getStems, getSoundSequences, getSurfaceForms, itemize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getInflectionalSuffixes\", function() { return getInflectionalSuffixes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStems\", function() { return getStems; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSoundSequences\", function() { return getSoundSequences; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSurfaceForms\", function() { return getSurfaceForms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemize\", function() { return itemize; });\nfunction getInflectionalSuffixes(ending) {\n  var desinences = [];\n\n  if (ending) {\n    desinences.push(ending);\n    return desinences;\n  }\n\n  return desinences;\n}\nfunction getStems(literal, ending) {\n  var l = literal;\n  var ie = ending;\n  var stems = [];\n\n  if (l.length - ie.length != 0) {\n    stems.push(l.substr(0, l.length - ie.length));\n    return stems;\n  }\n\n  return stems;\n}\nfunction getSoundSequences(soundSeqs) {\n  var snds = [];\n\n  for (var j in soundSeqs) {\n    for (var k in soundSeqs[j]) {\n      var snd = soundSeqs[j][k];\n      snds.push([snd.toString(), snd.name]);\n    }\n  }\n\n  return snds;\n}\nfunction getSurfaceForms(underlying, surface) {\n  var forms = [];\n\n  if (underlying && surface && underlying !== surface) {\n    forms.push(surface);\n    return forms;\n  }\n\n  return forms;\n}\nfunction itemize(str) {\n  var items = [];\n\n  if (str) {\n    items.push(str);\n    return items;\n  }\n\n  return items;\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJvY2Vzcy50cz8zYzhlIl0sIm5hbWVzIjpbImdldEluZmxlY3Rpb25hbFN1ZmZpeGVzIiwiZW5kaW5nIiwiZGVzaW5lbmNlcyIsInB1c2giLCJnZXRTdGVtcyIsImxpdGVyYWwiLCJsIiwiaWUiLCJzdGVtcyIsImxlbmd0aCIsInN1YnN0ciIsImdldFNvdW5kU2VxdWVuY2VzIiwic291bmRTZXFzIiwic25kcyIsImoiLCJrIiwic25kIiwidG9TdHJpbmciLCJuYW1lIiwiZ2V0U3VyZmFjZUZvcm1zIiwidW5kZXJseWluZyIsInN1cmZhY2UiLCJmb3JtcyIsIml0ZW1pemUiLCJzdHIiLCJpdGVtcyJdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sU0FBU0EsdUJBQVQsQ0FBaUNDLE1BQWpDLEVBQWlEO0FBQ3BELE1BQU1DLFVBQW9CLEdBQUcsRUFBN0I7O0FBQ0EsTUFBR0QsTUFBSCxFQUFXO0FBQ1BDLGNBQVUsQ0FBQ0MsSUFBWCxDQUFnQkYsTUFBaEI7QUFDQSxXQUFPQyxVQUFQO0FBQ0g7O0FBQ0QsU0FBT0EsVUFBUDtBQUNIO0FBRU0sU0FBU0UsUUFBVCxDQUFrQkMsT0FBbEIsRUFBbUNKLE1BQW5DLEVBQW1EO0FBQ3RELE1BQU1LLENBQUMsR0FBR0QsT0FBVjtBQUNBLE1BQU1FLEVBQUUsR0FBR04sTUFBWDtBQUNBLE1BQU1PLEtBQWUsR0FBRyxFQUF4Qjs7QUFDQSxNQUFHRixDQUFDLENBQUNHLE1BQUYsR0FBU0YsRUFBRSxDQUFDRSxNQUFaLElBQXNCLENBQXpCLEVBQTRCO0FBQ3hCRCxTQUFLLENBQUNMLElBQU4sQ0FBV0csQ0FBQyxDQUFDSSxNQUFGLENBQVMsQ0FBVCxFQUFZSixDQUFDLENBQUNHLE1BQUYsR0FBU0YsRUFBRSxDQUFDRSxNQUF4QixDQUFYO0FBQ0EsV0FBT0QsS0FBUDtBQUNIOztBQUNELFNBQU9BLEtBQVA7QUFDSDtBQUVNLFNBQVNHLGlCQUFULENBQTJCQyxTQUEzQixFQUFpRDtBQUNwRCxNQUFNQyxJQUFJLEdBQUcsRUFBYjs7QUFDQSxPQUFJLElBQUlDLENBQVIsSUFBYUYsU0FBYixFQUF3QjtBQUNwQixTQUFJLElBQUlHLENBQVIsSUFBYUgsU0FBUyxDQUFDRSxDQUFELENBQXRCLEVBQTJCO0FBQ3ZCLFVBQU1FLEdBQUcsR0FBR0osU0FBUyxDQUFDRSxDQUFELENBQVQsQ0FBYUMsQ0FBYixDQUFaO0FBQ0FGLFVBQUksQ0FBQ1YsSUFBTCxDQUFVLENBQUNhLEdBQUcsQ0FBQ0MsUUFBSixFQUFELEVBQWlCRCxHQUFHLENBQUNFLElBQXJCLENBQVY7QUFDSDtBQUNKOztBQUNELFNBQU9MLElBQVA7QUFDSDtBQUVNLFNBQVNNLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQTZDQyxPQUE3QyxFQUE4RDtBQUNqRSxNQUFNQyxLQUFlLEdBQUcsRUFBeEI7O0FBQ0EsTUFBR0YsVUFBVSxJQUFJQyxPQUFkLElBQXlCRCxVQUFVLEtBQUtDLE9BQTNDLEVBQW9EO0FBQ2hEQyxTQUFLLENBQUNuQixJQUFOLENBQVdrQixPQUFYO0FBQ0EsV0FBT0MsS0FBUDtBQUNIOztBQUNELFNBQU9BLEtBQVA7QUFDSDtBQUVNLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQThCO0FBQ2pDLE1BQU1DLEtBQWUsR0FBRyxFQUF4Qjs7QUFDQSxNQUFHRCxHQUFILEVBQVE7QUFDSkMsU0FBSyxDQUFDdEIsSUFBTixDQUFXcUIsR0FBWDtBQUNBLFdBQU9DLEtBQVA7QUFDSDs7QUFDRCxTQUFPQSxLQUFQO0FBQ0giLCJmaWxlIjoiLi9zcmMvcHJvY2Vzcy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdW5kIH0gZnJvbSAndGFpcGEnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5mbGVjdGlvbmFsU3VmZml4ZXMoZW5kaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZXNpbmVuY2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmKGVuZGluZykge1xuICAgICAgICBkZXNpbmVuY2VzLnB1c2goZW5kaW5nKTtcbiAgICAgICAgcmV0dXJuIGRlc2luZW5jZXM7XG4gICAgfVxuICAgIHJldHVybiBkZXNpbmVuY2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlbXMobGl0ZXJhbDogc3RyaW5nLCBlbmRpbmc6IHN0cmluZykge1xuICAgIGNvbnN0IGwgPSBsaXRlcmFsXG4gICAgY29uc3QgaWUgPSBlbmRpbmdcbiAgICBjb25zdCBzdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICBpZihsLmxlbmd0aC1pZS5sZW5ndGggIT0gMCkge1xuICAgICAgICBzdGVtcy5wdXNoKGwuc3Vic3RyKDAsIGwubGVuZ3RoLWllLmxlbmd0aCkpXG4gICAgICAgIHJldHVybiBzdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIHN0ZW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U291bmRTZXF1ZW5jZXMoc291bmRTZXFzOiBTb3VuZFtdW10pIHtcbiAgICBjb25zdCBzbmRzID0gW107XG4gICAgZm9yKGxldCBqIGluIHNvdW5kU2Vxcykge1xuICAgICAgICBmb3IobGV0IGsgaW4gc291bmRTZXFzW2pdKSB7XG4gICAgICAgICAgICBjb25zdCBzbmQgPSBzb3VuZFNlcXNbal1ba11cbiAgICAgICAgICAgIHNuZHMucHVzaChbc25kLnRvU3RyaW5nKCksIHNuZC5uYW1lXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNuZHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXJmYWNlRm9ybXModW5kZXJseWluZzogc3RyaW5nLCBzdXJmYWNlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmb3Jtczogc3RyaW5nW10gPSBbXTtcbiAgICBpZih1bmRlcmx5aW5nICYmIHN1cmZhY2UgJiYgdW5kZXJseWluZyAhPT0gc3VyZmFjZSkge1xuICAgICAgICBmb3Jtcy5wdXNoKHN1cmZhY2UpO1xuICAgICAgICByZXR1cm4gZm9ybXM7XG4gICAgfVxuICAgIHJldHVybiBmb3Jtcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1pemUoc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICBpZihzdHIpIHtcbiAgICAgICAgaXRlbXMucHVzaChzdHIpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/process.ts\n");

/***/ }),

/***/ 1:
/*!**************************************************************************************************************************!*\
  !*** multi next-client-pages-loader?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! next-client-pages-loader?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx! */"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fword&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fword.tsx!./");


/***/ }),

/***/ "dll-reference dll_b2533e9d8f81576ae409":
/*!*******************************************!*\
  !*** external "dll_b2533e9d8f81576ae409" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = dll_b2533e9d8f81576ae409;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkbGxfYjI1MzNlOWQ4ZjgxNTc2YWU0MDlcIj8wYzc3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6ImRsbC1yZWZlcmVuY2UgZGxsX2IyNTMzZTlkOGY4MTU3NmFlNDA5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBkbGxfYjI1MzNlOWQ4ZjgxNTc2YWU0MDk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///dll-reference dll_b2533e9d8f81576ae409\n");

/***/ })

},[[1,"static/runtime/webpack.js"]]]);