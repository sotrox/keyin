_N_E =
(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([["pages/phrasalverb"],{

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var assign=Object.assign.bind(Object);module.exports=assign;module.exports.default=module.exports;\n//# sourceMappingURL=object-assign.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbi5qcz80MWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLHNDQUFzQyxzQkFBc0I7QUFDekUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFzc2lnbj1PYmplY3QuYXNzaWduLmJpbmQoT2JqZWN0KTttb2R1bGUuZXhwb3J0cz1hc3NpZ247bW9kdWxlLmV4cG9ydHMuZGVmYXVsdD1tb2R1bGUuZXhwb3J0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC1hc3NpZ24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/object-assign.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fphrasalverb&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fphrasalverb.tsx!./":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fphrasalverb&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fphrasalverb.tsx ***!
  \************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/phrasalverb\",\n      function () {\n        return __webpack_require__(/*! ./pages/phrasalverb.tsx */ \"./pages/phrasalverb.tsx\");\n      }\n    ]);\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzPzVhODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyx3REFBa0Q7QUFDekU7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9wYWdlPSUyRnBocmFzYWx2ZXJiJmFic29sdXRlUGFnZVBhdGg9JTJGVXNlcnMlMkZqc2x2JTJGUHJvamVjdHMlMkZrZXlpbiUyRnBhZ2VzJTJGcGhyYXNhbHZlcmIudHN4IS4vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9waHJhc2FsdmVyYlwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi9Vc2Vycy9qc2x2L1Byb2plY3RzL2tleWluL3BhZ2VzL3BocmFzYWx2ZXJiLnRzeFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fphrasalverb&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fphrasalverb.tsx!./\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/webpack/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/webpack/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports =\n/******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 931:\n/***/ (function(module) {\n\nmodule.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nccwpck_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\tvar threw = true;\n/******/ \t\ttry {\n/******/ \t\t\t__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);\n/******/ \t\t\tthrew = false;\n/******/ \t\t} finally {\n/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];\n/******/ \t\t}\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat */\n/******/ \t\n/******/ \t__nccwpck_require__.ab = __dirname + \"/\";/************************************************************************/\n/******/ \t// module exports must be returned from runtime so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nccwpck_require__(931);\n/******/ })()\n;\n/* WEBPACK VAR INJECTION */}.call(this, \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLyh3ZWJwYWNrKS93ZWJwYWNrL2hhcm1vbnktbW9kdWxlLmpzP2YzNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVAsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3dlYnBhY2svaGFybW9ueS1tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyA5MzE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHR2YXIgdGhyZXcgPSB0cnVlO1xuLyoqKioqKi8gXHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX25jY3dwY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XHRcdHRocmV3ID0gZmFsc2U7XG4vKioqKioqLyBcdFx0fSBmaW5hbGx5IHtcbi8qKioqKiovIFx0XHRcdGlmKHRocmV3KSBkZWxldGUgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NvbXBhdCAqL1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0X19uY2N3cGNrX3JlcXVpcmVfXy5hYiA9IF9fZGlybmFtZSArIFwiL1wiOy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIG1vZHVsZSBleHBvcnRzIG11c3QgYmUgcmV0dXJuZWQgZnJvbSBydW50aW1lIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vKioqKioqLyBcdC8vIHN0YXJ0dXBcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX25jY3dwY2tfcmVxdWlyZV9fKDkzMSk7XG4vKioqKioqLyB9KSgpXG47Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/webpack/harmony-module.js\n");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanM/YTE1YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUEsSUFBSSxJQUFxQztBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyx5RkFBNEI7QUFDakU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0R0FBNEc7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIHZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICcgK1xuICAgICAgICAgICAgbG9jYXRpb24gKyAnIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAnICsgdHlwZW9mIGVycm9yICsgJy4gJyArXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArXG4gICAgICAgICAgICAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICtcbiAgICAgICAgICAgICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVzZXRzIHdhcm5pbmcgY2FjaGUgd2hlbiB0ZXN0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prop-types/checkPropTypes.js\n");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzPzU5YjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/ReactPropTypesSecret.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.12.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\nvar checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.12.0';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\n\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar lowPriorityWarningWithoutStack = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarningWithoutStack = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(void 0, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar warningWithoutStack = function () {};\n\n{\n  warningWithoutStack = function (condition, format) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n    }\n\n    if (condition) {\n      return;\n    }\n\n    if (typeof console !== 'undefined') {\n      var argsWithFormat = args.map(function (item) {\n        return '' + item;\n      });\n      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nvar warningWithoutStack$1 = warningWithoutStack;\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  suspense: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\nvar describeComponentFrame = function (name, source, ownerName) {\n  var sourceInfo = '';\n\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n\n        if (match) {\n          var pathBeforeSlash = match[1];\n\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n};\n\nvar Resolved = 1;\n\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\nvar currentlyValidatingElement = null;\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = warningWithoutStack$1;\n\n{\n  warning = function (condition, format) {\n    if (condition) {\n      return;\n    }\n\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));\n  };\n}\n\nvar warning$1 = warning;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\n\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum);\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n  func.call(context, child, bookKeeping.count++);\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error(\"React.Children.only expected to receive a single React element child.\");\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n    }\n\n    if (render != null) {\n      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\");\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, inputs);\n}\nfunction useLayoutEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, inputs);\n}\nfunction useCallback(callback, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, inputs);\n}\nfunction useMemo(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, inputs);\n}\nfunction useImperativeHandle(ref, create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, inputs);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nvar emptyObject$1 = {};\nfunction useResponder(responder, listenerProps) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {\n      warning$1(false, 'useResponder: invalid first argument. Expected an event responder, but instead got %s', responder);\n      return;\n    }\n  }\n\n  return dispatcher.useResponder(responder, listenerProps || emptyObject$1);\n}\nfunction useTransition(config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition(config);\n}\nfunction useDeferredValue(value, config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, config);\n}\n\nfunction withSuspenseConfig(scope, config) {\n  var previousConfig = ReactCurrentBatchConfig.suspense;\n  ReactCurrentBatchConfig.suspense = config === undefined ? null : config;\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.suspense = previousConfig;\n  }\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  setCurrentlyValidatingElement(element);\n\n  {\n    warning$1(false, 'Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  var type = element.type;\n\n  if (type === null || type === undefined || typeof type === 'string') {\n    return;\n  }\n\n  var name = getComponentName(type);\n  var propTypes;\n\n  if (typeof type === 'function') {\n    propTypes = type.propTypes;\n  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n  // Inner props are checked in the reconciler.\n  type.$$typeof === REACT_MEMO_TYPE)) {\n    propTypes = type.propTypes;\n  } else {\n    return;\n  }\n\n  if (propTypes) {\n    setCurrentlyValidatingElement(element);\n    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n    setCurrentlyValidatingElement(null);\n  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown = true;\n    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n\n  if (typeof type.getDefaultProps === 'function') {\n    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  setCurrentlyValidatingElement(fragment);\n  var keys = Object.keys(fragment.props);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key !== 'children' && key !== 'key') {\n      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n      break;\n    }\n  }\n\n  if (fragment.ref !== null) {\n    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(source);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    var children = props.children;\n\n    if (children !== undefined) {\n      if (isStaticChildren) {\n        if (Array.isArray(children)) {\n          for (var i = 0; i < children.length; i++) {\n            validateChildKeys(children[i], type);\n          }\n\n          if (Object.freeze) {\n            Object.freeze(children);\n          }\n        } else {\n          warning$1(false, 'React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n        }\n      } else {\n        validateChildKeys(children, type);\n      }\n    }\n  }\n\n  if (hasOwnProperty$1.call(props, 'key')) {\n    warning$1(false, 'React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <ComponentName {...props} key={key} />');\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  return jsxWithValidation(type, props, key, true);\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  return jsxWithValidation(type, props, key, false);\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type; // Legacy hook: remove it\n\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var frozenObject = Object.freeze({});\n    var testMap = new Map([[frozenObject, null]]);\n    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction createFundamentalComponent(impl) {\n  // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(impl);\n  }\n\n  var fundamantalComponent = {\n    $$typeof: REACT_FUNDAMENTAL_TYPE,\n    impl: impl\n  };\n\n  {\n    Object.freeze(fundamantalComponent);\n  }\n\n  return fundamantalComponent;\n}\n\nfunction createEventResponder(displayName, responderConfig) {\n  var getInitialState = responderConfig.getInitialState,\n      onEvent = responderConfig.onEvent,\n      onMount = responderConfig.onMount,\n      onUnmount = responderConfig.onUnmount,\n      onRootEvent = responderConfig.onRootEvent,\n      rootEventTypes = responderConfig.rootEventTypes,\n      targetEventTypes = responderConfig.targetEventTypes,\n      targetPortalPropagation = responderConfig.targetPortalPropagation;\n  var eventResponder = {\n    $$typeof: REACT_RESPONDER_TYPE,\n    displayName: displayName,\n    getInitialState: getInitialState || null,\n    onEvent: onEvent || null,\n    onMount: onMount || null,\n    onRootEvent: onRootEvent || null,\n    onUnmount: onUnmount || null,\n    rootEventTypes: rootEventTypes || null,\n    targetEventTypes: targetEventTypes || null,\n    targetPortalPropagation: targetPortalPropagation || false\n  }; // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(eventResponder);\n  }\n\n  return eventResponder;\n}\n\nfunction createScope() {\n  var scopeComponent = {\n    $$typeof: REACT_SCOPE_TYPE\n  };\n\n  {\n    Object.freeze(scopeComponent);\n  }\n\n  return scopeComponent;\n}\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in Strict Mode.\n\n // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\n // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\n // Gather advanced timing metrics for Profiler subtrees.\n\n // Trace which interactions trigger each commit.\n\n // SSR experiments\n\n\n // Only used in www builds.\n\n // Only used in www builds.\n\n // Disable javascript: URL strings in href for XSS protection.\n\n // React Fire: prevent the value and checked attributes from syncing\n// with their related DOM properties\n\n // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n\nvar exposeConcurrentModeAPIs = false;\n // Experimental React Flare event system and event components support.\n\nvar enableFlareAPI = false; // Experimental Host Component support.\n\nvar enableFundamentalAPI = false; // Experimental Scope support.\n\nvar enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\nvar enableJSXTransformAPI = false; // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)\n// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version\n\n // For tests, we flush suspense fallbacks in an act scope;\n// *except* in some of our own tests, where we test incremental loading states.\n\n // Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n\n // Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\n\n\n\n\n // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance\n\nvar React = {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n  createRef: createRef,\n  Component: Component,\n  PureComponent: PureComponent,\n  createContext: createContext,\n  forwardRef: forwardRef,\n  lazy: lazy,\n  memo: memo,\n  useCallback: useCallback,\n  useContext: useContext,\n  useEffect: useEffect,\n  useImperativeHandle: useImperativeHandle,\n  useDebugValue: useDebugValue,\n  useLayoutEffect: useLayoutEffect,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  Fragment: REACT_FRAGMENT_TYPE,\n  Profiler: REACT_PROFILER_TYPE,\n  StrictMode: REACT_STRICT_MODE_TYPE,\n  Suspense: REACT_SUSPENSE_TYPE,\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n  version: ReactVersion,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n};\n\nif (exposeConcurrentModeAPIs) {\n  React.useTransition = useTransition;\n  React.useDeferredValue = useDeferredValue;\n  React.SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n  React.unstable_withSuspenseConfig = withSuspenseConfig;\n}\n\nif (enableFlareAPI) {\n  React.unstable_useResponder = useResponder;\n  React.unstable_createResponder = createEventResponder;\n}\n\nif (enableFundamentalAPI) {\n  React.unstable_createFundamental = createFundamentalComponent;\n}\n\nif (enableScopeAPI) {\n  React.unstable_createScope = createScope;\n} // Note: some APIs are added with feature flags.\n// Make sure that stable builds for open source\n// don't modify the React object to avoid deopts.\n// Also let's not expose their names in stable builds.\n\n\nif (enableJSXTransformAPI) {\n  {\n    React.jsxDEV = jsxWithValidation;\n    React.jsx = jsxWithValidationDynamic;\n    React.jsxs = jsxWithValidationStatic;\n  }\n}\n\n\n\nvar React$2 = Object.freeze({\n\tdefault: React\n});\n\nvar React$3 = ( React$2 && React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\n\n\nvar react = React$3.default || React$3;\n\nmodule.exports = react;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react.development.js\n");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsaUZBQTRCO0FBQ3ZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/analyzer.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/change/analyzer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tonalInflectionAnalyzer = exports.morphAnalyzeChanging = void 0;\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/change/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/change/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst analyzer_1 = __webpack_require__(/*! ../unchange/analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\n/**\n * Analyzes a string into morphemes. Morphological analysis.\n * @param str A word.\n */\nfunction morphAnalyzeChanging(str) {\n    const gs = analyzer_1.graphAnalyzeTonal(str);\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const mrphs = tschmm.makeMorphemes(gs);\n    return mrphs;\n}\nexports.morphAnalyzeChanging = morphAnalyzeChanging;\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalInflectionAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     * @param metaplasm A combining metaplasm\n     */\n    morphAnalyze(x, metaplasm) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = analyzer_1.graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalCombiningMorphemeMaker(metaplasm);\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or combining morphemes\n     * @param metaplasm An inflection metaplasm\n     */\n    lexAnalyze(x, metaplasm) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x, new metaplasm_1.TonalCombiningForms());\n        }\n        const lm = new lexeme_1.TonalInflectionLexemeMaker(metaplasm);\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvYW5hbHl6ZXIuanM/OWEzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsK0RBQVk7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsMkRBQVU7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsaUVBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsMkVBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvYW5hbHl6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9uYWxJbmZsZWN0aW9uQW5hbHl6ZXIgPSBleHBvcnRzLm1vcnBoQW5hbHl6ZUNoYW5naW5nID0gdm9pZCAwO1xuY29uc3QgbW9ycGhlbWVfMSA9IHJlcXVpcmUoXCIuL21vcnBoZW1lXCIpO1xuY29uc3QgbGV4ZW1lXzEgPSByZXF1aXJlKFwiLi9sZXhlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi4vdW5jaGFuZ2UvYW5hbHl6ZXJcIik7XG4vKipcbiAqIEFuYWx5emVzIGEgc3RyaW5nIGludG8gbW9ycGhlbWVzLiBNb3JwaG9sb2dpY2FsIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHdvcmQuXG4gKi9cbmZ1bmN0aW9uIG1vcnBoQW5hbHl6ZUNoYW5naW5nKHN0cikge1xuICAgIGNvbnN0IGdzID0gYW5hbHl6ZXJfMS5ncmFwaEFuYWx5emVUb25hbChzdHIpO1xuICAgIGNvbnN0IHRzY2htbSA9IG5ldyBtb3JwaGVtZV8xLlRvbmFsU291bmRDaGFuZ2luZ01vcnBoZW1lTWFrZXIoKTtcbiAgICBjb25zdCBtcnBocyA9IHRzY2htbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICByZXR1cm4gbXJwaHM7XG59XG5leHBvcnRzLm1vcnBoQW5hbHl6ZUNoYW5naW5nID0gbW9ycGhBbmFseXplQ2hhbmdpbmc7XG4vKiogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBtb3JwaGVtZXMgb3IgbGV4ZW1lLiAqL1xuZXhwb3J0cy50b25hbEluZmxlY3Rpb25BbmFseXplciA9IHtcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBncmFwaGVtZXMgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgZ3JhcGhlbWVzXG4gICAgICogQHBhcmFtIG1ldGFwbGFzbSBBIGNvbWJpbmluZyBtZXRhcGxhc21cbiAgICAgKi9cbiAgICBtb3JwaEFuYWx5emUoeCwgbWV0YXBsYXNtKSB7XG4gICAgICAgIGxldCBncyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGdzID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgeCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZ3MgPSBhbmFseXplcl8xLmdyYXBoQW5hbHl6ZVRvbmFsKHgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1tID0gbmV3IG1vcnBoZW1lXzEuVG9uYWxDb21iaW5pbmdNb3JwaGVtZU1ha2VyKG1ldGFwbGFzbSk7XG4gICAgICAgIHJldHVybiBtbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFuYWx5emVzIGEgc3RyaW5nIG9yIG1vcnBoZW1lcyBpbnRvIGEgbGV4ZW1lLiBMZXhpY2FsIGFuYWx5c2lzLlxuICAgICAqIEBwYXJhbSB4IEEgc3RyaW5nIG9yIGNvbWJpbmluZyBtb3JwaGVtZXNcbiAgICAgKiBAcGFyYW0gbWV0YXBsYXNtIEFuIGluZmxlY3Rpb24gbWV0YXBsYXNtXG4gICAgICovXG4gICAgbGV4QW5hbHl6ZSh4LCBtZXRhcGxhc20pIHtcbiAgICAgICAgbGV0IG1zID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgbXMgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtcyA9IHRoaXMubW9ycGhBbmFseXplKHgsIG5ldyBtZXRhcGxhc21fMS5Ub25hbENvbWJpbmluZ0Zvcm1zKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxtID0gbmV3IGxleGVtZV8xLlRvbmFsSW5mbGVjdGlvbkxleGVtZU1ha2VyKG1ldGFwbGFzbSk7XG4gICAgICAgIHJldHVybiBsbS5tYWtlTGV4ZW1lcyhtcyk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmFseXplci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/creator.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/change/creator.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCompoundPhraseme = exports.createTonalPhrase = exports.createTonalInflectionLexeme = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/change/analyzer.js\");\nconst unit_1 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/change/phraseme.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst metaplasm_3 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\n/** Creates a lexeme given a `TonalCombiningMetaplasm`. If metaplasm is not provided, `TonalZeroCombining` is defaulted. Excessive tokens are ignored. */\nfunction createTonalInflectionLexeme(str, metaplasm) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = metaplasm\n        ? tia.morphAnalyze(str, metaplasm)\n        : tia.morphAnalyze(str, new metaplasm_2.TonalZeroCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_3.TonalDesinenceInflection());\n    return lx;\n}\nexports.createTonalInflectionLexeme = createTonalInflectionLexeme;\n/** Creates a phrase given a sequence of arbitrary words regardless of syntax. Tokens are analyzed one by one. */\nfunction createTonalPhrase(str) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const strs = str.match(/\\w+/g);\n    const lxs = strs\n        ? strs.map(it => tia.lexAnalyze(it, new metaplasm_1.TonalZeroInflection()))\n        : [];\n    return new unit_1.TonalPhrase(lxs.map(it => it.word));\n}\nexports.createTonalPhrase = createTonalPhrase;\n/**\n * Creates a compound in which the preceding word will be inflected and the following word will not.\n * @param preceding A word that will be inflected.\n * @param following A word that will not be inflected.\n */\nfunction createCompoundPhraseme(preceding, following) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const tiphm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxPreceding = tia.lexAnalyze(preceding, new metaplasm_3.TonalDesinenceInflection());\n    const lxFollowing = createTonalInflectionLexeme(following);\n    return tiphm.makeCompoundPhraseme(lxPreceding, lxFollowing);\n}\nexports.createCompoundPhraseme = createCompoundPhraseme;\n//# sourceMappingURL=creator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvY3JlYXRvci5qcz9lNjA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQywrREFBWTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsbUVBQWtCO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG9CQUFvQixtQkFBTyxDQUFDLGlFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvY3JlYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVDb21wb3VuZFBocmFzZW1lID0gZXhwb3J0cy5jcmVhdGVUb25hbFBocmFzZSA9IGV4cG9ydHMuY3JlYXRlVG9uYWxJbmZsZWN0aW9uTGV4ZW1lID0gdm9pZCAwO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL2FuYWx5emVyXCIpO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuY2hhbmdlL3VuaXRcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBwaHJhc2VtZV8xID0gcmVxdWlyZShcIi4vcGhyYXNlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMiA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBtZXRhcGxhc21fMyA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbi8qKiBDcmVhdGVzIGEgbGV4ZW1lIGdpdmVuIGEgYFRvbmFsQ29tYmluaW5nTWV0YXBsYXNtYC4gSWYgbWV0YXBsYXNtIGlzIG5vdCBwcm92aWRlZCwgYFRvbmFsWmVyb0NvbWJpbmluZ2AgaXMgZGVmYXVsdGVkLiBFeGNlc3NpdmUgdG9rZW5zIGFyZSBpZ25vcmVkLiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9uYWxJbmZsZWN0aW9uTGV4ZW1lKHN0ciwgbWV0YXBsYXNtKSB7XG4gICAgY29uc3QgdGlhID0gYW5hbHl6ZXJfMS50b25hbEluZmxlY3Rpb25BbmFseXplcjtcbiAgICBjb25zdCBtcyA9IG1ldGFwbGFzbVxuICAgICAgICA/IHRpYS5tb3JwaEFuYWx5emUoc3RyLCBtZXRhcGxhc20pXG4gICAgICAgIDogdGlhLm1vcnBoQW5hbHl6ZShzdHIsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9Db21iaW5pbmcoKSk7XG4gICAgY29uc3QgbHggPSB0aWEubGV4QW5hbHl6ZShtcywgbmV3IG1ldGFwbGFzbV8zLlRvbmFsRGVzaW5lbmNlSW5mbGVjdGlvbigpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLmNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZSA9IGNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZTtcbi8qKiBDcmVhdGVzIGEgcGhyYXNlIGdpdmVuIGEgc2VxdWVuY2Ugb2YgYXJiaXRyYXJ5IHdvcmRzIHJlZ2FyZGxlc3Mgb2Ygc3ludGF4LiBUb2tlbnMgYXJlIGFuYWx5emVkIG9uZSBieSBvbmUuICovXG5mdW5jdGlvbiBjcmVhdGVUb25hbFBocmFzZShzdHIpIHtcbiAgICBjb25zdCB0aWEgPSBhbmFseXplcl8xLnRvbmFsSW5mbGVjdGlvbkFuYWx5emVyO1xuICAgIGNvbnN0IHN0cnMgPSBzdHIubWF0Y2goL1xcdysvZyk7XG4gICAgY29uc3QgbHhzID0gc3Ryc1xuICAgICAgICA/IHN0cnMubWFwKGl0ID0+IHRpYS5sZXhBbmFseXplKGl0LCBuZXcgbWV0YXBsYXNtXzEuVG9uYWxaZXJvSW5mbGVjdGlvbigpKSlcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gbmV3IHVuaXRfMS5Ub25hbFBocmFzZShseHMubWFwKGl0ID0+IGl0LndvcmQpKTtcbn1cbmV4cG9ydHMuY3JlYXRlVG9uYWxQaHJhc2UgPSBjcmVhdGVUb25hbFBocmFzZTtcbi8qKlxuICogQ3JlYXRlcyBhIGNvbXBvdW5kIGluIHdoaWNoIHRoZSBwcmVjZWRpbmcgd29yZCB3aWxsIGJlIGluZmxlY3RlZCBhbmQgdGhlIGZvbGxvd2luZyB3b3JkIHdpbGwgbm90LlxuICogQHBhcmFtIHByZWNlZGluZyBBIHdvcmQgdGhhdCB3aWxsIGJlIGluZmxlY3RlZC5cbiAqIEBwYXJhbSBmb2xsb3dpbmcgQSB3b3JkIHRoYXQgd2lsbCBub3QgYmUgaW5mbGVjdGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZFBocmFzZW1lKHByZWNlZGluZywgZm9sbG93aW5nKSB7XG4gICAgY29uc3QgdGlhID0gYW5hbHl6ZXJfMS50b25hbEluZmxlY3Rpb25BbmFseXplcjtcbiAgICBjb25zdCB0aXBobSA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsSW5mbGVjdGlvblBocmFzZW1lTWFrZXIoKTtcbiAgICBjb25zdCBseFByZWNlZGluZyA9IHRpYS5sZXhBbmFseXplKHByZWNlZGluZywgbmV3IG1ldGFwbGFzbV8zLlRvbmFsRGVzaW5lbmNlSW5mbGVjdGlvbigpKTtcbiAgICBjb25zdCBseEZvbGxvd2luZyA9IGNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZShmb2xsb3dpbmcpO1xuICAgIHJldHVybiB0aXBobS5tYWtlQ29tcG91bmRQaHJhc2VtZShseFByZWNlZGluZywgbHhGb2xsb3dpbmcpO1xufVxuZXhwb3J0cy5jcmVhdGVDb21wb3VuZFBocmFzZW1lID0gY3JlYXRlQ29tcG91bmRQaHJhc2VtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0b3IuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/creator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/inflector.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/change/inflector.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inflectSerial = exports.inflectVppToParticiple = exports.inflectToParticiple = exports.inflectPossesive = exports.inflectLeToConjunctive = exports.inflectEToAdnominal = exports.inflectVppToTransitive = exports.inflectVppToProceeding = exports.inflectToProceeding = exports.inflectEighthToSecond = exports.inflectEighthToFirst = exports.inflectTo = exports.inflectPossesiveEx = exports.inflectEncliticLe = exports.inflectPhrasalVerbParticle = exports.inflectEncliticE = exports.inflectTransfix = exports.inflectDesinence = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/change/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/change/phraseme.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/change/creator.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_2 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst dictionary_1 = __webpack_require__(/*! ../dparser/dictionary */ \"./node_modules/taipa/lib/dparser/dictionary.js\");\n/** Inflects the inflectional suffix of a word. Lexical inflector. */\nfunction inflectDesinence(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.TonalCombiningForms());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectDesinence = inflectDesinence;\n/** Inflects the transfix of a word. All tonals other than 3rd tone will be changed to 3rd tone. Lexical inflector. */\nfunction inflectTransfix(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ThirdCombiningForm());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TransfixInflection());\n    return lx;\n}\nexports.inflectTransfix = inflectTransfix;\n/**\n * Inflects e to ez. Lexical inflector.\n * @param word E, ew, or ez\n */\nfunction inflectEncliticE(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.AdnominalECombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticE = inflectEncliticE;\n/**\n * Inflects 4th tone to 1st tone or 3rd tone accordingly. Inflects laih to laiz. Lexical inflector.\n * @param word Particle\n * @param tone F, w, or z\n */\nfunction inflectPhrasalVerbParticle(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PhrasalVerbParticleCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPhrasalVerbParticle = inflectPhrasalVerbParticle;\n/**\n * Inflects lez and lew to le. Lexical inflector.\n * @param word Lew, lez, or le\n */\nfunction inflectEncliticLe(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ConjunctiveLeCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticLe = inflectEncliticLe;\n/**\n * Inflects ex to ew. Lexical inflector.\n * @param word Ex\n */\nfunction inflectPossesiveEx(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PossesiveExCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPossesiveEx = inflectPossesiveEx;\n/**\n * Inflects 4th tone to either 1st free tone or 7th free tone. Lexical inflector.\n * @param word 4th checked tone\n * @param tone F or z\n */\nfunction inflectTo(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.FirstSeventhCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectTo = inflectTo;\n/**\n * Inflects 8th tone to 1st tone. Addon inflector.\n * @param word 8th checked tone\n */\nfunction inflectEighthToFirst(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToFirstCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToFirst = inflectEighthToFirst;\n/**\n * Inflects 8th tone to 2nd tone. Addon inflector.\n * @param word 8th neutral tone\n */\nfunction inflectEighthToSecond(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToSecondCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToSecond = inflectEighthToSecond;\n/**\n * Inflects a phrasal verb of length 2 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n */\nfunction inflectToProceeding(verb, particle) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    if (particle === dictionary_1.ParticlesPhrasalVerb.khih) {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n    }\n    else {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.w);\n    }\n    return phm.makePhrasalVerbPhraseme(lxVerb, lxParticle);\n}\nexports.inflectToProceeding = inflectToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToProceeding(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    let lxParticleTwo = creator_1.createTonalInflectionLexeme('');\n    if (particle === dictionary_1.ParticlesPhrasalVerb.cut &&\n        particleTwo === dictionary_1.ParticlesPhrasalVerb.khih) {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.f);\n    }\n    else if (particle === dictionary_1.ParticlesPhrasalVerb.khih &&\n        particleTwo === dictionary_1.ParticlesPhrasalVerb.laih) {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.z);\n    }\n    return phm.makePhrasalVerbVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToProceeding = inflectVppToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to transitive form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToTransitive(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxParticle = inflectDesinence(particle);\n    const lxParticleTwo = inflectDesinence(particleTwo);\n    return phm.makeTransitiveVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToTransitive = inflectVppToTransitive;\n/**\n * Inflects e form to adnominal form. Phrasal inflector.\n * @param adjectivalNoun Main word\n * @param e E, ew, or ez\n */\nfunction inflectEToAdnominal(adjectivalNoun, e) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxAdjective = creator_1.createTonalInflectionLexeme(adjectivalNoun);\n    const lxE = inflectEncliticE(e);\n    return phm.makeAdjectivePhraseme(lxAdjective, lxE);\n}\nexports.inflectEToAdnominal = inflectEToAdnominal;\n/**\n * Inflects le form to conjunctive form. Phrasal inflector.\n * @param verb Main word\n * @param le Le, lew, or lez\n */\nfunction inflectLeToConjunctive(verb, le) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxLe = inflectEncliticLe(le);\n    return phm.makeConjunctivePhraseme(lxVerb, lxLe);\n}\nexports.inflectLeToConjunctive = inflectLeToConjunctive;\n/**\n * Inflects possesive case from teriminal form to adnominal form. Phrasal inflector.\n * @param noun Main word\n * @param ex Ex\n */\nfunction inflectPossesive(noun, ex) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxNoun = creator_1.createTonalInflectionLexeme(noun);\n    const lxEx = inflectPossesiveEx(ex);\n    return phm.makePossesivePhraseme(lxNoun, lxEx);\n}\nexports.inflectPossesive = inflectPossesive;\n/**\n * Inflects a phrasal verb of length 2 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n * @param tone 1st tone or 7th tone\n * */\nfunction inflectToParticiple(verb, particle, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    return phm.makeParticiplePhraseme(lxVerb, lxParticle);\n}\nexports.inflectToParticiple = inflectToParticiple;\n/**\n * Inflects a phrasal verb of length 3 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n * @param tone 1st tone or 7th tone\n */\nfunction inflectVppToParticiple(verb, particle, particleTwo, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    const lxParticleTwo = inflectTo(particleTwo, tone);\n    return phm.makeVppParticiplePhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToParticiple = inflectVppToParticiple;\n/** Inflects a series of words. The forms of the last word indicates the whole phrase is in proceeding form or not. Phrasal inflector. */\nfunction inflectSerial(...words) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lexemes = words.map(it => inflectDesinence(it));\n    return phm.makeSerialPhraseme(lexemes);\n}\nexports.inflectSerial = inflectSerial;\n//# sourceMappingURL=inflector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/inflector.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/inserter.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/change/inserter.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertToFollowingWord = exports.insertToFollowingSyllable = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/change/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/change/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/change/phraseme.js\");\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/change/analyzer.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nfunction getNoInsertion(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_2.TonalZeroInsertionMetaplasm());\n    return lx;\n}\n/**\n * Inserts an initial consonant m, n, or ng to syllable ay if the preceding syllable has a final consonant m, n, or ng.\n * @param word A word whose second syllable is ay, a, or af. The word has at least 2 syllables for the second one to be inserted an initial.\n */\nfunction insertToFollowingSyllable(word) {\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    const gs = gm.makeGraphemes(word);\n    const mrphs = tschmm.makeMorphemes(gs);\n    // TODO: add initial consonant g. b? l?\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_1.Epenthesis());\n    return lx;\n}\nexports.insertToFollowingSyllable = insertToFollowingSyllable;\n/**\n * Insert an initial consonant to the enclitic.\n * @param preceding Thre preceding word.\n * @param following The following word. The enclitic.\n */\nfunction insertToFollowingWord(preceding, following) {\n    const lxPreceding = getNoInsertion(preceding);\n    const lxFollowing = getNoInsertion(following);\n    const phmk = new phraseme_1.TonalInsertionPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.InsertionToEnclitic());\n}\nexports.insertToFollowingWord = insertToFollowingWord;\n//# sourceMappingURL=inserter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvaW5zZXJ0ZXIuanM/ZDE1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QyxtQkFBbUIsbUJBQU8sQ0FBQywrREFBWTtBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQywyREFBVTtBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyxpRUFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQywrREFBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQywrREFBWTtBQUN2QyxvQkFBb0IsbUJBQU8sQ0FBQywyREFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvaW5zZXJ0ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5zZXJ0VG9Gb2xsb3dpbmdXb3JkID0gZXhwb3J0cy5pbnNlcnRUb0ZvbGxvd2luZ1N5bGxhYmxlID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCB2ZXJzaW9uMl8xID0gcmVxdWlyZShcIi4uL3RvbmFsL3ZlcnNpb24yXCIpO1xuY29uc3QgbW9ycGhlbWVfMSA9IHJlcXVpcmUoXCIuL21vcnBoZW1lXCIpO1xuY29uc3QgbGV4ZW1lXzEgPSByZXF1aXJlKFwiLi9sZXhlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbmNvbnN0IHBocmFzZW1lXzEgPSByZXF1aXJlKFwiLi9waHJhc2VtZVwiKTtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi9hbmFseXplclwiKTtcbmNvbnN0IG1ldGFwbGFzbV8yID0gcmVxdWlyZShcIi4uL21ldGFwbGFzbVwiKTtcbmZ1bmN0aW9uIGdldE5vSW5zZXJ0aW9uKHdvcmQpIHtcbiAgICBjb25zdCBtcnBocyA9IGFuYWx5emVyXzEubW9ycGhBbmFseXplQ2hhbmdpbmcod29yZCk7XG4gICAgY29uc3QgbHggPSBuZXcgbGV4ZW1lXzEuVG9uYWxJbnNlcnRpb25MZXhlbWUobXJwaHMsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9JbnNlcnRpb25NZXRhcGxhc20oKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuLyoqXG4gKiBJbnNlcnRzIGFuIGluaXRpYWwgY29uc29uYW50IG0sIG4sIG9yIG5nIHRvIHN5bGxhYmxlIGF5IGlmIHRoZSBwcmVjZWRpbmcgc3lsbGFibGUgaGFzIGEgZmluYWwgY29uc29uYW50IG0sIG4sIG9yIG5nLlxuICogQHBhcmFtIHdvcmQgQSB3b3JkIHdob3NlIHNlY29uZCBzeWxsYWJsZSBpcyBheSwgYSwgb3IgYWYuIFRoZSB3b3JkIGhhcyBhdCBsZWFzdCAyIHN5bGxhYmxlcyBmb3IgdGhlIHNlY29uZCBvbmUgdG8gYmUgaW5zZXJ0ZWQgYW4gaW5pdGlhbC5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0VG9Gb2xsb3dpbmdTeWxsYWJsZSh3b3JkKSB7XG4gICAgY29uc3QgdHNjaG1tID0gbmV3IG1vcnBoZW1lXzEuVG9uYWxTb3VuZENoYW5naW5nTW9ycGhlbWVNYWtlcigpO1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKHZlcnNpb24yXzEubG93ZXJMZXR0ZXJzVG9uYWwpO1xuICAgIGNvbnN0IGdzID0gZ20ubWFrZUdyYXBoZW1lcyh3b3JkKTtcbiAgICBjb25zdCBtcnBocyA9IHRzY2htbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICAvLyBUT0RPOiBhZGQgaW5pdGlhbCBjb25zb25hbnQgZy4gYj8gbD9cbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbEluc2VydGlvbkxleGVtZShtcnBocywgbmV3IG1ldGFwbGFzbV8xLkVwZW50aGVzaXMoKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5pbnNlcnRUb0ZvbGxvd2luZ1N5bGxhYmxlID0gaW5zZXJ0VG9Gb2xsb3dpbmdTeWxsYWJsZTtcbi8qKlxuICogSW5zZXJ0IGFuIGluaXRpYWwgY29uc29uYW50IHRvIHRoZSBlbmNsaXRpYy5cbiAqIEBwYXJhbSBwcmVjZWRpbmcgVGhyZSBwcmVjZWRpbmcgd29yZC5cbiAqIEBwYXJhbSBmb2xsb3dpbmcgVGhlIGZvbGxvd2luZyB3b3JkLiBUaGUgZW5jbGl0aWMuXG4gKi9cbmZ1bmN0aW9uIGluc2VydFRvRm9sbG93aW5nV29yZChwcmVjZWRpbmcsIGZvbGxvd2luZykge1xuICAgIGNvbnN0IGx4UHJlY2VkaW5nID0gZ2V0Tm9JbnNlcnRpb24ocHJlY2VkaW5nKTtcbiAgICBjb25zdCBseEZvbGxvd2luZyA9IGdldE5vSW5zZXJ0aW9uKGZvbGxvd2luZyk7XG4gICAgY29uc3QgcGhtayA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsSW5zZXJ0aW9uUGhyYXNlbWVNYWtlcigpO1xuICAgIHJldHVybiBwaG1rLm1ha2VQaHJhc2VtZShseFByZWNlZGluZywgbHhGb2xsb3dpbmcsIG5ldyBtZXRhcGxhc21fMS5JbnNlcnRpb25Ub0VuY2xpdGljKCkpO1xufVxuZXhwb3J0cy5pbnNlcnRUb0ZvbGxvd2luZ1dvcmQgPSBpbnNlcnRUb0ZvbGxvd2luZ1dvcmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnNlcnRlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/inserter.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/lexeme.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/change/lexeme.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalInflectionLexemeMaker = exports.TonalUnmutationLexeme = exports.TonalMutationLexeme = exports.TonalUninfectionLexeme = exports.TonalInfectionLexeme = exports.TonalUninsertionLexeme = exports.TonalInsertionLexeme = exports.TonalInflectionLexeme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst maker_1 = __webpack_require__(/*! ../maker */ \"./node_modules/taipa/lib/maker.js\");\nconst unit_2 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_3 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\n/** A word and its inflected forms. */\nclass TonalInflectionLexeme extends unit_1.Lexeme {\n    // TODO: word patterns for thiapwsux chongwthaiwgiy, ay, etc... check out member sounds in morpheme.\n    constructor(morphemes, metaplasm) {\n        super();\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1]) {\n                // tonal ending needs to be assigned to sandhi lexeme\n                this.endingAllomorphic = this.assignAllomorphicEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                this.endingAllomorphic = new unit_2.AllomorphicEnding();\n            }\n        }\n        else {\n            this.endingAllomorphic = new unit_2.AllomorphicEnding();\n        }\n        if (morphemes.length > 0)\n            this.forms = this.assignWordForms(morphemes, metaplasm);\n    }\n    assignAllomorphicEnding(allomorph) {\n        let ending = new unit_2.AllomorphicEnding();\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            // replace the tonal ending\n            let fae = new unit_2.FreeAllomorphicEnding();\n            fae.allomorph = allomorph;\n            ending = fae;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            // append the tonal of the tonal ending\n            let chae = new unit_2.CheckedAllomorphicEnding();\n            chae.allomorph = allomorph;\n            ending = chae;\n        }\n        return ending;\n    }\n    getInflectionalEnding() {\n        if (this.endingAllomorphic)\n            return this.endingAllomorphic.allomorph.tonal.toString();\n        return '';\n    }\n    getAllomorphicEnding() {\n        if (this.endingAllomorphic)\n            return this.endingAllomorphic;\n        return '';\n    }\n    assignWordForms(ms, ti) {\n        return ti.apply(ms);\n    }\n    getForms() {\n        // TODO: change member variable name and method name.\n        return this.forms;\n    }\n}\nexports.TonalInflectionLexeme = TonalInflectionLexeme;\n/** A word and its inserted forms. */\nclass TonalInsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    insertWith(preceding) {\n        const wrd = new unit_2.TonalWord(this.morphemes.map(x => new unit_2.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentLtrs = preceding.morphemes[preceding.morphemes.length - 1].sounds;\n            let s = new unit_3.Sound();\n            if (adjacentLtrs[adjacentLtrs.length - 1].name ===\n                version2_1.TonalSoundTags.freeTone &&\n                adjacentLtrs[adjacentLtrs.length - 2].name ===\n                    version2_1.TonalSoundTags.nasalFinalConsonant) {\n                s = adjacentLtrs[adjacentLtrs.length - 2];\n            }\n            else if (adjacentLtrs[adjacentLtrs.length - 1].name ===\n                version2_1.TonalSoundTags.nasalFinalConsonant) {\n                s = adjacentLtrs[adjacentLtrs.length - 1];\n            }\n            const syls = this.morphemes[0].insertNasal(s);\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInsertionLexeme = TonalInsertionLexeme;\n/** A word and its inserted forms. */\nclass TonalUninsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninsertWith(preceding) {\n        const wrd = new unit_2.TonalWord(this.morphemes.map(x => new unit_2.TonalSyllable(x.syllable.letters)));\n        let initial = '';\n        if (this.morphemes.length > 0) {\n            initial = this.morphemes[0].sounds[0].toString();\n        }\n        if (preceding.morphemes.length > 0) {\n            const precedingLtrs = preceding.morphemes[preceding.morphemes.length - 1].sounds;\n            let s = new unit_3.Sound();\n            if (precedingLtrs[precedingLtrs.length - 1].name ===\n                version2_1.TonalSoundTags.freeTone &&\n                precedingLtrs[precedingLtrs.length - 2].name ===\n                    version2_1.TonalSoundTags.nasalFinalConsonant) {\n                s = precedingLtrs[precedingLtrs.length - 2];\n            }\n            else if (precedingLtrs[precedingLtrs.length - 1].name ===\n                version2_1.TonalSoundTags.nasalFinalConsonant) {\n                s = precedingLtrs[precedingLtrs.length - 1];\n            }\n            if (s &&\n                s.toString().length > 0 &&\n                (s.toString() === initial ||\n                    (s.toString() === version2_1.TonalLetterTags.ng &&\n                        initial === version2_1.TonalLetterTags.g))) {\n                // when the preceding letter is m, the initial of this enclitic is m\n                // when the preceding letter is n, the initial of this enclitic is n\n                // when the preceding letter is ng, the initial of this enclitic is ng/g\n                const syls = this.morphemes[0].uninsertNasal();\n                wrd.replaceSyllable(0, syls[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUninsertionLexeme = TonalUninsertionLexeme;\nclass TonalInfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal sandhi\n        return this.forms;\n    }\n    infectWith(preceding) {\n        const wrd = new unit_2.TonalWord(this.morphemes.map(x => new unit_2.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0 &&\n            preceding.morphemes[preceding.morphemes.length - 1].sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization).length > 0) {\n            // if there is a nasalization in the preceding word\n            const syls = this.morphemes[0].infect();\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInfectionLexeme = TonalInfectionLexeme;\nclass TonalUninfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninfectWith(preceding) {\n        const wrd = new unit_2.TonalWord(this.morphemes.map(i => new unit_2.TonalSyllable(i.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentLtrs = this.morphemes[this.morphemes.length - 1].sounds;\n            const n = preceding.morphemes[preceding.morphemes.length - 1].sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization);\n            if (n.length == 1 &&\n                adjacentLtrs.filter(it => it.name === version2_1.TonalSoundTags.nasalization)\n                    .length == 1) {\n                // if there is a nasalization in the preceding word and the current word\n                wrd.replaceSyllable(0, this.morphemes[0].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUninfectionLexeme = TonalUninfectionLexeme;\n/** A word and its mutated forms. */\nclass TonalMutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    mutateWith(following) {\n        const wrd = new unit_2.TonalWord(this.morphemes.map(i => new unit_2.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes.length > 0) {\n            const adjacentLtrs = following.morphemes[following.morphemes.length - 1].sounds;\n            if (adjacentLtrs[0].name === version2_1.TonalSoundTags.initialConsonant) {\n                const s = adjacentLtrs[0];\n                const syls = this.morphemes[this.morphemes.length - 1].changeFinalPtkppttkk(s);\n                if (syls && syls.length > 0) {\n                    wrd.popSyllable();\n                    wrd.pushSyllable(syls[0]);\n                }\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalMutationLexeme = TonalMutationLexeme;\n/** A word and its unmutated forms. */\nclass TonalUnmutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    unmutateWith(following) {\n        const ltrs = this.morphemes[this.morphemes.length - 1].sounds;\n        const fnls = ltrs.filter(i => i.name === version2_1.TonalSoundTags.stopFinalConsonant);\n        const wrd = new unit_2.TonalWord(this.morphemes.map(i => new unit_2.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes[0].sounds[0].toString() === version2_1.TonalLetterTags.g) {\n            if (fnls[0].toString() === version2_1.TonalLetterTags.gg ||\n                fnls[0].toString() === version2_1.TonalLetterTags.g) {\n                wrd.replaceSyllable(0, this.morphemes[0].unmutateFinalConsonant(following.morphemes[0].sounds[0])[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUnmutationLexeme = TonalUnmutationLexeme;\nclass TonalInflectionLexemeMaker extends maker_1.LexemeMaker {\n    constructor(metaplasm) {\n        super();\n        this.metaplasm = metaplasm;\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        let isInflStemWithX = false; // inflectional stem with x in the middle\n        if (morphemes) {\n            isInflStemWithX = this.checkFifth(morphemes);\n            if (isInflStemWithX)\n                return new TonalInflectionLexeme([], this.metaplasm);\n        }\n        return new TonalInflectionLexeme(morphemes, this.metaplasm);\n    }\n    checkFifth(ms) {\n        for (let i = 0; i < ms.length; i++) {\n            if (ms[i] && ms[i].syllable.lastLetter.literal === version2_1.TonalLetterTags.x) {\n                if (i < ms.length - 1 && !ms[ms.length - 1].isAy()) {\n                    if (ms[ms.length - 1].syllable.lastLetter.literal === version2_1.TonalLetterTags.a) {\n                        break;\n                    }\n                    else {\n                        // tonal x can't not appear in them middle of an inflectional stem\n                        // if it is not preceding an ay or a\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.TonalInflectionLexemeMaker = TonalInflectionLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/metaplasm.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/change/metaplasm.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FinalConsonantUnmutationInternal = exports.FinalConsonantMutationInternal = exports.FinalConsonantUnmutationExternal = exports.FinalConsonantMutationExternal = exports.UninfectionExternal = exports.InfectionExternal = exports.UninsertionFromEnclitic = exports.InsertionToEnclitic = exports.Conjunctive = exports.Adnominal = exports.ConjugateVppToParticiple = exports.ConjugateToParticiple = exports.ConjugateVppToTransitive = exports.ConjugateVppToProceeding = exports.ConjugateToProceeding = exports.ConsonantUnmutation = exports.ConsonantMutation = exports.Uninfection = exports.Infection = exports.Uninsertion = exports.Epenthesis = exports.TransfixInflection = exports.TonalDesinenceInflection = exports.FirstSeventhCombining = exports.PossesiveExCombining = exports.ConjunctiveLeCombining = exports.PhrasalVerbParticleCombining = exports.AdnominalECombining = exports.EighthToSecondCombining = exports.EighthToFirstCombining = exports.FourthToFirstCombining = exports.ThirdCombiningForm = exports.TonalCombiningForms = void 0;\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst unit_1 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst unit_3 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\n/** Returns the combining forms of a syllable. */\nclass TonalCombiningForms extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n                else if (allomorph instanceof version2_1.AllomorphY) {\n                    s.popLetter();\n                    return [s];\n                }\n                else {\n                    s.popLetter();\n                    const tos = collections_1.combiningRules.get(allomorph.tonal.toString());\n                    const rets = [];\n                    if (tos) {\n                        for (let k = 0; k < tos.length; k++) {\n                            s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                            rets.push(new unit_1.TonalSyllable(s.letters));\n                            s.popLetter();\n                        }\n                    }\n                    return rets;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // nothing to pop here\n                if (allomorph.tonal.toString().length > 0)\n                    return [];\n                const tos = collections_1.combiningRules.get(allomorph.final.toString());\n                const rets = [];\n                if (tos) {\n                    for (let k = 0; k < tos.length; k++) {\n                        if (allomorph.final.toString().length == 2) {\n                            // 8th finals are of length 2\n                            s.popLetter(); // pop the 8th final\n                            const got = collections_1.eighthToFourthFinalConsonants.get(allomorph.final.toString());\n                            if (got) {\n                                s.pushLetter(version2_1.lowerLettersTonal.get(got)); // push the 4th final\n                            }\n                        }\n                        s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                        rets.push(new unit_1.TonalSyllable(s.letters));\n                        s.popLetter();\n                    }\n                }\n                return rets;\n            }\n        }\n        return [];\n    }\n}\nexports.TonalCombiningForms = TonalCombiningForms;\n/** Changes to 3rd tone. */\nclass ThirdCombiningForm extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            const s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                if (allomorph.tonal.toString()) {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.ThirdCombiningForm = ThirdCombiningForm;\n/** Changes 4th tone to 1st tone. */\nclass FourthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.AllomorphH) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FourthToFirstCombining = FourthToFirstCombining;\n/** Changes 8th tone to 1st tone. */\nclass EighthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            const tnl = collections_1.eighthToFirst.get(allomorph.toString());\n            if (tnl) {\n                s.popLetter();\n                s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(tnl).characters));\n                s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToFirstCombining = EighthToFirstCombining;\n/** Changes 8th tone to 2nd tone. */\nclass EighthToSecondCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.h).characters));\n            s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToSecondCombining = EighthToSecondCombining;\n/** Returns the combining form of enclitic e. */\nclass AdnominalECombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        // 1->7, 7->7, 3->3\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        // it should loop only once\n                        s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.AdnominalECombining = AdnominalECombining;\n/** Returns the combining form of a phrasal verb particle. */\nclass PhrasalVerbParticleCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    toThird(syllable, final) {\n        let s = new unit_1.TonalSyllable(syllable.letters);\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n        return s;\n    }\n    toFirst(syllable) {\n        let s = new unit_1.TonalSyllable(syllable.letters);\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f));\n        return s;\n    }\n    toSeventh(syllable) {\n        let s = new unit_1.TonalSyllable(syllable.letters);\n        s.popLetter();\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z));\n        return s;\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            if (allomorph instanceof version2_1.CheckedAllomorph) {\n                const ret = [];\n                let syl = new unit_1.TonalSyllable([]);\n                if (this.tone === version2_1.TonalLetterTags.f) {\n                    syl = this.toFirst(s);\n                }\n                else if (this.tone === version2_1.TonalLetterTags.w) {\n                    syl = this.toThird(s, sounds[sounds.length - 1].toString());\n                }\n                else if (this.tone === version2_1.TonalLetterTags.z) {\n                    syl = this.toSeventh(s);\n                }\n                ret.push(syl);\n                // TODO: free form of the syllable could be handled outside of this routine by popping out f/w and h/hh\n                return ret;\n            }\n        }\n        return [];\n    }\n}\nexports.PhrasalVerbParticleCombining = PhrasalVerbParticleCombining;\n/** Returns the combining form of enclitic le. */\nclass ConjunctiveLeCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph.tonal.toString() === version2_1.TonalLetterTags.z ||\n                    allomorph.tonal.toString() === version2_1.TonalLetterTags.w) {\n                    s.popLetter();\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.ConjunctiveLeCombining = ConjunctiveLeCombining;\n/** Returns the combining form of possesive case marker ex. */\nclass PossesiveExCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.PossesiveExCombining = PossesiveExCombining;\n/** Changes 4th tone to either 1st or 7th tone. */\nclass FirstSeventhCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    apply(sounds, allomorph) {\n        // from -h to 1 or 7\n        if (allomorph) {\n            let s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n            if (s.lastLetter.literal === version2_1.TonalLetterTags.h) {\n                s.popLetter();\n            }\n            if (this.tone === version2_1.TonalLetterTags.z) {\n                s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z).characters));\n            }\n            else if (this.tone === version2_1.TonalLetterTags.zero &&\n                sounds[sounds.length - 1].toString() === version2_1.TonalLetterTags.t) {\n                s.pushLetter(new unit_2.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FirstSeventhCombining = FirstSeventhCombining;\n/** Inflects an inflectional suffix. */\nclass TonalDesinenceInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 0 && morphemes[morphemes.length - 1]) {\n            const last = morphemes[morphemes.length - 1];\n            const syls = last.getForms();\n            let rets = [];\n            if (syls) {\n                for (let i in syls) {\n                    let wd = new unit_3.TonalWord(morphemes.map(x => new unit_1.TonalSyllable(x.syllable.letters)));\n                    wd.popSyllable();\n                    wd.pushSyllable(syls[i]);\n                    rets.push(wd);\n                }\n            }\n            return rets;\n        }\n        return [];\n    }\n}\nexports.TonalDesinenceInflection = TonalDesinenceInflection;\n/** Inflects a transfix. */\nclass TransfixInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        const rets = [];\n        if (morphemes.length > 0) {\n            const tw = new unit_3.TonalWord(morphemes.map(x => new unit_1.TonalSyllable(x.syllable.letters)));\n            for (let i = 0; i < morphemes.length; i++) {\n                const form = morphemes[i].getForms()[0];\n                if (form)\n                    tw.replaceSyllable(i, form);\n            }\n            rets.push(tw);\n        }\n        return rets;\n    }\n}\nexports.TransfixInflection = TransfixInflection;\n/** Inserts an initial m, n, or ng to syllable ay. */\nclass Epenthesis extends metaplasm_1.TonalInsertionMetaplasm {\n    // adding of nasal consonants. insertion\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(x => new unit_1.TonalSyllable(x.syllable.letters)));\n            if (ltrs[ltrs.length - 2].name == version2_1.TonalSoundTags.nasalFinalConsonant &&\n                morphemes[morphemes.length - 1].syllable.letters[0].literal ===\n                    version2_1.TonalLetterTags.a) {\n                // m, n, ng followed by -ay. pass the preceding nasal to get forms\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].insertNasal(ltrs[ltrs.length - 2])[0]);\n                return [wrd];\n            }\n            // TODO: insert to syllable e. e.g. lagwex -> lagwgex\n        }\n        return [];\n    }\n}\nexports.Epenthesis = Epenthesis;\n/** Uninsert an initial m, n, or ng from syllable ~ay */\nclass Uninsertion extends metaplasm_1.TonalUninsertionMetaplasm {\n    // removal of nasal consonants\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs[ltrs.length - 2].name == version2_1.TonalSoundTags.nasalFinalConsonant &&\n                collections_1.nasalInitialConsonants.includes(morphemes[morphemes.length - 1].syllable.letters[0].literal) &&\n                morphemes[morphemes.length - 1].syllable.letters[1].literal ===\n                    version2_1.TonalLetterTags.a) {\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].uninsertNasal()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninsertion = Uninsertion;\n/** Infect the following syllable with nasalization. */\nclass Infection extends metaplasm_1.TonalInfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs.filter(it => it.name === version2_1.TonalSoundTags.nasalization).length == 1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].infect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Infection = Infection;\n/** Uninfect the following syllable which is infected by a nasalization. */\nclass Uninfection extends metaplasm_1.TonalUninfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs.filter(it => it.name === version2_1.TonalSoundTags.nasalization).length == 1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninfection = Uninfection;\n/** Mutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantMutation extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n            // duplifix. pass the preceding initial to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].mutateInitialConsonant(ltrs[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantMutation = ConsonantMutation;\n/** Unmutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantUnmutation extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].sounds;\n            const wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n            // pass the initial of the following word to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].unmutateInitialConsonant(ltrs[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantUnmutation = ConsonantUnmutation;\n/** Returns the proceeding forms of a phrasal verb of length 2. */\nclass ConjugateToProceeding extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            forms.map(it => ret.push(new unit_1.TonalPhrase([verb.getForms()[0], it])));\n            return ret;\n        }\n        else if (verb.getForms().length > 0) {\n            // equivalent to compound in terms of phrasal verb\n            return [new unit_1.TonalPhrase([verb.getForms()[0], particle.word])];\n        }\n        else {\n            return [new unit_1.TonalPhrase([])];\n        }\n    }\n}\nexports.ConjugateToProceeding = ConjugateToProceeding;\n/** Returns the proceeding forms of a phrasal verb of length 3. */\nclass ConjugateVppToProceeding extends metaplasm_1.TonalPhrasalInflectionVppMetaplasm {\n    apply(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 || particleTwo.getForms().length > 0) {\n            return [\n                new unit_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]),\n            ];\n        }\n        return [new unit_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToProceeding = ConjugateVppToProceeding;\n/** Returns the transitive forms of a phrasal verb of length 3. */\nclass ConjugateVppToTransitive extends metaplasm_1.TonalPhrasalInflectionVppMetaplasm {\n    apply(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (verb.getForms().length > 0) {\n            return [\n                new unit_1.TonalPhrase([verb.getForms()[0], particle.word, particleTwo.word]),\n            ];\n        }\n        return [new unit_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToTransitive = ConjugateVppToTransitive;\n/** Returns the participle forms of a phrasal verb of length 2. */\nclass ConjugateToParticiple extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                forms.map(it => ret.push(new unit_1.TonalPhrase([verb.getForms()[0], it])));\n            }\n            else {\n                forms.map(it => ret.push(new unit_1.TonalPhrase([verb.word, it])));\n            }\n            return ret;\n        }\n        return [new unit_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateToParticiple = ConjugateToParticiple;\n/** Returns the participle forms of a phrasal verb of length 3. */\nclass ConjugateVppToParticiple extends metaplasm_1.TonalPhrasalInflectionVppMetaplasm {\n    apply(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 && particleTwo.getForms().length > 0) {\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                ret.push(new unit_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]));\n            }\n            return ret;\n        }\n        return [new unit_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToParticiple = ConjugateVppToParticiple;\n/** Returns the adnominal forms of a possesive or e-adjective. */\nclass Adnominal extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(noun, particle) {\n        if (noun.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            return [new unit_1.TonalPhrase([noun.word, particle.getForms()[0]])];\n        }\n        else {\n            return [new unit_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Adnominal = Adnominal;\n/** Returns the conjunctive form of le form. */\nclass Conjunctive extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, le) {\n        if (verb.word.literal === '' || le.word.literal === '')\n            return [];\n        if (le.getForms().length > 0) {\n            return [new unit_1.TonalPhrase([verb.getForms()[0], le.getForms()[0]])];\n        }\n        else if (verb.getForms().length > 0) {\n            return [new unit_1.TonalPhrase([verb.getForms()[0], le.word])];\n        }\n        else {\n            return [new unit_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Conjunctive = Conjunctive;\n/** Insert an initial to the enclitic. */\nclass InsertionToEnclitic extends metaplasm_1.TonalPhrasalInsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.insertWith(preceding);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InsertionToEnclitic = InsertionToEnclitic;\n/** Uninsert an initial from the enclitic. */\nclass UninsertionFromEnclitic extends metaplasm_1.TonalPhrasalUninsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninsertWith(preceding);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninsertionFromEnclitic = UninsertionFromEnclitic;\n/** Infect the following word with a nasalization. */\nclass InfectionExternal extends metaplasm_1.TonalPhrasalInfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.infectWith(preceding);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InfectionExternal = InfectionExternal;\n/** Uninfect the following word which is infected by a nasalization. */\nclass UninfectionExternal extends metaplasm_1.TonalPhrasalUninfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninfectWith(preceding);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninfectionExternal = UninfectionExternal;\n/** Consonant mutation of the final of the preceding word. */\nclass FinalConsonantMutationExternal extends metaplasm_1.TonalPhrasalMutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.mutateWith(following);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantMutationExternal = FinalConsonantMutationExternal;\n/** Consonant unmutation of the final of the preceding word. */\nclass FinalConsonantUnmutationExternal extends metaplasm_1.TonalPhrasalUnmutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.unmutateWith(following);\n        if (wrds.length > 0)\n            return [new unit_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantUnmutationExternal = FinalConsonantUnmutationExternal;\n/** Consonant mutation of the final of the preceding syllable. */\nclass FinalConsonantMutationInternal extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                if (morphemes[i].sounds[0].name === version2_1.TonalSoundTags.initialConsonant &&\n                    (morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.t ||\n                        morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.tt)) {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else if (morphemes[i].sounds[0].toString() === version2_1.TonalLetterTags.b &&\n                    morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.n) {\n                    const syls = morphemes[i - 1].changeFinalN(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].sounds[0]);\n                    if (syls && syls.length > 0)\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantMutationInternal = FinalConsonantMutationInternal;\n/** Consonant unmutation of the final of the preceding syllable. */\nclass FinalConsonantUnmutationInternal extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new unit_3.TonalWord(morphemes.map(it => new unit_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                // combine b, g, h, j, l with m, n, ng\n                const initialsBghjlmnng = collections_1.initialConsonantsBghjl.concat(collections_1.nasalInitialConsonants);\n                const finalsBglbbggll = Array.from(collections_1.voicedVoicelessFinalConsonants.keys());\n                if (morphemes[i].sounds[0].name === version2_1.TonalSoundTags.initialConsonant &&\n                    finalsBglbbggll.includes(morphemes[i - 1].lastSecondLetter) &&\n                    initialsBghjlmnng.includes(morphemes[i].sounds[0].toString())) {\n                    const syls = morphemes[i - 1].toVoicelessFinal();\n                    wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantUnmutationInternal = FinalConsonantUnmutationInternal;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/morpheme.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/change/morpheme.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalSoundChangingMorphemeMaker = exports.TonalCombiningMorphemeMaker = exports.TonalSoundChangingMorpheme = exports.TonalCombiningMorpheme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst maker_1 = __webpack_require__(/*! ../maker */ \"./node_modules/taipa/lib/maker.js\");\nconst morpheme_1 = __webpack_require__(/*! ../unchange/morpheme */ \"./node_modules/taipa/lib/unchange/morpheme.js\");\nconst unit_2 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_3 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** A syllable and its combining forms. */\nclass TonalCombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.allomorph = this.assignAllomorph(this.syllable);\n        this.sounds = sounds;\n        this.forms = this.metaplasm.apply(this.sounds, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    isAy() {\n        if (this.sounds[this.sounds.length - 1].toString() === version2_1.TonalLetterTags.y &&\n            this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.a)\n            return true;\n        return false;\n    }\n    assignAllomorph(syllable) {\n        if (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.uncombinedCheckedAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.checkedToneLettersTonal.includes(syllable.lastLetter.literal) &&\n            (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastSecondLetter.literal) ||\n                collections_1.finalConsonantsForBgjlsbbggllss.has(syllable.lastSecondLetter.literal))) {\n            // in case of a final followed by a tonal\n            const ams = version2_1.combinedCheckedAllomorphs.get(syllable.lastSecondLetter.literal + syllable.lastLetter.literal);\n            if (ams && ams.length > 0) {\n                const ret = ams.filter(it => it.tonal.toString() === syllable.lastLetter.literal);\n                return ret[0];\n            }\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.combinedFreeAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.combinedFreeAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph(); // return empty allomorph\n        }\n        return new version2_1.ZeroAllomorph();\n    }\n}\nexports.TonalCombiningMorpheme = TonalCombiningMorpheme;\n/** A syllable and its sound changing forms. */\nclass TonalSoundChangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds) {\n        super();\n        this.syllable = syllable;\n        this.sounds = sounds;\n    }\n    get lastSecondLetter() {\n        return this.sounds[this.sounds.length - 2].toString();\n    }\n    insertNasal(sound) {\n        if (sound) {\n            if (sound.name === version2_1.TonalSoundTags.nasalFinalConsonant) {\n                // insertion of nasals, both internal and external sandhi\n                const ltrs = this.sounds;\n                ltrs.splice(0, 0, sound);\n                return [\n                    new unit_2.TonalSyllable(ltrs.map(x => new unit_3.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    infect() {\n        const n = version2_1.nasalizationsTonal.sounds[0];\n        if (n) {\n            if (n.name === version2_1.TonalSoundTags.nasalization) {\n                const snds = this.sounds;\n                if (snds[snds.length - 1].name === version2_1.TonalSoundTags.freeTone) {\n                    snds.splice(snds.length - 1, 0, n);\n                }\n                else if (snds[snds.length - 1].name === version2_1.TonalSoundTags.vowel) {\n                    snds.push(n);\n                }\n                return [\n                    new unit_2.TonalSyllable(snds.map(x => new unit_3.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    /** Mutate initial consonants. */\n    mutateInitialConsonant(sound) {\n        if (sound) {\n            if (sound.name === version2_1.TonalSoundTags.initialConsonant) {\n                const snds = this.sounds;\n                if (snds[0].toString() === sound.toString()) {\n                    const s = new unit_2.TonalSyllable(this.sounds.map(it => new unit_3.AlphabeticLetter(it.characters)));\n                    s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.l));\n                    return [s];\n                }\n                return [\n                    new unit_2.TonalSyllable(snds.map(x => new unit_3.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    mutateFinalConsonant(sound) {\n        if (sound) {\n            const snds = this.sounds;\n            const syl = new unit_2.TonalSyllable(this.sounds.map(i => new unit_3.AlphabeticLetter(i.characters)));\n            const idx = snds.findIndex(i => i.name === version2_1.TonalSoundTags.stopFinalConsonant);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.gg));\n            return [syl];\n        }\n        return [];\n    }\n    changeFinalTTt(initial) {\n        // absolute assimilation, except for t or tt followed by j. regressive\n        if ((this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.tt &&\n            Object.values(collections_1.initialConsonantsForTT).includes(initial.toString())) ||\n            (this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.t &&\n                Object.values(collections_1.initialConsonantsForFinalT).includes(initial.toString()))) {\n            const s = new unit_2.TonalSyllable(this.sounds.map(it => new unit_3.AlphabeticLetter(it.characters)));\n            let fnl = collections_1.ttInitialTInitialPairs.get(this.sounds[this.sounds.length - 2].toString() + initial.toString());\n            if (!fnl && initial.toString() === version2_1.TonalLetterTags.j) {\n                // this block is dedicated to -tfj- and -twj-, since there is only -jfj- but not -jwj-\n                fnl = collections_1.ttInitialTInitialPairs.get(this.sounds[this.sounds.length - 2].toString() +\n                    this.sounds[this.sounds.length - 1] +\n                    initial.toString());\n            }\n            if (fnl) {\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                if (collections_1.nasalInitialConsonants.includes(initial.toString())) {\n                    s.insertLetter(s.letters.length - 2, new unit_3.AlphabeticLetter(initial.characters));\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n    changeFinalHHh(initial) {\n        // TODO: mutate consonants hh and h.\n        return [];\n    }\n    changeFinalPPp(initial) {\n        // TODO: neutrals. pp -> hh. p -> h.\n        return [];\n    }\n    changeWithInitialMnng(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initialConsonant &&\n            collections_1.nasalInitialConsonants.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithMedial(medial) {\n        if (medial.name === version2_1.TonalSoundTags.vowel &&\n            version2_1.vowelsTonal.includes(medial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithInitialBghjl(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initialConsonant &&\n            collections_1.initialConsonantsBghjl.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    /**\n     * Change a final with the beginning letter of the following syllable\n     * @param beginning Beginning letter of the following syllable\n     */\n    changeFinalPtkppttkk(beginning) {\n        const sandhiTTt = this.changeFinalTTt(beginning);\n        if (sandhiTTt.length > 0)\n            return sandhiTTt;\n        const sandhiHHh = this.changeFinalHHh(beginning);\n        if (sandhiHHh.length > 0)\n            return sandhiHHh;\n        const sandhiPPp = this.changeFinalPPp(beginning);\n        if (sandhiPPp.length > 0)\n            return sandhiPPp;\n        const voicedWithMnng = this.changeWithInitialMnng(beginning);\n        if (voicedWithMnng.length > 0)\n            return voicedWithMnng;\n        const voicedWithMedial = this.changeWithMedial(beginning);\n        if (voicedWithMedial.length > 0)\n            return voicedWithMedial;\n        const voicedWithBghjl = this.changeWithInitialBghjl(beginning);\n        if (voicedWithBghjl.length > 0)\n            return voicedWithBghjl;\n    }\n    changeFinalN(initial) {\n        if (this.sounds[this.sounds.length - 2].name !=\n            version2_1.TonalSoundTags.stopFinalConsonant &&\n            this.sounds[this.sounds.length - 2].name !=\n                version2_1.TonalSoundTags.nasalFinalConsonant) {\n            return [];\n        }\n        if (initial.toString() === version2_1.TonalLetterTags.b &&\n            this.sounds[this.sounds.length - 2].toString() === version2_1.TonalLetterTags.n) {\n            // replace final n with final m\n            const s = new unit_2.TonalSyllable(this.sounds.map(it => new unit_3.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.m));\n            return [s];\n        }\n        return [];\n    }\n    voicedFinal() {\n        const fnl = collections_1.voicelessVoicedFinalConsonants.get(this.sounds[this.sounds.length - 2].toString());\n        if (fnl) {\n            const s = new unit_2.TonalSyllable(this.sounds.map(it => new unit_3.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundChangingMorpheme = TonalSoundChangingMorpheme;\nclass TonalCombiningMorphemeMaker extends maker_1.MorphemeMaker {\n    constructor(metaplasm) {\n        super();\n        this.metaplasm = metaplasm;\n    }\n    createArray() {\n        return new Array();\n    }\n    createMorpheme(matched) {\n        const tcm = new TonalCombiningMorpheme(new unit_2.TonalSyllable(matched.letters), matched.pattern, this.metaplasm);\n        return tcm;\n    }\n    postprocess(patterns) {\n        let morphemes = this.createArray();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalCombiningMorphemeMaker = TonalCombiningMorphemeMaker;\nclass TonalSoundChangingMorphemeMaker extends maker_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createArray() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundChangingMorpheme(new unit_2.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        const morphemes = this.createArray();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundChangingMorphemeMaker = TonalSoundChangingMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/mutator.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/change/mutator.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mutateFinalOfPrecedingWord = exports.mutateFinalConsonantOfPrecedingSyllable = exports.mutateInitialOfFollowingSyllable = void 0;\nconst lexeme_1 = __webpack_require__(/*! ../change/lexeme */ \"./node_modules/taipa/lib/change/lexeme.js\");\nconst analyzer_1 = __webpack_require__(/*! ../change/analyzer */ \"./node_modules/taipa/lib/change/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../change/metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/change/phraseme.js\");\nfunction getNoMutation(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_2.TonalZeroMutationMetaplasm());\n    return lx;\n}\n/** Mutates the initial of the following syllable. */\nfunction mutateInitialOfFollowingSyllable(word) {\n    const ms = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(ms, new metaplasm_1.ConsonantMutation());\n    return lx;\n}\nexports.mutateInitialOfFollowingSyllable = mutateInitialOfFollowingSyllable;\n/** Mutates the final of the preceding syllable. */\nfunction mutateFinalConsonantOfPrecedingSyllable(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_1.FinalConsonantMutationInternal());\n    return lx;\n}\nexports.mutateFinalConsonantOfPrecedingSyllable = mutateFinalConsonantOfPrecedingSyllable;\n/** Mutates the final of the preceding word. */\nfunction mutateFinalOfPrecedingWord(preceding, following) {\n    const lxPreceding = getNoMutation(preceding);\n    const lxFollowing = getNoMutation(following);\n    const phmk = new phraseme_1.TonalMutationPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.FinalConsonantMutationExternal());\n}\nexports.mutateFinalOfPrecedingWord = mutateFinalOfPrecedingWord;\n//# sourceMappingURL=mutator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jaGFuZ2UvbXV0YXRvci5qcz8xMDcxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyxtRUFBa0I7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsdUVBQW9CO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLHlFQUFxQjtBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQywyREFBYztBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQywrREFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvY2hhbmdlL211dGF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubXV0YXRlRmluYWxPZlByZWNlZGluZ1dvcmQgPSBleHBvcnRzLm11dGF0ZUZpbmFsQ29uc29uYW50T2ZQcmVjZWRpbmdTeWxsYWJsZSA9IGV4cG9ydHMubXV0YXRlSW5pdGlhbE9mRm9sbG93aW5nU3lsbGFibGUgPSB2b2lkIDA7XG5jb25zdCBsZXhlbWVfMSA9IHJlcXVpcmUoXCIuLi9jaGFuZ2UvbGV4ZW1lXCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuLi9jaGFuZ2UvYW5hbHl6ZXJcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuLi9jaGFuZ2UvbWV0YXBsYXNtXCIpO1xuY29uc3QgbWV0YXBsYXNtXzIgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgcGhyYXNlbWVfMSA9IHJlcXVpcmUoXCIuL3BocmFzZW1lXCIpO1xuZnVuY3Rpb24gZ2V0Tm9NdXRhdGlvbih3b3JkKSB7XG4gICAgY29uc3QgbXJwaHMgPSBhbmFseXplcl8xLm1vcnBoQW5hbHl6ZUNoYW5naW5nKHdvcmQpO1xuICAgIGNvbnN0IGx4ID0gbmV3IGxleGVtZV8xLlRvbmFsTXV0YXRpb25MZXhlbWUobXJwaHMsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9NdXRhdGlvbk1ldGFwbGFzbSgpKTtcbiAgICByZXR1cm4gbHg7XG59XG4vKiogTXV0YXRlcyB0aGUgaW5pdGlhbCBvZiB0aGUgZm9sbG93aW5nIHN5bGxhYmxlLiAqL1xuZnVuY3Rpb24gbXV0YXRlSW5pdGlhbE9mRm9sbG93aW5nU3lsbGFibGUod29yZCkge1xuICAgIGNvbnN0IG1zID0gYW5hbHl6ZXJfMS5tb3JwaEFuYWx5emVDaGFuZ2luZyh3b3JkKTtcbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbE11dGF0aW9uTGV4ZW1lKG1zLCBuZXcgbWV0YXBsYXNtXzEuQ29uc29uYW50TXV0YXRpb24oKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5tdXRhdGVJbml0aWFsT2ZGb2xsb3dpbmdTeWxsYWJsZSA9IG11dGF0ZUluaXRpYWxPZkZvbGxvd2luZ1N5bGxhYmxlO1xuLyoqIE11dGF0ZXMgdGhlIGZpbmFsIG9mIHRoZSBwcmVjZWRpbmcgc3lsbGFibGUuICovXG5mdW5jdGlvbiBtdXRhdGVGaW5hbENvbnNvbmFudE9mUHJlY2VkaW5nU3lsbGFibGUod29yZCkge1xuICAgIGNvbnN0IG1ycGhzID0gYW5hbHl6ZXJfMS5tb3JwaEFuYWx5emVDaGFuZ2luZyh3b3JkKTtcbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbE11dGF0aW9uTGV4ZW1lKG1ycGhzLCBuZXcgbWV0YXBsYXNtXzEuRmluYWxDb25zb25hbnRNdXRhdGlvbkludGVybmFsKCkpO1xuICAgIHJldHVybiBseDtcbn1cbmV4cG9ydHMubXV0YXRlRmluYWxDb25zb25hbnRPZlByZWNlZGluZ1N5bGxhYmxlID0gbXV0YXRlRmluYWxDb25zb25hbnRPZlByZWNlZGluZ1N5bGxhYmxlO1xuLyoqIE11dGF0ZXMgdGhlIGZpbmFsIG9mIHRoZSBwcmVjZWRpbmcgd29yZC4gKi9cbmZ1bmN0aW9uIG11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdXb3JkKHByZWNlZGluZywgZm9sbG93aW5nKSB7XG4gICAgY29uc3QgbHhQcmVjZWRpbmcgPSBnZXROb011dGF0aW9uKHByZWNlZGluZyk7XG4gICAgY29uc3QgbHhGb2xsb3dpbmcgPSBnZXROb011dGF0aW9uKGZvbGxvd2luZyk7XG4gICAgY29uc3QgcGhtayA9IG5ldyBwaHJhc2VtZV8xLlRvbmFsTXV0YXRpb25QaHJhc2VtZU1ha2VyKCk7XG4gICAgcmV0dXJuIHBobWsubWFrZVBocmFzZW1lKGx4UHJlY2VkaW5nLCBseEZvbGxvd2luZywgbmV3IG1ldGFwbGFzbV8xLkZpbmFsQ29uc29uYW50TXV0YXRpb25FeHRlcm5hbCgpKTtcbn1cbmV4cG9ydHMubXV0YXRlRmluYWxPZlByZWNlZGluZ1dvcmQgPSBtdXRhdGVGaW5hbE9mUHJlY2VkaW5nV29yZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0b3IuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/mutator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/change/phraseme.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/change/phraseme.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalUnmutationPhrasemeMaker = exports.TonalUnmutationPhraseme = exports.TonalMutationPhrasemeMaker = exports.TonalMutationPhraseme = exports.TonalUninfectionPhrasemeMaker = exports.TonalUninfectionPhraseme = exports.TonalInfectionPhrasemeMaker = exports.TonalInfectionPhraseme = exports.TonalUninsertionPhrasemeMaker = exports.TonalUninsertionPhraseme = exports.TonalInsertionPhrasemeMaker = exports.TonalInsertionPhraseme = exports.TonalInflectionPhrasemeMaker = exports.SerialPhraseme = exports.TonalMainParticlePhraseme = exports.TonalCompoundPhraseme = exports.PhrasalVerbVppPhraseme = exports.PhrasalVerbPhraseme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nconst unit_2 = __webpack_require__(/*! ../unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\n/** A phrase of length 2 and its inflected forms. */\nclass PhrasalVerbPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([verb.word, particle.word]);\n        this.forms = metaplasm.apply(verb, particle);\n    }\n    /** Returns proceeding forms or participle forms */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbPhraseme = PhrasalVerbPhraseme;\n/** A phrase of length 3 and its inflected forms. */\nclass PhrasalVerbVppPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, particleTwo, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([verb.word, particle.word, particleTwo.word]);\n        this.forms = metaplasm.apply(verb, particle, particleTwo);\n    }\n    /** Returns proceeding forms, participle forms, or transitive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbVppPhraseme = PhrasalVerbVppPhraseme;\n/** A compound. */\nclass TonalCompoundPhraseme extends unit_1.Phraseme {\n    /** Separable phrasal verb. Separate compound verb. Separable verb. Thiapwsux gifchongwguy. Tiapwsux gifsiannzguy. Adverb + verb. Prepositional verb. */\n    constructor(preceding, following) {\n        super();\n        this.phrase = new unit_2.TonalPhrase([preceding.getForms()[0], following.word]);\n    }\n}\nexports.TonalCompoundPhraseme = TonalCompoundPhraseme;\n/** A phrase and its inflected forms. */\nclass TonalMainParticlePhraseme extends unit_1.Phraseme {\n    /** E-adjective. Le form. Terminal form of possesive case. */\n    constructor(main, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([main.word, particle.word]);\n        this.forms = metaplasm.apply(main, particle);\n    }\n    /** Returns adnominal forms or conjunctive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMainParticlePhraseme = TonalMainParticlePhraseme;\n/** A phrase and its proceeding forms. */\nclass SerialPhraseme extends unit_1.Phraseme {\n    /** A series of lexemes. */\n    constructor(lexemes) {\n        super();\n        this.forms = new Array();\n        // the base form is equivalent to a compound when there are only 2 words\n        const words = [];\n        for (let i = 0; i < lexemes.length - 1; i++) {\n            if (lexemes[i].getForms().length > 0 && lexemes[i].getForms()[0]) {\n                words.push(lexemes[i].getForms()[0]);\n            }\n        }\n        if (lexemes[lexemes.length - 1] &&\n            lexemes[lexemes.length - 1].word.literal.length > 0) {\n            words.push(lexemes[lexemes.length - 1].word);\n        }\n        this.phrase = new unit_2.TonalPhrase(words);\n        const forms = lexemes\n            .filter(it => it.getForms().length > 0 && it.getForms()[0])\n            .map(it => it.getForms()[0]);\n        if (forms.length > 0)\n            this.forms = [new unit_2.TonalPhrase(forms)];\n        else\n            this.forms = [];\n    }\n    /** Returna a series of inflected words. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.SerialPhraseme = SerialPhraseme;\nclass TonalInflectionPhrasemeMaker {\n    makePhrasalVerbPhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToProceeding());\n    }\n    makePhrasalVerbVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToProceeding());\n    }\n    makeTransitiveVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToTransitive());\n    }\n    makeCompoundPhraseme(preceding, following) {\n        return new TonalCompoundPhraseme(preceding, following);\n    }\n    makeAdjectivePhraseme(adjectivalNoun, e) {\n        return new TonalMainParticlePhraseme(adjectivalNoun, e, new metaplasm_1.Adnominal());\n    }\n    makeConjunctivePhraseme(verb, le) {\n        return new TonalMainParticlePhraseme(verb, le, new metaplasm_1.Conjunctive());\n    }\n    makePossesivePhraseme(noun, ex) {\n        return new TonalMainParticlePhraseme(noun, ex, new metaplasm_1.Adnominal());\n    }\n    makeParticiplePhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToParticiple());\n    }\n    makeVppParticiplePhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToParticiple());\n    }\n    makeSerialPhraseme(lexemes) {\n        return new SerialPhraseme(lexemes);\n    }\n}\nexports.TonalInflectionPhrasemeMaker = TonalInflectionPhrasemeMaker;\nclass TonalInsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns inserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInsertionPhraseme = TonalInsertionPhraseme;\nclass TonalInsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInsertionPhrasemeMaker = TonalInsertionPhrasemeMaker;\nclass TonalUninsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninsertionPhraseme = TonalUninsertionPhraseme;\nclass TonalUninsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninsertionPhrasemeMaker = TonalUninsertionPhrasemeMaker;\nclass TonalInfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns infected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInfectionPhraseme = TonalInfectionPhraseme;\nclass TonalInfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInfectionPhrasemeMaker = TonalInfectionPhrasemeMaker;\nclass TonalUninfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninfected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninfectionPhraseme = TonalUninfectionPhraseme;\nclass TonalUninfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninfectionPhrasemeMaker = TonalUninfectionPhrasemeMaker;\n/** A phrase and its mutated form. */\nclass TonalMutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns mutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMutationPhraseme = TonalMutationPhraseme;\nclass TonalMutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalMutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalMutationPhrasemeMaker = TonalMutationPhrasemeMaker;\n/** A phrase and its unmutated form. */\nclass TonalUnmutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new unit_2.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns unmutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUnmutationPhraseme = TonalUnmutationPhraseme;\nclass TonalUnmutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUnmutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUnmutationPhrasemeMaker = TonalUnmutationPhrasemeMaker;\n//# sourceMappingURL=phraseme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/change/phraseme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/client.js":
/*!******************************************!*\
  !*** ./node_modules/taipa/lib/client.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = exports.TokenAnalysis = void 0;\nconst init_1 = __webpack_require__(/*! ./tonal/init */ \"./node_modules/taipa/lib/tonal/init.js\");\nconst analyzer_1 = __webpack_require__(/*! ./unchange/analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\nconst init_2 = __webpack_require__(/*! ./kana/init */ \"./node_modules/taipa/lib/kana/init.js\");\nconst analyzer_2 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nconst unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./unchange/metaplasm */ \"./node_modules/taipa/lib/unchange/metaplasm.js\");\nclass TokenAnalysis {\n    constructor() {\n        /** Analyzed token. */\n        this.word = new unit_1.Word();\n        /** Base forms of the word. */\n        this.lemmas = new Array();\n        /** Inflectional suffix. */\n        this.inflectionalEnding = '';\n        /** sound sequences. */\n        this.soundSequences = new Array();\n        /** Syllabic block or syllabogram sequences. */\n        this.blockSequences = [];\n        /** Uncombining form sequences. */\n        this.uncombiningSequences = new Array(); // uncombining form sequences\n    }\n}\nexports.TokenAnalysis = TokenAnalysis;\nclass Client {\n    processKana(str) {\n        init_2.checkNumberOfLettersKana();\n        // kana\n        let ta = new TokenAnalysis();\n        if (str) {\n            const ka = analyzer_2.kanaLemmatizationAnalyzer;\n            const morphemes = ka.morphAnalyze(str);\n            ta.blockSequences = init_2.getKanaBlocks(morphemes);\n            for (const m of morphemes) {\n                ta.soundSequences.push(m.sounds);\n            }\n        }\n        return ta;\n    }\n    processTonal(str) {\n        init_1.checkNumberOfLetterTonal();\n        // tonal lurzmafjiz\n        let ta = new TokenAnalysis();\n        if (str) {\n            const tla = analyzer_1.tonalLemmatizationAnalyzer;\n            const morphemes = tla.morphAnalyze(str, new metaplasm_1.TonalUncombiningForms([]));\n            const lexeme = tla.lexAnalyze(morphemes);\n            ta.word = lexeme.word;\n            ta.lemmas = lexeme.getLemmas();\n            ta.inflectionalEnding = lexeme.getInflectionalEnding();\n            ta.blockSequences = init_1.getTaiKanaBlocks(morphemes);\n            for (const m of morphemes) {\n                ta.soundSequences.push(m.sounds);\n                // TODO: first free tone to fourth. first checked tone to eighth\n                ta.uncombiningSequences.push(m.getForms().map(it => it.literal));\n            }\n        }\n        return ta;\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jbGllbnQuanM/ZjAyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDREQUFjO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLDBFQUFxQjtBQUNoRCxlQUFlLG1CQUFPLENBQUMsMERBQWE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMsa0VBQWlCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyxnREFBUTtBQUMvQixvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvY2xpZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudCA9IGV4cG9ydHMuVG9rZW5BbmFseXNpcyA9IHZvaWQgMDtcbmNvbnN0IGluaXRfMSA9IHJlcXVpcmUoXCIuL3RvbmFsL2luaXRcIik7XG5jb25zdCBhbmFseXplcl8xID0gcmVxdWlyZShcIi4vdW5jaGFuZ2UvYW5hbHl6ZXJcIik7XG5jb25zdCBpbml0XzIgPSByZXF1aXJlKFwiLi9rYW5hL2luaXRcIik7XG5jb25zdCBhbmFseXplcl8yID0gcmVxdWlyZShcIi4va2FuYS9hbmFseXplclwiKTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuL3VuaXRcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL3VuY2hhbmdlL21ldGFwbGFzbVwiKTtcbmNsYXNzIFRva2VuQW5hbHlzaXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQW5hbHl6ZWQgdG9rZW4uICovXG4gICAgICAgIHRoaXMud29yZCA9IG5ldyB1bml0XzEuV29yZCgpO1xuICAgICAgICAvKiogQmFzZSBmb3JtcyBvZiB0aGUgd29yZC4gKi9cbiAgICAgICAgdGhpcy5sZW1tYXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgLyoqIEluZmxlY3Rpb25hbCBzdWZmaXguICovXG4gICAgICAgIHRoaXMuaW5mbGVjdGlvbmFsRW5kaW5nID0gJyc7XG4gICAgICAgIC8qKiBzb3VuZCBzZXF1ZW5jZXMuICovXG4gICAgICAgIHRoaXMuc291bmRTZXF1ZW5jZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgLyoqIFN5bGxhYmljIGJsb2NrIG9yIHN5bGxhYm9ncmFtIHNlcXVlbmNlcy4gKi9cbiAgICAgICAgdGhpcy5ibG9ja1NlcXVlbmNlcyA9IFtdO1xuICAgICAgICAvKiogVW5jb21iaW5pbmcgZm9ybSBzZXF1ZW5jZXMuICovXG4gICAgICAgIHRoaXMudW5jb21iaW5pbmdTZXF1ZW5jZXMgPSBuZXcgQXJyYXkoKTsgLy8gdW5jb21iaW5pbmcgZm9ybSBzZXF1ZW5jZXNcbiAgICB9XG59XG5leHBvcnRzLlRva2VuQW5hbHlzaXMgPSBUb2tlbkFuYWx5c2lzO1xuY2xhc3MgQ2xpZW50IHtcbiAgICBwcm9jZXNzS2FuYShzdHIpIHtcbiAgICAgICAgaW5pdF8yLmNoZWNrTnVtYmVyT2ZMZXR0ZXJzS2FuYSgpO1xuICAgICAgICAvLyBrYW5hXG4gICAgICAgIGxldCB0YSA9IG5ldyBUb2tlbkFuYWx5c2lzKCk7XG4gICAgICAgIGlmIChzdHIpIHtcbiAgICAgICAgICAgIGNvbnN0IGthID0gYW5hbHl6ZXJfMi5rYW5hTGVtbWF0aXphdGlvbkFuYWx5emVyO1xuICAgICAgICAgICAgY29uc3QgbW9ycGhlbWVzID0ga2EubW9ycGhBbmFseXplKHN0cik7XG4gICAgICAgICAgICB0YS5ibG9ja1NlcXVlbmNlcyA9IGluaXRfMi5nZXRLYW5hQmxvY2tzKG1vcnBoZW1lcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbW9ycGhlbWVzKSB7XG4gICAgICAgICAgICAgICAgdGEuc291bmRTZXF1ZW5jZXMucHVzaChtLnNvdW5kcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhO1xuICAgIH1cbiAgICBwcm9jZXNzVG9uYWwoc3RyKSB7XG4gICAgICAgIGluaXRfMS5jaGVja051bWJlck9mTGV0dGVyVG9uYWwoKTtcbiAgICAgICAgLy8gdG9uYWwgbHVyem1hZmppelxuICAgICAgICBsZXQgdGEgPSBuZXcgVG9rZW5BbmFseXNpcygpO1xuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgICBjb25zdCB0bGEgPSBhbmFseXplcl8xLnRvbmFsTGVtbWF0aXphdGlvbkFuYWx5emVyO1xuICAgICAgICAgICAgY29uc3QgbW9ycGhlbWVzID0gdGxhLm1vcnBoQW5hbHl6ZShzdHIsIG5ldyBtZXRhcGxhc21fMS5Ub25hbFVuY29tYmluaW5nRm9ybXMoW10pKTtcbiAgICAgICAgICAgIGNvbnN0IGxleGVtZSA9IHRsYS5sZXhBbmFseXplKG1vcnBoZW1lcyk7XG4gICAgICAgICAgICB0YS53b3JkID0gbGV4ZW1lLndvcmQ7XG4gICAgICAgICAgICB0YS5sZW1tYXMgPSBsZXhlbWUuZ2V0TGVtbWFzKCk7XG4gICAgICAgICAgICB0YS5pbmZsZWN0aW9uYWxFbmRpbmcgPSBsZXhlbWUuZ2V0SW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgICAgICB0YS5ibG9ja1NlcXVlbmNlcyA9IGluaXRfMS5nZXRUYWlLYW5hQmxvY2tzKG1vcnBoZW1lcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbW9ycGhlbWVzKSB7XG4gICAgICAgICAgICAgICAgdGEuc291bmRTZXF1ZW5jZXMucHVzaChtLnNvdW5kcyk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZmlyc3QgZnJlZSB0b25lIHRvIGZvdXJ0aC4gZmlyc3QgY2hlY2tlZCB0b25lIHRvIGVpZ2h0aFxuICAgICAgICAgICAgICAgIHRhLnVuY29tYmluaW5nU2VxdWVuY2VzLnB1c2gobS5nZXRGb3JtcygpLm1hcChpdCA9PiBpdC5saXRlcmFsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50ID0gQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/client.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/dictionary.js":
/*!******************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/dictionary.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.phrasalVerbsVpp = exports.phrasalVerbs = exports.seperateVVCompounds = exports.auxiliaries = exports.demonstrativePronouns = exports.basePhrasalVerbParticles = exports.ParticlesPhrasalVerb = exports.basePersonalPronouns = exports.PronounsPersonal = exports.baseAdverbialParticles = exports.ParticlesAdverbial = exports.subsidiariesPersonalPronoun = exports.subsidiariesE = exports.subsidiariesLe = exports.subsidiariesA = exports.baseVerbs = void 0;\n// prettier-ignore\nexports.baseVerbs = [\n    'hua', 'khuannw', 'longw', 'phah', 'sa', 'thehh', 'tiurhh',\n];\nexports.subsidiariesA = ['a', 'aw', 'az'];\nexports.subsidiariesLe = ['le', 'lew', 'lez'];\nexports.subsidiariesE = ['e', 'ew', 'ez'];\n// prettier-ignore\nexports.subsidiariesPersonalPronoun = [\n    'gua', 'guaw', 'guaz', 'liw', 'liz', 'i', 'iw', 'iz', 'guanw', 'guanz', 'inw',\n    'langw', 'langz',\n];\nvar ParticlesAdverbial;\n(function (ParticlesAdverbial) {\n    ParticlesAdverbial[\"longy\"] = \"longy\";\n    ParticlesAdverbial[\"bez\"] = \"bez\";\n})(ParticlesAdverbial = exports.ParticlesAdverbial || (exports.ParticlesAdverbial = {}));\nexports.baseAdverbialParticles = [\n    ParticlesAdverbial.bez.toString(),\n    ParticlesAdverbial.longy.toString(),\n];\nvar PronounsPersonal;\n(function (PronounsPersonal) {\n    PronounsPersonal[\"guay\"] = \"guay\";\n    PronounsPersonal[\"liy\"] = \"liy\";\n    PronounsPersonal[\"i\"] = \"i\";\n    PronounsPersonal[\"guny\"] = \"guny\";\n    PronounsPersonal[\"guany\"] = \"guany\";\n    PronounsPersonal[\"lany\"] = \"lany\";\n    PronounsPersonal[\"liny\"] = \"liny\";\n    PronounsPersonal[\"in\"] = \"in\";\n})(PronounsPersonal = exports.PronounsPersonal || (exports.PronounsPersonal = {}));\nexports.basePersonalPronouns = [\n    PronounsPersonal.guay.toString(),\n    PronounsPersonal.liy.toString(),\n    PronounsPersonal.i.toString(),\n    PronounsPersonal.guny.toString(),\n    PronounsPersonal.guany.toString(),\n    PronounsPersonal.lany.toString(),\n    PronounsPersonal.liny.toString(),\n    PronounsPersonal.in.toString(),\n];\nvar ParticlesPhrasalVerb;\n(function (ParticlesPhrasalVerb) {\n    ParticlesPhrasalVerb[\"cut\"] = \"cut\";\n    ParticlesPhrasalVerb[\"khih\"] = \"khih\";\n    ParticlesPhrasalVerb[\"laih\"] = \"laih\";\n    ParticlesPhrasalVerb[\"tiurh\"] = \"tiurh\";\n})(ParticlesPhrasalVerb = exports.ParticlesPhrasalVerb || (exports.ParticlesPhrasalVerb = {}));\nexports.basePhrasalVerbParticles = [\n    ParticlesPhrasalVerb.cut.toString(),\n    ParticlesPhrasalVerb.khih.toString(),\n    ParticlesPhrasalVerb.laih.toString(),\n    ParticlesPhrasalVerb.tiurh.toString(),\n];\nexports.demonstrativePronouns = ['che'];\nexports.auxiliaries = ['kaz'];\n/** Separate VV compounds. */\n// prettier-ignore\nexports.seperateVVCompounds = [\n    ['siam', 'kuew'],\n    ['khuanny', 'tiurhh']\n];\n// prettier-ignore\nexports.phrasalVerbs = [\n    ['khuannw', 'tiurh'],\n    ['longw', 'tiurh'],\n];\n// prettier-ignore\nexports.phrasalVerbsVpp = [\n    ['thehh', 'cut', 'khih'],\n];\n//# sourceMappingURL=dictionary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2RpY3Rpb25hcnkuanM/NmRhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHFGQUFxRjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywrRUFBK0U7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDJGQUEyRjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvZGljdGlvbmFyeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5waHJhc2FsVmVyYnNWcHAgPSBleHBvcnRzLnBocmFzYWxWZXJicyA9IGV4cG9ydHMuc2VwZXJhdGVWVkNvbXBvdW5kcyA9IGV4cG9ydHMuYXV4aWxpYXJpZXMgPSBleHBvcnRzLmRlbW9uc3RyYXRpdmVQcm9ub3VucyA9IGV4cG9ydHMuYmFzZVBocmFzYWxWZXJiUGFydGljbGVzID0gZXhwb3J0cy5QYXJ0aWNsZXNQaHJhc2FsVmVyYiA9IGV4cG9ydHMuYmFzZVBlcnNvbmFsUHJvbm91bnMgPSBleHBvcnRzLlByb25vdW5zUGVyc29uYWwgPSBleHBvcnRzLmJhc2VBZHZlcmJpYWxQYXJ0aWNsZXMgPSBleHBvcnRzLlBhcnRpY2xlc0FkdmVyYmlhbCA9IGV4cG9ydHMuc3Vic2lkaWFyaWVzUGVyc29uYWxQcm9ub3VuID0gZXhwb3J0cy5zdWJzaWRpYXJpZXNFID0gZXhwb3J0cy5zdWJzaWRpYXJpZXNMZSA9IGV4cG9ydHMuc3Vic2lkaWFyaWVzQSA9IGV4cG9ydHMuYmFzZVZlcmJzID0gdm9pZCAwO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnRzLmJhc2VWZXJicyA9IFtcbiAgICAnaHVhJywgJ2todWFubncnLCAnbG9uZ3cnLCAncGhhaCcsICdzYScsICd0aGVoaCcsICd0aXVyaGgnLFxuXTtcbmV4cG9ydHMuc3Vic2lkaWFyaWVzQSA9IFsnYScsICdhdycsICdheiddO1xuZXhwb3J0cy5zdWJzaWRpYXJpZXNMZSA9IFsnbGUnLCAnbGV3JywgJ2xleiddO1xuZXhwb3J0cy5zdWJzaWRpYXJpZXNFID0gWydlJywgJ2V3JywgJ2V6J107XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydHMuc3Vic2lkaWFyaWVzUGVyc29uYWxQcm9ub3VuID0gW1xuICAgICdndWEnLCAnZ3VhdycsICdndWF6JywgJ2xpdycsICdsaXonLCAnaScsICdpdycsICdpeicsICdndWFudycsICdndWFueicsICdpbncnLFxuICAgICdsYW5ndycsICdsYW5neicsXG5dO1xudmFyIFBhcnRpY2xlc0FkdmVyYmlhbDtcbihmdW5jdGlvbiAoUGFydGljbGVzQWR2ZXJiaWFsKSB7XG4gICAgUGFydGljbGVzQWR2ZXJiaWFsW1wibG9uZ3lcIl0gPSBcImxvbmd5XCI7XG4gICAgUGFydGljbGVzQWR2ZXJiaWFsW1wiYmV6XCJdID0gXCJiZXpcIjtcbn0pKFBhcnRpY2xlc0FkdmVyYmlhbCA9IGV4cG9ydHMuUGFydGljbGVzQWR2ZXJiaWFsIHx8IChleHBvcnRzLlBhcnRpY2xlc0FkdmVyYmlhbCA9IHt9KSk7XG5leHBvcnRzLmJhc2VBZHZlcmJpYWxQYXJ0aWNsZXMgPSBbXG4gICAgUGFydGljbGVzQWR2ZXJiaWFsLmJlei50b1N0cmluZygpLFxuICAgIFBhcnRpY2xlc0FkdmVyYmlhbC5sb25neS50b1N0cmluZygpLFxuXTtcbnZhciBQcm9ub3Vuc1BlcnNvbmFsO1xuKGZ1bmN0aW9uIChQcm9ub3Vuc1BlcnNvbmFsKSB7XG4gICAgUHJvbm91bnNQZXJzb25hbFtcImd1YXlcIl0gPSBcImd1YXlcIjtcbiAgICBQcm9ub3Vuc1BlcnNvbmFsW1wibGl5XCJdID0gXCJsaXlcIjtcbiAgICBQcm9ub3Vuc1BlcnNvbmFsW1wiaVwiXSA9IFwiaVwiO1xuICAgIFByb25vdW5zUGVyc29uYWxbXCJndW55XCJdID0gXCJndW55XCI7XG4gICAgUHJvbm91bnNQZXJzb25hbFtcImd1YW55XCJdID0gXCJndWFueVwiO1xuICAgIFByb25vdW5zUGVyc29uYWxbXCJsYW55XCJdID0gXCJsYW55XCI7XG4gICAgUHJvbm91bnNQZXJzb25hbFtcImxpbnlcIl0gPSBcImxpbnlcIjtcbiAgICBQcm9ub3Vuc1BlcnNvbmFsW1wiaW5cIl0gPSBcImluXCI7XG59KShQcm9ub3Vuc1BlcnNvbmFsID0gZXhwb3J0cy5Qcm9ub3Vuc1BlcnNvbmFsIHx8IChleHBvcnRzLlByb25vdW5zUGVyc29uYWwgPSB7fSkpO1xuZXhwb3J0cy5iYXNlUGVyc29uYWxQcm9ub3VucyA9IFtcbiAgICBQcm9ub3Vuc1BlcnNvbmFsLmd1YXkudG9TdHJpbmcoKSxcbiAgICBQcm9ub3Vuc1BlcnNvbmFsLmxpeS50b1N0cmluZygpLFxuICAgIFByb25vdW5zUGVyc29uYWwuaS50b1N0cmluZygpLFxuICAgIFByb25vdW5zUGVyc29uYWwuZ3VueS50b1N0cmluZygpLFxuICAgIFByb25vdW5zUGVyc29uYWwuZ3VhbnkudG9TdHJpbmcoKSxcbiAgICBQcm9ub3Vuc1BlcnNvbmFsLmxhbnkudG9TdHJpbmcoKSxcbiAgICBQcm9ub3Vuc1BlcnNvbmFsLmxpbnkudG9TdHJpbmcoKSxcbiAgICBQcm9ub3Vuc1BlcnNvbmFsLmluLnRvU3RyaW5nKCksXG5dO1xudmFyIFBhcnRpY2xlc1BocmFzYWxWZXJiO1xuKGZ1bmN0aW9uIChQYXJ0aWNsZXNQaHJhc2FsVmVyYikge1xuICAgIFBhcnRpY2xlc1BocmFzYWxWZXJiW1wiY3V0XCJdID0gXCJjdXRcIjtcbiAgICBQYXJ0aWNsZXNQaHJhc2FsVmVyYltcImtoaWhcIl0gPSBcImtoaWhcIjtcbiAgICBQYXJ0aWNsZXNQaHJhc2FsVmVyYltcImxhaWhcIl0gPSBcImxhaWhcIjtcbiAgICBQYXJ0aWNsZXNQaHJhc2FsVmVyYltcInRpdXJoXCJdID0gXCJ0aXVyaFwiO1xufSkoUGFydGljbGVzUGhyYXNhbFZlcmIgPSBleHBvcnRzLlBhcnRpY2xlc1BocmFzYWxWZXJiIHx8IChleHBvcnRzLlBhcnRpY2xlc1BocmFzYWxWZXJiID0ge30pKTtcbmV4cG9ydHMuYmFzZVBocmFzYWxWZXJiUGFydGljbGVzID0gW1xuICAgIFBhcnRpY2xlc1BocmFzYWxWZXJiLmN1dC50b1N0cmluZygpLFxuICAgIFBhcnRpY2xlc1BocmFzYWxWZXJiLmtoaWgudG9TdHJpbmcoKSxcbiAgICBQYXJ0aWNsZXNQaHJhc2FsVmVyYi5sYWloLnRvU3RyaW5nKCksXG4gICAgUGFydGljbGVzUGhyYXNhbFZlcmIudGl1cmgudG9TdHJpbmcoKSxcbl07XG5leHBvcnRzLmRlbW9uc3RyYXRpdmVQcm9ub3VucyA9IFsnY2hlJ107XG5leHBvcnRzLmF1eGlsaWFyaWVzID0gWydrYXonXTtcbi8qKiBTZXBhcmF0ZSBWViBjb21wb3VuZHMuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydHMuc2VwZXJhdGVWVkNvbXBvdW5kcyA9IFtcbiAgICBbJ3NpYW0nLCAna3VldyddLFxuICAgIFsna2h1YW5ueScsICd0aXVyaGgnXVxuXTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0cy5waHJhc2FsVmVyYnMgPSBbXG4gICAgWydraHVhbm53JywgJ3RpdXJoJ10sXG4gICAgWydsb25ndycsICd0aXVyaCddLFxuXTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0cy5waHJhc2FsVmVyYnNWcHAgPSBbXG4gICAgWyd0aGVoaCcsICdjdXQnLCAna2hpaCddLFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpY3Rpb25hcnkuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/dictionary.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/hangul/analyzer.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/hangul/analyzer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.graphAnalyzeHangul = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst hangul_1 = __webpack_require__(/*! ./hangul */ \"./node_modules/taipa/lib/hangul/hangul.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeHangul(str) {\n    const gm = new unit_1.GraphemeMaker(hangul_1.lowerLettersHangul);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeHangul = graphAnalyzeHangul;\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvYW5hbHl6ZXIuanM/Y2IyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvYW5hbHl6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ3JhcGhBbmFseXplSGFuZ3VsID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBoYW5ndWxfMSA9IHJlcXVpcmUoXCIuL2hhbmd1bFwiKTtcbi8qKlxuICogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBncmFwaGVtZXMuIEdyYXBoZW1pYyBhbmFseXNpcy5cbiAqIEBwYXJhbSBzdHIgQSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ3JhcGhBbmFseXplSGFuZ3VsKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKGhhbmd1bF8xLmxvd2VyTGV0dGVyc0hhbmd1bCk7XG4gICAgcmV0dXJuIGdtLm1ha2VHcmFwaGVtZXMoc3RyKTtcbn1cbmV4cG9ydHMuZ3JhcGhBbmFseXplSGFuZ3VsID0gZ3JhcGhBbmFseXplSGFuZ3VsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/hangul/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/hangul/hangul.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/hangul/hangul.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HangulSpellingTags = exports.lowerLettersHangul = exports.LettersOfHangul = exports.HangulLetterTags = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nvar HangulLetterTags;\n(function (HangulLetterTags) {\n    HangulLetterTags[\"a\"] = \"a\";\n    HangulLetterTags[\"e\"] = \"e\";\n    HangulLetterTags[\"i\"] = \"i\";\n    HangulLetterTags[\"o\"] = \"o\";\n    HangulLetterTags[\"u\"] = \"u\";\n    HangulLetterTags[\"oe\"] = \"oe\";\n    HangulLetterTags[\"er\"] = \"er\";\n    HangulLetterTags[\"ir\"] = \"ir\";\n    HangulLetterTags[\"ur\"] = \"ur\";\n    HangulLetterTags[\"b\"] = \"b\";\n    HangulLetterTags[\"d\"] = \"d\";\n    HangulLetterTags[\"g\"] = \"g\";\n    HangulLetterTags[\"j\"] = \"j\";\n    HangulLetterTags[\"ch\"] = \"ch\";\n    HangulLetterTags[\"p\"] = \"p\";\n    HangulLetterTags[\"t\"] = \"t\";\n    HangulLetterTags[\"k\"] = \"k\";\n    HangulLetterTags[\"c\"] = \"c\";\n    HangulLetterTags[\"ph\"] = \"ph\";\n    HangulLetterTags[\"th\"] = \"th\";\n    HangulLetterTags[\"kh\"] = \"kh\";\n    HangulLetterTags[\"pp\"] = \"pp\";\n    HangulLetterTags[\"tt\"] = \"tt\";\n    HangulLetterTags[\"kk\"] = \"kk\";\n    HangulLetterTags[\"ss\"] = \"ss\";\n    HangulLetterTags[\"jj\"] = \"jj\";\n    HangulLetterTags[\"h\"] = \"h\";\n    HangulLetterTags[\"l\"] = \"l\";\n    HangulLetterTags[\"s\"] = \"s\";\n    HangulLetterTags[\"w\"] = \"w\";\n    HangulLetterTags[\"y\"] = \"y\";\n    HangulLetterTags[\"m\"] = \"m\";\n    HangulLetterTags[\"n\"] = \"n\";\n    HangulLetterTags[\"ng\"] = \"ng\";\n    HangulLetterTags[\"gs\"] = \"gs\";\n    HangulLetterTags[\"nj\"] = \"nj\";\n    HangulLetterTags[\"lg\"] = \"lg\";\n    HangulLetterTags[\"lm\"] = \"lm\";\n    HangulLetterTags[\"lb\"] = \"lb\";\n    HangulLetterTags[\"ls\"] = \"ls\";\n    HangulLetterTags[\"lt\"] = \"lt\";\n    HangulLetterTags[\"lp\"] = \"lp\";\n    HangulLetterTags[\"lh\"] = \"lh\";\n    HangulLetterTags[\"bs\"] = \"bs\";\n})(HangulLetterTags = exports.HangulLetterTags || (exports.HangulLetterTags = {}));\nclass LettersOfHangul extends unit_1.Letters {\n}\nexports.LettersOfHangul = LettersOfHangul;\nexports.lowerLettersHangul = new LettersOfHangul([\n    HangulLetterTags.a,\n    HangulLetterTags.e,\n    HangulLetterTags.i,\n    HangulLetterTags.o,\n    HangulLetterTags.u,\n    HangulLetterTags.oe,\n    HangulLetterTags.er,\n    HangulLetterTags.ir,\n    HangulLetterTags.ur,\n    HangulLetterTags.b,\n    HangulLetterTags.d,\n    HangulLetterTags.g,\n    HangulLetterTags.j,\n    HangulLetterTags.ch,\n    HangulLetterTags.p,\n    HangulLetterTags.t,\n    HangulLetterTags.k,\n    HangulLetterTags.c,\n    HangulLetterTags.ph,\n    HangulLetterTags.th,\n    HangulLetterTags.kh,\n    HangulLetterTags.pp,\n    HangulLetterTags.tt,\n    HangulLetterTags.kk,\n    HangulLetterTags.ss,\n    HangulLetterTags.jj,\n    HangulLetterTags.h,\n    HangulLetterTags.l,\n    HangulLetterTags.s,\n    HangulLetterTags.w,\n    HangulLetterTags.y,\n    HangulLetterTags.m,\n    HangulLetterTags.n,\n    HangulLetterTags.ng,\n    HangulLetterTags.gs,\n    HangulLetterTags.nj,\n    HangulLetterTags.lg,\n    HangulLetterTags.lm,\n    HangulLetterTags.lb,\n    HangulLetterTags.ls,\n    HangulLetterTags.lt,\n    HangulLetterTags.lp,\n    HangulLetterTags.lh,\n    HangulLetterTags.bs,\n]);\nvar HangulSpellingTags;\n(function (HangulSpellingTags) {\n    HangulSpellingTags[\"initialConsonant\"] = \"initialConsonant\";\n    HangulSpellingTags[\"semivowel\"] = \"semivowel\";\n    HangulSpellingTags[\"vowel\"] = \"vowel\";\n    HangulSpellingTags[\"finalConsonant\"] = \"finalConsonant\";\n})(HangulSpellingTags = exports.HangulSpellingTags || (exports.HangulSpellingTags = {}));\n//# sourceMappingURL=hangul.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvaGFuZ3VsLmpzPzU4MWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0VBQStFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxxRkFBcUY7QUFDdEYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2hhbmd1bC9oYW5ndWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGFuZ3VsU3BlbGxpbmdUYWdzID0gZXhwb3J0cy5sb3dlckxldHRlcnNIYW5ndWwgPSBleHBvcnRzLkxldHRlcnNPZkhhbmd1bCA9IGV4cG9ydHMuSGFuZ3VsTGV0dGVyVGFncyA9IHZvaWQgMDtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xudmFyIEhhbmd1bExldHRlclRhZ3M7XG4oZnVuY3Rpb24gKEhhbmd1bExldHRlclRhZ3MpIHtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiYVwiXSA9IFwiYVwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJlXCJdID0gXCJlXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImlcIl0gPSBcImlcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wib1wiXSA9IFwib1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ1XCJdID0gXCJ1XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm9lXCJdID0gXCJvZVwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJlclwiXSA9IFwiZXJcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiaXJcIl0gPSBcImlyXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInVyXCJdID0gXCJ1clwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJiXCJdID0gXCJiXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImRcIl0gPSBcImRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiZ1wiXSA9IFwiZ1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJqXCJdID0gXCJqXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImNoXCJdID0gXCJjaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJwXCJdID0gXCJwXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInRcIl0gPSBcInRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia1wiXSA9IFwia1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJjXCJdID0gXCJjXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInBoXCJdID0gXCJwaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ0aFwiXSA9IFwidGhcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia2hcIl0gPSBcImtoXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInBwXCJdID0gXCJwcFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ0dFwiXSA9IFwidHRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia2tcIl0gPSBcImtrXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInNzXCJdID0gXCJzc1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJqalwiXSA9IFwiampcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiaFwiXSA9IFwiaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsXCJdID0gXCJsXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInNcIl0gPSBcInNcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wid1wiXSA9IFwid1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ5XCJdID0gXCJ5XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm1cIl0gPSBcIm1cIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiblwiXSA9IFwiblwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJuZ1wiXSA9IFwibmdcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiZ3NcIl0gPSBcImdzXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm5qXCJdID0gXCJualwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsZ1wiXSA9IFwibGdcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wibG1cIl0gPSBcImxtXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImxiXCJdID0gXCJsYlwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsc1wiXSA9IFwibHNcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wibHRcIl0gPSBcImx0XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImxwXCJdID0gXCJscFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsaFwiXSA9IFwibGhcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiYnNcIl0gPSBcImJzXCI7XG59KShIYW5ndWxMZXR0ZXJUYWdzID0gZXhwb3J0cy5IYW5ndWxMZXR0ZXJUYWdzIHx8IChleHBvcnRzLkhhbmd1bExldHRlclRhZ3MgPSB7fSkpO1xuY2xhc3MgTGV0dGVyc09mSGFuZ3VsIGV4dGVuZHMgdW5pdF8xLkxldHRlcnMge1xufVxuZXhwb3J0cy5MZXR0ZXJzT2ZIYW5ndWwgPSBMZXR0ZXJzT2ZIYW5ndWw7XG5leHBvcnRzLmxvd2VyTGV0dGVyc0hhbmd1bCA9IG5ldyBMZXR0ZXJzT2ZIYW5ndWwoW1xuICAgIEhhbmd1bExldHRlclRhZ3MuYSxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmUsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5pLFxuICAgIEhhbmd1bExldHRlclRhZ3MubyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnUsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5vZSxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmVyLFxuICAgIEhhbmd1bExldHRlclRhZ3MuaXIsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy51cixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmIsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5kLFxuICAgIEhhbmd1bExldHRlclRhZ3MuZyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmosXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5jaCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnAsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy50LFxuICAgIEhhbmd1bExldHRlclRhZ3MuayxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmMsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5waCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnRoLFxuICAgIEhhbmd1bExldHRlclRhZ3Mua2gsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5wcCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnR0LFxuICAgIEhhbmd1bExldHRlclRhZ3Mua2ssXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5zcyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmpqLFxuICAgIEhhbmd1bExldHRlclRhZ3MuaCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmwsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5zLFxuICAgIEhhbmd1bExldHRlclRhZ3MudyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnksXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5tLFxuICAgIEhhbmd1bExldHRlclRhZ3MubixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLm5nLFxuICAgIEhhbmd1bExldHRlclRhZ3MuZ3MsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5uaixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxnLFxuICAgIEhhbmd1bExldHRlclRhZ3MubG0sXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5sYixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxzLFxuICAgIEhhbmd1bExldHRlclRhZ3MubHQsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5scCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxoLFxuICAgIEhhbmd1bExldHRlclRhZ3MuYnMsXG5dKTtcbnZhciBIYW5ndWxTcGVsbGluZ1RhZ3M7XG4oZnVuY3Rpb24gKEhhbmd1bFNwZWxsaW5nVGFncykge1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcImluaXRpYWxDb25zb25hbnRcIl0gPSBcImluaXRpYWxDb25zb25hbnRcIjtcbiAgICBIYW5ndWxTcGVsbGluZ1RhZ3NbXCJzZW1pdm93ZWxcIl0gPSBcInNlbWl2b3dlbFwiO1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcInZvd2VsXCJdID0gXCJ2b3dlbFwiO1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcImZpbmFsQ29uc29uYW50XCJdID0gXCJmaW5hbENvbnNvbmFudFwiO1xufSkoSGFuZ3VsU3BlbGxpbmdUYWdzID0gZXhwb3J0cy5IYW5ndWxTcGVsbGluZ1RhZ3MgfHwgKGV4cG9ydHMuSGFuZ3VsU3BlbGxpbmdUYWdzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmd1bC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/hangul/hangul.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// client\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/taipa/lib/client.js\");\nObject.defineProperty(exports, \"Client\", { enumerable: true, get: function () { return client_1.Client; } });\n// API\nvar analyzer_1 = __webpack_require__(/*! ./unchange/analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\nObject.defineProperty(exports, \"tonalLemmatizationAnalyzer\", { enumerable: true, get: function () { return analyzer_1.tonalLemmatizationAnalyzer; } });\nObject.defineProperty(exports, \"graphAnalyzeTonal\", { enumerable: true, get: function () { return analyzer_1.graphAnalyzeTonal; } });\nvar analyzer_2 = __webpack_require__(/*! ./change/analyzer */ \"./node_modules/taipa/lib/change/analyzer.js\");\nObject.defineProperty(exports, \"tonalInflectionAnalyzer\", { enumerable: true, get: function () { return analyzer_2.tonalInflectionAnalyzer; } });\nvar analyzer_3 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nObject.defineProperty(exports, \"kanaLemmatizationAnalyzer\", { enumerable: true, get: function () { return analyzer_3.kanaLemmatizationAnalyzer; } });\nObject.defineProperty(exports, \"graphAnalyzeKana\", { enumerable: true, get: function () { return analyzer_3.graphAnalyzeKana; } });\nvar analyzer_4 = __webpack_require__(/*! ./hangul/analyzer */ \"./node_modules/taipa/lib/hangul/analyzer.js\");\nObject.defineProperty(exports, \"graphAnalyzeHangul\", { enumerable: true, get: function () { return analyzer_4.graphAnalyzeHangul; } });\nvar unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"GraphemeMaker\", { enumerable: true, get: function () { return unit_1.GraphemeMaker; } });\nvar version2_1 = __webpack_require__(/*! ./tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nObject.defineProperty(exports, \"lowerLettersTonal\", { enumerable: true, get: function () { return version2_1.lowerLettersTonal; } });\nObject.defineProperty(exports, \"TonalLetterTags\", { enumerable: true, get: function () { return version2_1.TonalLetterTags; } });\nObject.defineProperty(exports, \"TonalSoundTags\", { enumerable: true, get: function () { return version2_1.TonalSoundTags; } });\nvar kana_1 = __webpack_require__(/*! ./kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nObject.defineProperty(exports, \"KanaLetterTags\", { enumerable: true, get: function () { return kana_1.KanaLetterTags; } });\nvar lemmatizer_1 = __webpack_require__(/*! ./unchange/lemmatizer */ \"./node_modules/taipa/lib/unchange/lemmatizer.js\");\nObject.defineProperty(exports, \"lemmatize\", { enumerable: true, get: function () { return lemmatizer_1.lemmatize; } });\nvar creator_1 = __webpack_require__(/*! ./change/creator */ \"./node_modules/taipa/lib/change/creator.js\");\nObject.defineProperty(exports, \"createTonalPhrase\", { enumerable: true, get: function () { return creator_1.createTonalPhrase; } });\nObject.defineProperty(exports, \"createTonalInflectionLexeme\", { enumerable: true, get: function () { return creator_1.createTonalInflectionLexeme; } });\nObject.defineProperty(exports, \"createCompoundPhraseme\", { enumerable: true, get: function () { return creator_1.createCompoundPhraseme; } });\nvar inflector_1 = __webpack_require__(/*! ./change/inflector */ \"./node_modules/taipa/lib/change/inflector.js\");\nObject.defineProperty(exports, \"inflectDesinence\", { enumerable: true, get: function () { return inflector_1.inflectDesinence; } });\nObject.defineProperty(exports, \"inflectTransfix\", { enumerable: true, get: function () { return inflector_1.inflectTransfix; } });\nObject.defineProperty(exports, \"inflectEncliticE\", { enumerable: true, get: function () { return inflector_1.inflectEncliticE; } });\nObject.defineProperty(exports, \"inflectPhrasalVerbParticle\", { enumerable: true, get: function () { return inflector_1.inflectPhrasalVerbParticle; } });\nObject.defineProperty(exports, \"inflectEncliticLe\", { enumerable: true, get: function () { return inflector_1.inflectEncliticLe; } });\nObject.defineProperty(exports, \"inflectPossesiveEx\", { enumerable: true, get: function () { return inflector_1.inflectPossesiveEx; } });\nObject.defineProperty(exports, \"inflectTo\", { enumerable: true, get: function () { return inflector_1.inflectTo; } });\nObject.defineProperty(exports, \"inflectEighthToFirst\", { enumerable: true, get: function () { return inflector_1.inflectEighthToFirst; } });\nObject.defineProperty(exports, \"inflectEighthToSecond\", { enumerable: true, get: function () { return inflector_1.inflectEighthToSecond; } });\nObject.defineProperty(exports, \"inflectToProceeding\", { enumerable: true, get: function () { return inflector_1.inflectToProceeding; } });\nObject.defineProperty(exports, \"inflectVppToProceeding\", { enumerable: true, get: function () { return inflector_1.inflectVppToProceeding; } });\nObject.defineProperty(exports, \"inflectVppToTransitive\", { enumerable: true, get: function () { return inflector_1.inflectVppToTransitive; } });\nObject.defineProperty(exports, \"inflectEToAdnominal\", { enumerable: true, get: function () { return inflector_1.inflectEToAdnominal; } });\nObject.defineProperty(exports, \"inflectLeToConjunctive\", { enumerable: true, get: function () { return inflector_1.inflectLeToConjunctive; } });\nObject.defineProperty(exports, \"inflectPossesive\", { enumerable: true, get: function () { return inflector_1.inflectPossesive; } });\nObject.defineProperty(exports, \"inflectToParticiple\", { enumerable: true, get: function () { return inflector_1.inflectToParticiple; } });\nObject.defineProperty(exports, \"inflectVppToParticiple\", { enumerable: true, get: function () { return inflector_1.inflectVppToParticiple; } });\nObject.defineProperty(exports, \"inflectSerial\", { enumerable: true, get: function () { return inflector_1.inflectSerial; } });\nvar inserter_1 = __webpack_require__(/*! ./change/inserter */ \"./node_modules/taipa/lib/change/inserter.js\");\nObject.defineProperty(exports, \"insertToFollowingSyllable\", { enumerable: true, get: function () { return inserter_1.insertToFollowingSyllable; } });\nvar mutator_1 = __webpack_require__(/*! ./change/mutator */ \"./node_modules/taipa/lib/change/mutator.js\");\nObject.defineProperty(exports, \"mutateFinalConsonantOfPrecedingSyllable\", { enumerable: true, get: function () { return mutator_1.mutateFinalConsonantOfPrecedingSyllable; } });\nvar client_2 = __webpack_require__(/*! ./client */ \"./node_modules/taipa/lib/client.js\");\nObject.defineProperty(exports, \"TokenAnalysis\", { enumerable: true, get: function () { return client_2.TokenAnalysis; } });\nvar unit_2 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"AlphabeticGrapheme\", { enumerable: true, get: function () { return unit_2.AlphabeticGrapheme; } });\nvar morpheme_1 = __webpack_require__(/*! ./change/morpheme */ \"./node_modules/taipa/lib/change/morpheme.js\");\nObject.defineProperty(exports, \"TonalCombiningMorpheme\", { enumerable: true, get: function () { return morpheme_1.TonalCombiningMorpheme; } });\nvar morpheme_2 = __webpack_require__(/*! ./unchange/morpheme */ \"./node_modules/taipa/lib/unchange/morpheme.js\");\nObject.defineProperty(exports, \"TonalUncombiningMorpheme\", { enumerable: true, get: function () { return morpheme_2.TonalUncombiningMorpheme; } });\nvar lexeme_1 = __webpack_require__(/*! ./change/lexeme */ \"./node_modules/taipa/lib/change/lexeme.js\");\nObject.defineProperty(exports, \"TonalInflectionLexeme\", { enumerable: true, get: function () { return lexeme_1.TonalInflectionLexeme; } });\nObject.defineProperty(exports, \"TonalInsertionLexeme\", { enumerable: true, get: function () { return lexeme_1.TonalInsertionLexeme; } });\nvar lexeme_2 = __webpack_require__(/*! ./unchange/lexeme */ \"./node_modules/taipa/lib/unchange/lexeme.js\");\nObject.defineProperty(exports, \"TonalLemmatizationLexeme\", { enumerable: true, get: function () { return lexeme_2.TonalLemmatizationLexeme; } });\nvar phraseme_1 = __webpack_require__(/*! ./change/phraseme */ \"./node_modules/taipa/lib/change/phraseme.js\");\nObject.defineProperty(exports, \"PhrasalVerbPhraseme\", { enumerable: true, get: function () { return phraseme_1.PhrasalVerbPhraseme; } });\nObject.defineProperty(exports, \"PhrasalVerbVppPhraseme\", { enumerable: true, get: function () { return phraseme_1.PhrasalVerbVppPhraseme; } });\nObject.defineProperty(exports, \"TonalMainParticlePhraseme\", { enumerable: true, get: function () { return phraseme_1.TonalMainParticlePhraseme; } });\nObject.defineProperty(exports, \"TonalCompoundPhraseme\", { enumerable: true, get: function () { return phraseme_1.TonalCompoundPhraseme; } });\nObject.defineProperty(exports, \"SerialPhraseme\", { enumerable: true, get: function () { return phraseme_1.SerialPhraseme; } });\nvar morpheme_3 = __webpack_require__(/*! ./kana/morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nObject.defineProperty(exports, \"KanaUncombiningMorpheme\", { enumerable: true, get: function () { return morpheme_3.KanaUncombiningMorpheme; } });\nvar unit_3 = __webpack_require__(/*! ./unchange/unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nObject.defineProperty(exports, \"TonalWord\", { enumerable: true, get: function () { return unit_3.TonalWord; } });\nObject.defineProperty(exports, \"TonalPhrase\", { enumerable: true, get: function () { return unit_3.TonalPhrase; } });\nvar unit_4 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"Sound\", { enumerable: true, get: function () { return unit_4.Sound; } });\nObject.defineProperty(exports, \"SoundGeneration\", { enumerable: true, get: function () { return unit_4.SoundGeneration; } });\nvar version2_2 = __webpack_require__(/*! ./tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nObject.defineProperty(exports, \"initialConsonantsTonal\", { enumerable: true, get: function () { return version2_2.initialConsonantsTonal; } });\nObject.defineProperty(exports, \"nasalizationsTonal\", { enumerable: true, get: function () { return version2_2.nasalizationsTonal; } });\nObject.defineProperty(exports, \"vowelsTonal\", { enumerable: true, get: function () { return version2_2.vowelsTonal; } });\nvar metaplasm_1 = __webpack_require__(/*! ./change/metaplasm */ \"./node_modules/taipa/lib/change/metaplasm.js\");\nObject.defineProperty(exports, \"TonalDesinenceInflection\", { enumerable: true, get: function () { return metaplasm_1.TonalDesinenceInflection; } });\nObject.defineProperty(exports, \"TonalCombiningForms\", { enumerable: true, get: function () { return metaplasm_1.TonalCombiningForms; } });\nvar prediction_1 = __webpack_require__(/*! ./tonal/prediction */ \"./node_modules/taipa/lib/tonal/prediction.js\");\nObject.defineProperty(exports, \"predict\", { enumerable: true, get: function () { return prediction_1.predict; } });\nvar soundgen_1 = __webpack_require__(/*! ./tonal/soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nObject.defineProperty(exports, \"syllableCompositions\", { enumerable: true, get: function () { return soundgen_1.syllableCompositions; } });\nvar tokenizer_1 = __webpack_require__(/*! ./tonal/tokenizer */ \"./node_modules/taipa/lib/tonal/tokenizer.js\");\nObject.defineProperty(exports, \"getLatinSyllableCompositions\", { enumerable: true, get: function () { return tokenizer_1.getLatinSyllableCompositions; } });\nvar tone_1 = __webpack_require__(/*! ./tonal/tone */ \"./node_modules/taipa/lib/tonal/tone.js\");\nObject.defineProperty(exports, \"LexicalTone\", { enumerable: true, get: function () { return tone_1.LexicalTone; } });\nObject.defineProperty(exports, \"extractTones\", { enumerable: true, get: function () { return tone_1.extractTones; } });\nObject.defineProperty(exports, \"getToneEndingNumber\", { enumerable: true, get: function () { return tone_1.getToneEndingNumber; } });\nObject.defineProperty(exports, \"getToneEndingNumbersTwo\", { enumerable: true, get: function () { return tone_1.getToneEndingNumbersTwo; } });\nObject.defineProperty(exports, \"getToneEndingNumbersThree\", { enumerable: true, get: function () { return tone_1.getToneEndingNumbersThree; } });\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/analyzer.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/analyzer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.kanaLemmatizationAnalyzer = exports.graphAnalyzeKana = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeKana(str) {\n    const gm = new unit_1.GraphemeMaker(kana_1.lowerLettersKana);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeKana = graphAnalyzeKana;\n/** Analyzes a string into morphemes. */\nexports.kanaLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x) {\n        let graphemes = [];\n        if (typeof x == 'object') {\n            graphemes = x;\n        }\n        else if (typeof x == 'string') {\n            graphemes = graphAnalyzeKana(x);\n        }\n        const mm = new morpheme_1.KanaUncombiningMorphemeMaker(new metaplasm_1.KanaCombiningMetaplasm());\n        return mm.makeMorphemes(graphemes);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9rYW5hL2FuYWx5emVyLmpzP2QyY2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyw2REFBWTtBQUN2QyxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5rYW5hTGVtbWF0aXphdGlvbkFuYWx5emVyID0gZXhwb3J0cy5ncmFwaEFuYWx5emVLYW5hID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBrYW5hXzEgPSByZXF1aXJlKFwiLi9rYW5hXCIpO1xuY29uc3QgbWV0YXBsYXNtXzEgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuLyoqXG4gKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIGdyYXBoZW1lcy4gR3JhcGhlbWljIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHN0cmluZ1xuICovXG5mdW5jdGlvbiBncmFwaEFuYWx5emVLYW5hKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKGthbmFfMS5sb3dlckxldHRlcnNLYW5hKTtcbiAgICByZXR1cm4gZ20ubWFrZUdyYXBoZW1lcyhzdHIpO1xufVxuZXhwb3J0cy5ncmFwaEFuYWx5emVLYW5hID0gZ3JhcGhBbmFseXplS2FuYTtcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcy4gKi9cbmV4cG9ydHMua2FuYUxlbW1hdGl6YXRpb25BbmFseXplciA9IHtcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBncmFwaGVtZXMgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgZ3JhcGhlbWVzXG4gICAgICovXG4gICAgbW9ycGhBbmFseXplKHgpIHtcbiAgICAgICAgbGV0IGdyYXBoZW1lcyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IGdyYXBoQW5hbHl6ZUthbmEoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5LYW5hVW5jb21iaW5pbmdNb3JwaGVtZU1ha2VyKG5ldyBtZXRhcGxhc21fMS5LYW5hQ29tYmluaW5nTWV0YXBsYXNtKCkpO1xuICAgICAgICByZXR1cm4gbW0ubWFrZU1vcnBoZW1lcyhncmFwaGVtZXMpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/init.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/init.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKanaBlocks = exports.checkNumberOfLettersKana = void 0;\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction checkNumberOfLettersKana() {\n    if (kana_1.kanaPositionalSounds.size !== kana_1.lowerLettersKana.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLettersKana = checkNumberOfLettersKana;\nfunction getKanasFollowingSmallChu(key) {\n    let kanaSequences = ['', '', ''];\n    let ks = kana_1.kogakimoji.get('chu');\n    if (ks) {\n        kanaSequences[0] += ks[0];\n        kanaSequences[1] += ks[1];\n        kanaSequences[2] += ks[1];\n    }\n    ks = kana_1.hiraganaKatakana.get(key);\n    if (ks) {\n        kanaSequences[0] += ks[0];\n        kanaSequences[1] += ks[1];\n        kanaSequences[2] += ks[1];\n    }\n    return kanaSequences;\n}\nfunction checkChouon(previousLetter, nextLetter) {\n    if (previousLetter === nextLetter)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.e && nextLetter === kana_1.KanaLetterTags.i)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.o && nextLetter === kana_1.KanaLetterTags.u)\n        return true;\n    return false;\n}\nfunction lookUp(str) {\n    let kanas = kana_1.hiraganaKatakana.get(str);\n    if (kanas == undefined) {\n        kanas = kana_1.gailaigo.get(str);\n    }\n    if (kanas == undefined) {\n        kanas = kana_1.special.get(str);\n    }\n    return kanas;\n}\nfunction lookUpOtherKanas(str) {\n    if (kana_1.otherKanas.has(str)) {\n        return kana_1.otherKanas.get(str);\n    }\n}\nfunction getKanaBlocks(morphemes) {\n    // string one is hiragana, string two is katakana, string three is chouon\n    const kanaSequences = [];\n    kanaSequences[0] = '';\n    kanaSequences[1] = '';\n    kanaSequences[2] = '';\n    let previous = '';\n    for (const m of morphemes) {\n        let ks = lookUp(m.syllable.literal);\n        if (ks != undefined && ks[0] != undefined) {\n            // in case the kana is absent, we check against ks[0]\n            kanaSequences[0] += ks[0];\n            kanaSequences[1] += ks[1];\n            if (previous.length > 0 &&\n                checkChouon(previous[previous.length - 1], m.syllable.literal[m.syllable.literal.length - 1]) &&\n                kana_1.initialConsonantsKana.includes(m.syllable.literal) == false &&\n                m.syllable.literal.length == 1) {\n                // a vowel does not begin with a consonant and is of length 1\n                // a vowel follows a previous vowel\n                kanaSequences[2] += 'ー';\n            }\n            else {\n                kanaSequences[2] += ks[1];\n            }\n            if (morphemes.length == 1) {\n                const got = lookUpOtherKanas(m.syllable.literal);\n                if (got) {\n                    if (got[0])\n                        kanaSequences.push(got[0]);\n                    if (got[1])\n                        kanaSequences.push(got[1]);\n                }\n            }\n        }\n        else if (kana_1.finalConsonantsKana.includes(m.syllable.literal[m.syllable.literal.length - 1]) == true) {\n            ks = lookUp(m.syllable.literal.substring(0, m.syllable.literal.length - 1));\n            if (ks != undefined && ks[0] != undefined) {\n                kanaSequences[0] += ks[0];\n                kanaSequences[1] += ks[1];\n                kanaSequences[2] += ks[1];\n            }\n            if (kana_1.hatsuonsKana.includes(m.syllable.literal[m.syllable.literal.length - 1])) {\n                ks = kana_1.hatsuon.get('n');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n            else {\n                ks = kana_1.kogakimoji.get('chu');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n        }\n        else {\n            let first = m.syllable.literal[0];\n            let second = m.syllable.literal[1];\n            if (first === second && kana_1.geminatedConsonantsKana.includes(first) == true) {\n                const ret = getKanasFollowingSmallChu(m.sounds[1].toString() + m.sounds[2].toString());\n                kanaSequences[0] += ret[0];\n                kanaSequences[1] += ret[1];\n                kanaSequences[2] += ret[1];\n            }\n            else if (m.sounds[0].toString() === kana_1.KanaLetterTags.t &&\n                m.sounds[1].toString() === kana_1.KanaLetterTags.ch &&\n                kana_1.geminatedConsonantsKana.includes(m.sounds[0].toString()) == true) {\n                const ret = getKanasFollowingSmallChu(m.sounds[1].toString() + m.sounds[2].toString());\n                kanaSequences[0] += ret[0];\n                kanaSequences[1] += ret[1];\n                kanaSequences[2] += ret[1];\n            }\n        }\n        previous = m.syllable.literal;\n    }\n    // remove duplicates\n    if (kanaSequences[1] === kanaSequences[2])\n        kanaSequences[2] = '';\n    return kanaSequences;\n}\nexports.getKanaBlocks = getKanaBlocks;\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/kana.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/kana.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.specialH = exports.specialW = exports.specialY = exports.special = exports.gailaigoW = exports.gailaigoY = exports.gailaigo = exports.hiraganaKatakana = exports.otherKanas = exports.hatsuon = exports.kogakimoji = exports.kanaPositionalSounds = exports.hatsuonsKana = exports.finalConsonantsKana = exports.semivowelsKana = exports.geminatedConsonantsKana = exports.vowelsKana = exports.initialConsonantsKana = exports.KanaSoundTags = exports.lowerLettersKana = exports.LettersOfKana = exports.KanaLetterTags = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nvar KanaLetterTags;\n(function (KanaLetterTags) {\n    KanaLetterTags[\"a\"] = \"a\";\n    KanaLetterTags[\"e\"] = \"e\";\n    KanaLetterTags[\"i\"] = \"i\";\n    KanaLetterTags[\"o\"] = \"o\";\n    KanaLetterTags[\"u\"] = \"u\";\n    KanaLetterTags[\"b\"] = \"b\";\n    KanaLetterTags[\"c\"] = \"c\";\n    KanaLetterTags[\"ch\"] = \"ch\";\n    KanaLetterTags[\"d\"] = \"d\";\n    KanaLetterTags[\"f\"] = \"f\";\n    KanaLetterTags[\"g\"] = \"g\";\n    KanaLetterTags[\"h\"] = \"h\";\n    KanaLetterTags[\"j\"] = \"j\";\n    KanaLetterTags[\"k\"] = \"k\";\n    KanaLetterTags[\"l\"] = \"l\";\n    KanaLetterTags[\"m\"] = \"m\";\n    KanaLetterTags[\"r\"] = \"r\";\n    KanaLetterTags[\"s\"] = \"s\";\n    KanaLetterTags[\"v\"] = \"v\";\n    KanaLetterTags[\"z\"] = \"z\";\n    KanaLetterTags[\"p\"] = \"p\";\n    KanaLetterTags[\"t\"] = \"t\";\n    KanaLetterTags[\"w\"] = \"w\";\n    KanaLetterTags[\"y\"] = \"y\";\n    KanaLetterTags[\"n\"] = \"n\";\n    KanaLetterTags[\"ng\"] = \"ng\";\n})(KanaLetterTags = exports.KanaLetterTags || (exports.KanaLetterTags = {}));\nclass LettersOfKana extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'ng'.length &&\n            listLength == exports.lowerLettersKana.size) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'g') {\n                // handling final n and initial ng in kana\n                if (characters[0].character === 'n' &&\n                    characters[beginOfLetter + 1].character === 'g') {\n                    ms.characters[0] = new unit_1.Character('n');\n                    ms.characters[1] = new unit_1.Character('g');\n                    return ms;\n                }\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfKana = LettersOfKana;\nexports.lowerLettersKana = new LettersOfKana([\n    KanaLetterTags.a,\n    KanaLetterTags.e,\n    KanaLetterTags.i,\n    KanaLetterTags.o,\n    KanaLetterTags.u,\n    KanaLetterTags.b,\n    KanaLetterTags.c,\n    KanaLetterTags.ch,\n    KanaLetterTags.d,\n    KanaLetterTags.f,\n    KanaLetterTags.g,\n    KanaLetterTags.h,\n    KanaLetterTags.j,\n    KanaLetterTags.k,\n    KanaLetterTags.l,\n    KanaLetterTags.m,\n    KanaLetterTags.r,\n    KanaLetterTags.s,\n    KanaLetterTags.v,\n    KanaLetterTags.z,\n    KanaLetterTags.p,\n    KanaLetterTags.t,\n    KanaLetterTags.w,\n    KanaLetterTags.y,\n    KanaLetterTags.n,\n    KanaLetterTags.ng,\n]);\nvar KanaSoundTags;\n(function (KanaSoundTags) {\n    KanaSoundTags[\"geminatedConsonant\"] = \"geminatedConsonant\";\n    KanaSoundTags[\"initialConsonant\"] = \"initialConsonant\";\n    KanaSoundTags[\"semivowel\"] = \"semivowel\";\n    KanaSoundTags[\"vowel\"] = \"vowel\";\n    KanaSoundTags[\"finalConsonant\"] = \"finalConsonant\";\n})(KanaSoundTags = exports.KanaSoundTags || (exports.KanaSoundTags = {}));\nclass GeminatedConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.geminatedConsonant;\n    }\n}\nclass InitialConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.initialConsonant;\n    }\n}\nclass Semivowel extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.semivowel;\n    }\n}\nclass Vowel extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.vowel;\n    }\n}\nclass FinalConsonant extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSoundTags.finalConsonant;\n    }\n}\nclass InitialConsonantB extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass InitialConsonantC extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass InitialConsonantCH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ch);\n    }\n}\nclass InitialConsonantD extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass InitialConsonantF extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.f);\n    }\n}\nclass InitialConsonantG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass InitialConsonantH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.h);\n    }\n}\nclass InitialConsonantJ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.j);\n    }\n}\nclass InitialConsonantK extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass InitialConsonantL extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.l);\n    }\n}\nclass InitialConsonantM extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.m);\n    }\n}\nclass InitialConsonantN extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass InitialConsonantNG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ng);\n    }\n}\nclass InitialConsonantP extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass InitialConsonantR extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.r);\n    }\n}\nclass InitialConsonantS extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass InitialConsonantT extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass InitialConsonantV extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.v);\n    }\n}\nclass InitialConsonantW extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass InitialConsonantY extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass InitialConsonantZ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.z);\n    }\n}\nclass SemivowelW extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass SemivowelY extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass VowelA extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.a);\n    }\n}\nclass VowelE extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.e);\n    }\n}\nclass VowelI extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.i);\n    }\n}\nclass VowelO extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.o);\n    }\n}\nclass VowelU extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.u);\n    }\n}\nclass FinalConsonantB extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass FinalConsonantD extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass FinalConsonantG extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass FinalConsonantK extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass FinalConsonantN extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass FinalConsonantP extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass FinalConsonantS extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass FinalConsonantT extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass GeminatedConsonantB extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass GeminatedConsonantC extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass GeminatedConsonantD extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass GeminatedConsonantG extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass GeminatedConsonantK extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass GeminatedConsonantP extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass GeminatedConsonantS extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass GeminatedConsonantT extends GeminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nexports.initialConsonantsKana = unit_1.soundSequence([\n    new InitialConsonantB(),\n    new InitialConsonantC(),\n    new InitialConsonantCH(),\n    new InitialConsonantD(),\n    new InitialConsonantF(),\n    new InitialConsonantG(),\n    new InitialConsonantH(),\n    new InitialConsonantJ(),\n    new InitialConsonantK(),\n    new InitialConsonantL(),\n    new InitialConsonantM(),\n    new InitialConsonantN(),\n    new InitialConsonantNG(),\n    new InitialConsonantP(),\n    new InitialConsonantR(),\n    new InitialConsonantS(),\n    new InitialConsonantT(),\n    new InitialConsonantV(),\n    new InitialConsonantW(),\n    new InitialConsonantY(),\n    new InitialConsonantZ(),\n]);\nexports.vowelsKana = unit_1.soundSequence([\n    new VowelA(),\n    new VowelI(),\n    new VowelU(),\n    new VowelE(),\n    new VowelO(),\n]);\nexports.geminatedConsonantsKana = unit_1.soundSequence([\n    new GeminatedConsonantB(),\n    // new GeminatedConsonantC(),\n    new GeminatedConsonantD(),\n    new GeminatedConsonantG(),\n    new GeminatedConsonantK(),\n    new GeminatedConsonantP(),\n    new GeminatedConsonantS(),\n    new GeminatedConsonantT(),\n]);\nexports.semivowelsKana = unit_1.soundSequence([\n    new SemivowelW(),\n    new SemivowelY(),\n]);\nexports.finalConsonantsKana = unit_1.soundSequence([\n    new FinalConsonantB(),\n    new FinalConsonantD(),\n    new FinalConsonantG(),\n    new FinalConsonantK(),\n    new FinalConsonantN(),\n    new FinalConsonantP(),\n    new FinalConsonantS(),\n    new FinalConsonantT(),\n]);\nexports.hatsuonsKana = unit_1.soundSequence([new FinalConsonantN()]);\nfunction positionalSounds(sounds) {\n    return (s) => {\n        for (const i in sounds) {\n            if (sounds[i].name === s)\n                return sounds[i];\n        }\n        return new unit_1.Sound();\n    };\n}\nconst psA = positionalSounds([new VowelA()]);\nconst psB = positionalSounds([\n    new InitialConsonantB(),\n    new FinalConsonantB(),\n    new GeminatedConsonantB(),\n]);\nconst psC = positionalSounds([\n    new InitialConsonantC(),\n    new GeminatedConsonantC(),\n]);\nconst psCH = positionalSounds([new InitialConsonantCH()]);\nconst psD = positionalSounds([\n    new InitialConsonantD(),\n    new FinalConsonantD(),\n    new GeminatedConsonantD(),\n]);\nconst psE = positionalSounds([new VowelE()]);\nconst psF = positionalSounds([new InitialConsonantF()]);\nconst psG = positionalSounds([\n    new InitialConsonantG(),\n    new FinalConsonantG(),\n    new GeminatedConsonantG(),\n]);\nconst psH = positionalSounds([new InitialConsonantH()]);\nconst psI = positionalSounds([new VowelI()]);\nconst psJ = positionalSounds([new InitialConsonantJ()]);\nconst psK = positionalSounds([\n    new InitialConsonantK(),\n    new FinalConsonantK(),\n    new GeminatedConsonantK(),\n]);\nconst psL = positionalSounds([new InitialConsonantL()]);\nconst psM = positionalSounds([new InitialConsonantM()]);\nconst psN = positionalSounds([new InitialConsonantN(), new FinalConsonantN()]);\nconst psNG = positionalSounds([new InitialConsonantNG()]);\nconst psO = positionalSounds([new VowelO()]);\nconst psP = positionalSounds([\n    new InitialConsonantP(),\n    new FinalConsonantP(),\n    new GeminatedConsonantP(),\n]);\nconst psR = positionalSounds([new InitialConsonantR()]);\nconst psS = positionalSounds([\n    new InitialConsonantS(),\n    new FinalConsonantS(),\n    new GeminatedConsonantS(),\n]);\nconst psT = positionalSounds([\n    new InitialConsonantT(),\n    new FinalConsonantT(),\n    new GeminatedConsonantT(),\n]);\nconst psU = positionalSounds([new VowelU()]);\nconst psV = positionalSounds([new InitialConsonantV()]);\nconst psW = positionalSounds([new InitialConsonantW(), new SemivowelW()]);\nconst psY = positionalSounds([new InitialConsonantY(), new SemivowelY()]);\nconst psZ = positionalSounds([new InitialConsonantZ()]);\nexports.kanaPositionalSounds = new Map()\n    .set(KanaLetterTags.a, psA)\n    .set(KanaLetterTags.b, psB)\n    .set(KanaLetterTags.c, psC)\n    .set(KanaLetterTags.ch, psCH)\n    .set(KanaLetterTags.d, psD)\n    .set(KanaLetterTags.e, psE)\n    .set(KanaLetterTags.f, psF)\n    .set(KanaLetterTags.g, psG)\n    .set(KanaLetterTags.h, psH)\n    .set(KanaLetterTags.i, psI)\n    .set(KanaLetterTags.j, psJ)\n    .set(KanaLetterTags.k, psK)\n    .set(KanaLetterTags.l, psL)\n    .set(KanaLetterTags.m, psM)\n    .set(KanaLetterTags.n, psN)\n    .set(KanaLetterTags.ng, psNG)\n    .set(KanaLetterTags.o, psO)\n    .set(KanaLetterTags.p, psP)\n    .set(KanaLetterTags.r, psR)\n    .set(KanaLetterTags.s, psS)\n    .set(KanaLetterTags.t, psT)\n    .set(KanaLetterTags.u, psU)\n    .set(KanaLetterTags.v, psV)\n    .set(KanaLetterTags.w, psW)\n    .set(KanaLetterTags.y, psY)\n    .set(KanaLetterTags.z, psZ);\nexports.kogakimoji = new Map().set(KanaLetterTags.ch + KanaLetterTags.u, ['っ', 'ッ']);\nexports.hatsuon = new Map().set(KanaLetterTags.n, [\n    'ん',\n    'ン',\n]);\nexports.otherKanas = new Map()\n    .set(KanaLetterTags.a, ['ぁ', 'ァ'])\n    .set(KanaLetterTags.i, ['ぃ', 'ィ'])\n    .set(KanaLetterTags.u, ['ぅ', 'ゥ'])\n    .set(KanaLetterTags.e, ['ぇ', 'ェ'])\n    .set(KanaLetterTags.o, ['ぉ', 'ォ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['', 'ㇵ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['', 'ㇶ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'ㇷ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['', 'ㇸ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['', 'ㇹ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['ゕ', 'ヵ'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['ゖ', 'ヶ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['', 'ㇰ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['', 'ㇻ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['', 'ㇼ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['', 'ㇽ'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['', 'ㇾ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['', 'ㇿ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['', 'ㇺ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['', 'ㇴ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['', 'ㇷ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'ㇱ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['', 'ㇲ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['', 'ㇳ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['ゃ', 'ャ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゅ', 'ュ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['ょ', 'ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['ゎ', 'ヮ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', '\\u{1b166}'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['', 'ㇷ゙']) // 'ㇷ'+ '\\u{3099}'\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['', 'ㇰ゙']) // 'ㇰ'+ '\\u{3099}'\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['', 'ㇲ゙']) // 'ㇲ'+ '\\u{3099}'\n    .set(KanaLetterTags.n, ['', '\\u{1B167}'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['ぢ', 'ヂ']) // moved from hiraganaKatakana\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['づ', 'ヅ']); // moved from hiraganaKatakana\nexports.hiraganaKatakana = new Map()\n    .set(KanaLetterTags.a, ['あ', 'ア'])\n    .set(KanaLetterTags.i, ['い', 'イ'])\n    .set(KanaLetterTags.u, ['う', 'ウ'])\n    .set(KanaLetterTags.e, ['え', 'エ'])\n    .set(KanaLetterTags.o, ['お', 'オ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['か', 'カ'])\n    .set(KanaLetterTags.k + KanaLetterTags.i, ['き', 'キ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['く', 'ク'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['け', 'ケ'])\n    .set(KanaLetterTags.k + KanaLetterTags.o, ['こ', 'コ'])\n    .set(KanaLetterTags.s + KanaLetterTags.a, ['さ', 'サ'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['し', 'シ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['す', 'ス'])\n    .set(KanaLetterTags.s + KanaLetterTags.e, ['せ', 'セ'])\n    .set(KanaLetterTags.s + KanaLetterTags.o, ['そ', 'ソ'])\n    .set(KanaLetterTags.t + KanaLetterTags.a, ['た', 'タ'])\n    .set(KanaLetterTags.c + KanaLetterTags.i, ['ち', 'チ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['つ', 'ツ'])\n    .set(KanaLetterTags.t + KanaLetterTags.e, ['て', 'テ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['と', 'ト'])\n    .set(KanaLetterTags.n + KanaLetterTags.a, ['な', 'ナ'])\n    .set(KanaLetterTags.n + KanaLetterTags.i, ['に', 'ニ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['ぬ', 'ヌ'])\n    .set(KanaLetterTags.n + KanaLetterTags.e, ['ね', 'ネ'])\n    .set(KanaLetterTags.n + KanaLetterTags.o, ['の', 'ノ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['は', 'ハ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['ひ', 'ヒ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['ふ', 'フ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['へ', 'ヘ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['ほ', 'ホ'])\n    .set(KanaLetterTags.m + KanaLetterTags.a, ['ま', 'マ'])\n    .set(KanaLetterTags.m + KanaLetterTags.i, ['み', 'ミ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['む', 'ム'])\n    .set(KanaLetterTags.m + KanaLetterTags.e, ['め', 'メ'])\n    .set(KanaLetterTags.m + KanaLetterTags.o, ['も', 'モ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['や', 'ヤ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゆ', 'ユ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['よ', 'ヨ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['ら', 'ラ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['り', 'リ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['る', 'ル'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['れ', 'レ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['ろ', 'ロ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['わ', 'ワ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['ゐ', 'ヰ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['ゑ', 'ヱ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['を', 'ヲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.a, ['が', 'ガ'])\n    .set(KanaLetterTags.g + KanaLetterTags.i, ['ぎ', 'ギ'])\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['ぐ', 'グ'])\n    .set(KanaLetterTags.g + KanaLetterTags.e, ['げ', 'ゲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.o, ['ご', 'ゴ'])\n    .set(KanaLetterTags.z + KanaLetterTags.a, ['ざ', 'ザ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['じ', 'ジ'])\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['ず', 'ズ'])\n    .set(KanaLetterTags.z + KanaLetterTags.e, ['ぜ', 'ゼ'])\n    .set(KanaLetterTags.z + KanaLetterTags.o, ['ぞ', 'ゾ'])\n    .set(KanaLetterTags.d + KanaLetterTags.a, ['だ', 'ダ'])\n    .set(KanaLetterTags.d + KanaLetterTags.e, ['で', 'デ'])\n    .set(KanaLetterTags.d + KanaLetterTags.o, ['ど', 'ド'])\n    .set(KanaLetterTags.b + KanaLetterTags.a, ['ば', 'バ'])\n    .set(KanaLetterTags.b + KanaLetterTags.i, ['び', 'ビ'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['ぶ', 'ブ'])\n    .set(KanaLetterTags.b + KanaLetterTags.e, ['べ', 'ベ'])\n    .set(KanaLetterTags.b + KanaLetterTags.o, ['ぼ', 'ボ'])\n    .set(KanaLetterTags.p + KanaLetterTags.a, ['ぱ', 'パ'])\n    .set(KanaLetterTags.p + KanaLetterTags.i, ['ぴ', 'ピ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['ぷ', 'プ'])\n    .set(KanaLetterTags.p + KanaLetterTags.e, ['ぺ', 'ペ'])\n    .set(KanaLetterTags.p + KanaLetterTags.o, ['ぽ', 'ポ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.a, ['きゃ', 'キャ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.u, ['きゅ', 'キュ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.o, ['きょ', 'キョ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['しゃ', 'シャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['しゅ', 'シュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['しょ', 'ショ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.a, ['ちゃ', 'チャ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.u, ['ちゅ', 'チュ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.o, ['ちょ', 'チョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.a, ['にゃ', 'ニャ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.u, ['にゅ', 'ニュ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.o, ['にょ', 'ニョ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.a, ['ひゃ', 'ヒャ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.u, ['ひゅ', 'ヒュ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.o, ['ひょ', 'ヒョ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.a, ['みゃ', 'ミャ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.u, ['みゅ', 'みょ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.o, ['ミュ', 'ミョ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.a, ['りゃ', 'リャ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.u, ['りゅ', 'リュ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.o, ['りょ', 'リョ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.a, ['ぎゃ', 'ギャ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.u, ['ぎゅ', 'ギュ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.o, ['ぎょ', 'ギョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.a, ['じゃ', 'ジャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['じゅ', 'ジュ'])\n    .set(KanaLetterTags.j + KanaLetterTags.o, ['じょ', 'ジョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.a, ['ぢゃ', 'ヂャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.u, [\n    'ぢ゙ゅ',\n    'ヂュ',\n])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぢ゙ょ',\n    'ヂョ',\n])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.a, ['びゃ', 'ビャ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.u, ['びゅ', 'ビュ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.o, ['びょ', 'ビョ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.a, ['ぴゃ', 'ピャ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.u, ['ぴゅ', 'ピュ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぴょ',\n    'ピョ',\n]);\nexports.gailaigo = new Map()\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'スィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'シェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ズィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.e, ['', 'ジェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.a, ['', 'ジュァ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.i, ['', 'ジュィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.e, ['', 'ジュェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.o, ['', 'ジュォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.i, ['', 'ティ'])\n    .set(KanaLetterTags.t + KanaLetterTags.u, ['', 'トゥ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.e, ['', 'チェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヂェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.a, ['', 'チュァ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.i, ['', 'チュィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.e, ['', 'チュェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.o, ['', 'チュォ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.a, ['', 'ツァ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.i, ['', 'ツィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.e, ['', 'ツェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.o, ['', 'ツォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.i, ['', 'ディ'])\n    .set(KanaLetterTags.d + KanaLetterTags.u, ['', 'ドゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.a, ['', 'ファ'])\n    .set(KanaLetterTags.f + KanaLetterTags.i, ['', 'フィ'])\n    .set(KanaLetterTags.f + KanaLetterTags.e, ['', 'フェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.o, ['', 'フォ'])\n    .set(KanaLetterTags.y + KanaLetterTags.i, ['', 'イィ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'イェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['', 'ウァ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['', 'ウィ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['', 'ウェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', 'ウォ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヴァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヴィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.u, ['', 'ヴ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヴェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヴォ']);\nexports.gailaigoY = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.i, ['', 'キィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.e, ['', 'キェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.i, ['', 'ギィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.e, ['', 'ギェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['', 'スャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['', 'スュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'スィェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['', 'スョ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.a, ['', 'ズャ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.u, ['', 'ズュ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.e, ['', 'ズィェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.o, ['', 'ズョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.a, ['', 'テャ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.u, ['', 'テュ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'ティェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.o, ['', 'テョ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.a, ['', 'デャ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.u, ['', 'デュ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.e, [\n    '',\n    'デェ',\n    'ディェ',\n])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.o, ['', 'デョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.i, ['', 'ニィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.e, ['', 'ニェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヒィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヒェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.a, ['', 'フャ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.u, ['', 'フュ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.e, ['', 'フィェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.o, ['', 'フョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.e, ['', 'ビェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.e, ['', 'ピェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.i, ['', 'ミィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.e, ['', 'ミェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.i, ['', 'リィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.e, ['', 'リェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ウャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ウュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ウョ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヴャ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヴュ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヴィェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヴョ']);\nexports.gailaigoW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クァ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.i, ['', 'クィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.u, ['', 'クゥ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.e, ['', 'クェ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.o, ['', 'クォ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グァ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.i, ['', 'グィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.u, ['', 'グゥ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.e, ['', 'グェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.o, ['', 'グォ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.a, ['', 'スァ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.i, ['', 'スゥィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.e, ['', 'スェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.o, ['', 'スォ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヌァ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヌィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヌェ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヌォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.a, ['', 'ブァ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.i, ['', 'ブィ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.e, ['', 'ブェ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.o, ['', 'ブォ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.a, ['', 'プァ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.i, ['', 'プィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.e, ['', 'プェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.o, ['', 'プォ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.a, ['', 'ムァ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.i, ['', 'ムィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.e, ['', 'ムェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.o, ['', 'ムォ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.a, ['', 'ルァ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.i, ['', 'ルィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.e, ['', 'ルェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.o, ['', 'ルォ']);\nexports.special = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.a, ['', 'カ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.i, ['', 'キ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.u, ['', 'ク゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.e, ['', 'ケ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.o, ['', 'コ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'セィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ゼィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.i, ['', 'シィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['', 'ジィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.i, ['', 'チィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['', 'ツゥ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヂィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.u, ['', 'ホゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'フゥ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'ユェ'])\n    .set(KanaLetterTags.l + KanaLetterTags.a, ['', 'ラ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.i, ['', 'リ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.u, ['', 'ル゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.e, ['', 'レ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.o, ['', 'ロ゚'])\n    .set(KanaLetterTags.w + KanaLetterTags.u, ['', 'ウゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヷ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヸ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヹ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヺ']);\nexports.specialY = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.a, ['', 'キ゚ャ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.u, ['', 'キ゚ュ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.o, ['', 'キ゚ョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'テェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.a, ['', 'ツャ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.u, ['', 'ツュ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.o, ['', 'ツョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.i, ['', 'ビィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.i, ['', 'ピィ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.a, ['', 'リ゚ャ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.u, ['', 'リ゚ュ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.o, ['', 'リ゚ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヰャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヰュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヰョ']);\nexports.specialW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クヮ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グヮ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.u, ['', 'スゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.a, ['', 'ズァ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.i, ['', 'ズゥィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.o, ['', 'ズォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トゥァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トゥィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.u, ['', 'トゥゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トゥェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トゥォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドゥァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドゥィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.u, ['', 'ドゥゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドゥェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドゥォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヌゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.a, ['', 'ホゥァ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.i, ['', 'ホゥィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.u, ['', 'ホゥゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.e, ['', 'ホゥェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.o, ['', 'ホゥォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.u, ['', 'ブゥ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.u, ['', 'プゥ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.u, ['', 'ムゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヴゥァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヴゥィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヴゥゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヴゥェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヴゥォ']);\nexports.specialH = new Map()\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.a, ['', 'テァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.u, ['', 'テゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.o, ['', 'テォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.a, ['', 'デァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.u, ['', 'デゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.o, ['', 'デォ']);\n//# sourceMappingURL=kana.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/kana.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/morpheme.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/morpheme.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KanaUncombiningMorphemeMaker = exports.KanaUncombiningMorpheme = exports.KanaSyllable = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst maker_1 = __webpack_require__(/*! ../maker */ \"./node_modules/taipa/lib/maker.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/kana/soundgen.js\");\nclass KanaSyllable extends unit_1.Syllable {\n}\nexports.KanaSyllable = KanaSyllable;\n/** A syllable. */\nclass KanaUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, kcm) {\n        super();\n        this.syllable = syllable;\n        this.sounds = new Array();\n        this.sounds = sounds;\n    }\n}\nexports.KanaUncombiningMorpheme = KanaUncombiningMorpheme;\nfunction syllabifyKana(letters, beginOfSyllable) {\n    let literal = '';\n    let matched = '';\n    let lookAhead = '';\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        if (kana_1.hiraganaKatakana.has(literal) || kana_1.gailaigo.has(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            if (i + 1 < letters.length)\n                lookAhead = letters[i + 1].literal; // look-ahead\n        }\n        else if (literal.length == 3 &&\n            letters[0].literal === kana_1.KanaLetterTags.ng &&\n            kana_1.vowelsKana.includes(letters[1].literal)) {\n            // ng-\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n        }\n        else if (ltrs.length == 3 &&\n            (ltrs[0] === ltrs[1] ||\n                (ltrs[0] === kana_1.KanaLetterTags.t && ltrs[1] === kana_1.KanaLetterTags.ch)) &&\n            kana_1.vowelsKana.includes(ltrs[2])) {\n            // initial sokuon. e.g. ggu, kku, ppa, etc.\n            // when a final t followed by an initial ch\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            lookAhead = '';\n        }\n        else if (kana_1.finalConsonantsKana.includes(lookAhead) &&\n            i + 1 == letters.length) {\n            // final sokuon, not medial sokuon\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            lookAhead = '';\n        }\n        else if (kana_1.geminatedConsonantsKana.includes(lookAhead) &&\n            i + 1 < letters.length // there is at least one letter after look-ahead\n        ) {\n            // medial sokuon, not final sokuon\n            if (kana_1.initialConsonantsKana.includes(letters[i + 1].literal) &&\n                (lookAhead === letters[i + 1].literal ||\n                    (lookAhead === kana_1.KanaLetterTags.t &&\n                        letters[i + 1].literal === kana_1.KanaLetterTags.ch))) {\n                // check if the letter after look-ahead is an initial consonant\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            else if (kana_1.vowelsKana.includes(letters[i + 1].literal) ||\n                kana_1.semivowelsKana.includes(letters[i + 1].literal)) {\n                // check if the letter after look-ahead is a vowel\n                matched = literal.slice(0, literal.length - 1);\n                ltrs.pop();\n                Object.assign(matchedLtrs, ltrs);\n            }\n            lookAhead = '';\n        }\n        else if (kana_1.hatsuonsKana.includes(lookAhead)) {\n            if (kana_1.vowelsKana.includes(letters[i + 1].literal) ||\n                kana_1.semivowelsKana.includes(letters[i + 1].literal)) {\n                // check if the letter after look-ahead is a vowel\n                matched = literal.slice(0, literal.length - 1);\n                ltrs.pop();\n                Object.assign(matchedLtrs, ltrs);\n            }\n            else {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            lookAhead = '';\n        }\n    }\n    let list = new Array();\n    if (matched.length > 0) {\n        // console.log(matchedLtrs, lookAhead);\n        const ksg = new soundgen_1.KanaSoundGenerator();\n        list = ksg.generate(matchedLtrs, lookAhead);\n        // console.log(list);\n    }\n    let arraysOfLetters = new Array();\n    let mp = new unit_1.MatchedPattern();\n    let sounds = new Array();\n    for (let m in list) {\n        let min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        if (n + 1 == min) {\n                            // copy the matched letters\n                            let arr = new Array();\n                            for (let q = 0; q < min; q++) {\n                                arr[q] = letters[beginOfSyllable + q];\n                            }\n                            arraysOfLetters.push(arr);\n                            sounds = list[m];\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (arraysOfLetters.length == 1) {\n        // only one matched\n        // copy the matched letters\n        for (let q = 0; q < arraysOfLetters[0].length; q++) {\n            mp.letters[q] = letters[beginOfSyllable + q];\n            mp.pattern[q] = sounds[q];\n        }\n        return mp;\n    }\n    if (arraysOfLetters.length > 1) {\n        let longerEntry = -1; // length of the longest matched entry\n        let shorterEntry = -1;\n        let index = 0;\n        for (let j = 0; j < arraysOfLetters.length; j++) {\n            if (arraysOfLetters[j].length > arraysOfLetters[index].length) {\n                index = j;\n            }\n        }\n        if (index > 0) {\n            longerEntry = index;\n            shorterEntry = 0;\n        }\n        else {\n            longerEntry = 0;\n            shorterEntry = 1;\n        }\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length) {\n            if (kana_1.hatsuonsKana.includes(arraysOfLetters[longerEntry][arraysOfLetters[longerEntry].length - 1]\n                .literal)) {\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n                return mp;\n            }\n            // return the shorter one\n            for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = sounds[q];\n            }\n            return mp;\n        }\n        // look ahead for 1 letter\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.initialConsonantsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // consonant-ending\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n            }\n            else {\n                // vowel ending\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n            }\n            return mp;\n        }\n        // look ahead for 2 letters\n        if (letters.length - beginOfSyllable >\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.vowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true ||\n                kana_1.semivowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = sounds[q];\n                }\n                return mp;\n            }\n            // return the longer one\n            for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = sounds[q];\n            }\n        }\n    }\n    return mp;\n}\nclass KanaUncombiningMorphemeMaker extends maker_1.MorphemeMaker {\n    constructor(kcm) {\n        super();\n        this.metaplasm = kcm;\n    }\n    createArray() {\n        return new Array();\n    }\n    createMorpheme(msp) {\n        return new KanaUncombiningMorpheme(new KanaSyllable(msp.letters), msp.pattern, this.metaplasm);\n    }\n    postprocess(patterns) {\n        let morphemes = this.createArray();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, syllabifyKana);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.KanaUncombiningMorphemeMaker = KanaUncombiningMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/soundgen.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/soundgen.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KanaSoundGenerator = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction initialConsonant(sg) {\n    const sics = kana_1.initialConsonantsKana;\n    if (sics.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = kana_1.kanaPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(kana_1.KanaSoundTags.initialConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction semivowel(sg) {\n    const ssvs = kana_1.semivowelsKana;\n    if (ssvs.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = kana_1.kanaPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(kana_1.KanaSoundTags.semivowel);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    const svs = kana_1.vowelsKana;\n    if (svs.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = kana_1.kanaPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(kana_1.KanaSoundTags.vowel);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    return sg;\n}\n/*\nfunction hatsuon(sg: SoundGeneration) {\n  const sfcs = hatsuonsKana;\n\n  if (sfcs.includes(sg.sounds[sg.matchedSounds.length])) {\n    const sounds = kanaPositionalSounds.get(sg.sounds[sg.matchedSounds.length]);\n    if (sounds) {\n      const s = sounds(KanaSoundTags.finalConsonant);\n      if (s) sg.matchedSounds.push(s);\n    }\n  }\n\n  return sg;\n}\n*/\nfunction finalConsonant(sg) {\n    const sfcs = kana_1.finalConsonantsKana;\n    if (sfcs.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = kana_1.kanaPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(kana_1.KanaSoundTags.finalConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    return sg;\n}\nfunction geminatedConsonant(sg) {\n    const sgcs = kana_1.geminatedConsonantsKana;\n    if (sgcs.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = kana_1.kanaPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(kana_1.KanaSoundTags.geminatedConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    return sg;\n}\nconst scV = unit_1.sgPipe(vowel);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scVC = unit_1.sgPipe(vowel, finalConsonant); // includes hatsuon\nconst scCVC = unit_1.sgPipe(initialConsonant, vowel, finalConsonant); // includes geminated consonants\nconst scCSV = unit_1.sgPipe(initialConsonant, semivowel, vowel);\nconst scCSVC = unit_1.sgPipe(initialConsonant, semivowel, vowel, finalConsonant); // includes geminated consonants\nconst scCCV = unit_1.sgPipe(geminatedConsonant, initialConsonant, vowel);\nclass KanaSoundGenerator {\n    constructor() {\n        this.sylCompositions = [scV, scCV, scVC, scCVC, scCSV, scCSVC, scCCV];\n    }\n    genSokuonAndGeminated(letters, lookahead) {\n        let strs = new Array();\n        strs.push(letters);\n        // consonant gemination\n        if (kana_1.geminatedConsonantsKana.includes(letters[0]) == true) {\n            let syl = new Array();\n            syl.push(letters[0].charAt(0));\n            for (let e of letters) {\n                syl.push(e);\n            }\n            strs.push(syl);\n        }\n        // sokuon\n        let fcs = kana_1.finalConsonantsKana;\n        for (let e of fcs.sounds) {\n            let syl = new Array();\n            Object.assign(syl, letters);\n            syl.push(e.toString());\n            if (e.toString() === lookahead)\n                strs.push(syl);\n        }\n        return strs;\n    }\n    generate(letters, lookahead) {\n        let strs = new Array();\n        let sequences = new Array(); // to be returned\n        strs = this.genSokuonAndGeminated(letters, lookahead);\n        // console.log(strs);\n        for (let i in strs) {\n            // generates all needed sounds to be processed\n            for (let j = 0; j < this.sylCompositions.length; j++) {\n                let sg = new unit_1.SoundGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = this.sylCompositions[j](sg);\n                if (sg.letters.length == sg.matchedSounds.length &&\n                    sg.matching == true) {\n                    sequences.push(sg.matchedSounds);\n                    break;\n                }\n            }\n        }\n        // console.log(sequences);\n        return sequences;\n    }\n}\nexports.KanaSoundGenerator = KanaSoundGenerator;\n//# sourceMappingURL=soundgen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/soundgen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/maker.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/maker.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LexemeMaker = exports.MorphemeMaker = void 0;\nconst unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nclass MorphemeMaker {\n    make(letters, syllabify) {\n        return unit_1.makeMatchedPatterns(letters, syllabify);\n    }\n}\nexports.MorphemeMaker = MorphemeMaker;\nclass LexemeMaker {\n}\nexports.LexemeMaker = LexemeMaker;\n//# sourceMappingURL=maker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9tYWtlci5qcz83YzEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxlQUFlLG1CQUFPLENBQUMsZ0RBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL21ha2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxleGVtZU1ha2VyID0gZXhwb3J0cy5Nb3JwaGVtZU1ha2VyID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4vdW5pdFwiKTtcbmNsYXNzIE1vcnBoZW1lTWFrZXIge1xuICAgIG1ha2UobGV0dGVycywgc3lsbGFiaWZ5KSB7XG4gICAgICAgIHJldHVybiB1bml0XzEubWFrZU1hdGNoZWRQYXR0ZXJucyhsZXR0ZXJzLCBzeWxsYWJpZnkpO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9ycGhlbWVNYWtlciA9IE1vcnBoZW1lTWFrZXI7XG5jbGFzcyBMZXhlbWVNYWtlciB7XG59XG5leHBvcnRzLkxleGVtZU1ha2VyID0gTGV4ZW1lTWFrZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWtlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/maker.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/metaplasm.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/metaplasm.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalPhrasalUnmutationMetaplasm = exports.TonalPhrasalMutationMetaplasm = exports.TonalPhrasalUninfectionMetaplasm = exports.TonalPhrasalInfectionMetaplasm = exports.TonalPhrasalUninsertionMetaplasm = exports.TonalPhrasalInsertionMetaplasm = exports.TonalPhrasalZeroInflection = exports.TonalPhrasalInflectionVppMetaplasm = exports.TonalPhrasalInflectionMetaplasm = exports.TonalLemmatizationMetaplasm = exports.TonalZeroUnmutationMetaplasm = exports.TonalZeroMutationMetaplasm = exports.TonalUnmutationMetaplasm = exports.TonalMutationMetaplasm = exports.TonalZeroUninfectionMetaplasm = exports.TonalZeroInfectionMetaplasm = exports.TonalUninfectionMetaplasm = exports.TonalInfectionMetaplasm = exports.TonalZeroUninsertionMetaplasm = exports.TonalZeroInsertionMetaplasm = exports.TonalUninsertionMetaplasm = exports.TonalInsertionMetaplasm = exports.TonalZeroInflection = exports.TonalInflectionMetaplasm = exports.TonalUncombiningMetaplasm = exports.KanaCombiningMetaplasm = exports.RemovingNasalizationOfAy = exports.RemovingEpenthesisOfAy = exports.TonalZeroCombining = exports.TonalCombiningMetaplasm = void 0;\nclass Metaplasm {\n}\nclass TonalCombiningMetaplasm extends Metaplasm {\n    apply(sounds, allomorph) {\n        return [];\n    }\n}\nexports.TonalCombiningMetaplasm = TonalCombiningMetaplasm;\nclass TonalZeroCombining extends TonalCombiningMetaplasm {\n}\nexports.TonalZeroCombining = TonalZeroCombining;\nclass RemovingEpenthesisOfAy extends TonalCombiningMetaplasm {\n    applyToLetters(letters) {\n        letters.shift();\n        return letters;\n    }\n    applyToString(str) {\n        return str.slice(1, 2);\n    }\n}\nexports.RemovingEpenthesisOfAy = RemovingEpenthesisOfAy;\nclass RemovingNasalizationOfAy extends TonalCombiningMetaplasm {\n}\nexports.RemovingNasalizationOfAy = RemovingNasalizationOfAy;\nclass KanaCombiningMetaplasm extends Metaplasm {\n}\nexports.KanaCombiningMetaplasm = KanaCombiningMetaplasm;\nclass TonalUncombiningMetaplasm extends Metaplasm {\n    apply(sounds, allomorph) {\n        return [];\n    }\n}\nexports.TonalUncombiningMetaplasm = TonalUncombiningMetaplasm;\nclass TonalInflectionMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInflectionMetaplasm = TonalInflectionMetaplasm;\nclass TonalZeroInflection extends TonalInflectionMetaplasm {\n}\nexports.TonalZeroInflection = TonalZeroInflection;\nclass TonalInsertionMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInsertionMetaplasm = TonalInsertionMetaplasm;\nclass TonalUninsertionMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninsertionMetaplasm = TonalUninsertionMetaplasm;\nclass TonalZeroInsertionMetaplasm extends TonalInsertionMetaplasm {\n}\nexports.TonalZeroInsertionMetaplasm = TonalZeroInsertionMetaplasm;\nclass TonalZeroUninsertionMetaplasm extends TonalUninsertionMetaplasm {\n}\nexports.TonalZeroUninsertionMetaplasm = TonalZeroUninsertionMetaplasm;\nclass TonalInfectionMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInfectionMetaplasm = TonalInfectionMetaplasm;\nclass TonalUninfectionMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninfectionMetaplasm = TonalUninfectionMetaplasm;\nclass TonalZeroInfectionMetaplasm extends TonalInfectionMetaplasm {\n}\nexports.TonalZeroInfectionMetaplasm = TonalZeroInfectionMetaplasm;\nclass TonalZeroUninfectionMetaplasm extends TonalUninfectionMetaplasm {\n}\nexports.TonalZeroUninfectionMetaplasm = TonalZeroUninfectionMetaplasm;\nclass TonalMutationMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalMutationMetaplasm = TonalMutationMetaplasm;\nclass TonalUnmutationMetaplasm extends Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUnmutationMetaplasm = TonalUnmutationMetaplasm;\nclass TonalZeroMutationMetaplasm extends TonalMutationMetaplasm {\n}\nexports.TonalZeroMutationMetaplasm = TonalZeroMutationMetaplasm;\nclass TonalZeroUnmutationMetaplasm extends TonalUnmutationMetaplasm {\n}\nexports.TonalZeroUnmutationMetaplasm = TonalZeroUnmutationMetaplasm;\nclass TonalLemmatizationMetaplasm extends Metaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return [];\n    }\n}\nexports.TonalLemmatizationMetaplasm = TonalLemmatizationMetaplasm;\nclass TonalPhrasalInflectionMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInflectionMetaplasm = TonalPhrasalInflectionMetaplasm;\nclass TonalPhrasalInflectionVppMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo, lexemeThree) {\n        return [];\n    }\n}\nexports.TonalPhrasalInflectionVppMetaplasm = TonalPhrasalInflectionVppMetaplasm;\nclass TonalPhrasalZeroInflection extends TonalPhrasalInflectionMetaplasm {\n}\nexports.TonalPhrasalZeroInflection = TonalPhrasalZeroInflection;\nclass TonalPhrasalInsertionMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInsertionMetaplasm = TonalPhrasalInsertionMetaplasm;\nclass TonalPhrasalUninsertionMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninsertionMetaplasm = TonalPhrasalUninsertionMetaplasm;\nclass TonalPhrasalInfectionMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInfectionMetaplasm = TonalPhrasalInfectionMetaplasm;\nclass TonalPhrasalUninfectionMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninfectionMetaplasm = TonalPhrasalUninfectionMetaplasm;\nclass TonalPhrasalMutationMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalMutationMetaplasm = TonalPhrasalMutationMetaplasm;\nclass TonalPhrasalUnmutationMetaplasm extends Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUnmutationMetaplasm = TonalPhrasalUnmutationMetaplasm;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/collections.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/collections.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.impossibleSequences = exports.finalConsonantsForTransfix = exports.eighthToFourthFinalConsonants = exports.sandhiFinalPPpttt = exports.fourthToEighthFinalConsonants = exports.fourthFinalConsonants = exports.finalConsonantsForBgjlsbbggllss = exports.finalConsonantsBgjlsbbggllss = exports.voicedVoicelessFinalConsonants = exports.voicelessVoicedFinalConsonants = exports.eighthToFirst = exports.initialConsonantsBghjl = exports.ttInitialTInitialPairs = exports.initialConsonantsForTT = exports.initialConsonantsForFinalT = exports.finalConsonantsMng = exports.finalConsonantsLs = exports.finalConsonantsBgkp = exports.finalConsonantsJls = exports.epentheticLetters = exports.toneLettersWx = exports.combiningRules = exports.nasalFinalConsonants = exports.nasalInitialConsonants = void 0;\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\n// m, n, ng\nconst nasalConsonants = [\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nexports.nasalInitialConsonants = nasalConsonants;\nexports.nasalFinalConsonants = nasalConsonants;\nexports.combiningRules = new Map()\n    .set(version2_1.TonalLetterTags.zero, [version2_1.TonalLetterTags.z])\n    .set(version2_1.TonalLetterTags.y, [version2_1.TonalLetterTags.zero, version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.y])\n    .set(version2_1.TonalLetterTags.x, [version2_1.TonalLetterTags.z, version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.z, [version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.p, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.t, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.k, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.h, [\n    version2_1.TonalLetterTags.y,\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.pp, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.tt, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.kk, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.hh, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x]);\n// w, x\nexports.toneLettersWx = [\n    version2_1.TonalLetterTags.w.toString(),\n    version2_1.TonalLetterTags.x.toString(),\n];\n// b, l, g, m, n\nexports.epentheticLetters = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n];\n// j, l, s for first checked tones\nexports.finalConsonantsJls = [\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n// b, g, k, p\nexports.finalConsonantsBgkp = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.p.toString(),\n];\n// l, s for third and fifth checked tones\nexports.finalConsonantsLs = [\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n// sandhi final m, ng for final n\nexports.finalConsonantsMng = [\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nexports.initialConsonantsForFinalT = {\n    ph: version2_1.TonalLetterTags.ph.toString(),\n    kh: version2_1.TonalLetterTags.kh.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    p: version2_1.TonalLetterTags.p.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\nexports.initialConsonantsForTT = {\n    ph: version2_1.TonalLetterTags.ph.toString(),\n    kh: version2_1.TonalLetterTags.kh.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    p: version2_1.TonalLetterTags.p.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\n// tt, t\nexports.ttInitialTInitialPairs = new Map()\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.ph, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.p, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.kh, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.k, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.g, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.f + exports.initialConsonantsForFinalT.j, version2_1.TonalLetterTags.j)\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.w + exports.initialConsonantsForFinalT.j, version2_1.TonalLetterTags.l)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.m, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.n, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialConsonantsForFinalT.ng, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.ph, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.p, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.kh, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.k, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.g, version2_1.TonalLetterTags.gg)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.b, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.j, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.s, version2_1.TonalLetterTags.ss)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.m, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.n, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialConsonantsForTT.ng, version2_1.TonalLetterTags.hh);\n// b, g, h, j, l\nexports.initialConsonantsBghjl = [\n    // mutate preceding finals to voiced ones\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.h.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n];\n// 8 to 1\nexports.eighthToFirst = new Map()\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.hh, version2_1.TonalLetterTags.h);\n/** Turn preceding finals to voiced ones. Unvoiced to voiced */\nexports.voicelessVoicedFinalConsonants = new Map()\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.b)\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.l)\n    .set(version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.bb)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.gg);\nexports.voicedVoicelessFinalConsonants = new Map()\n    .set(version2_1.TonalLetterTags.b, version2_1.TonalLetterTags.p) // external sandhi\n    .set(version2_1.TonalLetterTags.l, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.g, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.p) // internal sandhi\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.bb, version2_1.TonalLetterTags.pp) // external sandhi\n    .set(version2_1.TonalLetterTags.ll, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.gg, version2_1.TonalLetterTags.kk);\n/** sandhi final consonants b, g, j, l, s, bb, gg, ll, ss */\nexports.finalConsonantsBgjlsbbggllss = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n    version2_1.TonalLetterTags.bb.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.ll.toString(),\n    version2_1.TonalLetterTags.ss.toString(),\n];\n/** unchanged final consonants for b, g, j, l, s, bb, gg, ll, ss */\nexports.finalConsonantsForBgjlsbbggllss = new Map()\n    // keys are for the has method\n    // keys and values are for the get method. keys are finals plus no tonals\n    .set(version2_1.TonalLetterTags.b, [version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.g, [version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.j, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.l, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.s, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.bb, [version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.gg, [version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ll, [version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ss, [version2_1.TonalLetterTags.tt])\n    // both keys and values are for the has method\n    // the has method will not reach these pairs\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.f, [\n    version2_1.TonalLetterTags.p,\n    version2_1.TonalLetterTags.t,\n])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.f, [\n    version2_1.TonalLetterTags.k,\n    version2_1.TonalLetterTags.t,\n])\n    .set(version2_1.TonalLetterTags.j + version2_1.TonalLetterTags.f, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.f, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.w, [\n    version2_1.TonalLetterTags.kk,\n    version2_1.TonalLetterTags.tt,\n])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.x, [\n    version2_1.TonalLetterTags.kk,\n    version2_1.TonalLetterTags.tt,\n])\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.tt]);\nexports.fourthFinalConsonants = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    t: version2_1.TonalLetterTags.t.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    h: version2_1.TonalLetterTags.h.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    l: version2_1.TonalLetterTags.l.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n};\nexports.fourthToEighthFinalConsonants = new Map()\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.h, version2_1.TonalLetterTags.hh);\nexports.sandhiFinalPPpttt = [\n    version2_1.TonalLetterTags.p.toString(),\n    version2_1.TonalLetterTags.pp.toString(),\n    version2_1.TonalLetterTags.t.toString(),\n    version2_1.TonalLetterTags.tt.toString(),\n];\n/** map eighth checked finals to fourth ones */\nexports.eighthToFourthFinalConsonants = new Map()\n    .set(version2_1.TonalLetterTags.bb, exports.fourthFinalConsonants.b.toString())\n    .set(version2_1.TonalLetterTags.gg, exports.fourthFinalConsonants.g.toString())\n    .set(version2_1.TonalLetterTags.hh, exports.fourthFinalConsonants.h.toString())\n    .set(version2_1.TonalLetterTags.kk, exports.fourthFinalConsonants.k.toString())\n    .set(version2_1.TonalLetterTags.ll, exports.fourthFinalConsonants.l.toString())\n    .set(version2_1.TonalLetterTags.pp, exports.fourthFinalConsonants.p.toString())\n    .set(version2_1.TonalLetterTags.ss, exports.fourthFinalConsonants.s.toString())\n    .set(version2_1.TonalLetterTags.tt, exports.fourthFinalConsonants.t.toString());\nexports.finalConsonantsForTransfix = new Map()\n    .set(version2_1.TonalLetterTags.h, version2_1.TonalLetterTags.hh.toString())\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.tt.toString());\nexports.impossibleSequences = [\n// TonalLetterTags.d.toString(),\n// TonalLetterTags.q.toString(),\n// TonalLetterTags.v.toString(),\n];\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/collections.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/init.js":
/*!**********************************************!*\
  !*** ./node_modules/taipa/lib/tonal/init.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTaiKanaBlocks = exports.checkNumberOfLetterTonal = void 0;\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst kana_1 = __webpack_require__(/*! ../kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction checkNumberOfLetterTonal() {\n    if (version2_1.tonalPositionalSounds.size !== version2_1.lowerLettersTonal.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLetterTonal = checkNumberOfLetterTonal;\nconst combiningOverline = '\\u0305';\nconst combiningDotBelow = '\\u0323';\nfunction handleCombiningDotBelowOverline(initial, medial) {\n    const got = kanaInitials(mappingInitial.get(initial))(medial);\n    if (got && got[0]) {\n        if (initialsWithCombiningDotBelow.aspirated.includes(initial)) {\n            if (freeSyllablesWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline + combiningDotBelow;\n            }\n            return got[0] + combiningDotBelow;\n        }\n        else if (initialsWithCombiningDotBelow.withoutADotOrOverline.includes(initial)) {\n            return got[0];\n        }\n        else if (initialsWithCombiningDotBelow.withAnOverline.includes(initial)) {\n            if (freeSyllablesWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline;\n            }\n            return got[0];\n        }\n    }\n    return '';\n}\nfunction getToneSymbolForFourthEighth(final, tonalLen) {\n    if (tonalLen == 0) {\n        // 4th tone and 8th tone\n        const kn = mappingSymbolForTones.get(final.toString());\n        if (kn) {\n            return kn[0];\n        }\n    }\n    return '';\n}\nfunction getReplicatedKanaVowel(sounds, j, replica) {\n    if ((j == 0 &&\n        sounds[0].name === version2_1.TonalSoundTags.vowel &&\n        (sounds.length == 1 ||\n            (sounds.length == 2 &&\n                sounds[sounds.length - 1].name === version2_1.TonalSoundTags.freeTone) ||\n            (sounds.length == 2 &&\n                sounds[sounds.length - 1].name === version2_1.TonalSoundTags.nasalization))) ||\n        (sounds.length == 3 &&\n            sounds[sounds.length - 2].name === version2_1.TonalSoundTags.nasalization &&\n            sounds[sounds.length - 1].name === version2_1.TonalSoundTags.freeTone)) {\n        // reduplicate the vowel for syllables without an initial\n        // in case of a, e,\n        // in case ax, ex. enn,\n        // in case of ennx\n        return replica;\n    }\n    else if ((sounds.length == 2 &&\n        sounds[0].name === version2_1.TonalSoundTags.vowel &&\n        (sounds[1].toString() === version2_1.TonalLetterTags.h ||\n            sounds[1].toString() === version2_1.TonalLetterTags.hh)) ||\n        (sounds.length == 3 &&\n            sounds[0].name === version2_1.TonalSoundTags.vowel &&\n            (sounds[1].toString() === version2_1.TonalLetterTags.h ||\n                sounds[1].toString() === version2_1.TonalLetterTags.hh) &&\n            sounds[2].name === version2_1.TonalSoundTags.checkedTone) ||\n        (sounds.length == 3 &&\n            sounds[0].name === version2_1.TonalSoundTags.vowel &&\n            sounds[1].name === version2_1.TonalSoundTags.nasalization &&\n            (sounds[2].toString() === version2_1.TonalLetterTags.h ||\n                sounds[2].toString() === version2_1.TonalLetterTags.hh))) {\n        // reduplicate the vowel for syllables without an initial\n        // in case of ah, ehh\n        // in case of ahy\n        // in case of ennh, innh\n        return getSmallKanaVowel(sounds[0].toString());\n    }\n    return '';\n}\nfunction getSmallKanaVowel(medial) {\n    const got = kana_1.otherKanas.get(medial);\n    if (got && got[1]) {\n        // get the small form of the vowel and append it\n        return got[1];\n    }\n    return '';\n}\nfunction compose(morphemes) {\n    let kanaSeqs = [];\n    let kanas = new Array(morphemes.length);\n    let kanas4thToneWoArrow = '';\n    for (let i = 0; i < morphemes.length; i++) {\n        const initl = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.initialConsonant);\n        const mdls = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.vowel);\n        const nslFnl = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinalConsonant);\n        const stpFnl = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.stopFinalConsonant);\n        const frTnl = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.freeTone);\n        const chkTnl = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.checkedTone);\n        const nslz = morphemes[i].sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalization);\n        const finalsForEToKanaIE = stpFnl\n            .filter(it => it.name === version2_1.TonalSoundTags.stopFinalConsonant &&\n            finalsForEKegekkeggeng.includes(it.toString()))\n            .concat(nslFnl.filter(it => it.name === version2_1.TonalSoundTags.nasalFinalConsonant &&\n            finalsForEKegekkeggeng.includes(it.toString())));\n        // initialize for this morpheme\n        kanas[i] = '';\n        if (initl.length == 1) {\n            if (mdls.length > 0) {\n                for (let j = 0; j < mdls.length; j++) {\n                    if (voewlsIRor.includes(mdls[j].toString())) {\n                        kanas[i] +=\n                            handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString()) + getKanaIRor(mdls, stpFnl.length + nslFnl.length == 1);\n                    }\n                    else if (mdls[j].toString() === version2_1.TonalLetterTags.ur) {\n                        if (j == 0) {\n                            // if the preceding letter is an initial\n                            const initialKana = handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString());\n                            kanas[i] += initialKana;\n                            if (stpFnl.length == 1) {\n                                const kn = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                            else {\n                                const kn = mappingMedial.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                        }\n                        else {\n                            if (stpFnl.length == 1) {\n                                const kn = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                            else {\n                                const gotVowels = mappingMedial.get(mdls[j].toString());\n                                if (gotVowels)\n                                    kanas[i] += gotVowels[1];\n                            }\n                        }\n                    }\n                    else {\n                        if (mdls[j].toString() === version2_1.TonalLetterTags.e &&\n                            nslFnl.length + stpFnl.length > 0 &&\n                            nslz.length == 0 &&\n                            finalsForEToKanaIE.length == 1) {\n                            // if there is a final, letter i should be used to retrieve an initial kana\n                            // in the case of ~eng or -ek\n                            if (mdls.length == 1) {\n                                kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), version2_1.TonalLetterTags.i);\n                            }\n                            else if (mdls.length == 2 &&\n                                mdls[0].toString() === version2_1.TonalLetterTags.i) {\n                                // in case of -ieng\n                                // kanas[i] += getSmallKanaVowel(KanaLetterTags.i);\n                            }\n                            if (mdls[j].toString() === version2_1.TonalLetterTags.e) {\n                                // for letter e, an small kana e is appended to the preceding i-ending initial\n                                kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                            }\n                        }\n                        else {\n                            if (j > 0) {\n                                if (stpFnl.length == 1) {\n                                    // more that one vowels. e.g. goehh\n                                    kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                }\n                                else {\n                                    if (j == 1 && mdls.length == 3) {\n                                        kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                    }\n                                    else if (j == 1 && mdls.length == 2 && nslFnl.length == 1) {\n                                        kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                    }\n                                    else {\n                                        const kn = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                                        if (kn && kn[1])\n                                            kanas[i] += kn[1];\n                                    }\n                                }\n                            }\n                            else {\n                                // the first vowel. e.g. gehh, goehh\n                                kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString());\n                                if (nslFnl.length == 0 &&\n                                    mdls.length == 1 &&\n                                    stpFnl.length == 0) {\n                                    // open syllables with an initial\n                                    const kn = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                                    if (kn && kn[1]) {\n                                        // replicate the vowel and append it\n                                        kanas[i] += kn[1];\n                                    }\n                                }\n                                else if (nslFnl.length == 0 &&\n                                    mdls.length == 1 &&\n                                    stpFnl.length == 1 &&\n                                    version2_1.neutralFinalConsonantsTonal.includes(stpFnl[0].toString())) {\n                                    kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                // there is no medials\n            }\n        }\n        if (initl.length == 0) {\n            if (mdls.length > 0) {\n                for (let j = 0; j < mdls.length; j++) {\n                    let got;\n                    if (j == 0 &&\n                        mdls[j].toString() === version2_1.TonalLetterTags.o &&\n                        mdls.length > 1) {\n                        // map o to wo\n                        got = kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o);\n                    }\n                    else {\n                        // map o to o\n                        got = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                    }\n                    if (got) {\n                        if (j == 1 && mdls.length == 3) {\n                            // get small kana for 2nd medial\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 1 && mdls.length == 2 && stpFnl.length == 1) {\n                            // get small kana for 2nd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 1 && mdls.length == 2 && nslFnl.length == 1) {\n                            // get small kana for 2nd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 2 && mdls.length == 3 && stpFnl.length == 1) {\n                            // get small kana for 3rd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 0 &&\n                            mdls[j].toString() === version2_1.TonalLetterTags.e &&\n                            nslFnl.length + stpFnl.length > 0 &&\n                            nslz.length == 0 &&\n                            finalsForEToKanaIE.length == 1) {\n                            // if there is a final, letter i should be used to retrieve an extra medial kana\n                            // in the case of ~eng or -ek\n                            const kn = kana_1.hiraganaKatakana.get(version2_1.TonalLetterTags.i);\n                            if (kn)\n                                kanas[i] += kn[1];\n                            if (mdls[j].toString() === version2_1.TonalLetterTags.e) {\n                                // for letter e, a small kana e is appended to the preceding i-\n                                kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                            }\n                        }\n                        else {\n                            kanas[i] += got[1];\n                            kanas[i] += getReplicatedKanaVowel(morphemes[i].sounds, j, got[1]);\n                        }\n                    }\n                    else {\n                        if (mdls[j].toString() === version2_1.TonalLetterTags.or ||\n                            mdls[j].toString() === version2_1.TonalLetterTags.ir) {\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            if (kn) {\n                                kanas[i] += kn[1] + combiningOverline;\n                                if (stpFnl.length == 1 &&\n                                    version2_1.neutralFinalConsonantsTonal.includes(stpFnl[0].toString())) {\n                                    // in case of orh, use kanaIRor to get one extra small kana\n                                    kanas[i] += getKanaIRor(mdls, stpFnl.length + nslFnl.length == 1);\n                                }\n                                else {\n                                    // there replicated kana other than ir, or\n                                    kanas[i] += getReplicatedKanaVowel(morphemes[i].sounds, i, kn[1] + combiningOverline);\n                                }\n                            }\n                        }\n                        else if (mdls[j].toString() === version2_1.TonalLetterTags.ur ||\n                            mdls[j].toString() === version2_1.TonalLetterTags.er) {\n                            // if the preceding letter is not an initial\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            // in case of ur, iur. bypass urh, urhy, iurh, iurhy\n                            if (kn && stpFnl.length == 0)\n                                kanas[i] += kn[1];\n                            if (stpFnl.length == 1) {\n                                // in case of urh, urhy\n                                if (kn && mdls.length == 1)\n                                    kanas[i] += kn[1];\n                                const sml = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (sml)\n                                    kanas[i] += sml[1];\n                            }\n                            else {\n                                if (mdls.length == 1) {\n                                    if (kn)\n                                        kanas[i] += getReplicatedKanaVowel(morphemes[i].sounds, j, kn[1]);\n                                }\n                            }\n                        }\n                        else if (version2_1.materLectionisTonal.includes(mdls[j].toString())) {\n                            // mater lectionis: m, n, ng.\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            if (kn) {\n                                kanas[i] += kn[1];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (nslz.length == 1) {\n            const tail = kanas[i].slice(1, kanas[i].length);\n            if (initl.length == 1) {\n                const kn = mappingNasalization.get(initl[0].toString() + mdls[0].toString());\n                if (kn)\n                    kanas[i] = kn + tail;\n            }\n            else {\n                const kn = mappingNasalization.get(mdls[0].toString());\n                if (kn)\n                    kanas[i] = kn + tail;\n            }\n        }\n        if (nslFnl.length == 1) {\n            // syllable finals\n            if (initl.length == 1 && mdls.length == 0) {\n                // there is no medials\n                const kn = kanaInitials(mappingInitial.get(initl[0].toString()))(nslFnl[0].toString());\n                if (kn && kn[0]) {\n                    kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), nslFnl[0].toString());\n                }\n            }\n            let kn;\n            if (stpFnl.length > 0)\n                kn = mappingSmallNasalFinal.get(nslFnl[0].toString());\n            else\n                kn = mappingNasalFinal.get(nslFnl[0].toString());\n            if (kn && kn[1])\n                kanas[i] += kn[1];\n        }\n        if (stpFnl.length == 1) {\n            // syllable finals\n            const kn = mappingStopFinal.get(stpFnl[0].toString());\n            if (kn && kn[1]) {\n                // stop finals p, t, k, pp, tt, kk\n                kanas[i] += kn[1];\n            }\n            if (Object.values(collections_1.fourthFinalConsonants).includes(stpFnl[0].toString())) {\n                kanas4thToneWoArrow = kanas[i];\n            }\n            kanas[i] += getToneSymbolForFourthEighth(stpFnl[0].toString(), chkTnl.length);\n        }\n        if (frTnl.length == 1) {\n            kanas[i] += mappingSymbolForTones.get(frTnl[0].toString());\n        }\n        if (chkTnl.length == 1) {\n            kanas[i] += mappingSymbolForTones.get(chkTnl[0].toString());\n        }\n    }\n    kanaSeqs.push(kanas.join(''));\n    if (kanas4thToneWoArrow.length > 0 && morphemes.length == 1) {\n        kanaSeqs.push(kanas4thToneWoArrow);\n    }\n    return kanaSeqs;\n}\n/** Get Taiwanese Kana blocks. */\nfunction getTaiKanaBlocks(morphemes) {\n    const kanaSequences = compose(morphemes);\n    return kanaSequences;\n}\nexports.getTaiKanaBlocks = getTaiKanaBlocks;\nconst kanaInitials = function (map) {\n    return function (following) {\n        if (following) {\n            if (map && map.has(following)) {\n                const got = map.get(following);\n                if (got && got[1]) {\n                    return [got[1]];\n                }\n            }\n        }\n        else {\n            if (map) {\n                /*\n                const kanas = Array.from(map.values());\n                const dupes = Array.from(kanas.map(it => (it ? it[1] : '')));\n                const dedupes = dupes.reduce(function (\n                  accumulator: string[],\n                  curr: string\n                ) {\n                  if (accumulator.filter(it => it === curr).length == 0) {\n                    accumulator.push(curr);\n                  }\n                  return accumulator;\n                },\n                []);\n                return dedupes;\n                */\n            }\n        }\n        return [];\n    };\n};\nconst getKanaIRor = function (vowels, hasOneFinal) {\n    if (vowels.length == 1) {\n        const kn = mappingMedial.get(vowels[0].toString());\n        if (kn) {\n            if (hasOneFinal) {\n                const sml = mappingMedialSmallForm.get(vowels[0].toString());\n                if (sml) {\n                    return sml[1] + combiningOverline;\n                }\n            }\n            return kn[1] + combiningOverline;\n        }\n    }\n    else if (vowels.length == 2) {\n        // return small form\n        const kn = mappingMedialSmallForm.get(vowels[0].toString());\n        if (kn) {\n            return kn[1] + combiningOverline;\n        }\n    }\n    return '';\n};\nconst freeSyllablesWithCombiningOverline = [\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.or.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.ur.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.th.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.th.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.th.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.ir.toString(),\n    version2_1.TonalLetterTags.th.toString() + version2_1.TonalLetterTags.ir.toString(),\n];\nconst initialsWithCombiningDotBelow = {\n    // whether the dot should be combined\n    aspirated: [\n        // with a dot\n        version2_1.TonalLetterTags.kh.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.ph.toString(),\n        version2_1.TonalLetterTags.th.toString(),\n    ],\n    withoutADotOrOverline: [\n        version2_1.TonalLetterTags.k.toString(),\n        version2_1.TonalLetterTags.g.toString(),\n        version2_1.TonalLetterTags.b.toString(),\n        version2_1.TonalLetterTags.p.toString(),\n        version2_1.TonalLetterTags.j.toString(),\n        version2_1.TonalLetterTags.l.toString(),\n        version2_1.TonalLetterTags.h.toString(),\n        version2_1.TonalLetterTags.s.toString(),\n        version2_1.TonalLetterTags.m.toString(),\n        version2_1.TonalLetterTags.n.toString(),\n        version2_1.TonalLetterTags.ng.toString(),\n    ],\n    withAnOverline: [\n        version2_1.TonalLetterTags.ch.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.t.toString(),\n    ],\n};\n// includes mater lectionis\nconst mappingMedial = new Map()\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.er, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst voewlsIRor = [\n    version2_1.TonalLetterTags.ir.toString(),\n    version2_1.TonalLetterTags.or.toString(),\n];\nconst mappingMedialSmallForm = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.otherKanas.get(kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.otherKanas.get(kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.otherKanas.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.or, kana_1.otherKanas.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.otherKanas.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.otherKanas.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.otherKanas.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.otherKanas.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.otherKanas.get(kana_1.KanaLetterTags.n));\nconst mappingSymbolForTones = new Map()\n    .set(version2_1.TonalLetterTags.f, '⍭') // apl functional symbol stile tilde (U+236D)\n    .set(version2_1.TonalLetterTags.y, '⎛') // left parenthesis upper hook (U+239B)\n    .set(version2_1.TonalLetterTags.w, '⎝') // left parenthesis lower hook (U+239D)\n    .set(version2_1.TonalLetterTags.x, '⟨') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.zx, '⟩') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.z, '⎸') // left vertical box line (U+23B8)\n    .set(version2_1.TonalLetterTags.xx, '⫽') // double solidus operator (U+2AFD)\n    .set(version2_1.TonalLetterTags.p, '⤆') // leftwards double arrow from bar (U+2906)\n    .set(version2_1.TonalLetterTags.t, '⤆')\n    .set(version2_1.TonalLetterTags.k, '⤆')\n    .set(version2_1.TonalLetterTags.h, '⤆')\n    .set(version2_1.TonalLetterTags.b, '⤆')\n    .set(version2_1.TonalLetterTags.g, '⤆')\n    .set(version2_1.TonalLetterTags.j, '⤆')\n    .set(version2_1.TonalLetterTags.l, '⤆')\n    .set(version2_1.TonalLetterTags.s, '⤆')\n    .set(version2_1.TonalLetterTags.pp, '⤇') // rightwards double arrow from bar (U+2907)\n    .set(version2_1.TonalLetterTags.tt, '⤇')\n    .set(version2_1.TonalLetterTags.kk, '⤇')\n    .set(version2_1.TonalLetterTags.hh, '⤇')\n    .set(version2_1.TonalLetterTags.bb, '⤇')\n    .set(version2_1.TonalLetterTags.gg, '⤇')\n    .set(version2_1.TonalLetterTags.ll, '⤇')\n    .set(version2_1.TonalLetterTags.ss, '⤇');\nconst mappingStopFinal = new Map()\n    .set(version2_1.TonalLetterTags.p, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.t, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.k, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.b, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.g, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.j, kana_1.otherKanas.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.l, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.s, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.pp, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.tt, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.kk, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.bb, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.gg, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ll, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ss, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingNasalization = new Map()\n    .set(version2_1.TonalLetterTags.a, '㋐')\n    .set(version2_1.TonalLetterTags.i, '㋑')\n    .set(version2_1.TonalLetterTags.ir, '㋒')\n    .set(version2_1.TonalLetterTags.u, '㋒')\n    .set(version2_1.TonalLetterTags.e, '㋓')\n    .set(version2_1.TonalLetterTags.o, '㋔')\n    .set(version2_1.TonalLetterTags.kh + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.kh + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.kh + version2_1.TonalLetterTags.u, '㋗')\n    .set(version2_1.TonalLetterTags.kh + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.kh + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.i, '㋛')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.u, '㋜')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.ir, '㋡')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.ir, '㋡')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.j + version2_1.TonalLetterTags.i, '㋛' + '\\u{3099}') // ㋛゙\n    .set(version2_1.TonalLetterTags.ph + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}') // ㋩゚\n    .set(version2_1.TonalLetterTags.ph + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}') // ㋪゚\n    .set(version2_1.TonalLetterTags.ph + version2_1.TonalLetterTags.u, '㋫' + '\\u{309a}') // ㋫゚\n    .set(version2_1.TonalLetterTags.ph + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}') // ㋬゚\n    .set(version2_1.TonalLetterTags.ph + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}') // ㋭゚\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.ir, '㋗')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.u, '㋗')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.a, '㋩')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.i, '㋪')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.ir, '㋫')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.u, '㋫')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.e, '㋬')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.o, '㋭')\n    .set(version2_1.TonalLetterTags.th + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.th + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.th + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.th + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.th + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}') // ㋩゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}') // ㋪゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.u, '㋫' + '\\u{309a}') // ㋫゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}') // ㋬゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}'); // ㋭゚\nconst finalsForEKegekkeggeng = [\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nconst mappingNasalFinal = new Map()\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst mappingSmallNasalFinal = new Map()\n    .set(version2_1.TonalLetterTags.m, kana_1.otherKanas.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.otherKanas.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.otherKanas.get(kana_1.KanaLetterTags.n));\nconst mappingInitialB = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o));\nconst mappingInitialC = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u));\nconst mappingInitialG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o));\nconst mappingInitialH = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o));\nconst mappingInitialJ = new Map()\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u));\nconst mappingInitialK = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u));\nconst mappingInitialL = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u));\nconst mappingInitialM = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u));\nconst mappingInitialN = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u));\nconst mappingInitialNG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.u));\nconst mappingInitialP = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o));\nconst mappingInitialS = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingInitialT = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o));\nconst mappingInitial = new Map()\n    .set(version2_1.TonalLetterTags.b, mappingInitialB)\n    .set(version2_1.TonalLetterTags.c, mappingInitialC)\n    .set(version2_1.TonalLetterTags.ch, mappingInitialC)\n    .set(version2_1.TonalLetterTags.t, mappingInitialT)\n    .set(version2_1.TonalLetterTags.g, mappingInitialG)\n    .set(version2_1.TonalLetterTags.h, mappingInitialH)\n    .set(version2_1.TonalLetterTags.j, mappingInitialJ)\n    .set(version2_1.TonalLetterTags.kh, mappingInitialK)\n    .set(version2_1.TonalLetterTags.l, mappingInitialL)\n    .set(version2_1.TonalLetterTags.m, mappingInitialM)\n    .set(version2_1.TonalLetterTags.n, mappingInitialN)\n    .set(version2_1.TonalLetterTags.ng, mappingInitialNG)\n    .set(version2_1.TonalLetterTags.ph, mappingInitialP)\n    .set(version2_1.TonalLetterTags.k, mappingInitialK)\n    .set(version2_1.TonalLetterTags.s, mappingInitialS)\n    .set(version2_1.TonalLetterTags.th, mappingInitialT)\n    .set(version2_1.TonalLetterTags.p, mappingInitialP);\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/prediction.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/prediction.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.predict = void 0;\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst syllabletable_1 = __webpack_require__(/*! ./syllabletable */ \"./node_modules/taipa/lib/tonal/syllabletable.js\");\n/** Predicts the following letters. Return them as an array of strings when available. If the lexical roots are not present, an empty array will be returned. */\nfunction predict(letters) {\n    const soundSeqs = new Array();\n    for (let j = 0; j < soundgen_1.syllableCompositions.length; j++) {\n        let sg = new unit_1.SoundGeneration();\n        sg.predictive = true;\n        sg.letters = letters;\n        sg = soundgen_1.syllableCompositions[j](sg);\n        if (sg.letters.length != sg.matchedSounds.length || sg.matching != true) {\n            // the pattern is not matched, the first unmatched set of sounds\n            // is then returned as a possible prediction\n            sg.predictions.map(x => soundSeqs.push(x));\n        }\n    }\n    const dupes = new Array();\n    soundSeqs.map(i => i.map(j => dupes.push([j.toString(), j.name])));\n    const dedupes = dupes.reduce(function (accumulator, curr) {\n        if (accumulator.filter(x => x[0] === curr[0]).length == 0) {\n            accumulator.push(curr);\n        }\n        return accumulator;\n    }, []);\n    // for valid predictions\n    const predictions = dedupes.filter(it => syllabletable_1.isInSyllableTable(letters.join('') + it[0]));\n    return predictions;\n}\nexports.predict = predict;\n// TODO: add a predict function to cover those skipped syllables in basicSyllables\n//# sourceMappingURL=prediction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9wcmVkaWN0aW9uLmpzP2RhOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RUFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRDQUE0QztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9wcmVkaWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZWRpY3QgPSB2b2lkIDA7XG5jb25zdCBzb3VuZGdlbl8xID0gcmVxdWlyZShcIi4vc291bmRnZW5cIik7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IHN5bGxhYmxldGFibGVfMSA9IHJlcXVpcmUoXCIuL3N5bGxhYmxldGFibGVcIik7XG4vKiogUHJlZGljdHMgdGhlIGZvbGxvd2luZyBsZXR0ZXJzLiBSZXR1cm4gdGhlbSBhcyBhbiBhcnJheSBvZiBzdHJpbmdzIHdoZW4gYXZhaWxhYmxlLiBJZiB0aGUgbGV4aWNhbCByb290cyBhcmUgbm90IHByZXNlbnQsIGFuIGVtcHR5IGFycmF5IHdpbGwgYmUgcmV0dXJuZWQuICovXG5mdW5jdGlvbiBwcmVkaWN0KGxldHRlcnMpIHtcbiAgICBjb25zdCBzb3VuZFNlcXMgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNvdW5kZ2VuXzEuc3lsbGFibGVDb21wb3NpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbGV0IHNnID0gbmV3IHVuaXRfMS5Tb3VuZEdlbmVyYXRpb24oKTtcbiAgICAgICAgc2cucHJlZGljdGl2ZSA9IHRydWU7XG4gICAgICAgIHNnLmxldHRlcnMgPSBsZXR0ZXJzO1xuICAgICAgICBzZyA9IHNvdW5kZ2VuXzEuc3lsbGFibGVDb21wb3NpdGlvbnNbal0oc2cpO1xuICAgICAgICBpZiAoc2cubGV0dGVycy5sZW5ndGggIT0gc2cubWF0Y2hlZFNvdW5kcy5sZW5ndGggfHwgc2cubWF0Y2hpbmcgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gdGhlIHBhdHRlcm4gaXMgbm90IG1hdGNoZWQsIHRoZSBmaXJzdCB1bm1hdGNoZWQgc2V0IG9mIHNvdW5kc1xuICAgICAgICAgICAgLy8gaXMgdGhlbiByZXR1cm5lZCBhcyBhIHBvc3NpYmxlIHByZWRpY3Rpb25cbiAgICAgICAgICAgIHNnLnByZWRpY3Rpb25zLm1hcCh4ID0+IHNvdW5kU2Vxcy5wdXNoKHgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkdXBlcyA9IG5ldyBBcnJheSgpO1xuICAgIHNvdW5kU2Vxcy5tYXAoaSA9PiBpLm1hcChqID0+IGR1cGVzLnB1c2goW2oudG9TdHJpbmcoKSwgai5uYW1lXSkpKTtcbiAgICBjb25zdCBkZWR1cGVzID0gZHVwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgY3Vycikge1xuICAgICAgICBpZiAoYWNjdW11bGF0b3IuZmlsdGVyKHggPT4geFswXSA9PT0gY3VyclswXSkubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnB1c2goY3Vycik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0sIFtdKTtcbiAgICAvLyBmb3IgdmFsaWQgcHJlZGljdGlvbnNcbiAgICBjb25zdCBwcmVkaWN0aW9ucyA9IGRlZHVwZXMuZmlsdGVyKGl0ID0+IHN5bGxhYmxldGFibGVfMS5pc0luU3lsbGFibGVUYWJsZShsZXR0ZXJzLmpvaW4oJycpICsgaXRbMF0pKTtcbiAgICByZXR1cm4gcHJlZGljdGlvbnM7XG59XG5leHBvcnRzLnByZWRpY3QgPSBwcmVkaWN0O1xuLy8gVE9ETzogYWRkIGEgcHJlZGljdCBmdW5jdGlvbiB0byBjb3ZlciB0aG9zZSBza2lwcGVkIHN5bGxhYmxlcyBpbiBiYXNpY1N5bGxhYmxlc1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZGljdGlvbi5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/prediction.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/soundgen.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/soundgen.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalSoundGenerator = exports.syllableCompositions = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction initialConsonant(sg) {\n    if (version2_1.initialConsonantsTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.initialConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction stopFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.stopFinalConsonantsTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.stopFinalConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.stopFinalConsonantsTonal.sounds);\n    }\n    return sg;\n}\nfunction neutralFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.neutralFinalConsonantsTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.stopFinalConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.neutralFinalConsonantsTonal.sounds);\n    }\n    return sg;\n}\nfunction nasalFinalConsonant(sg) {\n    // check out the length of letters like we do in the loop in function vowel\n    if (!sg.matching || sg.letters.length == 0)\n        return sg;\n    if (version2_1.nasalFinalConsonantsTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.nasalFinalConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalFinalConsonantsTonal.sounds);\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    // we need the below line when the preceding initial consonant is not matched\n    if (!sg.matching)\n        return sg;\n    let toBePredicted = true;\n    let matches = 0;\n    for (let i = sg.matchedSounds.length; i < sg.letters.length; i++) {\n        if (version2_1.vowelsTonal.includes(sg.letters[i])) {\n            toBePredicted = true;\n            const sounds = version2_1.tonalPositionalSounds.get(sg.letters[i]);\n            if (sounds) {\n                const s = sounds(version2_1.TonalSoundTags.vowel);\n                matches++;\n                if (s)\n                    sg.matchedSounds.push(s);\n            }\n        }\n        else {\n            toBePredicted = false;\n            if (matches == 0)\n                sg.matching = false;\n            break;\n        }\n    }\n    if (toBePredicted) {\n        if (sg.predictive && sg.letters.length > 0) {\n            sg.predictions.push(version2_1.vowelsTonal.sounds);\n        }\n        sg.matching = true;\n    }\n    return sg;\n}\nfunction materLectionis(sg) {\n    if (version2_1.materLectionisTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.vowel);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction nasalization(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.nasalizationsTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.nasalization);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalizationsTonal.sounds);\n    }\n    return sg;\n}\nfunction freeToneLetter(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.freeToneLettersTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.freeTone);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.freeToneLettersTonal.sounds);\n    }\n    return sg;\n}\nfunction checkedToneLetter(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.checkedToneLettersTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.checkedTone);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length && sg.predictive)\n            sg.predictions.push(version2_1.checkedToneLettersTonal.sounds);\n    }\n    return sg;\n}\nfunction sandhiFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.finalConsonantsBgjklpsTonal.includes(sg.letters[sg.matchedSounds.length]) ||\n        version2_1.finalConsonantsBBggkkllppssTonal.includes(sg.letters[sg.matchedSounds.length])) {\n        const sounds = version2_1.tonalPositionalSounds.get(sg.letters[sg.matchedSounds.length]);\n        if (sounds) {\n            const s = sounds(version2_1.TonalSoundTags.stopFinalConsonant);\n            if (s)\n                sg.matchedSounds.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedSounds.length &&\n            sg.predictive &&\n            sg.predictSandhiFinalConsonant) {\n            sg.predictions.push(version2_1.finalConsonantsBgjklpsTonal.sounds);\n            sg.predictions.push(version2_1.finalConsonantsBBggkkllppssTonal.sounds);\n        }\n    }\n    return sg;\n}\n// common syllables\nconst scV = unit_1.sgPipe(vowel);\nconst scM = unit_1.sgPipe(materLectionis);\nconst scVT = unit_1.sgPipe(vowel, freeToneLetter);\nconst scMT = unit_1.sgPipe(materLectionis, freeToneLetter);\nconst scMC = unit_1.sgPipe(materLectionis, neutralFinalConsonant);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scVC1 = unit_1.sgPipe(vowel, stopFinalConsonant);\nconst scVC2 = unit_1.sgPipe(vowel, nasalFinalConsonant);\nconst scVCT1 = unit_1.sgPipe(vowel, stopFinalConsonant, checkedToneLetter);\nconst scVCT2 = unit_1.sgPipe(vowel, nasalFinalConsonant, freeToneLetter);\nconst scCVT = unit_1.sgPipe(initialConsonant, vowel, freeToneLetter);\nconst scCVC1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant);\nconst scCVC2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant);\nconst scCVCT1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant, checkedToneLetter);\nconst scCVCT2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, freeToneLetter);\nconst scCVCC = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant);\nconst scVCCT = unit_1.sgPipe(vowel, nasalFinalConsonant, neutralFinalConsonant, checkedToneLetter);\n// consonant syllables\nconst scCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant);\nconst scCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, freeToneLetter);\nconst scCCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant);\nconst scCCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant, checkedToneLetter);\n// nasalization syllables\nconst scVN = unit_1.sgPipe(vowel, nasalization);\nconst scVNT = unit_1.sgPipe(vowel, nasalization, freeToneLetter);\nconst scVNC = unit_1.sgPipe(vowel, nasalization, neutralFinalConsonant);\nconst scCVN = unit_1.sgPipe(initialConsonant, vowel, nasalization);\nconst scCVNT = unit_1.sgPipe(initialConsonant, vowel, nasalization, freeToneLetter);\nconst scCVNC = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant);\nconst scCVNCT = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant, checkedToneLetter);\n// sandhi syllables\nconst scVC3 = unit_1.sgPipe(vowel, sandhiFinalConsonant);\nconst scVCT3 = unit_1.sgPipe(vowel, sandhiFinalConsonant, checkedToneLetter);\nconst scCVC3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant);\nconst scCVCT3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant, checkedToneLetter);\nconst scCVCCT = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant, checkedToneLetter);\n// prettier-ignore\nexports.syllableCompositions = [\n    // syllable compositions or patterns\n    scV, scM, scVT, scMT, scMC, scCV, scVC1, scVC2, scVCT1, scVCT2, scCVT, scCVC1,\n    scCVC2, scCVCT1, scCVCT2, scCVCC, scVCCT,\n    scCC, scCCT, scCCC, scCCCT,\n    scVN, scVNT, scVNC, scCVN, scCVNT, scCVNC, scCVNCT,\n    scVC3, scVCT3, scCVC3, scCVCT3, scCVCCT,\n];\nclass TonalSoundGenerator {\n    isStopFinal(str) {\n        if (version2_1.stopFinalConsonantsTonal.includes(str))\n            return true;\n        return false;\n    }\n    genChecked(ltrs) {\n        /** if the 3rd and 5th checked tones would be changed to -ppx, -ttx, -kkx,\n         *  -hhx, -ppw, -ttw, -kkw, and -hhw, edit the rules in combiningRules\n         */\n        const tos = collections_1.combiningRules.get(ltrs[ltrs.length - 1]);\n        let strs = new Array();\n        strs.push(ltrs);\n        // console.debug(tos);\n        if (tos) {\n            for (let i in tos) {\n                let syl = new Array();\n                Object.assign(syl, ltrs);\n                syl.push(version2_1.lowerLettersTonal.get(tos[i]).literal);\n                strs.push(syl);\n            }\n        }\n        return strs;\n    }\n    generate(letters) {\n        let strs = new Array();\n        const sequences = new Array(); // to be returned\n        if (this.isStopFinal(letters[letters.length - 1])) {\n            strs = this.genChecked(letters);\n        }\n        else {\n            strs.push(letters);\n        }\n        for (let i in strs) {\n            // generates all needed sounds to be processed\n            for (let j = 0; j < exports.syllableCompositions.length; j++) {\n                let sg = new unit_1.SoundGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = exports.syllableCompositions[j](sg);\n                if (sg.letters.length == sg.matchedSounds.length &&\n                    sg.matching == true) {\n                    sequences.push(sg.matchedSounds);\n                    break;\n                }\n            }\n        }\n        // console.log(letters, sequences);\n        return sequences;\n    }\n}\nexports.TonalSoundGenerator = TonalSoundGenerator;\n//# sourceMappingURL=soundgen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/soundgen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/syllabletable.js":
/*!*******************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/syllabletable.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.basicSyllables = exports.isInSyllableTable = void 0;\nfunction isInSyllableTable(syllable) {\n    if (exports.basicSyllables.includes(syllable))\n        return true;\n    if (extraSyllables.includes(syllable))\n        return true;\n    if (syllabicHeadwords.includes(syllable))\n        return true;\n    return false;\n}\nexports.isInSyllableTable = isInSyllableTable;\n// prettier-ignore\nconst toBeVerified = [\n    'baih', 'buhh', 'burhh',\n    'cett', 'changxx', 'chua', 'chiauhh', 'chiuh', 'chiunnh', 'ciauhh', 'cuaihh',\n    'tom',\n    'giakk', 'chueh',\n    'hioh', 'huangz',\n    'iakk',\n    'jex', 'jek', 'jing', 'jih', 'jirnx', 'jirtt', 'juany',\n    'khanx', 'khangx', 'kirinnx', 'kuinnx',\n    'khihh', 'khiauhh', 'khomz', 'khop', 'khirh', 'khuannx',\n    'len', 'liakk', 'lirey',\n    'mah',\n    'na', 'niw', 'nuaiw',\n    'ngihh',\n    'uehh',\n    'penw',\n    'phitt',\n    'kanh', 'kih', 'kngh', 'kuaix', 'kuaiz', 'kuakk', 'kuangz', 'kuatt',\n    'sauhh', 'sokk',\n    'thuehh', 'thom', 'thomz', 'tiangy', 'tionny',\n    'pann', 'pihh', 'pirt',\n    // syllabic headwords\n    'luai',\n    'tirinn',\n];\n// prettier-ignore\nconst addonSyllables = [\n    'ainn', 'ainny', 'ainnx', 'anny', 'aunn', 'aunny', 'aunnz',\n    'borh', 'borhh', 'borx', 'bory', 'borz',\n    'cainn', 'cainny', 'cainnw', 'cainnx', 'cannh', 'cennh', 'cennx', 'cennz', 'cennhh', 'cor', 'corh', 'corw', 'corx', 'cory', 'corz', 'cinnw', 'cinnh', 'cinnz', 'cir', 'cirinn', 'cirinny', 'cirw', 'ciry', 'cirx', 'cuanny', 'cuannw', 'cuannz', 'cuinn', 'cuinny', 'cuinnw',\n    'chainn', 'chainnw', 'chainnx', 'channw', 'channx', 'chennx', 'chor', 'choreh', 'chorehh', 'chorew', 'chorex', 'chorez', 'chorh', 'chorhh', 'chorw', 'chorz', 'chir', 'chirinny', 'chirinnx', 'chirm', 'chirw', 'chiry', 'chirx', 'chirz', 'chiunnx', 'chm', 'chuinn', 'chuinny', 'chuinnw', 'chuinnx', 'chuinnz',\n    'tainny', 'tainnw', 'tainnx', 'tainnz', 'tainnhh', 'tenny', 'tennx', 'torex', 'torey', 'torez', 'torh', 'torhh', 'torw', 'tory', 'torz', 'tiann', 'tiannw', 'tinnh', 'tinnw', 'tir', 'tirinnw', 'tirinnz', 'tirw', 'tirx', 'tirz', 'tuanny', 'tuinny', 'tuinnw', 'tuinnx', 'tuinnz',\n    'enny', 'ennh', 'ennz', 'ennhh', 'or', 'ore', 'orehh', 'orex', 'orey', 'orez', 'orh', 'orw', 'orx', 'orz',\n    'goreh', 'gorehh', 'gorhh', 'gorex', 'gorez', 'gorx', 'giauh', 'girnx', 'girnz', 'girt', 'girx', 'giry', 'girz',\n    'hainny', 'hainnh', 'hainnz', 'hann', 'hannhh', 'henny', 'hennz', 'hennhh', 'hor', 'horez', 'horw', 'horx', 'hory', 'horz', 'haunn', 'haunny', 'haunnw', 'haunnh', 'haunnx', 'haunnhh', 'hinnh', 'hinnx', 'hir', 'hirinnx', 'hirinnz', 'hirny', 'hirnz', 'hirw', 'hirx', 'hiry', 'hirtt', 'hirk', 'hiunny', 'hiunnw', 'hiunnz', 'hmhh', 'hmz', 'hngw', 'huainnh', 'huannw', 'honnz', 'hop', 'huinn', 'huinnh', 'huinnx', 'huinnz',\n    'ionn', 'innh', 'innhh', 'ir', 'irinnx', 'irn', 'irny', 'irpp', 'irw', 'irx', 'iry', 'irz',\n    'jiaunny', 'jiaunnw', 'jiaunnx', 'jinny', 'jiry', 'jirx', 'jorx',\n    'khannx', 'khainnh', 'khainnw', 'khaunnhh', 'khennh', 'khennx', 'khor', 'khore', 'khoreh', 'khorew', 'khorw', 'khorh', 'khorx', 'khiann', 'khiannw', 'khinn', 'khir', 'khirnx', 'khirny', 'khirw', 'khngz', 'khuainn', 'khuainnw', 'khonny', 'khuinnw',\n    'lorehh', 'lorex', 'lorh', 'lorx', 'liry', 'lirx', 'lirz', 'lngh',\n    'maix', 'mih', 'mihh', 'mng', 'muaix', 'muaiz', 'muex', 'muez', 'mui', 'muiz',\n    'naih', 'naix', 'ney', 'new', 'nez', 'nehh', 'niauw', 'niauh', 'niaw', 'nirix', 'niriz', 'niu', 'nox', 'nui', 'nuiy', 'nuiw', 'nuix', 'nuiz',\n    'ngai', 'ngaiy', 'ngauy', 'ngauh', 'ngauhh', 'ngaw', 'ngaz', 'nge', 'ngh', 'nghh', 'ngiahh', 'ngiriy', 'ngiuy', 'ngiux', 'ngiz', 'ngueh', 'nguehh',\n    'uainn', 'uainnh', 'uainnz', 'uainnhh', 'uannx',\n    'phainn', 'phennw', 'phor', 'phorhh', 'phorw', 'phorx', 'phorz', 'phinny', 'phinnhh', 'phng', 'phngy', 'phngw', 'phngz', 'phnghh', 'phuannx', 'phonn', 'phuinn', 'phuinnw', 'phuinnx',\n    'kainny', 'kainnw', 'kainnz', 'kannhh', 'kore', 'koreh', 'korew', 'korex', 'korey', 'korez', 'korh', 'korw', 'kory', 'kiaunnhh', 'kinny', 'kinnh', 'kinnhh', 'kir', 'kirinn', 'kirinny', 'kirn', 'kirnw', 'kirnz', 'kirw', 'kirx', 'kiry', 'kirz', 'kiunnx', 'kiunnz', 'knghh', 'kuainnw', 'kuainnx', 'kuainnhh', 'kuannw', 'kuenny', 'konnz', 'kuinn', 'kuinny', 'kuinnw',\n    'sainn', 'sanny', 'sannw', 'sannx', 'sore', 'sorew', 'sorew', 'sorh', 'sorhh', 'sorx', 'sorw', 'sorz', 'sinnx', 'sinnhh', 'sir', 'sirinn', 'sirm', 'sirp', 'sirw', 'sirx', 'siry', 'sirz', 'sm', 'smw', 'smh', 'snghh', 'suainn', 'suainnh', 'suainnx', 'suainnhh', 'suenn', 'suenny', 'suennw', 'suinn', 'suinny', 'suinnw',\n    'thainnw', 'thainnz', 'thannx', 'thannz', 'thenn', 'thor', 'thore', 'thorehh', 'thorew', 'thorhh', 'thorw', 'thinnw', 'thinnx', 'thirx', 'thiry', 'thiunny', 'thuannx', 'thuinnw', 'thuinnx', 'thuinnz',\n    'uihh', 'uinn', 'uinny', 'uinnx', 'uinnz',\n    'painny', 'painnx', 'painnz', 'por', 'pory', 'porw', 'porx', 'porz', 'pinnx', 'pngx', 'puinn', 'puinny', 'puinnx', 'puinnz',\n];\n// prettier-ignore\nconst syllabicHeadwords = [\n    // TODO: some syllabic forms may not be found in Taiwanese but present in dictionary as headwords. need to further check\n    'bam', 'bek', 'biet', 'bit', 'biu', 'bua', 'buat', 'bor',\n    'cua', 'cuai', 'cuang', 'cuat', 'com', 'cor', 'core',\n    'chap', 'chiak', 'chio', 'chir', 'chiri', 'chuai', 'chuang', 'chue', 'chom', 'chor', 'chore',\n    'tiang', 'tim', 'tio', 'tir', 'tiri', 'tiur', 'tua', 'tue', 'tom', 'tor', 'tore', 'tut',\n    'er',\n    'ga', 'gai', 'gak', 'gang', 'gap', 'ge', 'gir', 'go', 'gue', 'gok', 'guat', 'gong', 'gor', 'gore', 'gur',\n    'hiap', 'hio', 'hir', 'hiri', 'hirn', 'hiur', 'huai', 'huang', 'hop', 'hor', 'hore',\n    'iak', 'ionn', 'ir', 'iri', 'irn',\n    'je', 'jek', 'jing', 'jiak', 'jiap', 'jien', 'jiet', 'jin', 'jir', 'jit', 'jiu', 'jiur', 'jo', 'jua', 'jue', 'jor', 'jun', 'jur',\n    'khir', 'khor',\n    'lai', 'lat', 'lia', 'liak', 'liet', 'lir', 'lo', 'lua', 'luat', 'lue', 'lop', 'lom', 'lor', 'lore',\n    'm', 'mia', 'min', 'muai', 'mue', 'mu',\n    'nio', 'no', 'nui',\n    'nga',\n    'or', 'ore',\n    'ken', 'ket', 'kiak', 'kiang', 'kio', 'kip', 'kir', 'kiri', 'kirn', 'kit', 'kiur', 'kor',\n    'ua', 'uak',\n    'phor',\n    'sir', 'siri', 'sop', 'sor', 'sore',\n    'tha', 'thia', 'thor',\n    'pia', 'piang', 'piri', 'pua', 'por',\n];\n// prettier-ignore\nconst extraSyllables = [\n    'aih',\n    'buaix', 'buaiw', 'bueh', 'burh',\n    'cuaih',\n    'chuainn', 'chuatt',\n    'tngh',\n    'en',\n    'geh', 'gehh', 'gih', 'giuh', 'gimw', 'gueh', 'gunx', 'guny',\n    'homz', 'huainn',\n    'jip',\n    'khiaih', 'khuih',\n    'laih', 'langh', 'lip', 'lih', 'lit', 'litt', 'luaih', 'luaiz', 'lueh',\n    'mnghh',\n    'n',\n    'ngh',\n    'oh', 'op',\n    'sangh', 'sennh', 'sienh', 'sinnh',\n    'tenz',\n];\n// prettier-ignore\nexports.basicSyllables = [\n    'a', 'ay', 'az', 'ah', 'ahh', 'ai', 'aiy', 'aiw', 'ainnz', 'ak', 'am',\n    'amy', 'amw', 'amx', 'amz', 'an', 'any', 'anw', 'anx', 'anz', 'ang',\n    'angw', 'angx', 'angz', 'annw', 'annx', 'annz', 'ap', 'app', 'at', 'au',\n    'auy', 'auw', 'aux', 'auz',\n    'ba', 'bax', 'baz', 'bah', 'bai', 'baiy', 'baix', 'bak', 'bakk', 'ban',\n    'bany', 'banx', 'banz', 'bangy', 'bangw', 'bangx', 'bangz', 'bat', 'batt',\n    'bauy', 'bauz', 'bey', 'bex', 'bez', 'beh', 'behh', 'biy', 'bix', 'biz',\n    'bieny', 'bienx', 'bienz', 'biett', 'biauy', 'biaux', 'biauz', 'bih',\n    'bihh', 'bekk', 'biny', 'binx', 'binz', 'bingy', 'bingx', 'bingz', 'biury',\n    'biurx', 'biurz', 'bitt', 'biuz', 'bury', 'burx', 'burz', 'bok', 'bokk',\n    'bong', 'bongy', 'bongw', 'bongx', 'bongz', 'boy', 'box', 'boz', 'buy',\n    'bux', 'buz', 'buax', 'buah', 'buahh', 'buany', 'buatt', 'buey', 'buex',\n    'buez', 'buehh', 'bui', 'buny', 'bunw', 'bunx', 'bunz', 'but', 'butt',\n    'ca', 'cay', 'cax', 'caz', 'cah', 'cai', 'caiy', 'caiw', 'caix', 'caiz',\n    'cak', 'cakk', 'cam', 'camy', 'camw', 'camx', 'can', 'canw', 'canx',\n    'cang', 'cangy', 'cangw', 'canny', 'cannz', 'cap', 'capp', 'cat', 'catt',\n    'cau', 'cauy', 'cauw', 'cauhh', 'ce', 'cey', 'cew', 'cex', 'cez', 'ceh',\n    'cenn', 'cenny', 'cennw', 'ci', 'ciy', 'ciw', 'cix', 'ciz', 'cia', 'ciax',\n    'ciah', 'ciakk', 'ciam', 'ciamy', 'cien', 'cieny', 'cienx', 'ciangy',\n    'ciangw', 'ciangx', 'ciangz', 'ciann', 'cianny', 'ciannw', 'ciannx', 'ciap',\n    'ciet', 'ciau', 'ciauw', 'ciaux', 'cih', 'cihh', 'cek', 'cekk', 'cim',\n    'cimy', 'cin', 'cinw', 'cing', 'cingy', 'cingw', 'cingx', 'cingz', 'cinn',\n    'cinny', 'cinnx', 'ciur', 'ciurw', 'ciurz', 'ciurh', 'ciurhh', 'ciok',\n    'ciokk', 'ciong', 'ciongw', 'cip', 'cit', 'ciu', 'ciuy', 'ciux', 'ciuz',\n    'ciunn', 'ciunny', 'ciunnw', 'ciunnx', 'ciunnz', 'cng', 'cngy', 'cngw',\n    'cngx', 'cngh', 'cnghh', 'cur', 'cury', 'curw', 'curh', 'cok', 'cokk',\n    'cong', 'congy', 'congw', 'congx', 'co', 'coy', 'cow', 'cu', 'cuy', 'cuw',\n    'cuz', 'cuaw', 'cuaz', 'cuah', 'cuahh', 'cuan', 'cuan', 'cuanw', 'cuanx',\n    'cuangw', 'cuann', 'cuannw', 'cue', 'cuey', 'cuex', 'cuez', 'cuh', 'cuhh',\n    'cui', 'cuiy', 'cuiw', 'cun', 'cuny', 'cunw', 'cunx', 'cunz', 'cut',\n    'cha', 'chay', 'chaw', 'chah', 'chahh', 'chai', 'chaiy', 'chaiw', 'chaix',\n    'chaiz', 'chainny', 'chak', 'chakk', 'cham', 'chamy', 'chamw', 'chamz',\n    'chan', 'chany', 'chanw', 'chanx', 'chanz', 'chang', 'changy', 'changw',\n    'changx', 'channy', 'channz', 'chapp', 'chat', 'chatt', 'chau', 'chauy',\n    'chauw', 'chaux', 'chauz', 'che', 'chey', 'chew', 'chex', 'chez', 'cheh',\n    'chehh', 'chenn', 'chenny', 'chennw', 'chennz', 'chi', 'chiy', 'chiw',\n    'chix', 'chiz', 'chia', 'chiay', 'chiaw', 'chiaz', 'chiah', 'chiahh',\n    'chiam', 'chiamw', 'chiamx', 'chiamz', 'chien', 'chieny', 'chienw',\n    'chienx', 'chienz', 'chiang', 'chiangy', 'chiangw', 'chiann', 'chianny',\n    'chiannw', 'chiannx', 'chiannz', 'chiap', 'chiapp', 'chiet', 'chiett',\n    'chiau', 'chiauy', 'chiauw', 'chiaux', 'chih', 'chihh', 'chek', 'chekk',\n    'chim', 'chimy', 'chimw', 'chimx', 'chin', 'chiny', 'chinw', 'chinx',\n    'chinz', 'ching', 'chingy', 'chingw', 'chingx', 'chingz', 'chinn',\n    'chinny', 'chinnw', 'chinnx', 'chinnz', 'chiur', 'chiury', 'chiurw',\n    'chiurh', 'chiurhh', 'chiok', 'chiong', 'chiongy', 'chiongw', 'chiongx',\n    'chiongz', 'chip', 'chipp', 'chit', 'chitt', 'chiu', 'chiuy', 'chiuw',\n    'chiuz', 'chiunn', 'chiunny', 'chiunnw', 'chiunnz', 'chng', 'chngy',\n    'chngw', 'chngx', 'chngz', 'chur', 'chury', 'churw', 'churx', 'churz',\n    'churh', 'chok', 'chokk', 'chong', 'chongy', 'chongw', 'chongx', 'chongz',\n    'cho', 'choy', 'choz', 'chu', 'chuy', 'chuw', 'chux', 'chuxz', 'chuay',\n    'chuax', 'chuaz', 'chuah', 'chuahh', 'chuainnz', 'chuan', 'chuany',\n    'chuanw', 'chuanx', 'chuanz', 'chuann', 'chuanny', 'chuannw', 'chuannx',\n    'chuannz', 'chuat', 'chuew', 'chuez', 'chuh', 'chui', 'chuiy', 'chuiw',\n    'chuix', 'chuiz', 'chun', 'chuny', 'chunw', 'chunx', 'chunz', 'chut',\n    'chutt',\n    'e', 'ey', 'ew', 'ex', 'ez', 'eh', 'ehh', 'enn', 'ennx',\n    'ek', 'ekk',\n    'gax', 'gaz', 'gaix', 'gaiz', 'gakk', 'gamy', 'gamx', 'gamz', 'gany',\n    'ganw', 'ganx', 'ganz', 'gangz', 'gaux', 'gew', 'gex', 'gez', 'giy', 'gix',\n    'giz', 'giax', 'giah', 'giahh', 'giamy', 'giamx', 'giamz', 'gieny', 'gienw',\n    'gienx', 'gienz', 'giang', 'giangw', 'giangz', 'giap', 'giapp', 'giet',\n    'giett', 'giaux', 'gekk', 'gimy', 'gimx', 'gimz', 'giny', 'ginx', 'ginz',\n    'gingy', 'gingx', 'giury', 'giurx', 'giurhh', 'giok', 'giokk', 'giongy',\n    'giuy', 'giux', 'gurx', 'gurz', 'gokk', 'gongx', 'gongz', 'gox', 'goz',\n    'guy', 'gux', 'guz', 'guay', 'guaz', 'guany', 'guanx', 'guanz', 'guatt',\n    'guez', 'guehh', 'guix', 'guiz',\n    'ha', 'haw', 'hax', 'haz', 'hah', 'hahh', 'hai', 'haiy', 'haix', 'haiz',\n    'hainn', 'hainnw', 'hainnx', 'hak', 'hakk', 'ham', 'hamy', 'hamw', 'hamx',\n    'hamz', 'han', 'hany', 'hanw', 'hanx', 'hanz', 'hang', 'hangw', 'hangx',\n    'hangz', 'hanny', 'hannx', 'hannz', 'hannh', 'hap', 'happ', 'hat', 'hatt',\n    'hau', 'hauy', 'hauw', 'haux', 'hauz', 'he', 'hey', 'hew', 'hex', 'hez',\n    'heh', 'hennw', 'hennx', 'hennh', 'hi', 'hiy', 'hiw', 'hix', 'hia', 'hiaz',\n    'hiah', 'hiahh', 'hiam', 'hiamy', 'hiamw', 'hiamx', 'hien', 'hieny',\n    'hienw', 'hienx', 'hienz', 'hiang', 'hiangy', 'hiangw', 'hiann', 'hianny',\n    'hiannw', 'hiannx', 'hiannz', 'hiannh', 'hiapp', 'hiet', 'hiett', 'hiau',\n    'hiauy', 'hiaux', 'hiauh', 'hek', 'hekk', 'him', 'himx', 'hin', 'hinx',\n    'hinz', 'hing', 'hingw', 'hingx', 'hingz', 'hinn', 'hinnw', 'hinnz',\n    'hiurx', 'hiurz', 'hiurh', 'hiurhh', 'hiok', 'hiong', 'hiongy', 'hiongw',\n    'hiongx', 'hip', 'hit', 'hitt', 'hiu', 'hiuy', 'hiuw', 'hiux', 'hiunn',\n    'hiunnhh', 'hmy', 'hmx', 'hmh', 'hmhh', 'hng', 'hngy', 'hngx', 'hngz',\n    'hngh', 'hnghh', 'hury', 'hurx', 'hurz', 'hurhh', 'hok', 'hokk', 'hong',\n    'hongy', 'hongw', 'hongx', 'hongz', 'honn', 'honny', 'honnw', 'honnh', 'ho',\n    'hoy', 'how', 'hox', 'hoz', 'hu', 'huy', 'huw', 'hux', 'huz', 'hua', 'huaw',\n    'huax', 'huaz', 'huah', 'huahh', 'huaix', 'huaiz', 'huainnx', 'huan',\n    'huany', 'huanw', 'huanx', 'huanz', 'huann', 'huanny', 'huannx', 'huannz',\n    'huat', 'huatt', 'hue', 'huey', 'huew', 'huex', 'huez', 'hueh', 'hui',\n    'huiy', 'huiw', 'huix', 'huiz', 'hun', 'huny', 'hunw', 'hunx', 'hunz',\n    'hut', 'hutt',\n    'i', 'iy', 'iw', 'ix', 'iz', 'ia', 'iay', 'iaw', 'iax', 'iaz', 'iah',\n    'iahh', 'iam', 'iamy', 'iamx', 'iamz', 'ien', 'ieny', 'ienw', 'ienx',\n    'iang', 'iangz', 'iann', 'ianny', 'iannw', 'iannx', 'iannz', 'iap', 'iapp',\n    'iet', 'iett', 'iau', 'iauy', 'iauw', 'iaux', 'iauz', 'iaunn', 'im', 'imy',\n    'imw', 'imx', 'in', 'iny', 'inw', 'inx', 'inz', 'ing', 'ingy', 'ingw',\n    'ingx', 'ingz', 'inn', 'inny', 'innw', 'innx', 'innz', 'iur', 'iury',\n    'iurx', 'iurh', 'iurhh', 'iok', 'iokk', 'iong', 'iongy', 'iongw', 'iongx',\n    'iongz', 'ip', 'it', 'itt', 'iu', 'iuy', 'iuw', 'iux', 'iuz', 'iunn',\n    'iunny', 'iunnx', 'iunnz',\n    'jiy', 'jix', 'jiz', 'jia', 'jiay', 'jiamy', 'jienx', 'jiangy', 'jiapp',\n    'jiett', 'jiauy', 'jiauw', 'jiaux', 'jimy', 'jimx', 'jimz', 'jinx', 'jinz',\n    'jiurz', 'jiok', 'jiokk', 'jiongy', 'jiongx', 'jiongz', 'jipp', 'jitt',\n    'jiux', 'juy', 'jux', 'juz', 'juahh', 'juex', 'juez', 'junz',\n    'ka', 'kay', 'kaw', 'kaz', 'kah', 'kai', 'kaiy', 'kaiw', 'kainn', 'kainnx',\n    'kak', 'kakk', 'kam', 'kamy', 'kamw', 'kamx', 'kan', 'kany', 'kanw', 'kang',\n    'kangy', 'kangw', 'kangx', 'kangz', 'kann', 'kanny', 'kannw', 'kannx',\n    'kap', 'kat', 'kau', 'kauy', 'kauw', 'kaux', 'kauz', 'kauh', 'ke', 'key',\n    'kew', 'kez', 'keh', 'kehh', 'kenn', 'kenny', 'kennw', 'ki', 'kiy', 'kiw',\n    'kix', 'kiz', 'kia', 'kiaw', 'kiaz', 'kiahh', 'kiam', 'kiamy', 'kiamw',\n    'kiamx', 'kien', 'kieny', 'kienw', 'kienz', 'kiann', 'kianny', 'kiannw',\n    'kiannx', 'kiannz', 'kiap', 'kiet', 'kiett', 'kiau', 'kiauy', 'kiaux',\n    'kiauz', 'kek', 'kekk', 'kim', 'kimy', 'kimw', 'kimz', 'kin', 'kiny',\n    'kinw', 'kinz', 'king', 'kingy', 'kingw', 'kingx', 'kingz', 'kinn', 'kinnw',\n    'kinnx', 'kiurw', 'kiurx', 'kiurz', 'kiurh', 'kiok', 'kiokk', 'kiong',\n    'kiongy', 'kiongx', 'kiongz', 'kip', 'kipp', 'kitt', 'kiu', 'kiuy', 'kiuw',\n    'kiux', 'kiuz', 'kiunn', 'kng', 'kngy', 'kngw', 'kur', 'kury', 'kurw',\n    'kurx', 'kurz', 'kurh', 'kok', 'kokk', 'kong', 'kongy', 'kongw', 'kongx',\n    'konnx', 'ko', 'koy', 'kow', 'kox', 'koz', 'ku', 'kuy', 'kuw', 'kuz', 'kua',\n    'kuay', 'kuaw', 'kuaz', 'kuah', 'kuai', 'kuaiy', 'kuaiw', 'kuainn',\n    'kuainny', 'kuainnz', 'kuan', 'kuany', 'kuanw', 'kuanx', 'kuanz', 'kuann',\n    'kuanny', 'kuannx', 'kuannz', 'kuat', 'kue', 'kuey', 'kuew', 'kueh', 'kui',\n    'kuiy', 'kuiw', 'kuix', 'kuiz', 'kun', 'kuny', 'kunw', 'kunx', 'kunz',\n    'kut', 'kutt',\n    'kha', 'khay', 'khaw', 'khah', 'khahh', 'khai', 'khaiy', 'khaiw', 'khainn',\n    'khainny', 'khak', 'khakk', 'kham', 'khamy', 'khamw', 'khan', 'khanw',\n    'khang', 'khangy', 'khangw', 'khann', 'khap', 'khapp', 'khat', 'khau',\n    'khauy', 'khauw', 'khe', 'khey', 'khew', 'khex', 'kheh', 'khehh', 'khenn',\n    'khennhh', 'khi', 'khiy', 'khiw', 'khix', 'khiz', 'khia', 'khiax', 'khiaz',\n    'khiah', 'khiakk', 'khiam', 'khiamw', 'khiamx', 'khiamz', 'khien', 'khieny',\n    'khienw', 'khienx', 'khiang', 'khiangw', 'khiap', 'khiet', 'khiett',\n    'khiau', 'khiauy', 'khiauw', 'khiauh', 'khih', 'khek', 'khim', 'khimy',\n    'khimx', 'khin', 'khiny', 'khinx', 'khing', 'khingy', 'khingw', 'khingx',\n    'khingz', 'khinnx', 'khiury', 'khiurw', 'khiurh', 'khiok', 'khiong',\n    'khiongy', 'khiongx', 'khip', 'khipp', 'khit', 'khitt', 'khiu', 'khiuy',\n    'khiux', 'khiuz', 'khiunn', 'khiunnz', 'khng', 'khngw', 'khur', 'khury',\n    'khurw', 'khurx', 'khok', 'khokk', 'khong', 'khongy', 'khongw', 'khongz',\n    'kho', 'khoy', 'khow', 'khu', 'khux', 'khuz', 'khua', 'khuay', 'khuaw',\n    'khuah', 'khuaiw', 'khuan', 'khuany', 'khuanw', 'khuanx', 'khuann',\n    'khuanny', 'khuannw', 'khuat', 'khue', 'khuew', 'khuex', 'khueh', 'khuh',\n    'khui', 'khuiy', 'khuiw', 'khun', 'khuny', 'khunw', 'khunx', 'khut',\n    'khutt',\n    'la', 'lax', 'laz', 'lah', 'lahh', 'laix', 'laiz', 'lak', 'lakk', 'lam',\n    'lamy', 'lamw', 'lamx', 'lamz', 'lan', 'lany', 'lanx', 'lanz', 'lang',\n    'langy', 'langw', 'langx', 'langz', 'lap', 'lapp', 'latt', 'lauy', 'lauw',\n    'laux', 'lauz', 'lauhh', 'le', 'ley', 'lew', 'lex', 'lez', 'leh', 'lehh',\n    'li', 'liy', 'liw', 'lix', 'liz', 'liah', 'liahh', 'liam', 'liamy', 'liamw',\n    'liamx', 'liamz', 'lien', 'lieny', 'lienx', 'lienz', 'liang', 'liangy',\n    'liangx', 'liangz', 'liap', 'liapp', 'liett', 'liauy', 'liauw', 'liaux',\n    'liauz', 'lihh', 'lek', 'lekk', 'lim', 'limy', 'limx', 'limz', 'lin',\n    'liny', 'linw', 'linx', 'limz', 'ling', 'lingy', 'lingw', 'lingx', 'lingz',\n    'liury', 'liurx', 'liurz', 'liurhh', 'liok', 'liokk', 'liongy', 'liongw',\n    'liongx', 'liongz', 'lipp', 'liu', 'liuy', 'liuw', 'liux', 'liuz', 'lng',\n    'lngy', 'lngw', 'lngx', 'lngz', 'lur', 'lury', 'lurw', 'lurx', 'lurz',\n    'lurh', 'lurhh', 'lok', 'lokk', 'long', 'longy', 'longw', 'longx', 'longz',\n    'loy', 'lox', 'loz', 'lu', 'luy', 'luw', 'lux', 'luz', 'luax', 'luaz',\n    'luah', 'luahh', 'luany', 'luanx', 'luanz', 'luatt', 'luex', 'luez', 'lui',\n    'luiy', 'luiw', 'luix', 'luiz', 'lun', 'luny', 'lunx', 'lunz', 'lut',\n    'lutt',\n    'my', 'mx', 'mz', 'ma', 'may', 'maw', 'max', 'maz', 'mai', 'maiy', 'maiw',\n    'maiz', 'mau', 'maux', 'mauz', 'mauh', 'me', 'mey', 'mex', 'mez', 'meh',\n    'mehh', 'mi', 'miy', 'mix', 'miz', 'miax', 'miaz', 'miauz', 'mih', 'mihh',\n    'mngy', 'mngx', 'mngz', 'mo', 'moy', 'mox', 'moz', 'moh', 'mohh', 'mua',\n    'muay', 'muax', 'muaz', 'muiy', 'muix',\n    'nay', 'naw', 'nax', 'naz', 'nah', 'nai', 'naiy', 'naiz', 'nauy', 'nauz',\n    'nauh', 'ne', 'nex', 'neh', 'ni', 'niy', 'nix', 'niz', 'niay', 'niax',\n    'niaz', 'niau', 'niauy', 'nih', 'niuy', 'niux', 'niuz', 'noy', 'noz',\n    'nuay', 'nuaw', 'nuax', 'nuaz',\n    'ng', 'ngy', 'ngw', 'ngx', 'ngz', 'ngay', 'ngaiz', 'ngaux', 'ngauz', 'ngey',\n    'ngez', 'ngeh', 'ngehh', 'ngiax', 'ngiau', 'ngiauy', 'ngiauh', 'ngiauhh',\n    'ngoy', 'ngox', 'ngoz',\n    'o', 'oy', 'ox', 'oz', 'ok', 'om', 'omz', 'ong', 'ongy', 'ongx', 'ongz',\n    'onn', 'onnw',\n    'pa', 'pay', 'paw', 'pax', 'paz', 'pah', 'pai', 'paiy', 'paiw', 'paix',\n    'paiz', 'pak', 'pakk', 'pan', 'pany', 'panx', 'panz', 'pang', 'pangy',\n    'pangw', 'pangx', 'pat', 'patt', 'pau', 'pauy', 'paux', 'pauz', 'pe', 'pey',\n    'pew', 'pex', 'pez', 'peh', 'pehh', 'penn', 'pennw', 'pennx', 'pennz', 'pi',\n    'piy', 'piw', 'pix', 'piz', 'piah', 'piak', 'piakk', 'pien', 'pieny',\n    'pienw', 'pienz', 'piangw', 'piangz', 'piann', 'pianny', 'piannw', 'piannx',\n    'piet', 'piett', 'piau', 'piauy', 'pih', 'pek', 'pekk', 'pin', 'piny',\n    'pinw', 'pinx', 'ping', 'pingy', 'pingw', 'pingx', 'pingz', 'pinn', 'pinny',\n    'pinnw', 'pinnz', 'piur', 'piury', 'piurz', 'pit', 'pitt', 'piu', 'png',\n    'pngy', 'pngz', 'pur', 'pury', 'purw', 'purx', 'purz', 'purh', 'purhh',\n    'pok', 'pokk', 'pongy', 'pongw', 'pongx', 'pongz', 'po', 'poy', 'pow',\n    'pox', 'poz', 'pu', 'puw', 'pux', 'puz', 'puaw', 'puah', 'puahh',\n    'puan', 'puanw', 'puanx', 'puanz', 'puann', 'puanny', 'puannw', 'puannx',\n    'puannz', 'puat', 'puatt', 'pue', 'puey', 'puew', 'puex', 'puez', 'pueh',\n    'puehh', 'puh', 'pui', 'puix', 'puiz', 'pun', 'puny', 'punw', 'punx',\n    'punz', 'put', 'putt',\n    'pha', 'phaw', 'phaz', 'phah', 'phaiw', 'phainny', 'phainnz', 'phak',\n    'phakk', 'phan', 'phan', 'phang', 'phangy', 'phangw', 'phangx', 'phangz',\n    'phannw', 'phannz', 'phau', 'phauy', 'phauw', 'phauz', 'phauhh', 'phe',\n    'phey', 'phew', 'phez', 'phenn', 'phennx', 'phennz', 'phi', 'phiy', 'phiw',\n    'phix', 'phiz', 'phiah', 'phiahh', 'phiak', 'phiakk', 'phien', 'phienw',\n    'phienx', 'phiang', 'phiangz', 'phiann', 'phianny', 'phiannx', 'phiet',\n    'phiau', 'phiauw', 'phiaux', 'phih', 'phihh', 'phek', 'phiny', 'phinx',\n    'phinz', 'phing', 'phingw', 'phingx', 'phingz', 'phinn', 'phinnw', 'phinnx',\n    'phinnz', 'phiurw', 'phiurx', 'phit', 'phngh', 'phur', 'phury', 'phurw',\n    'phurz', 'phurh', 'phok', 'phokk', 'phong', 'phongy', 'phongw', 'phongx',\n    'phongz', 'pho', 'phoy', 'phow', 'phox', 'phoz', 'phuy', 'phux', 'phuz',\n    'phuaw', 'phuah', 'phuahh', 'phuan', 'phuanx', 'phuanz', 'phuann',\n    'phuannw', 'phuannz', 'phuat', 'phue', 'phuey', 'phuew', 'phuex', 'phuez',\n    'phuehh', 'phuhh', 'phuiy', 'phuiw', 'phun', 'phuny', 'phunw', 'phunx',\n    'phut', 'phutt',\n    'sa', 'say', 'saw', 'sah', 'sahh', 'sai', 'saiy', 'saiw', 'saix', 'saiz',\n    'sak', 'sam', 'samy', 'samw', 'samx', 'san', 'sany', 'sanw', 'sang',\n    'sangy', 'sangw', 'sann', 'sannh', 'sap', 'sat', 'sau', 'sauw', 'se', 'sey',\n    'sew', 'sex', 'seh', 'sehh', 'senn', 'senny', 'sennw', 'si', 'siy', 'siw',\n    'six', 'siz', 'sia', 'siay', 'siaw', 'siax', 'siaz', 'siah', 'siahh',\n    'siak', 'siam', 'siamy', 'siamw', 'siamx', 'sien', 'sieny', 'sienw',\n    'sienx', 'sienz', 'siang', 'siangy', 'siangw', 'siangx', 'siangz', 'siann',\n    'sianny', 'siannw', 'siannx', 'siannz', 'siap', 'siapp', 'siet', 'siett',\n    'siau', 'siauy', 'siauw', 'siaux', 'siauz', 'sih', 'sihh', 'sek', 'sekk',\n    'sim', 'simy', 'simw', 'simx', 'simz', 'sin', 'sinw', 'sinx', 'sinz',\n    'sing', 'singy', 'singw', 'singx', 'singz', 'sinn', 'sinnw', 'sinnz',\n    'siur', 'siury', 'siurx', 'siurh', 'siurhh', 'siok', 'siokk', 'siong',\n    'siongy', 'siongw', 'siongx', 'siongz', 'sip', 'sipp', 'sit', 'sitt', 'siu',\n    'siuy', 'siuw', 'siux', 'siuz', 'siunn', 'siunny', 'siunnw', 'siunnx',\n    'siunnz', 'sng', 'sngy', 'sngw', 'sngx', 'sngh', 'sur', 'sury', 'surw',\n    'surx', 'surz', 'surh', 'sok', 'som', 'song', 'songy', 'songw', 'songx',\n    'so', 'soy', 'sow', 'su', 'suy', 'suw', 'sux', 'suz', 'sua', 'suay', 'suaw',\n    'suah', 'suai', 'suainnz', 'suan', 'suany', 'suanw', 'suanx', 'suanz',\n    'suann', 'suanny', 'suannw', 'suat', 'sue', 'suey', 'suew', 'suex', 'sueh',\n    'suh', 'sui', 'suiy', 'suiw', 'suix', 'suiz', 'sun', 'suny', 'sunw', 'sunx',\n    'sunz', 'sut', 'sutt',\n    'ta', 'tay', 'taw', 'tah', 'tahh', 'tai', 'taiy', 'taiw', 'taix', 'taiz',\n    'tainn', 'tainny', 'tak', 'takk', 'tam', 'tamy', 'tamw', 'tamx', 'tamz',\n    'tan', 'tany', 'tanw', 'tanx', 'tanz', 'tang', 'tangy', 'tangw', 'tangx',\n    'tangz', 'tann', 'tanny', 'tannw', 'tannx', 'tannz', 'tap', 'tapp', 'tat',\n    'tatt', 'tau', 'tauy', 'tauw', 'taux', 'tauz', 'tauh', 'tauhh', 'te', 'tey',\n    'tew', 'tex', 'tez', 'teh', 'tenn', 'tennw', 'tennz', 'ti', 'tiy', 'tiw',\n    'tix', 'tiz', 'tia', 'tiah', 'tiahh', 'tiak', 'tiakk', 'tiam', 'tiamy',\n    'tiamw', 'tiamx', 'tiamz', 'tien', 'tieny', 'tienx', 'tienz', 'tianny',\n    'tiannx', 'tiannz', 'tiap', 'tiapp', 'tiet', 'tiett', 'tiau', 'tiauw',\n    'tiaux', 'tiauz', 'tih', 'tihh', 'tek', 'tekk', 'timw', 'timx', 'timz',\n    'tin', 'tiny', 'tinw', 'tinx', 'tinz', 'ting', 'tingy', 'tingw', 'tingx',\n    'tingz', 'tinn', 'tinnx', 'tinnz', 'tinnhh', 'tiurw', 'tiurx', 'tiurz',\n    'tiurh', 'tiurhh', 'tiok', 'tiokk', 'tiong', 'tiongy', 'tiongw', 'tiongx',\n    'tiongz', 'tit', 'titt', 'tiu', 'tiuy', 'tiuw', 'tiux', 'tiuz', 'tiuh',\n    'tiunn', 'tiunny', 'tiunnw', 'tiunnx', 'tiunnz', 'tng', 'tngy', 'tngw',\n    'tngx', 'tngz', 'tur', 'tury', 'turw', 'turx', 'turz', 'turh', 'turhh',\n    'tok', 'tokk', 'tomx', 'tong', 'tongy', 'tongw', 'tongx', 'tongz', 'to',\n    'toy', 'tow', 'tox', 'toz', 'tu', 'tuy', 'tuw', 'tux', 'tuz', 'tuaw',\n    'tuaz', 'tuan', 'tuany', 'tuanw', 'tuanz', 'tuann', 'tuannw', 'tuannx',\n    'tuannz', 'tuat', 'tuatt', 'tuew', 'tuex', 'tuez', 'tuh', 'tuhh', 'tui',\n    'tuiw', 'tuix', 'tuiz', 'tun', 'tuny', 'tunw', 'tunz', 'tutt',\n    'thaw', 'thah', 'thahh', 'thai', 'thaiy', 'thaiw', 'thaix', 'thaiz', 'thak',\n    'thakk', 'tham', 'thamw', 'thamx', 'thamz', 'than', 'thany', 'thanw',\n    'thanx', 'thang', 'thangy', 'thangw', 'thangx', 'thann', 'thanny', 'thap',\n    'that', 'thau', 'thauy', 'thauw', 'thaux', 'thauz', 'the', 'they', 'thew',\n    'thex', 'thez', 'theh', 'thehh', 'thennw', 'thennx', 'thi', 'thiy', 'thiw',\n    'thix', 'thiz', 'thiah', 'thiam', 'thiamy', 'thiamz', 'thien', 'thieny',\n    'thiann', 'thiannw', 'thiannx', 'thiannz', 'thiap', 'thiapp', 'thiet',\n    'thiau', 'thiauy', 'thiauw', 'thiaux', 'thiauz', 'thih', 'thihh', 'thek',\n    'thekk', 'thim', 'thin', 'thinx', 'thinz', 'thing', 'thingy', 'thingw',\n    'thingx', 'thinn', 'thinnz', 'thiur', 'thiurw', 'thiurx', 'thiok', 'thiong',\n    'thiongy', 'thiongw', 'thiongx', 'thiu', 'thiuy', 'thng', 'thngw', 'thngx',\n    'thngz', 'thur', 'thury', 'thurw', 'thurx', 'thurh', 'thurhh', 'thok',\n    'thokk', 'thong', 'thongy', 'thongw', 'thongz', 'thoy', 'thow', 'thox',\n    'thuy', 'thua', 'thuaz', 'thuah', 'thuanx', 'thuann', 'thuanny', 'thuannw',\n    'thuat', 'thuh', 'thui', 'thuiy', 'thuiw', 'thuix', 'thun', 'thuny',\n    'thunx', 'thunz', 'thut', 'thutt',\n    'u', 'uy', 'uw', 'ux', 'uz', 'uh', 'ua', 'uay', 'uax', 'uahh', 'uai',\n    'uainny', 'uan', 'uany', 'uanw', 'uanx', 'uanz', 'uang', 'uann', 'uanny',\n    'uannw', 'uannz', 'uat', 'uatt', 'ue', 'uey', 'uew', 'uex', 'uez', 'ueh',\n    'ui', 'uiy', 'uiw', 'uix', 'uiz', 'un', 'uny', 'unw', 'unx', 'unz', 'ut',\n    'ur', 'urw', 'urx', 'urh', 'urhh',\n];\n//# sourceMappingURL=syllabletable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/syllabletable.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/tokenizer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLatinSyllableCompositions = void 0;\nconst soundgen_1 = __webpack_require__(/*! ./soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst analyzer_1 = __webpack_require__(/*! ../unchange/analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** Get Latin syllable compositions for syllable tokenization. Returned values can be further matched with tone patterns or looked up in dictionary. */\nfunction getLatinSyllableCompositions(str) {\n    const soundSeqs = new Array();\n    const letters = analyzer_1.graphAnalyzeTonal(str).map(x => x.letter && x.letter.literal);\n    // console.log(letters);\n    let beginOfSyllable = 0;\n    while (beginOfSyllable < letters.length) {\n        const accumulatedSeqs = new Array(); // accumulator for the matched\n        let shouldBreak = false;\n        for (let i = 0; i < letters.length; i++) {\n            // i is used for the end of the specified portion of letters. see letters.slice below\n            for (let j = 0; j < soundgen_1.syllableCompositions.length; j++) {\n                if (shouldBreak)\n                    break;\n                if (i + 1 > beginOfSyllable) {\n                    // bypass those loops when i is less than or equal to beginOfSyllable\n                    let sg = new unit_1.SoundGeneration();\n                    // the letter at position i is exclusive\n                    sg.letters = letters.slice(beginOfSyllable, i + 1);\n                    // console.log(sg.letters, beginOfSyllable, i, j);\n                    if (collections_1.impossibleSequences.includes(sg.letters[i])) {\n                        if (i > 0 && version2_1.vowelsTonal.includes(sg.letters[i - 1])) {\n                            shouldBreak = true;\n                            break;\n                        }\n                    }\n                    sg = soundgen_1.syllableCompositions[j](sg);\n                    if (sg.letters.length == sg.matchedSounds.length &&\n                        sg.matching == true) {\n                        accumulatedSeqs.push(sg.matchedSounds);\n                        // console.log(sg.letters, beginOfSyllable, i, j);\n                    }\n                }\n            }\n            if (i + 1 == letters.length) {\n                // on the last loop\n                if (accumulatedSeqs.length > 0) {\n                    // the last one should be the longest one?\n                    if (beginOfSyllable +\n                        accumulatedSeqs[accumulatedSeqs.length - 1].length <=\n                        letters.length) {\n                        // when beginOfSyllable adds up to under the length of letters\n                        beginOfSyllable +=\n                            accumulatedSeqs[accumulatedSeqs.length - 1].length;\n                    }\n                    // console.log(beginOfSyllable);\n                }\n            }\n        }\n        if (accumulatedSeqs.length == 0) {\n            // break while loop\n            break;\n        }\n        else if (accumulatedSeqs.length > 0) {\n            soundSeqs.push(accumulatedSeqs);\n        }\n    }\n    return soundSeqs.map(x => x.map(y => y));\n}\nexports.getLatinSyllableCompositions = getLatinSyllableCompositions;\n//# sourceMappingURL=tokenizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC90b2tlbml6ZXIuanM/ZWI5YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsOERBQVk7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLDJFQUFzQjtBQUNqRCxtQkFBbUIsbUJBQU8sQ0FBQyw4REFBWTtBQUN2QyxzQkFBc0IsbUJBQU8sQ0FBQyxvRUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQSwyQkFBMkIsNENBQTRDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC90b2tlbml6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TGF0aW5TeWxsYWJsZUNvbXBvc2l0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IHNvdW5kZ2VuXzEgPSByZXF1aXJlKFwiLi9zb3VuZGdlblwiKTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuLi91bmNoYW5nZS9hbmFseXplclwiKTtcbmNvbnN0IHZlcnNpb24yXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uMlwiKTtcbmNvbnN0IGNvbGxlY3Rpb25zXzEgPSByZXF1aXJlKFwiLi9jb2xsZWN0aW9uc1wiKTtcbi8qKiBHZXQgTGF0aW4gc3lsbGFibGUgY29tcG9zaXRpb25zIGZvciBzeWxsYWJsZSB0b2tlbml6YXRpb24uIFJldHVybmVkIHZhbHVlcyBjYW4gYmUgZnVydGhlciBtYXRjaGVkIHdpdGggdG9uZSBwYXR0ZXJucyBvciBsb29rZWQgdXAgaW4gZGljdGlvbmFyeS4gKi9cbmZ1bmN0aW9uIGdldExhdGluU3lsbGFibGVDb21wb3NpdGlvbnMoc3RyKSB7XG4gICAgY29uc3Qgc291bmRTZXFzID0gbmV3IEFycmF5KCk7XG4gICAgY29uc3QgbGV0dGVycyA9IGFuYWx5emVyXzEuZ3JhcGhBbmFseXplVG9uYWwoc3RyKS5tYXAoeCA9PiB4LmxldHRlciAmJiB4LmxldHRlci5saXRlcmFsKTtcbiAgICAvLyBjb25zb2xlLmxvZyhsZXR0ZXJzKTtcbiAgICBsZXQgYmVnaW5PZlN5bGxhYmxlID0gMDtcbiAgICB3aGlsZSAoYmVnaW5PZlN5bGxhYmxlIDwgbGV0dGVycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYWNjdW11bGF0ZWRTZXFzID0gbmV3IEFycmF5KCk7IC8vIGFjY3VtdWxhdG9yIGZvciB0aGUgbWF0Y2hlZFxuICAgICAgICBsZXQgc2hvdWxkQnJlYWsgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpIGlzIHVzZWQgZm9yIHRoZSBlbmQgb2YgdGhlIHNwZWNpZmllZCBwb3J0aW9uIG9mIGxldHRlcnMuIHNlZSBsZXR0ZXJzLnNsaWNlIGJlbG93XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNvdW5kZ2VuXzEuc3lsbGFibGVDb21wb3NpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQnJlYWspXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpICsgMSA+IGJlZ2luT2ZTeWxsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBieXBhc3MgdGhvc2UgbG9vcHMgd2hlbiBpIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBiZWdpbk9mU3lsbGFibGVcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNnID0gbmV3IHVuaXRfMS5Tb3VuZEdlbmVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxldHRlciBhdCBwb3NpdGlvbiBpIGlzIGV4Y2x1c2l2ZVxuICAgICAgICAgICAgICAgICAgICBzZy5sZXR0ZXJzID0gbGV0dGVycy5zbGljZShiZWdpbk9mU3lsbGFibGUsIGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2cubGV0dGVycywgYmVnaW5PZlN5bGxhYmxlLCBpLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25zXzEuaW1wb3NzaWJsZVNlcXVlbmNlcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAwICYmIHZlcnNpb24yXzEudm93ZWxzVG9uYWwuaW5jbHVkZXMoc2cubGV0dGVyc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQnJlYWsgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNnID0gc291bmRnZW5fMS5zeWxsYWJsZUNvbXBvc2l0aW9uc1tqXShzZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZy5sZXR0ZXJzLmxlbmd0aCA9PSBzZy5tYXRjaGVkU291bmRzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2cubWF0Y2hpbmcgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0ZWRTZXFzLnB1c2goc2cubWF0Y2hlZFNvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZy5sZXR0ZXJzLCBiZWdpbk9mU3lsbGFibGUsIGksIGopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgKyAxID09IGxldHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gb24gdGhlIGxhc3QgbG9vcFxuICAgICAgICAgICAgICAgIGlmIChhY2N1bXVsYXRlZFNlcXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbGFzdCBvbmUgc2hvdWxkIGJlIHRoZSBsb25nZXN0IG9uZT9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZ2luT2ZTeWxsYWJsZSArXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNlcXNbYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCAtIDFdLmxlbmd0aCA8PVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gYmVnaW5PZlN5bGxhYmxlIGFkZHMgdXAgdG8gdW5kZXIgdGhlIGxlbmd0aCBvZiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbk9mU3lsbGFibGUgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNlcXNbYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCAtIDFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiZWdpbk9mU3lsbGFibGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAvLyBicmVhayB3aGlsZSBsb29wXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2N1bXVsYXRlZFNlcXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc291bmRTZXFzLnB1c2goYWNjdW11bGF0ZWRTZXFzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291bmRTZXFzLm1hcCh4ID0+IHgubWFwKHkgPT4geSkpO1xufVxuZXhwb3J0cy5nZXRMYXRpblN5bGxhYmxlQ29tcG9zaXRpb25zID0gZ2V0TGF0aW5TeWxsYWJsZUNvbXBvc2l0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuaXplci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/tokenizer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/tone.js":
/*!**********************************************!*\
  !*** ./node_modules/taipa/lib/tonal/tone.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getToneEndingNumbersThree = exports.getToneEndingNumbersTwo = exports.getToneEndingNumber = exports.extractTones = exports.LexicalTone = void 0;\nconst morpheme_1 = __webpack_require__(/*! ../unchange/morpheme */ \"./node_modules/taipa/lib/unchange/morpheme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst analyzer_1 = __webpack_require__(/*! ../unchange/analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\n/** Tone letters and stop finals of the syllables of a word. */\nclass LexicalTone {\n    constructor() {\n        /** Tone letters of all syllables. A transfix is comprised of its tone affixes. */\n        this.toneLetters = [];\n        /** Stop finals of all syllables. */\n        this.stopFinals = [];\n    }\n    /** Return the last tone letter of a word. */\n    getInflectionalEnding() {\n        return this.toneLetters[this.toneLetters.length - 1];\n    }\n    /** Return the tone of a word. */\n    getAllomorphicEnding() {\n        return (this.stopFinals[this.stopFinals.length - 1] +\n            this.toneLetters[this.toneLetters.length - 1]);\n    }\n    /** Return tone numbers for all syllables. */\n    getToneNumbers() {\n        const numbers = [];\n        for (let i = 0; i < this.toneLetters.length; i++) {\n            if (this.toneLetters[i] === '' && this.stopFinals[i] === '')\n                numbers.push(1);\n            else if (this.toneLetters[i] === '' && this.stopFinals[i] !== '') {\n                if (this.stopFinals[i].length == 1)\n                    numbers.push(4);\n                else if (this.stopFinals[i].length == 2)\n                    numbers.push(8);\n            }\n            else if (this.toneLetters[i] !== '') {\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.f)\n                    numbers.push(1);\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.y)\n                    numbers.push(2);\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.w)\n                    numbers.push(3);\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.x)\n                    numbers.push(5);\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.z)\n                    numbers.push(7);\n                if (this.toneLetters[i] === version2_1.TonalLetterTags.xx)\n                    numbers.push(9);\n            }\n        }\n        return numbers;\n    }\n}\nexports.LexicalTone = LexicalTone;\n/** Given a word, populate and return a LexicalTone object. */\nfunction extractTones(token) {\n    const gs = analyzer_1.graphAnalyzeTonal(token);\n    const ltrs = gs.map(it => it.letter);\n    const ptrns = unit_1.makeMatchedPatterns(ltrs, morpheme_1.syllabifyTonal);\n    const tone = new LexicalTone();\n    const ptn = ptrns.map(it => it.pattern);\n    const stps = ptn.map(it => it\n        .map(it => it.name === version2_1.TonalSoundTags.stopFinalConsonant ? it.toString() : '')\n        .filter(it => it.length > 0));\n    const tnls = ptn.map(it => it\n        .map(it => it.name === version2_1.TonalSoundTags.freeTone ||\n        it.name === version2_1.TonalSoundTags.checkedTone\n        ? it.toString()\n        : '')\n        .filter(it => it.length > 0));\n    stps.map(it => it.length > 0 ? tone.stopFinals.push(it[0]) : tone.stopFinals.push(''));\n    tnls.map(it => it.length > 0 ? tone.toneLetters.push(it[0]) : tone.toneLetters.push(''));\n    return tone;\n}\nexports.extractTones = extractTones;\n/** Return tone ending number for 1 word. */\nfunction getToneEndingNumber(token) {\n    const tone = extractTones(token);\n    if (tone.getInflectionalEnding() === '' && tone.getAllomorphicEnding() === '')\n        return 1;\n    if (tone.getInflectionalEnding() === '' &&\n        tone.getAllomorphicEnding() !== '') {\n        // p, t, k, h\n        if (tone.getAllomorphicEnding().length == 1)\n            return 4;\n        // pp, tt, kk, hh\n        if (tone.getAllomorphicEnding().length == 2)\n            return 8;\n    }\n    if (tone.getInflectionalEnding() !== '') {\n        // -f, -y, -w, -x, -z, -xx. -pf, -tf, -kf, -hf.\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.f)\n            return 1;\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.y)\n            return 2;\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.w)\n            return 3;\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.x)\n            return 5;\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.z)\n            return 7;\n        if (tone.getInflectionalEnding() === version2_1.TonalLetterTags.xx)\n            return 9;\n    }\n    return -1;\n}\nexports.getToneEndingNumber = getToneEndingNumber;\n/** Return tone ending numbers for 2 words. */\nfunction getToneEndingNumbersTwo(token1, token2) {\n    return [getToneEndingNumber(token1), getToneEndingNumber(token2)];\n}\nexports.getToneEndingNumbersTwo = getToneEndingNumbersTwo;\n/** Return tone ending numbers for 3 words. */\nfunction getToneEndingNumbersThree(token1, token2, token3) {\n    return [\n        getToneEndingNumber(token1),\n        getToneEndingNumber(token2),\n        getToneEndingNumber(token3),\n    ];\n}\nexports.getToneEndingNumbersThree = getToneEndingNumbersThree;\n//# sourceMappingURL=tone.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/tone.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/version2.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/version2.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uncombiningRulesAy = exports.freeAllomorphUncombiningRules = exports.combinedCheckedAllomorphs = exports.uncombinedCheckedAllomorphs = exports.combinedFreeAllomorphs = exports.checkedAllomorphs = exports.AllomorphHY = exports.AllomorphH = exports.freeAllomorphs = exports.AllomorphX = exports.AllomorphW = exports.AllomorphY = exports.AllomorphZ = exports.ZeroAllomorph = exports.tonalPositionalSounds = exports.finalConsonantsBBggkkllppssTonal = exports.finalConsonantsBgjklpsTonal = exports.stopFinalConsonantsTonal = exports.checkedToneLettersTonal = exports.freeToneLettersTonal = exports.initialConsonantsTonal = exports.materLectionisTonal = exports.vowelsTonal = exports.neutralFinalConsonantsTonal = exports.nasalFinalConsonantsTonal = exports.nasalizationsTonal = exports.FinalHH = exports.FinalKK = exports.FinalTT = exports.FinalPP = exports.FinalH = exports.FinalK = exports.FinalT = exports.FinalP = exports.CheckedTonalY = exports.CheckedTonalX = exports.CheckedTonalF = exports.CheckedTonalW = exports.FreeTonalY = exports.FreeTonalX = exports.FreeTonalZX = exports.FreeTonalXX = exports.FreeTonalF = exports.FreeTonalW = exports.FreeTonalZ = exports.ZeroTonal = exports.NasalFinal = exports.StopFinal = exports.CheckedTonal = exports.FreeTonal = exports.Tonal = exports.Nasalization = exports.Final = exports.Medial = exports.Initial = exports.TonalSoundTags = exports.lowerLettersTonal = exports.LettersOfTonal = exports.TonalLetterTags = exports.TonalAffix = exports.CheckedAllomorph = exports.FreeAllomorph = exports.Allomorph = exports.Morph = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nclass Morph {\n}\nexports.Morph = Morph;\nclass Allomorph extends Morph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        // this function is promoted from class FreeAllomorph\n        return this.tonal.toString();\n    }\n}\nexports.Allomorph = Allomorph;\nclass FreeAllomorph extends Allomorph {\n}\nexports.FreeAllomorph = FreeAllomorph;\nclass CheckedAllomorph extends Allomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new Final();\n    }\n    toString() {\n        if (this.tonal.toString()) {\n            return this.final.toString() + this.tonal.toString();\n        }\n        return this.final.toString();\n    }\n}\nexports.CheckedAllomorph = CheckedAllomorph;\nclass Affix {\n}\nclass TonalAffix extends Affix {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        return this.tonal.toString();\n    }\n}\nexports.TonalAffix = TonalAffix;\nclass FreeAffix extends TonalAffix {\n}\nclass CheckedAffix extends TonalAffix {\n}\nvar TonalLetterTags;\n(function (TonalLetterTags) {\n    TonalLetterTags[\"a\"] = \"a\";\n    TonalLetterTags[\"e\"] = \"e\";\n    TonalLetterTags[\"i\"] = \"i\";\n    TonalLetterTags[\"o\"] = \"o\";\n    TonalLetterTags[\"u\"] = \"u\";\n    TonalLetterTags[\"ur\"] = \"ur\";\n    TonalLetterTags[\"c\"] = \"c\";\n    TonalLetterTags[\"ch\"] = \"ch\";\n    TonalLetterTags[\"j\"] = \"j\";\n    TonalLetterTags[\"s\"] = \"s\";\n    TonalLetterTags[\"ph\"] = \"ph\";\n    TonalLetterTags[\"th\"] = \"th\";\n    TonalLetterTags[\"kh\"] = \"kh\";\n    TonalLetterTags[\"m\"] = \"m\";\n    TonalLetterTags[\"n\"] = \"n\";\n    TonalLetterTags[\"ng\"] = \"ng\";\n    TonalLetterTags[\"nn\"] = \"nn\";\n    TonalLetterTags[\"f\"] = \"f\";\n    TonalLetterTags[\"w\"] = \"w\";\n    TonalLetterTags[\"x\"] = \"x\";\n    TonalLetterTags[\"xx\"] = \"xx\";\n    TonalLetterTags[\"y\"] = \"y\";\n    TonalLetterTags[\"z\"] = \"z\";\n    TonalLetterTags[\"zx\"] = \"zx\";\n    TonalLetterTags[\"b\"] = \"b\";\n    TonalLetterTags[\"g\"] = \"g\";\n    TonalLetterTags[\"l\"] = \"l\";\n    TonalLetterTags[\"k\"] = \"k\";\n    TonalLetterTags[\"p\"] = \"p\";\n    TonalLetterTags[\"t\"] = \"t\";\n    TonalLetterTags[\"kk\"] = \"kk\";\n    TonalLetterTags[\"pp\"] = \"pp\";\n    TonalLetterTags[\"tt\"] = \"tt\";\n    TonalLetterTags[\"hh\"] = \"hh\";\n    TonalLetterTags[\"bb\"] = \"bb\";\n    TonalLetterTags[\"gg\"] = \"gg\";\n    TonalLetterTags[\"ll\"] = \"ll\";\n    TonalLetterTags[\"ss\"] = \"ss\";\n    TonalLetterTags[\"h\"] = \"h\";\n    TonalLetterTags[\"zero\"] = \"zero\";\n    TonalLetterTags[\"er\"] = \"er\";\n    TonalLetterTags[\"ir\"] = \"ir\";\n    TonalLetterTags[\"or\"] = \"or\";\n})(TonalLetterTags = exports.TonalLetterTags || (exports.TonalLetterTags = {}));\nclass LettersOfTonal extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'nng'.length &&\n            listLength == exports.lowerLettersTonal.size) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'n' &&\n                characters[beginOfLetter + 2].character === 'g') {\n                // at the beginning of a letter, we should always prefer 'n' to 'nn'\n                // 'nn' is not able to begin a syllable\n                // 'ng' has higher associativity than 'nn' when in 'nng'\n                // special case for 'nng'\n                // copy the matched letter\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfTonal = LettersOfTonal;\nexports.lowerLettersTonal = new LettersOfTonal([\n    TonalLetterTags.a,\n    TonalLetterTags.e,\n    TonalLetterTags.i,\n    TonalLetterTags.o,\n    TonalLetterTags.u,\n    TonalLetterTags.ur,\n    TonalLetterTags.c,\n    TonalLetterTags.ch,\n    TonalLetterTags.j,\n    TonalLetterTags.s,\n    TonalLetterTags.m,\n    TonalLetterTags.n,\n    TonalLetterTags.ng,\n    TonalLetterTags.nn,\n    TonalLetterTags.w,\n    TonalLetterTags.xx,\n    TonalLetterTags.z,\n    TonalLetterTags.zx,\n    TonalLetterTags.x,\n    TonalLetterTags.y,\n    TonalLetterTags.b,\n    TonalLetterTags.g,\n    TonalLetterTags.l,\n    TonalLetterTags.k,\n    TonalLetterTags.p,\n    TonalLetterTags.t,\n    TonalLetterTags.kk,\n    TonalLetterTags.pp,\n    TonalLetterTags.tt,\n    TonalLetterTags.hh,\n    TonalLetterTags.bb,\n    TonalLetterTags.gg,\n    TonalLetterTags.ll,\n    TonalLetterTags.ss,\n    TonalLetterTags.f,\n    TonalLetterTags.h,\n    TonalLetterTags.er,\n    TonalLetterTags.ir,\n    TonalLetterTags.or,\n    TonalLetterTags.ph,\n    TonalLetterTags.th,\n    TonalLetterTags.kh,\n]);\nvar TonalSoundTags;\n(function (TonalSoundTags) {\n    TonalSoundTags[\"initialConsonant\"] = \"initialConsonant\";\n    TonalSoundTags[\"vowel\"] = \"vowel\";\n    TonalSoundTags[\"nasalization\"] = \"nasalization\";\n    TonalSoundTags[\"stopFinalConsonant\"] = \"stopFinalConsonant\";\n    TonalSoundTags[\"nasalFinalConsonant\"] = \"nasalFinalConsonant\";\n    TonalSoundTags[\"checkedTone\"] = \"checkedTone\";\n    TonalSoundTags[\"freeTone\"] = \"freeTone\";\n})(TonalSoundTags = exports.TonalSoundTags || (exports.TonalSoundTags = {}));\nclass Initial extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.initialConsonant;\n    }\n}\nexports.Initial = Initial;\nclass Medial extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.vowel;\n    }\n}\nexports.Medial = Medial;\nclass Final extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Final = Final;\nclass Nasalization extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.nasalization;\n    }\n}\nexports.Nasalization = Nasalization;\nclass Tonal extends unit_1.Sound {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Tonal = Tonal;\nclass FreeTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.freeTone;\n    }\n}\nexports.FreeTonal = FreeTonal;\nclass CheckedTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.checkedTone;\n    }\n}\nexports.CheckedTonal = CheckedTonal;\nclass StopFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.stopFinalConsonant;\n    }\n}\nexports.StopFinal = StopFinal;\nclass NasalFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSoundTags.nasalFinalConsonant;\n    }\n}\nexports.NasalFinal = NasalFinal;\nclass MedialA extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.a);\n    }\n}\nclass MedialE extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.e);\n    }\n}\nclass MedialI extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.i);\n    }\n}\nclass MedialO extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.o);\n    }\n}\nclass MedialU extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.u);\n    }\n}\nclass MedialUR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ur);\n    }\n}\nclass MedialER extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.er);\n    }\n}\nclass MedialIR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ir);\n    }\n}\nclass MedialOR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.or);\n    }\n}\nclass MaterLectionisM extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass MaterLectionisN extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass MaterLectionisNG extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass InitialC extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.c);\n    }\n}\nclass InitialCH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ch);\n    }\n}\nclass InitialJ extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass InitialL extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass InitialS extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass InitialPH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ph);\n    }\n}\nclass InitialTH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.th);\n    }\n}\nclass InitialKH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.kh);\n    }\n}\nclass InitialH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nclass InitialP extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nclass InitialT extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nclass InitialK extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nclass InitialB extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass InitialG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass InitialM extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass InitialN extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass InitialNG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass ZeroTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.characters = [];\n    }\n}\nexports.ZeroTonal = ZeroTonal;\nclass FreeTonalZ extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.z);\n    }\n}\nexports.FreeTonalZ = FreeTonalZ;\nclass FreeTonalW extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.FreeTonalW = FreeTonalW;\nclass FreeTonalF extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.FreeTonalF = FreeTonalF;\nclass FreeTonalXX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.xx);\n    }\n}\nexports.FreeTonalXX = FreeTonalXX;\nclass FreeTonalZX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.zx);\n    }\n}\nexports.FreeTonalZX = FreeTonalZX;\nclass FreeTonalX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.FreeTonalX = FreeTonalX;\nclass FreeTonalY extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.FreeTonalY = FreeTonalY;\nclass CheckedTonalW extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.CheckedTonalW = CheckedTonalW;\nclass CheckedTonalF extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.CheckedTonalF = CheckedTonalF;\nclass CheckedTonalX extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.CheckedTonalX = CheckedTonalX;\nclass CheckedTonalY extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.CheckedTonalY = CheckedTonalY;\nclass FinalP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nexports.FinalP = FinalP;\nclass FinalT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nexports.FinalT = FinalT;\nclass FinalK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nexports.FinalK = FinalK;\nclass FinalH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nexports.FinalH = FinalH;\nclass FinalPP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.pp);\n    }\n}\nexports.FinalPP = FinalPP;\nclass FinalTT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.tt);\n    }\n}\nexports.FinalTT = FinalTT;\nclass FinalKK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.kk);\n    }\n}\nexports.FinalKK = FinalKK;\nclass FinalHH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.hh);\n    }\n}\nexports.FinalHH = FinalHH;\nclass FinalB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass FinalL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass FinalG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass FinalJ extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass FinalS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass FinalBB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.bb);\n    }\n}\nclass FinalLL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ll);\n    }\n}\nclass FinalGG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.gg);\n    }\n}\nclass FinalSS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ss);\n    }\n}\nclass FinalM extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass FinalN extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass FinalNG extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass NasalizationNN extends Nasalization {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.nn);\n    }\n}\nexports.nasalizationsTonal = unit_1.soundSequence([new NasalizationNN()]);\nexports.nasalFinalConsonantsTonal = unit_1.soundSequence([\n    new FinalM(),\n    new FinalN(),\n    new FinalNG(),\n]);\nexports.neutralFinalConsonantsTonal = unit_1.soundSequence([\n    new FinalH(),\n    new FinalHH(),\n]);\nexports.vowelsTonal = unit_1.soundSequence([\n    new MedialA(),\n    new MedialE(),\n    new MedialI(),\n    new MedialO(),\n    new MedialU(),\n    new MedialUR(),\n    new MedialIR(),\n    new MedialOR(),\n    new MedialER(),\n]);\nexports.materLectionisTonal = unit_1.soundSequence([\n    new MaterLectionisM(),\n    new MaterLectionisN(),\n    new MaterLectionisNG(),\n]);\nexports.initialConsonantsTonal = unit_1.soundSequence([\n    new InitialP(),\n    new InitialT(),\n    new InitialK(),\n    new InitialB(),\n    new InitialG(),\n    new InitialH(),\n    new InitialC(),\n    new InitialCH(),\n    new InitialJ(),\n    new InitialL(),\n    new InitialS(),\n    new InitialPH(),\n    new InitialTH(),\n    new InitialKH(),\n    new InitialM(),\n    new InitialN(),\n    new InitialNG(),\n]);\nexports.freeToneLettersTonal = unit_1.soundSequence([\n    new FreeTonalZ(),\n    new FreeTonalW(),\n    new FreeTonalXX(),\n    new FreeTonalF(),\n    new FreeTonalZX(),\n    new FreeTonalX(),\n    new FreeTonalY(),\n]);\nexports.checkedToneLettersTonal = unit_1.soundSequence([\n    new CheckedTonalF(),\n    new CheckedTonalY(),\n    new CheckedTonalW(),\n    new CheckedTonalX(),\n]);\nexports.stopFinalConsonantsTonal = unit_1.soundSequence([\n    new FinalP(),\n    new FinalT(),\n    new FinalK(),\n    new FinalH(),\n    new FinalPP(),\n    new FinalTT(),\n    new FinalKK(),\n    new FinalHH(),\n]);\nexports.finalConsonantsBgjklpsTonal = unit_1.soundSequence([\n    new FinalB(),\n    new FinalG(),\n    new FinalJ(),\n    new FinalK(),\n    new FinalL(),\n    new FinalP(),\n    new FinalS(),\n]);\nexports.finalConsonantsBBggkkllppssTonal = unit_1.soundSequence([\n    new FinalBB(),\n    new FinalGG(),\n    new FinalKK(),\n    new FinalLL(),\n    new FinalPP(),\n    new FinalSS(),\n]);\nfunction positionalSounds(sounds) {\n    return (s) => {\n        for (const i in sounds) {\n            if (sounds[i].name === s)\n                return sounds[i];\n        }\n        return new unit_1.Sound();\n    };\n}\nconst psA = positionalSounds([new MedialA()]);\nconst psB = positionalSounds([new InitialB(), new FinalB()]);\nconst psBB = positionalSounds([new FinalBB()]);\nconst psC = positionalSounds([new InitialC()]);\nconst psCH = positionalSounds([new InitialCH()]);\nconst psE = positionalSounds([new MedialE()]);\nconst psER = positionalSounds([new MedialER()]);\nconst psF = positionalSounds([new FreeTonalF(), new CheckedTonalF()]);\nconst psG = positionalSounds([new InitialG(), new FinalG()]);\nconst psGG = positionalSounds([new FinalGG()]);\nconst psH = positionalSounds([new InitialH(), new FinalH()]);\nconst psHH = positionalSounds([new FinalHH()]);\nconst psI = positionalSounds([new MedialI()]);\nconst psIR = positionalSounds([new MedialIR()]);\nconst psJ = positionalSounds([new InitialJ(), new FinalJ()]);\nconst psK = positionalSounds([new InitialK(), new FinalK()]);\nconst psKH = positionalSounds([new InitialKH()]);\nconst psKK = positionalSounds([new FinalKK()]);\nconst psL = positionalSounds([new InitialL(), new FinalL()]);\nconst psLL = positionalSounds([new FinalLL()]);\nconst psM = positionalSounds([\n    new InitialM(),\n    new MaterLectionisM(),\n    new FinalM(),\n]);\nconst psN = positionalSounds([\n    new InitialN(),\n    new MaterLectionisN(),\n    new FinalN(),\n]);\nconst psNN = positionalSounds([new NasalizationNN()]);\nconst psNG = positionalSounds([\n    new InitialNG(),\n    new MaterLectionisNG(),\n    new FinalNG(),\n]);\nconst psO = positionalSounds([new MedialO()]);\nconst psOR = positionalSounds([new MedialOR()]);\nconst psP = positionalSounds([new InitialP(), new FinalP()]);\nconst psPH = positionalSounds([new InitialPH()]);\nconst psPP = positionalSounds([new FinalPP()]);\nconst psS = positionalSounds([new InitialS(), new FinalS()]);\nconst psSS = positionalSounds([new FinalSS()]);\nconst psT = positionalSounds([new InitialT(), new FinalT()]);\nconst psTH = positionalSounds([new InitialTH()]);\nconst psTT = positionalSounds([new FinalTT()]);\nconst psU = positionalSounds([new MedialU()]);\nconst psUR = positionalSounds([new MedialUR()]);\nconst psW = positionalSounds([new FreeTonalW(), new CheckedTonalW()]);\nconst psX = positionalSounds([new FreeTonalX(), new CheckedTonalX()]);\nconst psXX = positionalSounds([new FreeTonalXX()]);\nconst psY = positionalSounds([new FreeTonalY(), new CheckedTonalY()]);\nconst psZ = positionalSounds([new FreeTonalZ()]);\nconst psZX = positionalSounds([new FreeTonalZX()]);\nexports.tonalPositionalSounds = new Map()\n    .set(TonalLetterTags.a, psA)\n    .set(TonalLetterTags.b, psB)\n    .set(TonalLetterTags.bb, psBB)\n    .set(TonalLetterTags.c, psC)\n    .set(TonalLetterTags.ch, psCH)\n    .set(TonalLetterTags.e, psE)\n    .set(TonalLetterTags.er, psER)\n    .set(TonalLetterTags.f, psF)\n    .set(TonalLetterTags.g, psG)\n    .set(TonalLetterTags.gg, psGG)\n    .set(TonalLetterTags.h, psH)\n    .set(TonalLetterTags.hh, psHH)\n    .set(TonalLetterTags.i, psI)\n    .set(TonalLetterTags.ir, psIR)\n    .set(TonalLetterTags.j, psJ)\n    .set(TonalLetterTags.k, psK)\n    .set(TonalLetterTags.kh, psKH)\n    .set(TonalLetterTags.kk, psKK)\n    .set(TonalLetterTags.l, psL)\n    .set(TonalLetterTags.ll, psLL)\n    .set(TonalLetterTags.m, psM)\n    .set(TonalLetterTags.n, psN)\n    .set(TonalLetterTags.nn, psNN)\n    .set(TonalLetterTags.ng, psNG)\n    .set(TonalLetterTags.o, psO)\n    .set(TonalLetterTags.or, psOR)\n    .set(TonalLetterTags.p, psP)\n    .set(TonalLetterTags.ph, psPH)\n    .set(TonalLetterTags.pp, psPP)\n    .set(TonalLetterTags.s, psS)\n    .set(TonalLetterTags.ss, psSS)\n    .set(TonalLetterTags.t, psT)\n    .set(TonalLetterTags.th, psTH)\n    .set(TonalLetterTags.tt, psTT)\n    .set(TonalLetterTags.u, psU)\n    .set(TonalLetterTags.ur, psUR)\n    .set(TonalLetterTags.w, psW)\n    .set(TonalLetterTags.x, psX)\n    .set(TonalLetterTags.xx, psXX)\n    .set(TonalLetterTags.y, psY)\n    .set(TonalLetterTags.z, psZ)\n    .set(TonalLetterTags.zx, psZX);\nclass ZeroAllomorph extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new ZeroTonal();\n    }\n}\nexports.ZeroAllomorph = ZeroAllomorph;\nclass AllomorphF extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalF();\n    }\n}\nclass AllomorphZ extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZ();\n    }\n}\nexports.AllomorphZ = AllomorphZ;\nclass AllomorphY extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalY();\n    }\n}\nexports.AllomorphY = AllomorphY;\nclass AllomorphW extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalW();\n    }\n}\nexports.AllomorphW = AllomorphW;\nclass AllomorphX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalX();\n    }\n}\nexports.AllomorphX = AllomorphX;\nclass AllomorphXX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalXX();\n    }\n}\nclass AllomorphZX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZX();\n    }\n}\nexports.freeAllomorphs = new Map()\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.xx, new AllomorphXX())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.zx, new AllomorphZX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.x, new AllomorphX());\nclass AllomorphP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n    }\n}\nclass AllomorphT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n    }\n}\nclass AllomorphK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n    }\n}\nclass AllomorphH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n    }\n}\nexports.AllomorphH = AllomorphH;\nclass AllomorphB extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n    }\n}\nclass AllomorphL extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n    }\n}\nclass AllomorphG extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n    }\n}\nclass AllomorphPP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalPP();\n    }\n}\nclass AllomorphTT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalTT();\n    }\n}\nclass AllomorphKK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalKK();\n    }\n}\nclass AllomorphHH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalHH();\n    }\n}\nclass AllomorphBB extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalBB();\n    }\n}\nclass AllomorphLL extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalLL();\n    }\n}\nclass AllomorphGG extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalGG();\n    }\n}\nclass AllomorphSS extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalSS();\n    }\n}\nclass AllomorphPF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphPW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphTF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphKF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHY extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalY();\n    }\n}\nexports.AllomorphHY = AllomorphHY;\nclass AllomorphHW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphTW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphKW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphPX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphTX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphKX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphHX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphBF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphGF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphJF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalJ();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphLF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphSF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalS();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphBW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphGW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphLW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphSW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalS();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphBX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphGX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphLX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalX();\n    }\n}\nexports.checkedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.b, new AllomorphB())\n    .set(TonalLetterTags.g, new AllomorphG())\n    .set(TonalLetterTags.l, new AllomorphL())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH())\n    .set(TonalLetterTags.bb, new AllomorphBB())\n    .set(TonalLetterTags.gg, new AllomorphGG())\n    .set(TonalLetterTags.ll, new AllomorphLL())\n    .set(TonalLetterTags.ss, new AllomorphSS())\n    .set(TonalLetterTags.p + TonalLetterTags.f, new AllomorphPF())\n    .set(TonalLetterTags.t + TonalLetterTags.f, new AllomorphTF())\n    .set(TonalLetterTags.k + TonalLetterTags.f, new AllomorphKF())\n    .set(TonalLetterTags.h + TonalLetterTags.f, new AllomorphHF())\n    .set(TonalLetterTags.b + TonalLetterTags.f, new AllomorphBF())\n    .set(TonalLetterTags.g + TonalLetterTags.f, new AllomorphGF())\n    .set(TonalLetterTags.j + TonalLetterTags.f, new AllomorphJF())\n    .set(TonalLetterTags.l + TonalLetterTags.f, new AllomorphLF())\n    .set(TonalLetterTags.s + TonalLetterTags.f, new AllomorphSF())\n    .set(TonalLetterTags.h + TonalLetterTags.y, new AllomorphHY())\n    .set(TonalLetterTags.p + TonalLetterTags.w, new AllomorphPW())\n    .set(TonalLetterTags.t + TonalLetterTags.w, new AllomorphTW())\n    .set(TonalLetterTags.k + TonalLetterTags.w, new AllomorphKW())\n    .set(TonalLetterTags.h + TonalLetterTags.w, new AllomorphHW())\n    .set(TonalLetterTags.b + TonalLetterTags.w, new AllomorphBW())\n    .set(TonalLetterTags.g + TonalLetterTags.w, new AllomorphGW())\n    .set(TonalLetterTags.l + TonalLetterTags.w, new AllomorphLW())\n    .set(TonalLetterTags.s + TonalLetterTags.w, new AllomorphSW())\n    .set(TonalLetterTags.p + TonalLetterTags.x, new AllomorphPX())\n    .set(TonalLetterTags.t + TonalLetterTags.x, new AllomorphTX())\n    .set(TonalLetterTags.k + TonalLetterTags.x, new AllomorphKX())\n    .set(TonalLetterTags.h + TonalLetterTags.x, new AllomorphHX())\n    .set(TonalLetterTags.b + TonalLetterTags.x, new AllomorphBX())\n    .set(TonalLetterTags.g + TonalLetterTags.x, new AllomorphGX())\n    .set(TonalLetterTags.l + TonalLetterTags.x, new AllomorphLX());\nexports.combinedFreeAllomorphs = new Map()\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.x, new AllomorphX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.xx, new AllomorphXX());\nexports.uncombinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH());\nexports.combinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p + TonalLetterTags.f, [new AllomorphPF()])\n    .set(TonalLetterTags.p + TonalLetterTags.w, [new AllomorphPW()])\n    .set(TonalLetterTags.p + TonalLetterTags.x, [new AllomorphPX()])\n    .set(TonalLetterTags.t + TonalLetterTags.f, [new AllomorphTF()])\n    .set(TonalLetterTags.t + TonalLetterTags.w, [new AllomorphTW()])\n    .set(TonalLetterTags.t + TonalLetterTags.x, [new AllomorphTX()])\n    .set(TonalLetterTags.k + TonalLetterTags.f, [new AllomorphKF()])\n    .set(TonalLetterTags.k + TonalLetterTags.w, [new AllomorphKW()])\n    .set(TonalLetterTags.k + TonalLetterTags.x, [new AllomorphKX()])\n    .set(TonalLetterTags.h + TonalLetterTags.f, [new AllomorphHF()])\n    .set(TonalLetterTags.h + TonalLetterTags.y, [new AllomorphHY()])\n    .set(TonalLetterTags.h + TonalLetterTags.w, [new AllomorphHW()])\n    .set(TonalLetterTags.h + TonalLetterTags.x, [new AllomorphHX()])\n    .set(TonalLetterTags.b + TonalLetterTags.f, [new AllomorphBF()])\n    .set(TonalLetterTags.b + TonalLetterTags.w, [new AllomorphBW()])\n    .set(TonalLetterTags.b + TonalLetterTags.x, [new AllomorphBX()])\n    .set(TonalLetterTags.g + TonalLetterTags.f, [new AllomorphGF()])\n    .set(TonalLetterTags.g + TonalLetterTags.w, [new AllomorphGW()])\n    .set(TonalLetterTags.g + TonalLetterTags.x, [new AllomorphGX()])\n    .set(TonalLetterTags.j + TonalLetterTags.f, [new AllomorphJF()])\n    .set(TonalLetterTags.l + TonalLetterTags.f, [new AllomorphLF()])\n    .set(TonalLetterTags.l + TonalLetterTags.w, [new AllomorphLW()])\n    .set(TonalLetterTags.l + TonalLetterTags.x, [new AllomorphLX()])\n    .set(TonalLetterTags.s + TonalLetterTags.f, [new AllomorphSF()])\n    .set(TonalLetterTags.s + TonalLetterTags.w, [new AllomorphSW()]);\nexports.freeAllomorphUncombiningRules = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY()])\n    .set(TonalLetterTags.w, [new FreeTonalZ(), new FreeTonalX()])\n    .set(TonalLetterTags.xx, [\n    new FreeTonalZ(),\n    new FreeTonalF(),\n    new FreeTonalX(),\n])\n    .set(TonalLetterTags.z, [new ZeroTonal(), new FreeTonalX(), new FreeTonalF()])\n    .set(TonalLetterTags.zx, [])\n    .set(TonalLetterTags.x, [])\n    .set(TonalLetterTags.y, [new FreeTonalW()])\n    .set(TonalLetterTags.zero, [new FreeTonalY()]);\nexports.uncombiningRulesAy = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY(), new FreeTonalW()])\n    .set(TonalLetterTags.x, [\n    new ZeroTonal(),\n    new FreeTonalX(),\n    new FreeTonalZ(),\n]);\n//# sourceMappingURL=version2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/version2.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/analyzer.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/analyzer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tonalLemmatizationAnalyzer = exports.graphAnalyzeTonal = exports.morphAnalyzeUnchanging = void 0;\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/unchange/lexeme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/unchange/morpheme.js\");\nconst morpheme_2 = __webpack_require__(/*! ../unchange/morpheme */ \"./node_modules/taipa/lib/unchange/morpheme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/unchange/metaplasm.js\");\n/**\n * Analyzes a string into morphemes. Morphological analysis.\n * @param str A word.\n */\nfunction morphAnalyzeUnchanging(str) {\n    const gs = graphAnalyzeTonal(str);\n    const mm = new morpheme_2.TonalSoundUnchangingMorphemeMaker();\n    const ms = mm.makeMorphemes(gs);\n    return ms;\n}\nexports.morphAnalyzeUnchanging = morphAnalyzeUnchanging;\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeTonal(str) {\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeTonal = graphAnalyzeTonal;\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x, metaplasm) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalUncombiningMorphemeMaker(metaplasm);\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or uncombining morphemes\n     */\n    lexAnalyze(x) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x, new metaplasm_1.TonalUncombiningForms([]));\n        }\n        const lm = new lexeme_1.TonalLemmatizationLexemeMaker();\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9hbmFseXplci5qcz9hNWY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBVTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEMsbUJBQW1CLG1CQUFPLENBQUMscUVBQW1CO0FBQzlDLG1CQUFtQixtQkFBTyxDQUFDLGlFQUFZO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDJFQUFzQjtBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b25hbExlbW1hdGl6YXRpb25BbmFseXplciA9IGV4cG9ydHMuZ3JhcGhBbmFseXplVG9uYWwgPSBleHBvcnRzLm1vcnBoQW5hbHl6ZVVuY2hhbmdpbmcgPSB2b2lkIDA7XG5jb25zdCBsZXhlbWVfMSA9IHJlcXVpcmUoXCIuL2xleGVtZVwiKTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuLi90b25hbC92ZXJzaW9uMlwiKTtcbmNvbnN0IG1vcnBoZW1lXzEgPSByZXF1aXJlKFwiLi9tb3JwaGVtZVwiKTtcbmNvbnN0IG1vcnBoZW1lXzIgPSByZXF1aXJlKFwiLi4vdW5jaGFuZ2UvbW9ycGhlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbi8qKlxuICogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gKiBAcGFyYW0gc3RyIEEgd29yZC5cbiAqL1xuZnVuY3Rpb24gbW9ycGhBbmFseXplVW5jaGFuZ2luZyhzdHIpIHtcbiAgICBjb25zdCBncyA9IGdyYXBoQW5hbHl6ZVRvbmFsKHN0cik7XG4gICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMi5Ub25hbFNvdW5kVW5jaGFuZ2luZ01vcnBoZW1lTWFrZXIoKTtcbiAgICBjb25zdCBtcyA9IG1tLm1ha2VNb3JwaGVtZXMoZ3MpO1xuICAgIHJldHVybiBtcztcbn1cbmV4cG9ydHMubW9ycGhBbmFseXplVW5jaGFuZ2luZyA9IG1vcnBoQW5hbHl6ZVVuY2hhbmdpbmc7XG4vKipcbiAqIEFuYWx5emVzIGEgc3RyaW5nIGludG8gZ3JhcGhlbWVzLiBHcmFwaGVtaWMgYW5hbHlzaXMuXG4gKiBAcGFyYW0gc3RyIEEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGdyYXBoQW5hbHl6ZVRvbmFsKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKHZlcnNpb24yXzEubG93ZXJMZXR0ZXJzVG9uYWwpO1xuICAgIHJldHVybiBnbS5tYWtlR3JhcGhlbWVzKHN0cik7XG59XG5leHBvcnRzLmdyYXBoQW5hbHl6ZVRvbmFsID0gZ3JhcGhBbmFseXplVG9uYWw7XG4vKiogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBtb3JwaGVtZXMgb3IgbGV4ZW1lLiAqL1xuZXhwb3J0cy50b25hbExlbW1hdGl6YXRpb25BbmFseXplciA9IHtcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBncmFwaGVtZXMgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgZ3JhcGhlbWVzXG4gICAgICovXG4gICAgbW9ycGhBbmFseXplKHgsIG1ldGFwbGFzbSkge1xuICAgICAgICBsZXQgZ3MgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBncyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdzID0gZ3JhcGhBbmFseXplVG9uYWwoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5Ub25hbFVuY29tYmluaW5nTW9ycGhlbWVNYWtlcihtZXRhcGxhc20pO1xuICAgICAgICByZXR1cm4gbW0ubWFrZU1vcnBoZW1lcyhncyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBtb3JwaGVtZXMgaW50byBhIGxleGVtZS4gTGV4aWNhbCBhbmFseXNpcy5cbiAgICAgKiBAcGFyYW0geCBBIHN0cmluZyBvciB1bmNvbWJpbmluZyBtb3JwaGVtZXNcbiAgICAgKi9cbiAgICBsZXhBbmFseXplKHgpIHtcbiAgICAgICAgbGV0IG1zID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgbXMgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtcyA9IHRoaXMubW9ycGhBbmFseXplKHgsIG5ldyBtZXRhcGxhc21fMS5Ub25hbFVuY29tYmluaW5nRm9ybXMoW10pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsbSA9IG5ldyBsZXhlbWVfMS5Ub25hbExlbW1hdGl6YXRpb25MZXhlbWVNYWtlcigpO1xuICAgICAgICByZXR1cm4gbG0ubWFrZUxleGVtZXMobXMpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/lemmatizer.js":
/*!*******************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/lemmatizer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lemmatizePhrasalVerbParticle = exports.lemmatize = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/unchange/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/unchange/metaplasm.js\");\n/**\n * Lemmatizes a word.\n * @param word A word to be lemmatized.\n */\nfunction lemmatize(word) {\n    const ms = analyzer_1.tonalLemmatizationAnalyzer.morphAnalyze(word, new metaplasm_1.TonalUncombiningForms([]));\n    const lx = analyzer_1.tonalLemmatizationAnalyzer.lexAnalyze(ms);\n    return lx;\n}\nexports.lemmatize = lemmatize;\n/**\n * Lemmatize a phrasal verb particle.\n * @param word A phrasal verb particle to be lemmatized.\n */\nfunction lemmatizePhrasalVerbParticle(word) {\n    const ms = analyzer_1.tonalLemmatizationAnalyzer.morphAnalyze(word, new metaplasm_1.PhrasalVerbParticleUncombining());\n    const lx = analyzer_1.tonalLemmatizationAnalyzer.lexAnalyze(ms);\n    return lx;\n}\nexports.lemmatizePhrasalVerbParticle = lemmatizePhrasalVerbParticle;\n//# sourceMappingURL=lemmatizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9sZW1tYXRpemVyLmpzP2NiYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGlFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvdW5jaGFuZ2UvbGVtbWF0aXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sZW1tYXRpemVQaHJhc2FsVmVyYlBhcnRpY2xlID0gZXhwb3J0cy5sZW1tYXRpemUgPSB2b2lkIDA7XG5jb25zdCBhbmFseXplcl8xID0gcmVxdWlyZShcIi4vYW5hbHl6ZXJcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbi8qKlxuICogTGVtbWF0aXplcyBhIHdvcmQuXG4gKiBAcGFyYW0gd29yZCBBIHdvcmQgdG8gYmUgbGVtbWF0aXplZC5cbiAqL1xuZnVuY3Rpb24gbGVtbWF0aXplKHdvcmQpIHtcbiAgICBjb25zdCBtcyA9IGFuYWx5emVyXzEudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIubW9ycGhBbmFseXplKHdvcmQsIG5ldyBtZXRhcGxhc21fMS5Ub25hbFVuY29tYmluaW5nRm9ybXMoW10pKTtcbiAgICBjb25zdCBseCA9IGFuYWx5emVyXzEudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIubGV4QW5hbHl6ZShtcyk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5sZW1tYXRpemUgPSBsZW1tYXRpemU7XG4vKipcbiAqIExlbW1hdGl6ZSBhIHBocmFzYWwgdmVyYiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSB3b3JkIEEgcGhyYXNhbCB2ZXJiIHBhcnRpY2xlIHRvIGJlIGxlbW1hdGl6ZWQuXG4gKi9cbmZ1bmN0aW9uIGxlbW1hdGl6ZVBocmFzYWxWZXJiUGFydGljbGUod29yZCkge1xuICAgIGNvbnN0IG1zID0gYW5hbHl6ZXJfMS50b25hbExlbW1hdGl6YXRpb25BbmFseXplci5tb3JwaEFuYWx5emUod29yZCwgbmV3IG1ldGFwbGFzbV8xLlBocmFzYWxWZXJiUGFydGljbGVVbmNvbWJpbmluZygpKTtcbiAgICBjb25zdCBseCA9IGFuYWx5emVyXzEudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIubGV4QW5hbHl6ZShtcyk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5sZW1tYXRpemVQaHJhc2FsVmVyYlBhcnRpY2xlID0gbGVtbWF0aXplUGhyYXNhbFZlcmJQYXJ0aWNsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbW1hdGl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/lemmatizer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/lexeme.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/lexeme.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalLemmatizationLexemeMaker = exports.TonalLemmatizationLexeme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/unchange/metaplasm.js\");\nconst maker_1 = __webpack_require__(/*! ../maker */ \"./node_modules/taipa/lib/maker.js\");\nconst unit_2 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\n/** A word and its lemmas/base forms. */\nclass TonalLemmatizationLexeme extends unit_1.Lexeme {\n    constructor(morphemes, metaplasm) {\n        super();\n        this.lemmata = new Array(); // lexical forms. underlying forms\n        if (morphemes.length == 0)\n            this.word = new unit_2.TonalWord([]);\n        else\n            this.word = new unit_2.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1].allomorph) {\n                this.endingInflectional = this.assignInflectionalEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                // null inflectional ending\n                this.endingInflectional = new unit_2.InflectionalEnding();\n            }\n        }\n        else {\n            // no morphemes. null inflectional ending\n            this.endingInflectional = new unit_2.InflectionalEnding();\n        }\n        if (morphemes.length > 0)\n            this.lemmata = metaplasm.apply(morphemes, this.endingInflectional);\n    }\n    getLemmas() {\n        // this must be called after populateLemmata is called\n        return this.lemmata;\n    }\n    getInflectionalEnding() {\n        if (this.endingInflectional)\n            return this.endingInflectional.toString();\n        return '';\n    }\n    assignInflectionalEnding(allomorph) {\n        let ending = new unit_2.InflectionalEnding();\n        // change allomorph to affix\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            let fie = new unit_2.FreeInflectionalEnding();\n            fie.affix.tonal = allomorph.tonal;\n            ending = fie;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            let cie = new unit_2.CheckedInflectionalEnding();\n            cie.affix.tonal = allomorph.tonal;\n            ending = cie;\n        }\n        // this word is already in base form, and its last syllable is checked tone\n        return ending;\n    }\n}\nexports.TonalLemmatizationLexeme = TonalLemmatizationLexeme;\nclass TonalLemmatizationLexemeMaker extends maker_1.LexemeMaker {\n    constructor() {\n        super();\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        return new TonalLemmatizationLexeme(morphemes, new metaplasm_1.TonalLemmatization());\n    }\n}\nexports.TonalLemmatizationLexemeMaker = TonalLemmatizationLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9sZXhlbWUuanM/Y2ZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QyxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBYTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxtREFBVTtBQUNsQyxlQUFlLG1CQUFPLENBQUMseURBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9sZXhlbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9uYWxMZW1tYXRpemF0aW9uTGV4ZW1lTWFrZXIgPSBleHBvcnRzLlRvbmFsTGVtbWF0aXphdGlvbkxleGVtZSA9IHZvaWQgMDtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuLi90b25hbC92ZXJzaW9uMlwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgbWFrZXJfMSA9IHJlcXVpcmUoXCIuLi9tYWtlclwiKTtcbmNvbnN0IHVuaXRfMiA9IHJlcXVpcmUoXCIuL3VuaXRcIik7XG4vKiogQSB3b3JkIGFuZCBpdHMgbGVtbWFzL2Jhc2UgZm9ybXMuICovXG5jbGFzcyBUb25hbExlbW1hdGl6YXRpb25MZXhlbWUgZXh0ZW5kcyB1bml0XzEuTGV4ZW1lIHtcbiAgICBjb25zdHJ1Y3Rvcihtb3JwaGVtZXMsIG1ldGFwbGFzbSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxlbW1hdGEgPSBuZXcgQXJyYXkoKTsgLy8gbGV4aWNhbCBmb3Jtcy4gdW5kZXJseWluZyBmb3Jtc1xuICAgICAgICBpZiAobW9ycGhlbWVzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgdGhpcy53b3JkID0gbmV3IHVuaXRfMi5Ub25hbFdvcmQoW10pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLndvcmQgPSBuZXcgdW5pdF8yLlRvbmFsV29yZChtb3JwaGVtZXMubWFwKHggPT4geC5zeWxsYWJsZSkpO1xuICAgICAgICBpZiAobW9ycGhlbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChtb3JwaGVtZXNbbW9ycGhlbWVzLmxlbmd0aCAtIDFdLmFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kaW5nSW5mbGVjdGlvbmFsID0gdGhpcy5hc3NpZ25JbmZsZWN0aW9uYWxFbmRpbmcobW9ycGhlbWVzW21vcnBoZW1lcy5sZW5ndGggLSAxXS5hbGxvbW9ycGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbnVsbCBpbmZsZWN0aW9uYWwgZW5kaW5nXG4gICAgICAgICAgICAgICAgdGhpcy5lbmRpbmdJbmZsZWN0aW9uYWwgPSBuZXcgdW5pdF8yLkluZmxlY3Rpb25hbEVuZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gbW9ycGhlbWVzLiBudWxsIGluZmxlY3Rpb25hbCBlbmRpbmdcbiAgICAgICAgICAgIHRoaXMuZW5kaW5nSW5mbGVjdGlvbmFsID0gbmV3IHVuaXRfMi5JbmZsZWN0aW9uYWxFbmRpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9ycGhlbWVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICB0aGlzLmxlbW1hdGEgPSBtZXRhcGxhc20uYXBwbHkobW9ycGhlbWVzLCB0aGlzLmVuZGluZ0luZmxlY3Rpb25hbCk7XG4gICAgfVxuICAgIGdldExlbW1hcygpIHtcbiAgICAgICAgLy8gdGhpcyBtdXN0IGJlIGNhbGxlZCBhZnRlciBwb3B1bGF0ZUxlbW1hdGEgaXMgY2FsbGVkXG4gICAgICAgIHJldHVybiB0aGlzLmxlbW1hdGE7XG4gICAgfVxuICAgIGdldEluZmxlY3Rpb25hbEVuZGluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kaW5nSW5mbGVjdGlvbmFsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5kaW5nSW5mbGVjdGlvbmFsLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgYXNzaWduSW5mbGVjdGlvbmFsRW5kaW5nKGFsbG9tb3JwaCkge1xuICAgICAgICBsZXQgZW5kaW5nID0gbmV3IHVuaXRfMi5JbmZsZWN0aW9uYWxFbmRpbmcoKTtcbiAgICAgICAgLy8gY2hhbmdlIGFsbG9tb3JwaCB0byBhZmZpeFxuICAgICAgICBpZiAoYWxsb21vcnBoIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5GcmVlQWxsb21vcnBoKSB7XG4gICAgICAgICAgICBsZXQgZmllID0gbmV3IHVuaXRfMi5GcmVlSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgICAgICBmaWUuYWZmaXgudG9uYWwgPSBhbGxvbW9ycGgudG9uYWw7XG4gICAgICAgICAgICBlbmRpbmcgPSBmaWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxsb21vcnBoIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5DaGVja2VkQWxsb21vcnBoKSB7XG4gICAgICAgICAgICBsZXQgY2llID0gbmV3IHVuaXRfMi5DaGVja2VkSW5mbGVjdGlvbmFsRW5kaW5nKCk7XG4gICAgICAgICAgICBjaWUuYWZmaXgudG9uYWwgPSBhbGxvbW9ycGgudG9uYWw7XG4gICAgICAgICAgICBlbmRpbmcgPSBjaWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyB3b3JkIGlzIGFscmVhZHkgaW4gYmFzZSBmb3JtLCBhbmQgaXRzIGxhc3Qgc3lsbGFibGUgaXMgY2hlY2tlZCB0b25lXG4gICAgICAgIHJldHVybiBlbmRpbmc7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbExlbW1hdGl6YXRpb25MZXhlbWUgPSBUb25hbExlbW1hdGl6YXRpb25MZXhlbWU7XG5jbGFzcyBUb25hbExlbW1hdGl6YXRpb25MZXhlbWVNYWtlciBleHRlbmRzIG1ha2VyXzEuTGV4ZW1lTWFrZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICBtYWtlTGV4ZW1lcyhtb3JwaGVtZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZShtb3JwaGVtZXMpO1xuICAgIH1cbiAgICBtYWtlKG1vcnBoZW1lcykge1xuICAgICAgICByZXR1cm4gbmV3IFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZShtb3JwaGVtZXMsIG5ldyBtZXRhcGxhc21fMS5Ub25hbExlbW1hdGl6YXRpb24oKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbExlbW1hdGl6YXRpb25MZXhlbWVNYWtlciA9IFRvbmFsTGVtbWF0aXphdGlvbkxleGVtZU1ha2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV4ZW1lLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/matcher.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/matcher.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.smIK = exports.smVowelMng = exports.smMngFywxz = exports.smBgjklpsF = exports.smBgkpWx = exports.smLsWx = exports.regexLsWx = exports.smBgkpF = exports.smJlsF = exports.regexJlsF = exports.smMnngHWx = exports.regexMnngHWx = exports.smMnngHF = exports.regexMnngHF = void 0;\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n// mhf, nhf, nghf\nexports.regexMnngHF = /(m|ng?)hf/g;\n// mhf, nhf, nghf\nexports.smMnngHF = function (nasalFinal, neutralFinalH, firstTonalF) {\n    if (collections_1.nasalFinalConsonants.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.h === neutralFinalH &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// mhw, mhx, nhw, nhx, nghw, nghx\nexports.regexMnngHWx = /(m|ng?)h(w|x)/g;\n// mhw\n/*\nexport const smMHW = function (\n  nasalFinal: string,\n  neutralFinalHh: string,\n  thirdTonalW: string\n) {\n  if (\n    nasalFinal === TonalLetterTags.m &&\n    neutralFinalHh === TonalLetterTags.h &&\n    thirdTonalW === TonalLetterTags.w\n  )\n    return true;\n\n  return false;\n};\n*/\n// mhw, mhx, nhw, nhx, nghw, nghx\nexports.smMnngHWx = function (nasalFinal, neutralFinalH, tonalWX) {\n    if (collections_1.nasalFinalConsonants.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.h === neutralFinalH &&\n        collections_1.toneLettersWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// jf, lf, sf\nexports.regexJlsF = /(j|l|s)f/g;\n// jf, lf, sf\nexports.smJlsF = function (finalJls, firstTonalF) {\n    if (collections_1.finalConsonantsJls.includes(finalJls) &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// bf, gf, kf, pf\nexports.smBgkpF = function (finalBgkp, firstTonalF) {\n    if (collections_1.finalConsonantsBgkp.includes(finalBgkp) &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// lw, lx, sw. there is no sx\nexports.regexLsWx = /(l|s)(w|x)/g;\n// lw, lx, sw\nexports.smLsWx = function (finalLs, tonalWX) {\n    if (collections_1.finalConsonantsLs.includes(finalLs) && collections_1.toneLettersWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bw, bx, gw, gx, kw, kx, pw, px\nexports.smBgkpWx = function (finalBgkp, tonalWX) {\n    if (collections_1.finalConsonantsBgkp.includes(finalBgkp) &&\n        collections_1.toneLettersWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bf, gf, jf, kf, lf, pf, sf\nexports.smBgjklpsF = function (finalBgjklps, firstToneF) {\n    if (version2_1.finalConsonantsBgjklpsTonal.includes(finalBgjklps) &&\n        version2_1.TonalLetterTags.f === firstToneF)\n        return true;\n    return false;\n};\n// iengz, uamz\nexports.smMngFywxz = function (finalMng, toneLetter) {\n    if (collections_1.finalConsonantsMng.includes(finalMng) &&\n        version2_1.freeToneLettersTonal.includes(toneLetter))\n        return true;\n    return false;\n};\nexports.smVowelMng = function (medial, finalMng) {\n    if (version2_1.vowelsTonal.includes(medial) && collections_1.finalConsonantsMng.includes(finalMng))\n        return true;\n    return false;\n};\n// -ik\nexports.smIK = function (medialI, medialK) {\n    if (medialI === version2_1.TonalLetterTags.i && medialK === version2_1.TonalLetterTags.k)\n        return true;\n    return false;\n};\n//# sourceMappingURL=matcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9tYXRjaGVyLmpzP2E4NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QyxzQkFBc0IsbUJBQU8sQ0FBQywyRUFBc0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvdW5jaGFuZ2UvbWF0Y2hlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zbUlLID0gZXhwb3J0cy5zbVZvd2VsTW5nID0gZXhwb3J0cy5zbU1uZ0Z5d3h6ID0gZXhwb3J0cy5zbUJnamtscHNGID0gZXhwb3J0cy5zbUJna3BXeCA9IGV4cG9ydHMuc21Mc1d4ID0gZXhwb3J0cy5yZWdleExzV3ggPSBleHBvcnRzLnNtQmdrcEYgPSBleHBvcnRzLnNtSmxzRiA9IGV4cG9ydHMucmVnZXhKbHNGID0gZXhwb3J0cy5zbU1ubmdIV3ggPSBleHBvcnRzLnJlZ2V4TW5uZ0hXeCA9IGV4cG9ydHMuc21Nbm5nSEYgPSBleHBvcnRzLnJlZ2V4TW5uZ0hGID0gdm9pZCAwO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuLi90b25hbC92ZXJzaW9uMlwiKTtcbmNvbnN0IGNvbGxlY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvY29sbGVjdGlvbnNcIik7XG4vLyBtaGYsIG5oZiwgbmdoZlxuZXhwb3J0cy5yZWdleE1ubmdIRiA9IC8obXxuZz8paGYvZztcbi8vIG1oZiwgbmhmLCBuZ2hmXG5leHBvcnRzLnNtTW5uZ0hGID0gZnVuY3Rpb24gKG5hc2FsRmluYWwsIG5ldXRyYWxGaW5hbEgsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEubmFzYWxGaW5hbENvbnNvbmFudHMuaW5jbHVkZXMobmFzYWxGaW5hbCkgJiZcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCA9PT0gbmV1dHJhbEZpbmFsSCAmJlxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mID09PSBmaXJzdFRvbmFsRilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIG1odywgbWh4LCBuaHcsIG5oeCwgbmdodywgbmdoeFxuZXhwb3J0cy5yZWdleE1ubmdIV3ggPSAvKG18bmc/KWgod3x4KS9nO1xuLy8gbWh3XG4vKlxuZXhwb3J0IGNvbnN0IHNtTUhXID0gZnVuY3Rpb24gKFxuICBuYXNhbEZpbmFsOiBzdHJpbmcsXG4gIG5ldXRyYWxGaW5hbEhoOiBzdHJpbmcsXG4gIHRoaXJkVG9uYWxXOiBzdHJpbmdcbikge1xuICBpZiAoXG4gICAgbmFzYWxGaW5hbCA9PT0gVG9uYWxMZXR0ZXJUYWdzLm0gJiZcbiAgICBuZXV0cmFsRmluYWxIaCA9PT0gVG9uYWxMZXR0ZXJUYWdzLmggJiZcbiAgICB0aGlyZFRvbmFsVyA9PT0gVG9uYWxMZXR0ZXJUYWdzLndcbiAgKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBmYWxzZTtcbn07XG4qL1xuLy8gbWh3LCBtaHgsIG5odywgbmh4LCBuZ2h3LCBuZ2h4XG5leHBvcnRzLnNtTW5uZ0hXeCA9IGZ1bmN0aW9uIChuYXNhbEZpbmFsLCBuZXV0cmFsRmluYWxILCB0b25hbFdYKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEubmFzYWxGaW5hbENvbnNvbmFudHMuaW5jbHVkZXMobmFzYWxGaW5hbCkgJiZcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCA9PT0gbmV1dHJhbEZpbmFsSCAmJlxuICAgICAgICBjb2xsZWN0aW9uc18xLnRvbmVMZXR0ZXJzV3guaW5jbHVkZXModG9uYWxXWCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBqZiwgbGYsIHNmXG5leHBvcnRzLnJlZ2V4SmxzRiA9IC8oanxsfHMpZi9nO1xuLy8gamYsIGxmLCBzZlxuZXhwb3J0cy5zbUpsc0YgPSBmdW5jdGlvbiAoZmluYWxKbHMsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxDb25zb25hbnRzSmxzLmluY2x1ZGVzKGZpbmFsSmxzKSAmJlxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mID09PSBmaXJzdFRvbmFsRilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIGJmLCBnZiwga2YsIHBmXG5leHBvcnRzLnNtQmdrcEYgPSBmdW5jdGlvbiAoZmluYWxCZ2twLCBmaXJzdFRvbmFsRikge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLmZpbmFsQ29uc29uYW50c0Jna3AuaW5jbHVkZXMoZmluYWxCZ2twKSAmJlxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mID09PSBmaXJzdFRvbmFsRilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIGx3LCBseCwgc3cuIHRoZXJlIGlzIG5vIHN4XG5leHBvcnRzLnJlZ2V4THNXeCA9IC8obHxzKSh3fHgpL2c7XG4vLyBsdywgbHgsIHN3XG5leHBvcnRzLnNtTHNXeCA9IGZ1bmN0aW9uIChmaW5hbExzLCB0b25hbFdYKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxDb25zb25hbnRzTHMuaW5jbHVkZXMoZmluYWxMcykgJiYgY29sbGVjdGlvbnNfMS50b25lTGV0dGVyc1d4LmluY2x1ZGVzKHRvbmFsV1gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYncsIGJ4LCBndywgZ3gsIGt3LCBreCwgcHcsIHB4XG5leHBvcnRzLnNtQmdrcFd4ID0gZnVuY3Rpb24gKGZpbmFsQmdrcCwgdG9uYWxXWCkge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLmZpbmFsQ29uc29uYW50c0Jna3AuaW5jbHVkZXMoZmluYWxCZ2twKSAmJlxuICAgICAgICBjb2xsZWN0aW9uc18xLnRvbmVMZXR0ZXJzV3guaW5jbHVkZXModG9uYWxXWCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBiZiwgZ2YsIGpmLCBrZiwgbGYsIHBmLCBzZlxuZXhwb3J0cy5zbUJnamtscHNGID0gZnVuY3Rpb24gKGZpbmFsQmdqa2xwcywgZmlyc3RUb25lRikge1xuICAgIGlmICh2ZXJzaW9uMl8xLmZpbmFsQ29uc29uYW50c0JnamtscHNUb25hbC5pbmNsdWRlcyhmaW5hbEJnamtscHMpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uZUYpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBpZW5neiwgdWFtelxuZXhwb3J0cy5zbU1uZ0Z5d3h6ID0gZnVuY3Rpb24gKGZpbmFsTW5nLCB0b25lTGV0dGVyKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxDb25zb25hbnRzTW5nLmluY2x1ZGVzKGZpbmFsTW5nKSAmJlxuICAgICAgICB2ZXJzaW9uMl8xLmZyZWVUb25lTGV0dGVyc1RvbmFsLmluY2x1ZGVzKHRvbmVMZXR0ZXIpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5zbVZvd2VsTW5nID0gZnVuY3Rpb24gKG1lZGlhbCwgZmluYWxNbmcpIHtcbiAgICBpZiAodmVyc2lvbjJfMS52b3dlbHNUb25hbC5pbmNsdWRlcyhtZWRpYWwpICYmIGNvbGxlY3Rpb25zXzEuZmluYWxDb25zb25hbnRzTW5nLmluY2x1ZGVzKGZpbmFsTW5nKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIC1pa1xuZXhwb3J0cy5zbUlLID0gZnVuY3Rpb24gKG1lZGlhbEksIG1lZGlhbEspIHtcbiAgICBpZiAobWVkaWFsSSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSAmJiBtZWRpYWxLID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/matcher.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/metaplasm.js":
/*!******************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/metaplasm.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalLemmatization = exports.UncombiningFormsIengUamToneLetter = exports.UncombiningFormsIetfIetwToEkEkk = exports.TransfixUncombining = exports.LastSyllableForms = exports.PrecedingAyexUncombining = exports.PhrasalVerbParticleUncombining = exports.TonalUncombiningForms = void 0;\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst syllabletable_1 = __webpack_require__(/*! ../tonal/syllabletable */ \"./node_modules/taipa/lib/tonal/syllabletable.js\");\nconst matcher_1 = __webpack_require__(/*! ./matcher */ \"./node_modules/taipa/lib/unchange/matcher.js\");\n/** Returns the uncombining forms of a syllable. */\nclass TonalUncombiningForms extends metaplasm_1.TonalUncombiningMetaplasm {\n    constructor(soundsFollowing) {\n        super();\n        this.soundsFollowing = soundsFollowing;\n    }\n    handleAssimilatedFinal(syllable, final) {\n        const fnlsOfLemma = collections_1.finalConsonantsForBgjlsbbggllss.get(syllable.lastLetter.literal + final);\n        // console.log(s, allomorph, fnl, fnlsOfLemma);\n        if (fnlsOfLemma) {\n            const clones = fnlsOfLemma.map(it => {\n                const clone = Object.create(syllable);\n                clone.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(it.toString()));\n                return clone;\n            });\n            const ret = [];\n            clones.map(it => ret.push(it));\n            return clones;\n        }\n        return [];\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    // push y to make tone 2\n                    // 1 to 2\n                    const s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n                    const tnltrs = version2_1.freeAllomorphUncombiningRules.get('zero');\n                    if (tnltrs)\n                        s.pushLetter(new unit_2.AlphabeticLetter(tnltrs[0].characters));\n                    return [s];\n                }\n                else {\n                    // the 7th tone has two baseforms\n                    const ret = [];\n                    const rules = version2_1.freeAllomorphUncombiningRules.get(allomorph.toString());\n                    const tnltrs = !rules ? [] : rules;\n                    for (let i in tnltrs) {\n                        const s = new unit_1.TonalSyllable(sounds.map(x => new unit_2.AlphabeticLetter(x.characters)));\n                        if (!(tnltrs[i] instanceof version2_1.ZeroAllomorph)) {\n                            // 2 to 3. 3 to 7. 7 to 5. 3 to 5.\n                            // replace z with f or x\n                            s.popLetter();\n                            s.pushLetter(new unit_2.AlphabeticLetter(tnltrs[i].characters));\n                            ret.push(s);\n                        }\n                        else {\n                            // 7 to 1\n                            // pop z\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                if (allomorph.tonal.toString() === '') {\n                    // when the final is assimilated, an empty array will be returned\n                    return this.handleAssimilatedFinal(s, '');\n                }\n                // pop the tone letter\n                // 1 to 4. 3 to 8. 2 to 4. 5 to 8.\n                const fnl = s.letters[s.letters.length - 1].literal;\n                const nslFnls = sounds.filter(it => it.name === version2_1.TonalSoundTags.nasalFinalConsonant);\n                s.popLetter(); // pop out the tone letter\n                if (nslFnls.length == 0 &&\n                    (fnl === version2_1.TonalLetterTags.w || fnl === version2_1.TonalLetterTags.x) &&\n                    Array.from(collections_1.fourthToEighthFinalConsonants.keys()).includes(s.lastLetter.literal)) {\n                    // in case of no internal sandhi\n                    const fnl = s.lastLetter.literal;\n                    s.popLetter(); // pop the 4th final consonant\n                    const got = collections_1.fourthToEighthFinalConsonants.get(fnl);\n                    if (got) {\n                        if (syllabletable_1.isInSyllableTable(s.literal + version2_1.lowerLettersTonal.get(got).literal)) {\n                            // push the 8th final consonant if it is present in syllable table\n                            s.pushLetter(version2_1.lowerLettersTonal.get(got));\n                        }\n                        else {\n                            if (s.letters.length === 2 &&\n                                s.letters[0].literal === version2_1.TonalLetterTags.t &&\n                                s.letters[1].literal === version2_1.TonalLetterTags.i &&\n                                fnl === version2_1.TonalLetterTags.k) {\n                                // handle combining form 'tikw' of lexical root 'tekk'\n                                // combining forms 'tietw' and 'tietf is handled in another function\n                                s.popLetter(); // pop out vowel i\n                                s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.e)); // push vowel e\n                                s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.kk)); // push final consonant kk\n                            }\n                            else {\n                                // restore the popped-out final consonant.\n                                // a syllable is just returned with its tone letter popped out\n                                s.pushLetter(version2_1.lowerLettersTonal.get(fnl));\n                            }\n                        }\n                    }\n                }\n                else if (collections_1.finalConsonantsForBgjlsbbggllss.has(s.lastLetter.literal)) {\n                    // in case of internal or external sandhi\n                    const ret = this.handleAssimilatedFinal(s, fnl);\n                    if (ret && ret.length > 0)\n                        return ret;\n                }\n                else if (sounds.filter(it => it.name === version2_1.TonalSoundTags.vowel).length > 0 &&\n                    collections_1.nasalFinalConsonants.includes(s.lastSecondLetter.literal) &&\n                    version2_1.neutralFinalConsonantsTonal.includes(s.lastLetter.literal)) {\n                    // in case of internal sandhi of p or t\n                    // if there is no medials, e.g. hmhh, hngh, just bypass this block\n                    // mhh, mh, nhh, nh, nghh, ngh\n                    if (this.soundsFollowing[0] &&\n                        this.soundsFollowing[0].name === version2_1.TonalSoundTags.initialConsonant &&\n                        s.lastSecondLetter.literal === this.soundsFollowing[0].toString()) {\n                        // unchange to -tt or -t\n                        s.popLetter(); // pop the neutral\n                        s.popLetter(); // pop the nasal\n                        const clone = Object.create(s);\n                        // if (ntrl === TonalLetterTags.hh) {\n                        if (fnl === version2_1.TonalLetterTags.w) {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n                        }\n                        else {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                        }\n                        return [clone];\n                    }\n                    else if (this.soundsFollowing[0]) {\n                        // there has to be a following syllable for this syllable to change form\n                        // unchange to -pp or -p\n                        s.popLetter(); // pop the neutral\n                        s.popLetter(); // pop the nasal\n                        const clone = Object.create(s);\n                        // if (ntrl === TonalLetterTags.hh) {\n                        if (fnl === version2_1.TonalLetterTags.w) {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.pp));\n                        }\n                        else {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n                        }\n                        return [clone];\n                    }\n                }\n                // a syllable is just returned with the tone letter popped out\n                // e.g. tnghw's w is popped and tngh is returned\n                return [s];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUncombiningForms = TonalUncombiningForms;\n/** Returns the uncombining forms of a phrasl verb particle syllable. */\nclass PhrasalVerbParticleUncombining extends metaplasm_1.TonalUncombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                // 7 to 4\n                const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                const tnl = sounds.filter(it => it.name === version2_1.TonalSoundTags.freeTone);\n                if (tnl && tnl[0].toString() === version2_1.TonalLetterTags.z) {\n                    s.popLetter(); // pop the tonal\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.h)); // push neutral final\n                }\n                return [s];\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // 1 to 4. 3 to 4.\n                const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                const tnl = sounds.filter(it => it.name === version2_1.TonalSoundTags.checkedTone);\n                if (tnl &&\n                    (tnl[0].toString() === version2_1.TonalLetterTags.f ||\n                        tnl[0].toString() === version2_1.TonalLetterTags.w)) {\n                    s.popLetter(); // pop the tonal\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n}\nexports.PhrasalVerbParticleUncombining = PhrasalVerbParticleUncombining;\n/** Returns the uncombining forms of the syllable preceding ay */\nclass PrecedingAyexUncombining extends metaplasm_1.TonalUncombiningMetaplasm {\n    getUncombiningForms(syllable, letters) {\n        if (collections_1.voicedVoicelessFinalConsonants.has(letters[letters.length - 2].toString())) {\n            // in case of sandhi finals\n            const fnl = collections_1.voicedVoicelessFinalConsonants.get(syllable.lastLetter.literal + letters[letters.length - 1].toString());\n            if (fnl)\n                syllable.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(fnl));\n        }\n        else if (collections_1.fourthToEighthFinalConsonants.has(letters[letters.length - 2].toString()) &&\n            letters[letters.length - 1].toString() === version2_1.TonalLetterTags.x) {\n            const fnl = collections_1.fourthToEighthFinalConsonants.get(syllable.lastLetter.literal);\n            if (fnl)\n                syllable.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(fnl));\n        }\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (allomorph.tonal.toString() === version2_1.TonalLetterTags.f) {\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                        // 1 to 2. 1 to 3\n                        // replace f with y or w\n                        s.popLetter();\n                        s.pushLetter(new unit_2.AlphabeticLetter(tnls[i].characters));\n                        ret.push(s);\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                    // pop f\n                    s.popLetter();\n                    this.getUncombiningForms(s, sounds);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.x) {\n                // 5 to 1. 5 to 7. 5 to 5.\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                        if (!(tnls[i] instanceof version2_1.ZeroTonal)) {\n                            if (tnls[i] instanceof version2_1.FreeTonalZ) {\n                                // 5 to 7\n                                // replace x with z\n                                s.popLetter();\n                                s.pushLetter(new unit_2.AlphabeticLetter(tnls[i].characters));\n                                ret.push(s);\n                            }\n                            else if (tnls[i] instanceof version2_1.FreeTonalX) {\n                                // 5 to 5\n                                ret.push(s);\n                            }\n                        }\n                        else {\n                            // 5 to 1\n                            // pop x\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    // 5 to 8.\n                    const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                    s.popLetter(); // pop x\n                    this.getUncombiningForms(s, sounds);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.y) {\n                return [];\n            }\n        }\n        return [];\n    }\n}\nexports.PrecedingAyexUncombining = PrecedingAyexUncombining;\n/** Returns the last syllable of a double or triple construction as an uncombining form. */\nclass LastSyllableForms extends metaplasm_1.TonalUncombiningMetaplasm {\n    constructor(lettersLastSyllable) {\n        super();\n        this.lettersLastSyllable = lettersLastSyllable;\n    }\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            // skip the last syllable. it is the base form of the preceding 2 syllables.\n            if (this.lettersLastSyllable[this.lettersLastSyllable.length - 1].toString() === sounds[sounds.length - 1].toString())\n                return [];\n            const s = new unit_1.TonalSyllable(this.lettersLastSyllable.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.LastSyllableForms = LastSyllableForms;\n/** Returns the uncombining forms of a transfix inflected syllable. */\nclass TransfixUncombining extends metaplasm_1.TonalUncombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            const vowelA = sounds.filter(it => it.toString() === version2_1.TonalLetterTags.a);\n            const chkFnls = sounds.filter(it => it.name === version2_1.TonalSoundTags.checkedTone);\n            const s = new unit_1.TonalSyllable(sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            if (vowelA.length == 1) {\n                // aw -> ay\n                s.popLetter(); // pop letter w\n                s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y));\n                return [s];\n            }\n            else if (chkFnls.length == 1) {\n                // checked tones\n                s.popLetter(); // pop letter w\n                const clone = Object.create(s);\n                // get hh or tt\n                const got = collections_1.finalConsonantsForTransfix.get(s.letters[s.letters.length - 1].literal);\n                if (got) {\n                    clone.popLetter(); // pop final t\n                    clone.pushLetter(version2_1.lowerLettersTonal.get(got)); // push hh or tt\n                }\n                return [s, clone];\n            }\n            else {\n                // in case of free tones other than aw, return the other four free tones\n                s.popLetter(); // pop letter w. 1st tone\n                const clone2 = Object.create(s); // 2nd tone\n                const clone5 = Object.create(s); // 5th tone\n                const clone7 = Object.create(s); // 7th tone\n                clone2.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y));\n                clone5.popLetter(); // letter y was also pushed to clone5, so we have to pop it out. bug?\n                clone5.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.x));\n                clone7.popLetter(); // letter y was also pushed to clone7, so we have to pop it out. bug?\n                clone7.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z));\n                return [s, clone2, clone5, clone7];\n            }\n        }\n        return [];\n    }\n}\nexports.TransfixUncombining = TransfixUncombining;\n/** Change ~ietf or ietw to ~ek or ~ekk. */\nclass UncombiningFormsIetfIetwToEkEkk extends metaplasm_1.TonalUncombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            const ics = sounds.filter(i => i.name === version2_1.TonalSoundTags.initialConsonant);\n            const ts = sounds.filter(i => i.name === version2_1.TonalSoundTags.checkedTone);\n            if (ics.length > 0 && ts.length > 0) {\n                if (ts[0].toString() === version2_1.TonalLetterTags.f) {\n                    // in case of ~ietf\n                    const s = new unit_1.TonalSyllable([\n                        new unit_2.AlphabeticLetter(ics[0].characters),\n                        version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.e),\n                        version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.k),\n                    ]);\n                    return [s];\n                }\n                else if (ts[0].toString() === version2_1.TonalLetterTags.w) {\n                    // in case of ~ietw\n                    const s = new unit_1.TonalSyllable([\n                        new unit_2.AlphabeticLetter(ics[0].characters),\n                        version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.e),\n                        version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.kk),\n                    ]);\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.UncombiningFormsIetfIetwToEkEkk = UncombiningFormsIetfIetwToEkEkk;\nclass UncombiningFormsIengUamToneLetter extends metaplasm_1.TonalUncombiningMetaplasm {\n    apply(sounds, allomorph) {\n        if (allomorph) {\n            if (sounds.length > 1 &&\n                matcher_1.smMngFywxz(sounds[sounds.length - 2].toString(), sounds[sounds.length - 1].toString())) {\n                // in case of -ieng plus a tone letter. e.g. liengzngauz\n                // let ret: TonalSyllable[] = [];\n                // const rules = freeAllomorphUncombiningRules.get(allomorph.toString());\n                // const tnltrs = !rules ? [] : rules;\n                // for (let i in tnltrs) {\n                //   let s: TonalSyllable = new TonalSyllable(\n                //     sounds.map(x => new AlphabeticLetter(x.characters))\n                //   );\n                //   s.replaceLetter(\n                //     sounds.length - 2,\n                //     lowerLettersTonal.get(TonalLetterTags.n)\n                //   ); // replace letter ng with n\n                //   if (!(tnltrs[i] instanceof ZeroAllomorph)) {\n                // 2 to 3. 3 to 7. 7 to 5. 3 to 5.\n                // replace z with f or x\n                //   s.popLetter();\n                //   s.pushLetter(new AlphabeticLetter(tnltrs[i].characters));\n                //   ret.push(s);\n                // } else {\n                // 7 to 1\n                // pop z\n                //     s.popLetter();\n                //     ret.push(s);\n                //   }\n                // }\n                // return ret;\n            }\n        }\n        return [];\n    }\n}\nexports.UncombiningFormsIengUamToneLetter = UncombiningFormsIengUamToneLetter;\n/** Lemmatizes a word and returns its base forms. */\nclass TonalLemmatization extends metaplasm_2.TonalLemmatizationMetaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return this.populateLemmata(morphemes, inflectionalEnding);\n    }\n    getLemmas(morphemes, inflectionalEnding) {\n        if (inflectionalEnding) {\n            if (inflectionalEnding instanceof unit_1.FreeInflectionalEnding) {\n                const ret = [];\n                const arr = morphemes[morphemes.length - 1].getForms();\n                for (const key in arr) {\n                    const wrd = new unit_1.TonalWord(morphemes.map(it => it.syllable));\n                    wrd.popSyllable();\n                    wrd.pushSyllable(arr[key]);\n                    ret.push(wrd);\n                }\n                return ret;\n            }\n            else if (inflectionalEnding instanceof unit_1.CheckedInflectionalEnding) {\n                if (morphemes[morphemes.length - 1].getForms().length == 0)\n                    return [];\n                const wrd = new unit_1.TonalWord(morphemes.map(it => it.syllable));\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].getForms()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n    populateLemmata(morphemes, inflectionalEnding) {\n        let lemmata = new Array();\n        // turn morphemes into lemmas\n        let lms = this.getLemmas(morphemes, inflectionalEnding);\n        if (lms.length > 0) {\n            for (let key in lms) {\n                lemmata.push(lms[key]);\n            }\n        }\n        return lemmata;\n    }\n}\nexports.TonalLemmatization = TonalLemmatization;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9tZXRhcGxhc20uanM/MjBiMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLHlEQUFRO0FBQy9CLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QyxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUMsc0JBQXNCLG1CQUFPLENBQUMsMkVBQXNCO0FBQ3BELHdCQUF3QixtQkFBTyxDQUFDLCtFQUF3QjtBQUN4RCxrQkFBa0IsbUJBQU8sQ0FBQywrREFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsNkdBQTZHO0FBQzdHLDhHQUE4RztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsaUdBQWlHO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLGdEQUFnRDtBQUNoRCxnREFBZ0Q7QUFDaEQsZ0RBQWdEO0FBQ2hEO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS9tZXRhcGxhc20uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9uYWxMZW1tYXRpemF0aW9uID0gZXhwb3J0cy5VbmNvbWJpbmluZ0Zvcm1zSWVuZ1VhbVRvbmVMZXR0ZXIgPSBleHBvcnRzLlVuY29tYmluaW5nRm9ybXNJZXRmSWV0d1RvRWtFa2sgPSBleHBvcnRzLlRyYW5zZml4VW5jb21iaW5pbmcgPSBleHBvcnRzLkxhc3RTeWxsYWJsZUZvcm1zID0gZXhwb3J0cy5QcmVjZWRpbmdBeWV4VW5jb21iaW5pbmcgPSBleHBvcnRzLlBocmFzYWxWZXJiUGFydGljbGVVbmNvbWJpbmluZyA9IGV4cG9ydHMuVG9uYWxVbmNvbWJpbmluZ0Zvcm1zID0gdm9pZCAwO1xuY29uc3QgbWV0YXBsYXNtXzEgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4vdW5pdFwiKTtcbmNvbnN0IHZlcnNpb24yXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvdmVyc2lvbjJcIik7XG5jb25zdCB1bml0XzIgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IG1ldGFwbGFzbV8yID0gcmVxdWlyZShcIi4uL21ldGFwbGFzbVwiKTtcbmNvbnN0IGNvbGxlY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvY29sbGVjdGlvbnNcIik7XG5jb25zdCBzeWxsYWJsZXRhYmxlXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvc3lsbGFibGV0YWJsZVwiKTtcbmNvbnN0IG1hdGNoZXJfMSA9IHJlcXVpcmUoXCIuL21hdGNoZXJcIik7XG4vKiogUmV0dXJucyB0aGUgdW5jb21iaW5pbmcgZm9ybXMgb2YgYSBzeWxsYWJsZS4gKi9cbmNsYXNzIFRvbmFsVW5jb21iaW5pbmdGb3JtcyBleHRlbmRzIG1ldGFwbGFzbV8xLlRvbmFsVW5jb21iaW5pbmdNZXRhcGxhc20ge1xuICAgIGNvbnN0cnVjdG9yKHNvdW5kc0ZvbGxvd2luZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNvdW5kc0ZvbGxvd2luZyA9IHNvdW5kc0ZvbGxvd2luZztcbiAgICB9XG4gICAgaGFuZGxlQXNzaW1pbGF0ZWRGaW5hbChzeWxsYWJsZSwgZmluYWwpIHtcbiAgICAgICAgY29uc3QgZm5sc09mTGVtbWEgPSBjb2xsZWN0aW9uc18xLmZpbmFsQ29uc29uYW50c0ZvckJnamxzYmJnZ2xsc3MuZ2V0KHN5bGxhYmxlLmxhc3RMZXR0ZXIubGl0ZXJhbCArIGZpbmFsKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2cocywgYWxsb21vcnBoLCBmbmwsIGZubHNPZkxlbW1hKTtcbiAgICAgICAgaWYgKGZubHNPZkxlbW1hKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZXMgPSBmbmxzT2ZMZW1tYS5tYXAoaXQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmNyZWF0ZShzeWxsYWJsZSk7XG4gICAgICAgICAgICAgICAgY2xvbmUucmVwbGFjZUxldHRlcihzeWxsYWJsZS5sZXR0ZXJzLmxlbmd0aCAtIDEsIHZlcnNpb24yXzEubG93ZXJMZXR0ZXJzVG9uYWwuZ2V0KGl0LnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IFtdO1xuICAgICAgICAgICAgY2xvbmVzLm1hcChpdCA9PiByZXQucHVzaChpdCkpO1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFwcGx5KHNvdW5kcywgYWxsb21vcnBoKSB7XG4gICAgICAgIGlmIChhbGxvbW9ycGgpIHtcbiAgICAgICAgICAgIGlmIChhbGxvbW9ycGggaW5zdGFuY2VvZiB2ZXJzaW9uMl8xLkZyZWVBbGxvbW9ycGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxsb21vcnBoIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5aZXJvQWxsb21vcnBoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggeSB0byBtYWtlIHRvbmUgMlxuICAgICAgICAgICAgICAgICAgICAvLyAxIHRvIDJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShzb3VuZHMubWFwKHggPT4gbmV3IHVuaXRfMi5BbHBoYWJldGljTGV0dGVyKHguY2hhcmFjdGVycykpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG5sdHJzID0gdmVyc2lvbjJfMS5mcmVlQWxsb21vcnBoVW5jb21iaW5pbmdSdWxlcy5nZXQoJ3plcm8nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRubHRycylcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcihuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIodG5sdHJzWzBdLmNoYXJhY3RlcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSA3dGggdG9uZSBoYXMgdHdvIGJhc2Vmb3Jtc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcnVsZXMgPSB2ZXJzaW9uMl8xLmZyZWVBbGxvbW9ycGhVbmNvbWJpbmluZ1J1bGVzLmdldChhbGxvbW9ycGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRubHRycyA9ICFydWxlcyA/IFtdIDogcnVsZXM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdG5sdHJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IHVuaXRfMS5Ub25hbFN5bGxhYmxlKHNvdW5kcy5tYXAoeCA9PiBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoeC5jaGFyYWN0ZXJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodG5sdHJzW2ldIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5aZXJvQWxsb21vcnBoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIgdG8gMy4gMyB0byA3LiA3IHRvIDUuIDMgdG8gNS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHogd2l0aCBmIG9yIHhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcihuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIodG5sdHJzW2ldLmNoYXJhY3RlcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDcgdG8gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcCB6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuQ2hlY2tlZEFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgdW5pdF8xLlRvbmFsU3lsbGFibGUoc291bmRzLm1hcChpdCA9PiBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoaXQuY2hhcmFjdGVycykpKTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsb21vcnBoLnRvbmFsLnRvU3RyaW5nKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGZpbmFsIGlzIGFzc2ltaWxhdGVkLCBhbiBlbXB0eSBhcnJheSB3aWxsIGJlIHJldHVybmVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUFzc2ltaWxhdGVkRmluYWwocywgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBwb3AgdGhlIHRvbmUgbGV0dGVyXG4gICAgICAgICAgICAgICAgLy8gMSB0byA0LiAzIHRvIDguIDIgdG8gNC4gNSB0byA4LlxuICAgICAgICAgICAgICAgIGNvbnN0IGZubCA9IHMubGV0dGVyc1tzLmxldHRlcnMubGVuZ3RoIC0gMV0ubGl0ZXJhbDtcbiAgICAgICAgICAgICAgICBjb25zdCBuc2xGbmxzID0gc291bmRzLmZpbHRlcihpdCA9PiBpdC5uYW1lID09PSB2ZXJzaW9uMl8xLlRvbmFsU291bmRUYWdzLm5hc2FsRmluYWxDb25zb25hbnQpO1xuICAgICAgICAgICAgICAgIHMucG9wTGV0dGVyKCk7IC8vIHBvcCBvdXQgdGhlIHRvbmUgbGV0dGVyXG4gICAgICAgICAgICAgICAgaWYgKG5zbEZubHMubGVuZ3RoID09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgKGZubCA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudyB8fCBmbmwgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLngpICYmXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20oY29sbGVjdGlvbnNfMS5mb3VydGhUb0VpZ2h0aEZpbmFsQ29uc29uYW50cy5rZXlzKCkpLmluY2x1ZGVzKHMubGFzdExldHRlci5saXRlcmFsKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIG5vIGludGVybmFsIHNhbmRoaVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbmwgPSBzLmxhc3RMZXR0ZXIubGl0ZXJhbDtcbiAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIHRoZSA0dGggZmluYWwgY29uc29uYW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdvdCA9IGNvbGxlY3Rpb25zXzEuZm91cnRoVG9FaWdodGhGaW5hbENvbnNvbmFudHMuZ2V0KGZubCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzeWxsYWJsZXRhYmxlXzEuaXNJblN5bGxhYmxlVGFibGUocy5saXRlcmFsICsgdmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQoZ290KS5saXRlcmFsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdGhlIDh0aCBmaW5hbCBjb25zb25hbnQgaWYgaXQgaXMgcHJlc2VudCBpbiBzeWxsYWJsZSB0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldChnb3QpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmxldHRlcnMubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubGV0dGVyc1swXS5saXRlcmFsID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubGV0dGVyc1sxXS5saXRlcmFsID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZubCA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Muaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgY29tYmluaW5nIGZvcm0gJ3Rpa3cnIG9mIGxleGljYWwgcm9vdCAndGVraydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluaW5nIGZvcm1zICd0aWV0dycgYW5kICd0aWV0ZiBpcyBoYW5kbGVkIGluIGFub3RoZXIgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIG91dCB2b3dlbCBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lKSk7IC8vIHB1c2ggdm93ZWwgZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mua2spKTsgLy8gcHVzaCBmaW5hbCBjb25zb25hbnQga2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgdGhlIHBvcHBlZC1vdXQgZmluYWwgY29uc29uYW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIHN5bGxhYmxlIGlzIGp1c3QgcmV0dXJuZWQgd2l0aCBpdHMgdG9uZSBsZXR0ZXIgcG9wcGVkIG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQoZm5sKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxDb25zb25hbnRzRm9yQmdqbHNiYmdnbGxzcy5oYXMocy5sYXN0TGV0dGVyLmxpdGVyYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGNhc2Ugb2YgaW50ZXJuYWwgb3IgZXh0ZXJuYWwgc2FuZGhpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMuaGFuZGxlQXNzaW1pbGF0ZWRGaW5hbChzLCBmbmwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmV0ICYmIHJldC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc291bmRzLmZpbHRlcihpdCA9PiBpdC5uYW1lID09PSB2ZXJzaW9uMl8xLlRvbmFsU291bmRUYWdzLnZvd2VsKS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25zXzEubmFzYWxGaW5hbENvbnNvbmFudHMuaW5jbHVkZXMocy5sYXN0U2Vjb25kTGV0dGVyLmxpdGVyYWwpICYmXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb24yXzEubmV1dHJhbEZpbmFsQ29uc29uYW50c1RvbmFsLmluY2x1ZGVzKHMubGFzdExldHRlci5saXRlcmFsKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIGludGVybmFsIHNhbmRoaSBvZiBwIG9yIHRcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gbWVkaWFscywgZS5nLiBobWhoLCBobmdoLCBqdXN0IGJ5cGFzcyB0aGlzIGJsb2NrXG4gICAgICAgICAgICAgICAgICAgIC8vIG1oaCwgbWgsIG5oaCwgbmgsIG5naGgsIG5naFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zb3VuZHNGb2xsb3dpbmdbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc291bmRzRm9sbG93aW5nWzBdLm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTb3VuZFRhZ3MuaW5pdGlhbENvbnNvbmFudCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcy5sYXN0U2Vjb25kTGV0dGVyLmxpdGVyYWwgPT09IHRoaXMuc291bmRzRm9sbG93aW5nWzBdLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVuY2hhbmdlIHRvIC10dCBvciAtdFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIHRoZSBuZXV0cmFsXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpOyAvLyBwb3AgdGhlIG5hc2FsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IE9iamVjdC5jcmVhdGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAobnRybCA9PT0gVG9uYWxMZXR0ZXJUYWdzLmhoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm5sID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy53KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUucHVzaExldHRlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUucHVzaExldHRlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2Nsb25lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNvdW5kc0ZvbGxvd2luZ1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaGFzIHRvIGJlIGEgZm9sbG93aW5nIHN5bGxhYmxlIGZvciB0aGlzIHN5bGxhYmxlIHRvIGNoYW5nZSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmNoYW5nZSB0byAtcHAgb3IgLXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucG9wTGV0dGVyKCk7IC8vIHBvcCB0aGUgbmV1dHJhbFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIHRoZSBuYXNhbFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBPYmplY3QuY3JlYXRlKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKG50cmwgPT09IFRvbmFsTGV0dGVyVGFncy5oaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZubCA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mudykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MucHApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MucCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtjbG9uZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYSBzeWxsYWJsZSBpcyBqdXN0IHJldHVybmVkIHdpdGggdGhlIHRvbmUgbGV0dGVyIHBvcHBlZCBvdXRcbiAgICAgICAgICAgICAgICAvLyBlLmcuIHRuZ2h3J3MgdyBpcyBwb3BwZWQgYW5kIHRuZ2ggaXMgcmV0dXJuZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gW3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsVW5jb21iaW5pbmdGb3JtcyA9IFRvbmFsVW5jb21iaW5pbmdGb3Jtcztcbi8qKiBSZXR1cm5zIHRoZSB1bmNvbWJpbmluZyBmb3JtcyBvZiBhIHBocmFzbCB2ZXJiIHBhcnRpY2xlIHN5bGxhYmxlLiAqL1xuY2xhc3MgUGhyYXNhbFZlcmJQYXJ0aWNsZVVuY29tYmluaW5nIGV4dGVuZHMgbWV0YXBsYXNtXzEuVG9uYWxVbmNvbWJpbmluZ01ldGFwbGFzbSB7XG4gICAgYXBwbHkoc291bmRzLCBhbGxvbW9ycGgpIHtcbiAgICAgICAgaWYgKGFsbG9tb3JwaCkge1xuICAgICAgICAgICAgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuRnJlZUFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgIC8vIDcgdG8gNFxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgdW5pdF8xLlRvbmFsU3lsbGFibGUoc291bmRzLm1hcChpdCA9PiBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoaXQuY2hhcmFjdGVycykpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0bmwgPSBzb3VuZHMuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTb3VuZFRhZ3MuZnJlZVRvbmUpO1xuICAgICAgICAgICAgICAgIGlmICh0bmwgJiYgdG5sWzBdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnopIHtcbiAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIHRoZSB0b25hbFxuICAgICAgICAgICAgICAgICAgICBzLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCkpOyAvLyBwdXNoIG5ldXRyYWwgZmluYWxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuQ2hlY2tlZEFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgIC8vIDEgdG8gNC4gMyB0byA0LlxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgdW5pdF8xLlRvbmFsU3lsbGFibGUoc291bmRzLm1hcChpdCA9PiBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoaXQuY2hhcmFjdGVycykpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0bmwgPSBzb3VuZHMuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTb3VuZFRhZ3MuY2hlY2tlZFRvbmUpO1xuICAgICAgICAgICAgICAgIGlmICh0bmwgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRubFswXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0bmxbMF0udG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudykpIHtcbiAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTsgLy8gcG9wIHRoZSB0b25hbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlBocmFzYWxWZXJiUGFydGljbGVVbmNvbWJpbmluZyA9IFBocmFzYWxWZXJiUGFydGljbGVVbmNvbWJpbmluZztcbi8qKiBSZXR1cm5zIHRoZSB1bmNvbWJpbmluZyBmb3JtcyBvZiB0aGUgc3lsbGFibGUgcHJlY2VkaW5nIGF5ICovXG5jbGFzcyBQcmVjZWRpbmdBeWV4VW5jb21iaW5pbmcgZXh0ZW5kcyBtZXRhcGxhc21fMS5Ub25hbFVuY29tYmluaW5nTWV0YXBsYXNtIHtcbiAgICBnZXRVbmNvbWJpbmluZ0Zvcm1zKHN5bGxhYmxlLCBsZXR0ZXJzKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uc18xLnZvaWNlZFZvaWNlbGVzc0ZpbmFsQ29uc29uYW50cy5oYXMobGV0dGVyc1tsZXR0ZXJzLmxlbmd0aCAtIDJdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAvLyBpbiBjYXNlIG9mIHNhbmRoaSBmaW5hbHNcbiAgICAgICAgICAgIGNvbnN0IGZubCA9IGNvbGxlY3Rpb25zXzEudm9pY2VkVm9pY2VsZXNzRmluYWxDb25zb25hbnRzLmdldChzeWxsYWJsZS5sYXN0TGV0dGVyLmxpdGVyYWwgKyBsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMV0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBpZiAoZm5sKVxuICAgICAgICAgICAgICAgIHN5bGxhYmxlLnJlcGxhY2VMZXR0ZXIoc3lsbGFibGUubGV0dGVycy5sZW5ndGggLSAxLCB2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldChmbmwpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0aW9uc18xLmZvdXJ0aFRvRWlnaHRoRmluYWxDb25zb25hbnRzLmhhcyhsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMl0udG9TdHJpbmcoKSkgJiZcbiAgICAgICAgICAgIGxldHRlcnNbbGV0dGVycy5sZW5ndGggLSAxXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy54KSB7XG4gICAgICAgICAgICBjb25zdCBmbmwgPSBjb2xsZWN0aW9uc18xLmZvdXJ0aFRvRWlnaHRoRmluYWxDb25zb25hbnRzLmdldChzeWxsYWJsZS5sYXN0TGV0dGVyLmxpdGVyYWwpO1xuICAgICAgICAgICAgaWYgKGZubClcbiAgICAgICAgICAgICAgICBzeWxsYWJsZS5yZXBsYWNlTGV0dGVyKHN5bGxhYmxlLmxldHRlcnMubGVuZ3RoIC0gMSwgdmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQoZm5sKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwbHkoc291bmRzLCBhbGxvbW9ycGgpIHtcbiAgICAgICAgaWYgKGFsbG9tb3JwaCkge1xuICAgICAgICAgICAgaWYgKGFsbG9tb3JwaC50b25hbC50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuRnJlZUFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmxzID0gdmVyc2lvbjJfMS51bmNvbWJpbmluZ1J1bGVzQXkuZ2V0KGFsbG9tb3JwaC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG5scyA9ICFybHMgPyBbXSA6IHJscztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0bmxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShzb3VuZHMubWFwKGl0ID0+IG5ldyB1bml0XzIuQWxwaGFiZXRpY0xldHRlcihpdC5jaGFyYWN0ZXJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSB0byAyLiAxIHRvIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgZiB3aXRoIHkgb3Igd1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5wb3BMZXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcihuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIodG5sc1tpXS5jaGFyYWN0ZXJzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhbGxvbW9ycGggaW5zdGFuY2VvZiB2ZXJzaW9uMl8xLkNoZWNrZWRBbGxvbW9ycGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShzb3VuZHMubWFwKGl0ID0+IG5ldyB1bml0XzIuQWxwaGFiZXRpY0xldHRlcihpdC5jaGFyYWN0ZXJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBwb3AgZlxuICAgICAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFVuY29tYmluaW5nRm9ybXMocywgc291bmRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhbGxvbW9ycGgudG9uYWwudG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueCkge1xuICAgICAgICAgICAgICAgIC8vIDUgdG8gMS4gNSB0byA3LiA1IHRvIDUuXG4gICAgICAgICAgICAgICAgaWYgKGFsbG9tb3JwaCBpbnN0YW5jZW9mIHZlcnNpb24yXzEuRnJlZUFsbG9tb3JwaCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmxzID0gdmVyc2lvbjJfMS51bmNvbWJpbmluZ1J1bGVzQXkuZ2V0KGFsbG9tb3JwaC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG5scyA9ICFybHMgPyBbXSA6IHJscztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0bmxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShzb3VuZHMubWFwKGl0ID0+IG5ldyB1bml0XzIuQWxwaGFiZXRpY0xldHRlcihpdC5jaGFyYWN0ZXJzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodG5sc1tpXSBpbnN0YW5jZW9mIHZlcnNpb24yXzEuWmVyb1RvbmFsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bmxzW2ldIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5GcmVlVG9uYWxaKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDUgdG8gN1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHggd2l0aCB6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucG9wTGV0dGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaExldHRlcihuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIodG5sc1tpXS5jaGFyYWN0ZXJzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0bmxzW2ldIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5GcmVlVG9uYWxYKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDUgdG8gNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQucHVzaChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA1IHRvIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3AgeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucG9wTGV0dGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2gocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWxsb21vcnBoIGluc3RhbmNlb2YgdmVyc2lvbjJfMS5DaGVja2VkQWxsb21vcnBoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDUgdG8gOC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShzb3VuZHMubWFwKGl0ID0+IG5ldyB1bml0XzIuQWxwaGFiZXRpY0xldHRlcihpdC5jaGFyYWN0ZXJzKSkpO1xuICAgICAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpOyAvLyBwb3AgeFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFVuY29tYmluaW5nRm9ybXMocywgc291bmRzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhbGxvbW9ycGgudG9uYWwudG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZXhwb3J0cy5QcmVjZWRpbmdBeWV4VW5jb21iaW5pbmcgPSBQcmVjZWRpbmdBeWV4VW5jb21iaW5pbmc7XG4vKiogUmV0dXJucyB0aGUgbGFzdCBzeWxsYWJsZSBvZiBhIGRvdWJsZSBvciB0cmlwbGUgY29uc3RydWN0aW9uIGFzIGFuIHVuY29tYmluaW5nIGZvcm0uICovXG5jbGFzcyBMYXN0U3lsbGFibGVGb3JtcyBleHRlbmRzIG1ldGFwbGFzbV8xLlRvbmFsVW5jb21iaW5pbmdNZXRhcGxhc20ge1xuICAgIGNvbnN0cnVjdG9yKGxldHRlcnNMYXN0U3lsbGFibGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzTGFzdFN5bGxhYmxlID0gbGV0dGVyc0xhc3RTeWxsYWJsZTtcbiAgICB9XG4gICAgYXBwbHkoc291bmRzLCBhbGxvbW9ycGgpIHtcbiAgICAgICAgaWYgKGFsbG9tb3JwaCkge1xuICAgICAgICAgICAgLy8gc2tpcCB0aGUgbGFzdCBzeWxsYWJsZS4gaXQgaXMgdGhlIGJhc2UgZm9ybSBvZiB0aGUgcHJlY2VkaW5nIDIgc3lsbGFibGVzLlxuICAgICAgICAgICAgaWYgKHRoaXMubGV0dGVyc0xhc3RTeWxsYWJsZVt0aGlzLmxldHRlcnNMYXN0U3lsbGFibGUubGVuZ3RoIC0gMV0udG9TdHJpbmcoKSA9PT0gc291bmRzW3NvdW5kcy5sZW5ndGggLSAxXS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgdW5pdF8xLlRvbmFsU3lsbGFibGUodGhpcy5sZXR0ZXJzTGFzdFN5bGxhYmxlLm1hcChpdCA9PiBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoaXQuY2hhcmFjdGVycykpKTtcbiAgICAgICAgICAgIHJldHVybiBbc107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuTGFzdFN5bGxhYmxlRm9ybXMgPSBMYXN0U3lsbGFibGVGb3Jtcztcbi8qKiBSZXR1cm5zIHRoZSB1bmNvbWJpbmluZyBmb3JtcyBvZiBhIHRyYW5zZml4IGluZmxlY3RlZCBzeWxsYWJsZS4gKi9cbmNsYXNzIFRyYW5zZml4VW5jb21iaW5pbmcgZXh0ZW5kcyBtZXRhcGxhc21fMS5Ub25hbFVuY29tYmluaW5nTWV0YXBsYXNtIHtcbiAgICBhcHBseShzb3VuZHMsIGFsbG9tb3JwaCkge1xuICAgICAgICBpZiAoYWxsb21vcnBoKSB7XG4gICAgICAgICAgICBjb25zdCB2b3dlbEEgPSBzb3VuZHMuZmlsdGVyKGl0ID0+IGl0LnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEpO1xuICAgICAgICAgICAgY29uc3QgY2hrRm5scyA9IHNvdW5kcy5maWx0ZXIoaXQgPT4gaXQubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNvdW5kVGFncy5jaGVja2VkVG9uZSk7XG4gICAgICAgICAgICBjb25zdCBzID0gbmV3IHVuaXRfMS5Ub25hbFN5bGxhYmxlKHNvdW5kcy5tYXAoaXQgPT4gbmV3IHVuaXRfMi5BbHBoYWJldGljTGV0dGVyKGl0LmNoYXJhY3RlcnMpKSk7XG4gICAgICAgICAgICBpZiAodm93ZWxBLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gYXcgLT4gYXlcbiAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpOyAvLyBwb3AgbGV0dGVyIHdcbiAgICAgICAgICAgICAgICBzLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGtGbmxzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2tlZCB0b25lc1xuICAgICAgICAgICAgICAgIHMucG9wTGV0dGVyKCk7IC8vIHBvcCBsZXR0ZXIgd1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmNyZWF0ZShzKTtcbiAgICAgICAgICAgICAgICAvLyBnZXQgaGggb3IgdHRcbiAgICAgICAgICAgICAgICBjb25zdCBnb3QgPSBjb2xsZWN0aW9uc18xLmZpbmFsQ29uc29uYW50c0ZvclRyYW5zZml4LmdldChzLmxldHRlcnNbcy5sZXR0ZXJzLmxlbmd0aCAtIDFdLmxpdGVyYWwpO1xuICAgICAgICAgICAgICAgIGlmIChnb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUucG9wTGV0dGVyKCk7IC8vIHBvcCBmaW5hbCB0XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQoZ290KSk7IC8vIHB1c2ggaGggb3IgdHRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzLCBjbG9uZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIGZyZWUgdG9uZXMgb3RoZXIgdGhhbiBhdywgcmV0dXJuIHRoZSBvdGhlciBmb3VyIGZyZWUgdG9uZXNcbiAgICAgICAgICAgICAgICBzLnBvcExldHRlcigpOyAvLyBwb3AgbGV0dGVyIHcuIDFzdCB0b25lXG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmUyID0gT2JqZWN0LmNyZWF0ZShzKTsgLy8gMm5kIHRvbmVcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZTUgPSBPYmplY3QuY3JlYXRlKHMpOyAvLyA1dGggdG9uZVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lNyA9IE9iamVjdC5jcmVhdGUocyk7IC8vIDd0aCB0b25lXG4gICAgICAgICAgICAgICAgY2xvbmUyLnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueSkpO1xuICAgICAgICAgICAgICAgIGNsb25lNS5wb3BMZXR0ZXIoKTsgLy8gbGV0dGVyIHkgd2FzIGFsc28gcHVzaGVkIHRvIGNsb25lNSwgc28gd2UgaGF2ZSB0byBwb3AgaXQgb3V0LiBidWc/XG4gICAgICAgICAgICAgICAgY2xvbmU1LnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueCkpO1xuICAgICAgICAgICAgICAgIGNsb25lNy5wb3BMZXR0ZXIoKTsgLy8gbGV0dGVyIHkgd2FzIGFsc28gcHVzaGVkIHRvIGNsb25lNywgc28gd2UgaGF2ZSB0byBwb3AgaXQgb3V0LiBidWc/XG4gICAgICAgICAgICAgICAgY2xvbmU3LnB1c2hMZXR0ZXIodmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbcywgY2xvbmUyLCBjbG9uZTUsIGNsb25lN107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVHJhbnNmaXhVbmNvbWJpbmluZyA9IFRyYW5zZml4VW5jb21iaW5pbmc7XG4vKiogQ2hhbmdlIH5pZXRmIG9yIGlldHcgdG8gfmVrIG9yIH5la2suICovXG5jbGFzcyBVbmNvbWJpbmluZ0Zvcm1zSWV0ZklldHdUb0VrRWtrIGV4dGVuZHMgbWV0YXBsYXNtXzEuVG9uYWxVbmNvbWJpbmluZ01ldGFwbGFzbSB7XG4gICAgYXBwbHkoc291bmRzLCBhbGxvbW9ycGgpIHtcbiAgICAgICAgaWYgKGFsbG9tb3JwaCkge1xuICAgICAgICAgICAgY29uc3QgaWNzID0gc291bmRzLmZpbHRlcihpID0+IGkubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNvdW5kVGFncy5pbml0aWFsQ29uc29uYW50KTtcbiAgICAgICAgICAgIGNvbnN0IHRzID0gc291bmRzLmZpbHRlcihpID0+IGkubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNvdW5kVGFncy5jaGVja2VkVG9uZSk7XG4gICAgICAgICAgICBpZiAoaWNzLmxlbmd0aCA+IDAgJiYgdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0c1swXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGNhc2Ugb2YgfmlldGZcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyB1bml0XzEuVG9uYWxTeWxsYWJsZShbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgdW5pdF8yLkFscGhhYmV0aWNMZXR0ZXIoaWNzWzBdLmNoYXJhY3RlcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjJfMS5sb3dlckxldHRlcnNUb25hbC5nZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rKSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRzWzBdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLncpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSBvZiB+aWV0d1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IHVuaXRfMS5Ub25hbFN5bGxhYmxlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyB1bml0XzIuQWxwaGFiZXRpY0xldHRlcihpY3NbMF0uY2hhcmFjdGVycyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLmdldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24yXzEubG93ZXJMZXR0ZXJzVG9uYWwuZ2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmtrKSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5leHBvcnRzLlVuY29tYmluaW5nRm9ybXNJZXRmSWV0d1RvRWtFa2sgPSBVbmNvbWJpbmluZ0Zvcm1zSWV0ZklldHdUb0VrRWtrO1xuY2xhc3MgVW5jb21iaW5pbmdGb3Jtc0llbmdVYW1Ub25lTGV0dGVyIGV4dGVuZHMgbWV0YXBsYXNtXzEuVG9uYWxVbmNvbWJpbmluZ01ldGFwbGFzbSB7XG4gICAgYXBwbHkoc291bmRzLCBhbGxvbW9ycGgpIHtcbiAgICAgICAgaWYgKGFsbG9tb3JwaCkge1xuICAgICAgICAgICAgaWYgKHNvdW5kcy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICAgICAgbWF0Y2hlcl8xLnNtTW5nRnl3eHooc291bmRzW3NvdW5kcy5sZW5ndGggLSAyXS50b1N0cmluZygpLCBzb3VuZHNbc291bmRzLmxlbmd0aCAtIDFdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gY2FzZSBvZiAtaWVuZyBwbHVzIGEgdG9uZSBsZXR0ZXIuIGUuZy4gbGllbmd6bmdhdXpcbiAgICAgICAgICAgICAgICAvLyBsZXQgcmV0OiBUb25hbFN5bGxhYmxlW10gPSBbXTtcbiAgICAgICAgICAgICAgICAvLyBjb25zdCBydWxlcyA9IGZyZWVBbGxvbW9ycGhVbmNvbWJpbmluZ1J1bGVzLmdldChhbGxvbW9ycGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgdG5sdHJzID0gIXJ1bGVzID8gW10gOiBydWxlcztcbiAgICAgICAgICAgICAgICAvLyBmb3IgKGxldCBpIGluIHRubHRycykge1xuICAgICAgICAgICAgICAgIC8vICAgbGV0IHM6IFRvbmFsU3lsbGFibGUgPSBuZXcgVG9uYWxTeWxsYWJsZShcbiAgICAgICAgICAgICAgICAvLyAgICAgc291bmRzLm1hcCh4ID0+IG5ldyBBbHBoYWJldGljTGV0dGVyKHguY2hhcmFjdGVycykpXG4gICAgICAgICAgICAgICAgLy8gICApO1xuICAgICAgICAgICAgICAgIC8vICAgcy5yZXBsYWNlTGV0dGVyKFxuICAgICAgICAgICAgICAgIC8vICAgICBzb3VuZHMubGVuZ3RoIC0gMixcbiAgICAgICAgICAgICAgICAvLyAgICAgbG93ZXJMZXR0ZXJzVG9uYWwuZ2V0KFRvbmFsTGV0dGVyVGFncy5uKVxuICAgICAgICAgICAgICAgIC8vICAgKTsgLy8gcmVwbGFjZSBsZXR0ZXIgbmcgd2l0aCBuXG4gICAgICAgICAgICAgICAgLy8gICBpZiAoISh0bmx0cnNbaV0gaW5zdGFuY2VvZiBaZXJvQWxsb21vcnBoKSkge1xuICAgICAgICAgICAgICAgIC8vIDIgdG8gMy4gMyB0byA3LiA3IHRvIDUuIDMgdG8gNS5cbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHogd2l0aCBmIG9yIHhcbiAgICAgICAgICAgICAgICAvLyAgIHMucG9wTGV0dGVyKCk7XG4gICAgICAgICAgICAgICAgLy8gICBzLnB1c2hMZXR0ZXIobmV3IEFscGhhYmV0aWNMZXR0ZXIodG5sdHJzW2ldLmNoYXJhY3RlcnMpKTtcbiAgICAgICAgICAgICAgICAvLyAgIHJldC5wdXNoKHMpO1xuICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gNyB0byAxXG4gICAgICAgICAgICAgICAgLy8gcG9wIHpcbiAgICAgICAgICAgICAgICAvLyAgICAgcy5wb3BMZXR0ZXIoKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0LnB1c2gocyk7XG4gICAgICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIC8vIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5jb21iaW5pbmdGb3Jtc0llbmdVYW1Ub25lTGV0dGVyID0gVW5jb21iaW5pbmdGb3Jtc0llbmdVYW1Ub25lTGV0dGVyO1xuLyoqIExlbW1hdGl6ZXMgYSB3b3JkIGFuZCByZXR1cm5zIGl0cyBiYXNlIGZvcm1zLiAqL1xuY2xhc3MgVG9uYWxMZW1tYXRpemF0aW9uIGV4dGVuZHMgbWV0YXBsYXNtXzIuVG9uYWxMZW1tYXRpemF0aW9uTWV0YXBsYXNtIHtcbiAgICBhcHBseShtb3JwaGVtZXMsIGluZmxlY3Rpb25hbEVuZGluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3B1bGF0ZUxlbW1hdGEobW9ycGhlbWVzLCBpbmZsZWN0aW9uYWxFbmRpbmcpO1xuICAgIH1cbiAgICBnZXRMZW1tYXMobW9ycGhlbWVzLCBpbmZsZWN0aW9uYWxFbmRpbmcpIHtcbiAgICAgICAgaWYgKGluZmxlY3Rpb25hbEVuZGluZykge1xuICAgICAgICAgICAgaWYgKGluZmxlY3Rpb25hbEVuZGluZyBpbnN0YW5jZW9mIHVuaXRfMS5GcmVlSW5mbGVjdGlvbmFsRW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmV0ID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyID0gbW9ycGhlbWVzW21vcnBoZW1lcy5sZW5ndGggLSAxXS5nZXRGb3JtcygpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGFycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cmQgPSBuZXcgdW5pdF8xLlRvbmFsV29yZChtb3JwaGVtZXMubWFwKGl0ID0+IGl0LnN5bGxhYmxlKSk7XG4gICAgICAgICAgICAgICAgICAgIHdyZC5wb3BTeWxsYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICB3cmQucHVzaFN5bGxhYmxlKGFycltrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2god3JkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluZmxlY3Rpb25hbEVuZGluZyBpbnN0YW5jZW9mIHVuaXRfMS5DaGVja2VkSW5mbGVjdGlvbmFsRW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vcnBoZW1lc1ttb3JwaGVtZXMubGVuZ3RoIC0gMV0uZ2V0Rm9ybXMoKS5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdyZCA9IG5ldyB1bml0XzEuVG9uYWxXb3JkKG1vcnBoZW1lcy5tYXAoaXQgPT4gaXQuc3lsbGFibGUpKTtcbiAgICAgICAgICAgICAgICB3cmQucG9wU3lsbGFibGUoKTtcbiAgICAgICAgICAgICAgICB3cmQucHVzaFN5bGxhYmxlKG1vcnBoZW1lc1ttb3JwaGVtZXMubGVuZ3RoIC0gMV0uZ2V0Rm9ybXMoKVswXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt3cmRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcG9wdWxhdGVMZW1tYXRhKG1vcnBoZW1lcywgaW5mbGVjdGlvbmFsRW5kaW5nKSB7XG4gICAgICAgIGxldCBsZW1tYXRhID0gbmV3IEFycmF5KCk7XG4gICAgICAgIC8vIHR1cm4gbW9ycGhlbWVzIGludG8gbGVtbWFzXG4gICAgICAgIGxldCBsbXMgPSB0aGlzLmdldExlbW1hcyhtb3JwaGVtZXMsIGluZmxlY3Rpb25hbEVuZGluZyk7XG4gICAgICAgIGlmIChsbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGxtcykge1xuICAgICAgICAgICAgICAgIGxlbW1hdGEucHVzaChsbXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbW1hdGE7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbExlbW1hdGl6YXRpb24gPSBUb25hbExlbW1hdGl6YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhcGxhc20uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/morpheme.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/morpheme.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalSoundUnchangingMorphemeMaker = exports.TonalSoundUnchangingMorpheme = exports.TonalUncombiningMorphemeMaker = exports.TonalUncombiningMorpheme = exports.syllabifyTonal = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst maker_1 = __webpack_require__(/*! ../maker */ \"./node_modules/taipa/lib/maker.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst soundgen_1 = __webpack_require__(/*! ../tonal/soundgen */ \"./node_modules/taipa/lib/tonal/soundgen.js\");\nconst syllabletable_1 = __webpack_require__(/*! ../tonal/syllabletable */ \"./node_modules/taipa/lib/tonal/syllabletable.js\");\nconst matcher_1 = __webpack_require__(/*! ./matcher */ \"./node_modules/taipa/lib/unchange/matcher.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/unchange/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst unit_3 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unchange/unit.js\");\nfunction syllabifyTonal(letters, beginOfSyllable) {\n    // get the longest matched syllable pattern\n    let literal = '';\n    let matched = '';\n    let begin = 0;\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    let literalLexicalRoot4th8th = ''; // could be an 4th or 8th root\n    let literalLexicalRootEighth = ''; // specific an 8th root\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        // console.log(`begining of the loop: ${literal}. ${ltrs}`);\n        const had = collections_1.fourthToEighthFinalConsonants.has(letters[i].literal);\n        if (i + 1 < letters.length &&\n            had &&\n            (version2_1.TonalLetterTags.w === letters[i + 1].literal ||\n                version2_1.TonalLetterTags.x === letters[i + 1].literal)) {\n            const got = collections_1.fourthToEighthFinalConsonants.get(letters[i].literal);\n            // restore the lexical roots for 4th final consonants, which is 8th finals\n            // in case of absent 8th roots, 4th roots should also be restored\n            // e.g. koehwlaih, jiwpowcitwlaw, khihwlih\n            // in case of absent 4th roots for an triplet\n            // e.g. juahxjuahwjuahh. there is no juah present in syllable table\n            // 4th and 8th roots for 3rd checked tones\n            if (got) {\n                // since it is 4th finals, length of 4th final is one, just slice one character\n                literalLexicalRootEighth =\n                    literalLexicalRoot4th8th.slice(0, literalLexicalRoot4th8th.length) +\n                        got;\n                // console.log(`literalRoot4thFinal: ${literalRoot4thChecked}, 8th: ${literalRoot8thChecked}`);\n                // the below fourth should go after the above eighth\n                literalLexicalRoot4th8th =\n                    literalLexicalRoot4th8th + letters[i].literal;\n            }\n        }\n        else {\n            literalLexicalRoot4th8th = literalLexicalRoot4th8th + letters[i].literal;\n        }\n        if (syllabletable_1.isInSyllableTable(literal) &&\n            version2_1.freeToneLettersTonal.includes(letters[i].literal)) {\n            // console.log(`i: ${i}, literal: ${literal}, tone: ${letters[i].literal}, letters[i+1]: ${letters[i + 1].literal}`)\n            if (begin === beginOfSyllable) {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if ((syllabletable_1.isInSyllableTable(literalLexicalRoot4th8th) ||\n            syllabletable_1.isInSyllableTable(literalLexicalRootEighth)) &&\n            version2_1.stopFinalConsonantsTonal.includes(letters[i].literal)) {\n            // console.log(`i: ${i}, literal: ${literal}, root4th8th: ${literalLexicalRoot4th8th}, root8th: ${literalLexicalRootEighth}, stopFinalConsonant: ${letters[i].literal}`);\n            // console.log(`begin: ${begin}, beginOfSyllable: ${beginOfSyllable}`);\n            if (begin === beginOfSyllable) {\n                matched = literal; // assign literal instead of literalRoot4thFinal\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if (version2_1.freeToneLettersTonal.includes(letters[i].literal)) {\n            // check tonals is the subset of free tonals\n            // console.log(`i: ${i}, literal: ${literal}, letters[i].literal, ${letters[i].literal}`);\n            // when there are tonals\n            if (literal.length > 1 &&\n                letters[i] &&\n                letters[i - 1] &&\n                (matcher_1.smBgkpF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smBgkpWx(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smJlsF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smLsWx(letters[i - 1].literal, letters[i].literal))) {\n                // b, g, bb, gg, l, j, s, ll, ss need to be handled in TonalCombiningMorpheme.assignAllomorph\n                // this combining form is not present in the pool.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            else if (literal.length > 2 &&\n                letters[i] &&\n                letters[i - 1] &&\n                letters[i - 2] &&\n                matcher_1.smMnngHWx(letters[i - 2].literal, letters[i - 1].literal, letters[i].literal)) {\n                // in case of -mhw.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            else if (literal.length > 1 &&\n                letters[i] &&\n                letters[i - 1] &&\n                matcher_1.smMngFywxz(letters[i - 1].literal, letters[i].literal)) {\n                // in case of -iengz, -uamz.\n                // matched = literal;\n                // Object.assign(matchedLtrs, ltrs);\n                // break;\n            }\n            // tone change of free allomorphs\n            const rulesFa = version2_1.freeAllomorphUncombiningRules.get(letters[i].literal);\n            const tnlsFa = !rulesFa ? [] : rulesFa.map(x => x.toString());\n            // tone sandhi of ay\n            const rulesAy = version2_1.uncombiningRulesAy.get(letters[i].literal);\n            const tnlsAy = !rulesAy ? [] : rulesAy.map(x => x.toString());\n            // merge the above twoo arrays\n            const tnls = tnlsFa.concat(tnlsAy.filter(item => tnlsFa.indexOf(item) < 0));\n            // console.log(`literal: ${literal}`);\n            if (tnls.length > 0) {\n                for (let t of tnls) {\n                    // console.log(literal, t.toString(), tnls.length, tnls);\n                    if (syllabletable_1.isInSyllableTable(letters\n                        .slice(beginOfSyllable, i)\n                        .map(x => x.literal)\n                        .join('') + t)) {\n                        // this combining form is not present in the pool,\n                        // but its uncombining forms are. e.g. aw.\n                        matched = literal;\n                        Object.assign(matchedLtrs, ltrs);\n                        break;\n                    }\n                }\n                if (matched.length > 0 && matchedLtrs.length > 0)\n                    break;\n            }\n            else {\n                // no uncombining forms for this combining form. e.g. ax.\n                matched = '';\n                matchedLtrs = [];\n            }\n        }\n        else if (syllabletable_1.isInSyllableTable(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            begin = beginOfSyllable;\n            // console.log(matched);\n        }\n        else {\n            // console.log('no matched for syllabifyTonal:' + ltrs);\n            // when there are no tone letters\n            if (collections_1.finalConsonantsBgjlsbbggllss.includes(letters[i].literal)) {\n                // for the syllables with sandhi final consonants that are not present in syllable tables\n                const literalWithoutFinal = letters\n                    .map((val, ind, arr) => ind < i && ind >= beginOfSyllable ? arr[ind].literal : '')\n                    .join('');\n                const gotFinalConsonants = collections_1.finalConsonantsForBgjlsbbggllss.get(letters[i].literal);\n                if (gotFinalConsonants) {\n                    // check if at least one uncombinging form present\n                    const isUncombingFormPresent = gotFinalConsonants\n                        .map(it => syllabletable_1.isInSyllableTable(literalWithoutFinal + it))\n                        .reduce((prev, curr, ind, arr) => prev || curr);\n                    // console.log(literal,gotFinalConsonants,isUncombingFormPresent,literalWithoutFinal,`i: ${i}`);\n                    if (isUncombingFormPresent) {\n                        // at least one uncombining form is present\n                        matched = literal;\n                        Object.assign(matchedLtrs, ltrs);\n                    }\n                }\n            }\n            else if (matcher_1.smIK(ltrs[ltrs.length - 2], ltrs[ltrs.length - 1])) {\n                // match for -ik\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            else if (matcher_1.smVowelMng(ltrs[ltrs.length - 2], ltrs[ltrs.length - 1])) {\n                // match for -ieng, -uam\n                // matched = literal;\n                // Object.assign(matchedLtrs, ltrs);\n            }\n            else if (!version2_1.freeToneLettersTonal.includes(letters[i].literal)) {\n                // free first tone without a free tonal\n                const rules = version2_1.freeAllomorphUncombiningRules.get(version2_1.TonalLetterTags.zero);\n                const tnls = !rules ? [] : rules;\n                for (let t of tnls) {\n                    // append second tonal letter\n                    // check the uncombining forms\n                    if (syllabletable_1.isInSyllableTable(literal + t.toString())) {\n                        // if the free first tone's lemma is included\n                        matched = literal;\n                        Object.assign(matchedLtrs, ltrs);\n                        //break;\n                    }\n                }\n            }\n            // when there is no matched lexcial roots for this syllable, we still assign begin\n            begin = beginOfSyllable;\n        }\n    }\n    // console.log(`literal: ${literal}. matched: ${matched}`);\n    // console.log(matchedLtrs);\n    if (matched.length > 0 && literal.length > matched.length) {\n        // when ~ay is longer than ~a by one letter y\n        // for those first tone lexcial roots that are present\n        matched = '';\n        matchedLtrs = [];\n    }\n    // console.log('matched: ' + matched);\n    const tsg = new soundgen_1.TonalSoundGenerator();\n    //console.log('matched: ' + matched)\n    let list = new Array();\n    if (matched.length > 0) {\n        list = tsg.generate(matchedLtrs);\n    }\n    else {\n        if (ltrs.length == 3 && ltrs[1] === 'a' && ltrs[2] === 'y') {\n            const rea = new metaplasm_2.RemovingEpenthesisOfAy();\n            const done = rea.applyToString(literal);\n            //console.log(done.toString())\n            if (collections_1.epentheticLetters.includes(ltrs[0]) && syllabletable_1.isInSyllableTable(done)) {\n                list = tsg.generate(ltrs);\n            }\n        }\n    }\n    // console.log(list);\n    let matchedLen = 0;\n    let mp = new unit_1.MatchedPattern();\n    for (let m in list) {\n        const min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        //console.log(syllabary[m])\n                        if (n + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                mp.letters[q] = letters[beginOfSyllable + q];\n                            }\n                            // copy the pattern of sounds\n                            mp.pattern = list[m];\n                            //console.log(syllabary.list[m])\n                            //console.log(mp.letters)\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return mp;\n}\nexports.syllabifyTonal = syllabifyTonal;\n/** A syllable and its uncombining forms. */\nclass TonalUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.sounds = sounds;\n        this.allomorph = this.assignAllomorph(this.sounds);\n        this.forms = this.metaplasm.apply(this.sounds, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    addForms(syllables) {\n        if (syllables && syllables.length == 1) {\n            this.forms.push(syllables[0]);\n        }\n    }\n    assignAllomorph(letters) {\n        let allomorph = new version2_1.ZeroAllomorph();\n        // assign the matched allomorph for this syllable\n        let las = []; // list of allomorphs\n        const s = new unit_3.TonalSyllable(letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n        const keys = Array.from(version2_1.checkedAllomorphs.keys());\n        for (let k = 0; k < keys.length; k++) {\n            const am = version2_1.checkedAllomorphs.get(keys[k]);\n            if (am && am instanceof version2_1.CheckedAllomorph) {\n                if (am.tonal) {\n                    if (am.tonal.toString() === s.lastLetter.literal &&\n                        am.final.toString() === s.lastSecondLetter.literal) {\n                        las.push(am);\n                        break;\n                    }\n                    else {\n                        if (am.final.toString() === s.lastLetter.literal) {\n                            las.push(am);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (las.length > 0) {\n            // there is only one match after processing, we just assign it\n            const ret = las.shift();\n            if (ret)\n                return ret;\n        }\n        // after matching with checked allomorphs, we go on matching free allomorphs\n        las = [];\n        if (version2_1.freeAllomorphs.has(s.lastLetter.literal)) {\n            const am = version2_1.freeAllomorphs.get(s.lastLetter.literal);\n            const stpFnls = letters.filter(it => it.name === version2_1.TonalSoundTags.stopFinalConsonant);\n            const chkttnls = letters.filter(it => it.name === version2_1.TonalSoundTags.checkedTone);\n            if (am &&\n                !(stpFnls.length == 1 &&\n                    stpFnls[0].toString().length == 2 &&\n                    chkttnls.length == 1)) {\n                // when 8th finals *not* followed by a tonal\n                las.push(am);\n            }\n            else\n                las.push(new version2_1.Allomorph());\n        }\n        if (las.length == 0) {\n            // tone 1 has no allomorph\n            allomorph = new version2_1.ZeroAllomorph();\n        }\n        else if (las.length == 1) {\n            // are there multiple allomorphs? there should be only one.\n            for (let i = 0; i < las.length; i++) {\n                if (las[i].tonal.toString() === new version2_1.AllomorphX().tonal.toString()) {\n                    // this syllable is already in base form\n                    // in order to display this inflectional ending, we have to assign\n                    allomorph = las[i];\n                }\n                else {\n                    allomorph = las[i];\n                }\n            }\n        }\n        return allomorph;\n    }\n}\nexports.TonalUncombiningMorpheme = TonalUncombiningMorpheme;\nclass TonalUncombiningMorphemeMaker extends maker_1.MorphemeMaker {\n    constructor(metaplasm) {\n        super();\n        this.sandhiFinals = new Array();\n        this.sandhiFinalTonals = new Array();\n        this.metaplasm = metaplasm;\n    }\n    createArray() {\n        return new Array();\n    }\n    createMorpheme(matched, metaplasm) {\n        const tum = new TonalUncombiningMorpheme(new unit_3.TonalSyllable(matched.letters), matched.pattern, metaplasm);\n        return tum;\n    }\n    isCombiningAy(syllables) {\n        const keysAy = Array.from(version2_1.uncombiningRulesAy.keys());\n        // bug?\n        // console.log(regexMnngHF.test('vunghf')); // true\n        // console.log(regexMnngHF.test('vunghfngay')); // false\n        // console.log(regexMnngHF.test('cunhf')) // true\n        // console.log(regexMnngHF.test('cunhfmiax')) // false\n        if (syllables.length >= 2) {\n            const nslFnlLast2nd = syllables[syllables.length - 2].pattern.filter(it => it.name === version2_1.TonalSoundTags.nasalFinalConsonant);\n            const stpFnlH = syllables[syllables.length - 2].pattern.filter(it => it.name === version2_1.TonalSoundTags.stopFinalConsonant &&\n                it.toString() === version2_1.TonalLetterTags.h);\n            const tnl = syllables[syllables.length - 2].pattern.filter(it => (it.name === version2_1.TonalSoundTags.nasalFinalConsonant ||\n                it.name === version2_1.TonalSoundTags.checkedTone) &&\n                keysAy.includes(it.toString()));\n            const nslInitLast = syllables[syllables.length - 1].pattern.filter(it => it.name === version2_1.TonalSoundTags.initialConsonant &&\n                collections_1.nasalInitialConsonants.includes(it.toString()));\n            // ending ay\n            const endingAy = syllables[syllables.length - 1].lastSecondLetter.literal ===\n                version2_1.TonalLetterTags.a &&\n                syllables[syllables.length - 1].lastLetter.literal ===\n                    version2_1.TonalLetterTags.y;\n            // ending a is the proceeding form of ay\n            const endingA = syllables[syllables.length - 1].lastLetter.literal ===\n                version2_1.TonalLetterTags.a;\n            if (!(nslFnlLast2nd.length == 1 &&\n                stpFnlH.length == 1 &&\n                tnl.length == 1) &&\n                (endingAy || endingA)) {\n                // bypass sandhi t. e.g. vunghf~.\n                if (nslInitLast.length == 1 && nslFnlLast2nd.length == 0) {\n                    // in case of words like vutfngay\n                    return false;\n                }\n                const initLast = syllables[syllables.length - 1].pattern.filter(it => it.name === version2_1.TonalSoundTags.initialConsonant &&\n                    version2_1.initialConsonantsTonal.includes(it.toString()));\n                const mdlLast = syllables[syllables.length - 1].pattern.filter(it => it.name === version2_1.TonalSoundTags.vowel);\n                if (stpFnlH.length == 0 &&\n                    nslFnlLast2nd.length == 1 &&\n                    initLast.length == 1 &&\n                    nslFnlLast2nd[0].toString() != initLast[0].toString()) {\n                    // in case of words like angzchuay, ngzchuay\n                    return false;\n                }\n                else if (initLast.length == 1 && mdlLast.length > 1) {\n                    // in case of suafluay, suafsuay\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    isTransfixInflection(syllables) {\n        // TODO: there are not many of them. make a tiny dictionary to cover the ocurrences\n        const thirds = syllables\n            .map(it => it.pattern.filter(ltr => ltr.toString() === version2_1.TonalLetterTags.w))\n            .map(seq => seq.map(ltr => ltr.toString()))\n            .filter(arr => arr.length > 0);\n        const endingAw = syllables[syllables.length - 1].lastSecondLetter.literal ===\n            version2_1.TonalLetterTags.a;\n        if (syllables.length > 1 && thirds.length == syllables.length && endingAw)\n            return true;\n        return false;\n    }\n    isDoublet(syllables) {\n        if (syllables.length == 2) {\n            const stems = syllables\n                .map(it => it.pattern.filter(s => s.name !== version2_1.TonalSoundTags.freeTone))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSoundTags.freeTone))\n                .map(seq => seq.map(ltr => ltr.toString()).join(''));\n            // compare 2 strings/lexical stems\n            if (stems[0] === stems[1])\n                return true; // identical\n        }\n        return false;\n    }\n    isTriplet(syllables) {\n        if (syllables.length == 3) {\n            const stems = syllables\n                .map(it => it.pattern.filter(ltr => ltr.name !== version2_1.TonalSoundTags.freeTone &&\n                ltr.name !== version2_1.TonalSoundTags.checkedTone))\n                .map(seq => seq.map(ltr => ltr.toString()).join(''));\n            const fnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSoundTags.stopFinalConsonant))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSoundTags.freeTone))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // compare 3 strings/lexical stems\n            if (fnls && fnls.length > 0) {\n                // stems of checked tones\n                if (stems[0] === stems[1] && stems[0] + fnls[0] === stems[2])\n                    return true;\n            }\n            else {\n                // stems of free tones\n                if (stems.every((v, i, a) => v === a[a.length - 1]))\n                    return true; // identical\n            }\n        }\n        return false;\n    }\n    /** Check if ~ek or ~ekk available for the ~iet syllable. */\n    isEKekkAvailableRimeIet(syllables) {\n        if (syllables.length >= 2) {\n            const vs = syllables[syllables.length - 2].pattern.filter(i => i.name === version2_1.TonalSoundTags.vowel);\n            const fcs = syllables[syllables.length - 2].pattern.filter(i => i.name === version2_1.TonalSoundTags.stopFinalConsonant);\n            const ts = syllables[syllables.length - 2].pattern.filter(i => i.name === version2_1.TonalSoundTags.checkedTone);\n            if (vs.length == 2 &&\n                fcs.length == 1 &&\n                ts.length == 1 &&\n                vs[0].toString() === version2_1.TonalLetterTags.i &&\n                vs[1].toString() === version2_1.TonalLetterTags.e &&\n                fcs[0].toString() === version2_1.TonalLetterTags.t &&\n                (ts[0].toString() === version2_1.TonalLetterTags.f ||\n                    ts[0].toString() === version2_1.TonalLetterTags.w)) {\n                // TODO: check if the uncombining forms present in syllable table.\n                return true;\n            }\n        }\n        return false;\n    }\n    isIengUamToneLetter(syllables) {\n        // if (syllables.length >= 2) {\n        //   const vs = syllables[syllables.length - 2].pattern.filter(\n        //     i => i.name === TonalSoundTags.vowel\n        //   );\n        //   const nfcs = syllables[syllables.length - 2].pattern.filter(\n        //     i => i.name === TonalSoundTags.nasalFinalConsonant\n        //   );\n        //   const inits = syllables[syllables.length - 1].pattern.filter(\n        //     i => i.name === TonalSoundTags.initialConsonant\n        //   );\n        //   if (\n        //     vs.length > 0 &&\n        //     nfcs.length == 1 &&\n        //     inits.length == 1 &&\n        //     nfcs[0].toString() === inits[0].toString()\n        //   ) {\n        //     return true;\n        //   }\n        // }\n        return false;\n    }\n    preprocessSandhiFinal(letters) {\n        this.sandhiFinals.push(letters[letters.length - 1]);\n        return letters.slice(0, letters.length - 1);\n    }\n    preprocessSandhiFinalTonal(letters, literal, regex, len) {\n        const matchedStrs = literal.match(regex);\n        // console.log(matchedStrs);\n        let indx = -1;\n        if (len == 1) {\n            for (let i = 0; i < letters.length - 1; i++) {\n                if (matcher_1.smJlsF(letters[i].literal, letters[i + 1].literal) ||\n                    matcher_1.smLsWx(letters[i].literal, letters[i + 1].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        else if (len == 2) {\n            for (let i = 0; i < letters.length - 2; i++) {\n                if (matcher_1.smMnngHF(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal) ||\n                    matcher_1.smMnngHWx(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        if (matchedStrs) {\n            for (let i in matchedStrs) {\n                const idxl = literal.search(matchedStrs[i]);\n                const head = literal.substring(0, idxl);\n                const tail = literal.substring(idxl + matchedStrs[i].length);\n                // in case of hmhw or hmhwhmhw\n                // check if the previous letter is a consonant\n                if (version2_1.initialConsonantsTonal.includes(head))\n                    return letters;\n                let fnl;\n                if (version2_1.TonalLetterTags.f === matchedStrs[i].charAt(matchedStrs[i].length - 1)) {\n                    literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.f, tail);\n                    fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                }\n                else if (collections_1.toneLettersWx.includes(matchedStrs[i].charAt(matchedStrs[i].length - 1))) {\n                    if (matchedStrs[i].charAt(matchedStrs[i].length - 1) ===\n                        version2_1.TonalLetterTags.w) {\n                        // 3rd tone\n                        if (matchedStrs[0][0] === tail[0]) {\n                            literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.w, tail);\n                        }\n                        else {\n                            literal = head.concat(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.w, tail);\n                        }\n                    }\n                    else if (matchedStrs[i].charAt(matchedStrs[i].length - 1) ===\n                        version2_1.TonalLetterTags.x) {\n                        // 5th tone\n                        if (matchedStrs[0][0] === tail[0]) {\n                            literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.x, tail);\n                        }\n                        else {\n                            literal = head.concat(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.x, tail);\n                        }\n                    }\n                    // console.log(letters.map(x => x.literal).join(''), 'before splicing');\n                    // console.log(matchedStrs[0][0], tail[0]);\n                    if (matchedStrs[0][0] === tail[0] ||\n                        (matchedStrs[0][0] === version2_1.TonalLetterTags.l &&\n                            tail[0] === version2_1.TonalLetterTags.j)) {\n                        // if the initial of the following syllable equals to the final of the preceding one\n                        // h -> tt\n                        fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                    }\n                    else if (matchedStrs[0][0] === version2_1.TonalLetterTags.h) {\n                        // h -> pp\n                        fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n                    }\n                    // console.log(letters.map(x => x.literal).join(''), 'after splicing');\n                }\n                // console.log(literal, head, tail);\n                if (fnl && len == 1)\n                    this.sandhiFinalTonals.push({ index: indx, letters: [fnl[0]] });\n                else if (fnl && len == 2)\n                    this.sandhiFinalTonals.push({\n                        index: indx,\n                        letters: [fnl[0], fnl[1]],\n                    });\n            }\n        }\n        return letters;\n    }\n    replaceSandhiFinal(letters) {\n        const slicedLetters = letters.slice(0, letters.length - 1);\n        const slicedLiteral = slicedLetters.map(it => it.literal).join('');\n        if (letters.length > 0 &&\n            letters[letters.length - 1].literal === version2_1.TonalLetterTags.gg &&\n            syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.tt) &&\n            !syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.kk)) {\n            // for surface form gg whose underlying form is tt but not kk\n            const ls = this.preprocessSandhiFinal(letters);\n            // append tt to sliced letters\n            ls.push(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return ls;\n        }\n        else if (letters.length > 0 &&\n            letters[letters.length - 1].literal === version2_1.TonalLetterTags.b &&\n            syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.p)) {\n            // for surface form b whose underlying form is p\n            const ls = this.preprocessSandhiFinal(letters);\n            // append tt to sliced letters\n            ls.push(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n            return ls;\n        }\n        return letters;\n    }\n    replaceSandhiFinalTonal(letters) {\n        let literal = letters.map(x => x.literal).join('');\n        if (literal.length > 1 && matcher_1.regexJlsF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexJlsF, 1);\n            return ls;\n        }\n        else if (literal.length > 1 && matcher_1.regexLsWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexLsWx, 1);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHF, 2);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHWx, 2);\n            return ls;\n        }\n        return letters;\n    }\n    preprocess(graphemes) {\n        let ltrs = new Array();\n        ltrs = graphemes.map(it => it.letter);\n        // handle sandhi finals without a tonal\n        ltrs = this.replaceSandhiFinal(ltrs);\n        // handle sandhi finals with a tonal\n        ltrs = this.replaceSandhiFinalTonal(ltrs);\n        return ltrs;\n    }\n    postprocessSandhiPPpttt(pattern, lenPrecedingLetters) {\n        if ((pattern.letters[pattern.letters.length - 1].literal ===\n            version2_1.TonalLetterTags.t ||\n            pattern.letters[pattern.letters.length - 1].literal ===\n                version2_1.TonalLetterTags.tt ||\n            pattern.letters[pattern.letters.length - 1].literal ===\n                version2_1.TonalLetterTags.p) &&\n            this.sandhiFinals.length > 0) {\n            // if there isn't a tonal\n            pattern.letters.pop();\n            pattern.pattern.pop();\n            const fnl = this.sandhiFinals.pop();\n            if (fnl) {\n                pattern.letters.push(fnl);\n                const sounds = version2_1.tonalPositionalSounds.get(fnl.literal);\n                if (sounds)\n                    pattern.pattern.push(sounds(version2_1.TonalSoundTags.stopFinalConsonant));\n            }\n        }\n        else if (this.sandhiFinalTonals.length > 0 &&\n            collections_1.sandhiFinalPPpttt.includes(pattern.letters[pattern.letters.length - 2].literal)) {\n            // if there is a tonal\n            const fnl = this.sandhiFinalTonals.pop();\n            if (fnl) {\n                if (fnl.letters.length == 1) {\n                    pattern.letters.splice(fnl.index, 1, fnl.letters[0]);\n                    const sounds = version2_1.tonalPositionalSounds.get(fnl.letters[0].literal);\n                    if (sounds)\n                        pattern.pattern.splice(fnl.index, 1, sounds(version2_1.TonalSoundTags.stopFinalConsonant));\n                }\n                else if (fnl.letters.length == 2) {\n                    // replace 1 letter at fnl.index with 2 letters\n                    pattern.letters.splice(fnl.index - lenPrecedingLetters, 1, fnl.letters[0], fnl.letters[1]);\n                    const sounds = version2_1.tonalPositionalSounds.get(fnl.letters[0].literal);\n                    const ltr2 = version2_1.tonalPositionalSounds.get(fnl.letters[1].literal);\n                    if (sounds && ltr2) {\n                        pattern.pattern.splice(fnl.index - lenPrecedingLetters, 1, sounds(version2_1.TonalSoundTags.nasalFinalConsonant), ltr2(version2_1.TonalSoundTags.stopFinalConsonant));\n                    }\n                }\n            }\n        }\n        return pattern;\n    }\n    postprocess(matched) {\n        const morphemes = this.createArray();\n        for (let i = 0; i < matched.length; i++) {\n            // accumulate the lenght of letters preceding the current syllable\n            const lenPrecedingLetters = matched\n                .map((val, j) => (j < i ? val.letters.length : 0))\n                .reduce((prev, val) => prev + val);\n            const ptn = this.postprocessSandhiPPpttt(matched[i], lenPrecedingLetters);\n            if (this.isCombiningAy(matched) && matched.length == 2) {\n                // ~fa, ~xa, fay, or ~xay. only 2 syllables\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.PrecedingAyexUncombining()));\n            }\n            else if (this.isCombiningAy(matched) &&\n                (matched.length == 3 || matched.length == 4)) {\n                // ~fa, ~xa, fay, or ~xay. more than 2 syllables\n                if (i == matched.length - 2 || i == matched.length - 1)\n                    // the last 2 syllables\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.PrecedingAyexUncombining()));\n                else if (i == matched.length - 3)\n                    // the first syllable of a 3-syllable word or the 2nd syllable of a 4-syllable word\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n                else if (matched.length == 4 && i == matched.length - 4)\n                    // the first syllable of a 4-syllable word\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n            }\n            else if (this.isTriplet(matched)) {\n                // triplet construction. pass the last syllable as an argument\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.LastSyllableForms(matched[2].pattern)));\n            }\n            else if (this.isDoublet(matched)) {\n                // doublet construction. pass the last syllable as an argument\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.LastSyllableForms(matched[1].pattern)));\n            }\n            else if (this.isTransfixInflection(matched)) {\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TransfixUncombining()));\n            }\n            else {\n                if (i < matched.length - 1) {\n                    // when the target syllable is not the last one in a word.\n                    // pass the letters of the following syllable to unchange letters accordingly\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n                }\n                else {\n                    // no sandhi letters to unchange, just pass an empty array\n                    // the metaplasm argument would be either TonalUncombiningForms or PhrasalVerbParticleUncombining\n                    morphemes.push(this.createMorpheme(ptn, this.metaplasm));\n                }\n                if (this.isEKekkAvailableRimeIet(matched) && i < matched.length - 1) {\n                    const forms = this.createMorpheme(ptn, new metaplasm_1.UncombiningFormsIetfIetwToEkEkk()).getForms();\n                    if (forms && forms.length == 1) {\n                        morphemes[i].addForms(forms);\n                    }\n                }\n                else if (this.isIengUamToneLetter(matched) &&\n                    i < matched.length - 1) {\n                    //   const forms = this.createMorpheme(\n                    //     ptn,\n                    //     new UncombiningFormsIengUamToneLetter()\n                    //   ).getForms();\n                }\n            }\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = this.preprocess(graphemes);\n        const ptns = this.make(ltrs, syllabifyTonal);\n        const ms = this.postprocess(ptns);\n        // TODO: to further check if the syllable is valid, given the following syllable\n        return ms;\n    }\n}\nexports.TonalUncombiningMorphemeMaker = TonalUncombiningMorphemeMaker;\n/** A syllable and its sound changing forms. */\nclass TonalSoundUnchangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, sounds) {\n        super();\n        this.syllable = syllable;\n        this.sounds = sounds;\n    }\n    get lastSecondLetter() {\n        return this.sounds[this.sounds.length - 2].toString();\n    }\n    uninsertNasal() {\n        const ltrs = this.sounds;\n        ltrs.shift();\n        return [\n            new unit_3.TonalSyllable(ltrs.map(it => new unit_2.AlphabeticLetter(it.characters))),\n        ];\n    }\n    toVoicelessFinal() {\n        // unvoiced\n        if (collections_1.voicedVoicelessFinalConsonants.has(this.sounds[this.sounds.length - 2].toString())) {\n            const fnl = collections_1.voicedVoicelessFinalConsonants.get(this.sounds[this.sounds.length - 2].toString());\n            if (fnl) {\n                const s = new unit_3.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                return [s];\n            }\n        }\n        return [];\n    }\n    unmutateInitialConsonant(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initialConsonant &&\n            initial.toString() === version2_1.TonalLetterTags.t) {\n            // l- -> t-\n            const s = new unit_3.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n            return [s];\n        }\n        return [];\n    }\n    unmutateFinalConsonant(initial) {\n        if (initial.name === version2_1.TonalSoundTags.initialConsonant &&\n            initial.toString() === version2_1.TonalLetterTags.g) {\n            // gg -> tt\n            const syl = new unit_3.TonalSyllable(this.sounds.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            const idx = this.sounds.findIndex(i => i.name === version2_1.TonalSoundTags.stopFinalConsonant);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return [syl];\n        }\n        return [];\n    }\n    uninfect() {\n        const n = this.sounds.filter(i => i.name === version2_1.TonalSoundTags.nasalization);\n        if (n.length == 1) {\n            let ltrs = this.sounds.filter(i => i.name !== version2_1.TonalSoundTags.nasalization);\n            const s = new unit_3.TonalSyllable(ltrs.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundUnchangingMorpheme = TonalSoundUnchangingMorpheme;\nclass TonalSoundUnchangingMorphemeMaker extends maker_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createArray() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundUnchangingMorpheme(new unit_3.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        let morphemes = this.createArray();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundUnchangingMorphemeMaker = TonalSoundUnchangingMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unchange/unit.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/unchange/unit.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalPhrase = exports.TonalWord = exports.CheckedAllomorphicEnding = exports.FreeAllomorphicEnding = exports.AllomorphicEnding = exports.CheckedInflectionalEnding = exports.FreeInflectionalEnding = exports.InflectionalEnding = exports.TonalSyllable = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst version2_2 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nclass TonalSyllable extends unit_1.Syllable {\n    popLetter() {\n        this.letters = this.letters.slice(0, this.letters.length - 1);\n        this.concat();\n    }\n    get lastLetter() {\n        if (this.letters.length >= 1)\n            return this.letters[this.letters.length - 1];\n        return new unit_1.AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length >= 2)\n            return this.letters[this.letters.length - 2];\n        return new unit_1.AlphabeticLetter([]);\n    }\n}\nexports.TonalSyllable = TonalSyllable;\nclass Ending {\n}\nclass InflectionalEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.affix = new version2_2.TonalAffix(); // the affix of this word\n    }\n    toString() {\n        return this.affix.toString();\n    }\n}\nexports.InflectionalEnding = InflectionalEnding;\nclass FreeInflectionalEnding extends InflectionalEnding {\n}\nexports.FreeInflectionalEnding = FreeInflectionalEnding;\nclass CheckedInflectionalEnding extends InflectionalEnding {\n}\nexports.CheckedInflectionalEnding = CheckedInflectionalEnding;\nclass AllomorphicEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.allomorph = new version2_1.Allomorph();\n    }\n    toString() {\n        return this.allomorph.toString();\n    }\n}\nexports.AllomorphicEnding = AllomorphicEnding;\nclass FreeAllomorphicEnding extends AllomorphicEnding {\n}\nexports.FreeAllomorphicEnding = FreeAllomorphicEnding;\nclass CheckedAllomorphicEnding extends AllomorphicEnding {\n}\nexports.CheckedAllomorphicEnding = CheckedAllomorphicEnding;\n/** A word made of syllables. */\nclass TonalWord extends unit_1.Word {\n    constructor(syllables) {\n        super();\n        this.syllables = new Array();\n        if (syllables != undefined) {\n            this.syllables = syllables;\n            this.concat();\n        }\n    }\n    popSyllable() {\n        this.syllables = this.syllables.slice(0, this.syllables.length - 1);\n        this.concat();\n    }\n    pushSyllable(syllable) {\n        this.syllables.push(syllable);\n        this.concat();\n    }\n    shiftSyllable() {\n        const syl = this.syllables.shift();\n        this.concat();\n        return syl;\n    }\n    unshiftSyllable(syllable) {\n        const num = this.syllables.unshift(syllable);\n        this.concat();\n        return num;\n    }\n    replaceSyllable(i, syllable) {\n        if (i < this.syllables.length) {\n            this.syllables.splice(i, 1, syllable);\n        }\n        this.concat();\n    }\n    concat() {\n        this.literal = this.syllables.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.TonalWord = TonalWord;\n/** A phrase made of words. */\nclass TonalPhrase extends unit_2.Phrase {\n    constructor(words) {\n        super();\n        this.words = new Array();\n        if (words) {\n            this.words = words;\n            this.concat();\n        }\n    }\n    popWord() {\n        // get rid off the last word from array\n        this.words = this.words.slice(0, this.words.length - 1);\n        this.concat();\n    }\n    pushWord(w) {\n        this.words.push(w);\n        this.concat();\n    }\n    concat() {\n        if (this.words.length > 0) {\n            if (this.words.filter(x => x && x.literal.length > 0).length == 0) {\n                this.literal = '';\n            }\n            else\n                this.literal = this.words.map(x => (x ? x.literal : '')).join(' ');\n        }\n    }\n}\nexports.TonalPhrase = TonalPhrase;\n//# sourceMappingURL=unit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS91bml0LmpzPzFkY2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBbUI7QUFDOUMsbUJBQW1CLG1CQUFPLENBQUMscUVBQW1CO0FBQzlDLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi91bmNoYW5nZS91bml0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRvbmFsUGhyYXNlID0gZXhwb3J0cy5Ub25hbFdvcmQgPSBleHBvcnRzLkNoZWNrZWRBbGxvbW9ycGhpY0VuZGluZyA9IGV4cG9ydHMuRnJlZUFsbG9tb3JwaGljRW5kaW5nID0gZXhwb3J0cy5BbGxvbW9ycGhpY0VuZGluZyA9IGV4cG9ydHMuQ2hlY2tlZEluZmxlY3Rpb25hbEVuZGluZyA9IGV4cG9ydHMuRnJlZUluZmxlY3Rpb25hbEVuZGluZyA9IGV4cG9ydHMuSW5mbGVjdGlvbmFsRW5kaW5nID0gZXhwb3J0cy5Ub25hbFN5bGxhYmxlID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCB2ZXJzaW9uMl8xID0gcmVxdWlyZShcIi4uL3RvbmFsL3ZlcnNpb24yXCIpO1xuY29uc3QgdmVyc2lvbjJfMiA9IHJlcXVpcmUoXCIuLi90b25hbC92ZXJzaW9uMlwiKTtcbmNvbnN0IHVuaXRfMiA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY2xhc3MgVG9uYWxTeWxsYWJsZSBleHRlbmRzIHVuaXRfMS5TeWxsYWJsZSB7XG4gICAgcG9wTGV0dGVyKCkge1xuICAgICAgICB0aGlzLmxldHRlcnMgPSB0aGlzLmxldHRlcnMuc2xpY2UoMCwgdGhpcy5sZXR0ZXJzLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLmNvbmNhdCgpO1xuICAgIH1cbiAgICBnZXQgbGFzdExldHRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMubGV0dGVycy5sZW5ndGggPj0gMSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxldHRlcnNbdGhpcy5sZXR0ZXJzLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gbmV3IHVuaXRfMS5BbHBoYWJldGljTGV0dGVyKFtdKTtcbiAgICB9XG4gICAgZ2V0IGxhc3RTZWNvbmRMZXR0ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmxldHRlcnMubGVuZ3RoID49IDIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZXR0ZXJzW3RoaXMubGV0dGVycy5sZW5ndGggLSAyXTtcbiAgICAgICAgcmV0dXJuIG5ldyB1bml0XzEuQWxwaGFiZXRpY0xldHRlcihbXSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFN5bGxhYmxlID0gVG9uYWxTeWxsYWJsZTtcbmNsYXNzIEVuZGluZyB7XG59XG5jbGFzcyBJbmZsZWN0aW9uYWxFbmRpbmcgZXh0ZW5kcyBFbmRpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmFmZml4ID0gbmV3IHZlcnNpb24yXzIuVG9uYWxBZmZpeCgpOyAvLyB0aGUgYWZmaXggb2YgdGhpcyB3b3JkXG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZmZpeC50b1N0cmluZygpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5mbGVjdGlvbmFsRW5kaW5nID0gSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgRnJlZUluZmxlY3Rpb25hbEVuZGluZyBleHRlbmRzIEluZmxlY3Rpb25hbEVuZGluZyB7XG59XG5leHBvcnRzLkZyZWVJbmZsZWN0aW9uYWxFbmRpbmcgPSBGcmVlSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgQ2hlY2tlZEluZmxlY3Rpb25hbEVuZGluZyBleHRlbmRzIEluZmxlY3Rpb25hbEVuZGluZyB7XG59XG5leHBvcnRzLkNoZWNrZWRJbmZsZWN0aW9uYWxFbmRpbmcgPSBDaGVja2VkSW5mbGVjdGlvbmFsRW5kaW5nO1xuY2xhc3MgQWxsb21vcnBoaWNFbmRpbmcgZXh0ZW5kcyBFbmRpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmFsbG9tb3JwaCA9IG5ldyB2ZXJzaW9uMl8xLkFsbG9tb3JwaCgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsb21vcnBoLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuZXhwb3J0cy5BbGxvbW9ycGhpY0VuZGluZyA9IEFsbG9tb3JwaGljRW5kaW5nO1xuY2xhc3MgRnJlZUFsbG9tb3JwaGljRW5kaW5nIGV4dGVuZHMgQWxsb21vcnBoaWNFbmRpbmcge1xufVxuZXhwb3J0cy5GcmVlQWxsb21vcnBoaWNFbmRpbmcgPSBGcmVlQWxsb21vcnBoaWNFbmRpbmc7XG5jbGFzcyBDaGVja2VkQWxsb21vcnBoaWNFbmRpbmcgZXh0ZW5kcyBBbGxvbW9ycGhpY0VuZGluZyB7XG59XG5leHBvcnRzLkNoZWNrZWRBbGxvbW9ycGhpY0VuZGluZyA9IENoZWNrZWRBbGxvbW9ycGhpY0VuZGluZztcbi8qKiBBIHdvcmQgbWFkZSBvZiBzeWxsYWJsZXMuICovXG5jbGFzcyBUb25hbFdvcmQgZXh0ZW5kcyB1bml0XzEuV29yZCB7XG4gICAgY29uc3RydWN0b3Ioc3lsbGFibGVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3lsbGFibGVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGlmIChzeWxsYWJsZXMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnN5bGxhYmxlcyA9IHN5bGxhYmxlcztcbiAgICAgICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9wU3lsbGFibGUoKSB7XG4gICAgICAgIHRoaXMuc3lsbGFibGVzID0gdGhpcy5zeWxsYWJsZXMuc2xpY2UoMCwgdGhpcy5zeWxsYWJsZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgfVxuICAgIHB1c2hTeWxsYWJsZShzeWxsYWJsZSkge1xuICAgICAgICB0aGlzLnN5bGxhYmxlcy5wdXNoKHN5bGxhYmxlKTtcbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICB9XG4gICAgc2hpZnRTeWxsYWJsZSgpIHtcbiAgICAgICAgY29uc3Qgc3lsID0gdGhpcy5zeWxsYWJsZXMuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICAgICAgcmV0dXJuIHN5bDtcbiAgICB9XG4gICAgdW5zaGlmdFN5bGxhYmxlKHN5bGxhYmxlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IHRoaXMuc3lsbGFibGVzLnVuc2hpZnQoc3lsbGFibGUpO1xuICAgICAgICB0aGlzLmNvbmNhdCgpO1xuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICByZXBsYWNlU3lsbGFibGUoaSwgc3lsbGFibGUpIHtcbiAgICAgICAgaWYgKGkgPCB0aGlzLnN5bGxhYmxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc3lsbGFibGVzLnNwbGljZShpLCAxLCBzeWxsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25jYXQoKTtcbiAgICB9XG4gICAgY29uY2F0KCkge1xuICAgICAgICB0aGlzLmxpdGVyYWwgPSB0aGlzLnN5bGxhYmxlcy5tYXAoeCA9PiAoeCA/IHgubGl0ZXJhbCA6ICcnKSkuam9pbignJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFdvcmQgPSBUb25hbFdvcmQ7XG4vKiogQSBwaHJhc2UgbWFkZSBvZiB3b3Jkcy4gKi9cbmNsYXNzIFRvbmFsUGhyYXNlIGV4dGVuZHMgdW5pdF8yLlBocmFzZSB7XG4gICAgY29uc3RydWN0b3Iod29yZHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBpZiAod29yZHMpIHtcbiAgICAgICAgICAgIHRoaXMud29yZHMgPSB3b3JkcztcbiAgICAgICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9wV29yZCgpIHtcbiAgICAgICAgLy8gZ2V0IHJpZCBvZmYgdGhlIGxhc3Qgd29yZCBmcm9tIGFycmF5XG4gICAgICAgIHRoaXMud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDAsIHRoaXMud29yZHMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgfVxuICAgIHB1c2hXb3JkKHcpIHtcbiAgICAgICAgdGhpcy53b3Jkcy5wdXNoKHcpO1xuICAgICAgICB0aGlzLmNvbmNhdCgpO1xuICAgIH1cbiAgICBjb25jYXQoKSB7XG4gICAgICAgIGlmICh0aGlzLndvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndvcmRzLmZpbHRlcih4ID0+IHggJiYgeC5saXRlcmFsLmxlbmd0aCA+IDApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gdGhpcy53b3Jkcy5tYXAoeCA9PiAoeCA/IHgubGl0ZXJhbCA6ICcnKSkuam9pbignICcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzZSA9IFRvbmFsUGhyYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unchange/unit.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unit.js":
/*!****************************************!*\
  !*** ./node_modules/taipa/lib/unit.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Phrase = exports.Phraseme = exports.Word = exports.Lexeme = exports.makeMatchedPatterns = exports.Syllable = exports.Morpheme = exports.MatchedPattern = exports.SoundGeneration = exports.sgPipe = exports.soundSequence = exports.Sound = exports.GraphemeMaker = exports.Letters = exports.MatchedSequence = exports.AlphabeticLetter = exports.Letter = exports.AlphabeticGrapheme = exports.Grapheme = exports.characters = exports.Character = void 0;\nclass Character {\n    constructor(s) {\n        this.character = s;\n    }\n}\nexports.Character = Character;\nclass Characters {\n    constructor() {\n        this.carr = [\n            'a',\n            'b',\n            'c',\n            'd',\n            'e',\n            'f',\n            'g',\n            'h',\n            'i',\n            'j',\n            'k',\n            'l',\n            'm',\n            'n',\n            'o',\n            'p',\n            'q',\n            'r',\n            's',\n            't',\n            'u',\n            'v',\n            'w',\n            'x',\n            'y',\n            'z',\n        ];\n        this.o = new Map();\n        for (const e of this.carr) {\n            this.assign(e);\n        }\n    }\n    assign(e) {\n        this.o.set(e, new Character(e));\n    }\n    get(key) {\n        const value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new Character('');\n    }\n    get size() {\n        return this.o.size;\n    }\n}\nexports.characters = new Characters();\nclass Grapheme {\n}\nexports.Grapheme = Grapheme;\nclass AlphabeticGrapheme extends Grapheme {\n    constructor(letter) {\n        super();\n        this.letter = letter;\n    }\n}\nexports.AlphabeticGrapheme = AlphabeticGrapheme;\n/** Letter is a subword unit. */\nclass Letter {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Letter = Letter;\nclass AlphabeticLetter extends Letter {\n    constructor(characters) {\n        super();\n        this.characters = new Array();\n        if (characters) {\n            this.characters = characters;\n            this.concat();\n        }\n    }\n    pushCharacter(c) {\n        this.characters.push(c);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.characters.map(x => (x ? x.character : '')).join('');\n    }\n}\nexports.AlphabeticLetter = AlphabeticLetter;\nclass MatchedSequence {\n    constructor() {\n        this.characters = new Array();\n    }\n    get matchedLength() {\n        return this.characters.length;\n    }\n    toString() {\n        let str = '';\n        for (const i in this.characters) {\n            str += this.characters[i].character;\n        }\n        return str;\n    }\n}\nexports.MatchedSequence = MatchedSequence;\nclass Letters {\n    constructor(larr) {\n        this.o = new Map();\n        this.arr = larr;\n        for (let i = 0; i < this.arr.length; i++) {\n            this.assign(this.arr[i]);\n        }\n    }\n    assign(e) {\n        const carr = [];\n        for (let i = 0; i < e.length; i++) {\n            let c = exports.characters.get(e[i]);\n            if (c) {\n                carr.push(c);\n            }\n        }\n        this.o.set(e, new AlphabeticLetter(carr));\n    }\n    handleN(characters, beginOfLetter, listLength) {\n        return new MatchedSequence();\n    }\n    get(key) {\n        const value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new AlphabeticLetter([]);\n    }\n    get size() {\n        return this.o.size;\n    }\n    get values() {\n        return this.o.values();\n    }\n}\nexports.Letters = Letters;\n/** Turn a string into graphemes. */\nclass GraphemeMaker {\n    constructor(lowerLetters) {\n        this.lowerLetters = lowerLetters;\n        this.listOfLetters = new Array();\n        this.listOfLetters = Array.from(lowerLetters.values);\n    }\n    makeGraphemes(str) {\n        const characters = new Array();\n        if (str) {\n            for (let i = 0; i < str.length; i++) {\n                if (str.charAt(i) != '\\0') {\n                    characters.push(new Character(str.charAt(i)));\n                }\n            }\n        }\n        const graphemes = this.make(characters);\n        return graphemes;\n    }\n    getMatchedSequence(characters, beginOfLetter, candidates) {\n        let ms = new MatchedSequence();\n        let matchedLen = 0;\n        //console.log(characters)\n        if (characters[beginOfLetter].character === 'n') {\n            // ms = this.handler.handleN(\n            ms = this.lowerLetters.handleN(characters, beginOfLetter, this.listOfLetters.length);\n            if (ms.matchedLength > 0)\n                return ms;\n        }\n        for (const j in candidates) {\n            const min = Math.min(characters.length - beginOfLetter, candidates[j].literal.length);\n            if (candidates[j].literal.length == min) {\n                for (let k = 0; k < min; k++) {\n                    if (characters[beginOfLetter + k].character === candidates[j].literal[k]) {\n                        if (k + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                ms.characters[q] = characters[beginOfLetter + q];\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        return ms;\n    }\n    make(characters) {\n        const graphemes = new Array();\n        let beginOfLetter = 0;\n        const letters = new Array();\n        for (let i = 0; i < characters.length; i++) {\n            // console.log('examining character: %s. length of characters: %d', characters[i].character, characters.length);\n            //console.log(\"metadata letter array looping.\");\n            if (i - beginOfLetter == 0) {\n                //console.log(\"matchedLen: %d\", ms.matchedLength);\n                // let candidates = this.list.filter(\n                const candidates = this.listOfLetters.filter(l => l.characters[0].character === characters[i].character);\n                const ms = this.getMatchedSequence(characters, beginOfLetter, candidates);\n                if (ms.matchedLength > 0) {\n                    for (const key in candidates) {\n                        // console.log(candidates[key].literal + ' - ' + ms.toString());\n                        if (candidates[key].literal ===\n                            new AlphabeticLetter(ms.characters).literal) {\n                            letters.push(candidates[key]);\n                        }\n                    }\n                }\n            }\n            if (letters.length == 0) {\n                for (const j in characters) {\n                    //console.log(characters[j].character)\n                }\n                // 'length of letters is zero'\n            }\n            else if (letters.length == 1) {\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d. ls[0]:\", i, ls[0].characters.length, ls[0])\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d\", i, ls[0].characters.length);\n                if (i + 1 - beginOfLetter == letters[0].characters.length) {\n                    // when index i plus one equals the length of the matched syllable\n                    const l = letters.shift();\n                    if (l) {\n                        beginOfLetter += l.characters.length;\n                        // pack letters into graphemes\n                        const gr = new AlphabeticGrapheme(l);\n                        graphemes.push(gr);\n                    }\n                }\n            }\n        }\n        //console.log(\"metadata letter array length %d\", letters.length);\n        return graphemes;\n    }\n}\nexports.GraphemeMaker = GraphemeMaker;\n/** The sound tag of a given letter. */\nclass Sound {\n    constructor() {\n        // one member of TonalSoundTags\n        this.name = '';\n        // an array of character objects. can be used to make a word object.\n        this.characters = new Array();\n    }\n    // we still need a method for combinning characters from each character objects.\n    // this is different from an array of character objects. it is a string.\n    toString() {\n        let l = '';\n        // there is no characters for 1st tone\n        if (this.characters != null) {\n            // when it is not 1st tone\n            for (let k in this.characters) {\n                l += this.characters[k].character;\n            }\n        }\n        return l;\n    }\n    makeCharacters(str) {\n        const arr = new Array();\n        for (let i = 0; i < str.length; i++) {\n            arr.push(new Character(str[i]));\n        }\n        return arr;\n    }\n}\nexports.Sound = Sound;\nexports.soundSequence = function (sounds) {\n    return {\n        sounds: sounds,\n        includes(str) {\n            for (let i in this.sounds) {\n                if (str && this.sounds[i] && str === this.sounds[i].toString())\n                    return true;\n            }\n            return false;\n        },\n    };\n};\n// spelling generation\nexports.sgPipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n/** Sound generation for syllable compositions. */\nclass SoundGeneration {\n    constructor() {\n        /** The letters to be matched. */\n        this.letters = [];\n        /** Matched sounds accumulator. */\n        this.matchedSounds = new Array();\n        /** flag for syllable matching process. */\n        this.matching = true;\n        /** Will populate `predictions` when set to true. */\n        this.predictive = false;\n        /** Predicted sounds */\n        this.predictions = new Array();\n        this.predictSandhiFinalConsonant = false;\n    }\n}\nexports.SoundGeneration = SoundGeneration;\nclass MatchedPattern {\n    constructor() {\n        this.letters = new Array();\n        this.pattern = new Array();\n    }\n    get matchedLength() {\n        return this.letters.length;\n    } // length of pattern can be optionally returned\n    get lastLetter() {\n        if (this.letters.length > 0)\n            return this.letters[this.letters.length - 1];\n        return new AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length > 1)\n            return this.letters[this.letters.length - 2];\n        return new AlphabeticLetter([]);\n    }\n}\nexports.MatchedPattern = MatchedPattern;\nclass Morpheme {\n}\nexports.Morpheme = Morpheme;\n/** Syllable is a subword unit. */\nclass Syllable {\n    constructor(letters) {\n        this.literal = '';\n        this.letters = new Array();\n        if (letters) {\n            this.letters = letters;\n            this.concat();\n        }\n    }\n    pushLetter(l) {\n        this.letters.push(l);\n        this.concat();\n    }\n    replaceLetter(i, l) {\n        this.letters.splice(i, 1, l);\n        this.concat();\n    }\n    insertLetter(i, l) {\n        this.letters.splice(i, 0, l);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.letters.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.Syllable = Syllable;\nfunction makeMatchedPatterns(letters, syllabify) {\n    const patterns = new Array();\n    let beginOfSyllable = 0;\n    for (let i = 0; i < letters.length; i++) {\n        let msp = new MatchedPattern();\n        if (i - beginOfSyllable == 0) {\n            msp = syllabify(letters, beginOfSyllable);\n            if (msp.matchedLength == 0) {\n                //console.log('no matched syllables found. the syllable might need to be added')\n            }\n            // console.log('matchedLen: %d', msp.matchedLength);\n            // console.log(msp.pattern);\n            // console.log(msp.letters);\n            if (msp.letters.length > 0) {\n                for (const j in msp.letters) {\n                    //console.log(\"msp.letters: %s\", msp.letters[j].literal)\n                }\n                patterns.push(msp);\n            }\n            beginOfSyllable += msp.matchedLength;\n        }\n        if (patterns.length == 0) {\n            //console.log('nothing matched')\n        }\n        else if (patterns.length >= 1) {\n            if (msp == undefined)\n                break;\n            if (msp.matchedLength > 0) {\n                i += beginOfSyllable - i - 1;\n            }\n        }\n    }\n    return patterns;\n}\nexports.makeMatchedPatterns = makeMatchedPatterns;\nclass Lexeme {\n}\nexports.Lexeme = Lexeme;\nclass Word {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Word = Word;\nclass Phraseme {\n}\nexports.Phraseme = Phraseme;\nclass Phrase {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Phrase = Phrase;\n//# sourceMappingURL=unit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unit.js\n");

/***/ }),

/***/ "./pages/phrasalverb.tsx":
/*!*******************************!*\
  !*** ./pages/phrasalverb.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! taipa */ \"./node_modules/taipa/lib/index.js\");\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(taipa__WEBPACK_IMPORTED_MODULE_1__);\nvar _jsxFileName = \"/Users/jslv/Projects/keyin/pages/phrasalverb.tsx\",\n    _s = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\nfunction PhrasalVerbPage() {\n  _s();\n\n  var _this = this;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(''),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    setInput(e.target.value);\n  };\n\n  var phrasalVerbs = [['khuannw', 'tiurh'], ['longw', 'tiurh']];\n  var matches = phrasalVerbs.filter(function (x) {\n    return x.join(' ') === input;\n  });\n  var fr1 = Object(taipa__WEBPACK_IMPORTED_MODULE_1__[\"inflectToProceeding\"])('', '');\n\n  if (matches[0]) {\n    fr1 = Object(taipa__WEBPACK_IMPORTED_MODULE_1__[\"inflectToProceeding\"])(matches[0][0], matches[0][1]);\n  }\n\n  var forms = fr1.getForms();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, \"\\u62CD\\u7F85\\u99AC\\u5B57, \\u8F38\\u51FA\\u7E7C\\u7E8C\\u5F62\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    list: \"verbs\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })), __jsx(\"datalist\", {\n    id: \"verbs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, phrasalVerbs.map(function (x) {\n    return __jsx(\"option\", {\n      key: x[0] + x[1],\n      value: x[0] + ' ' + x[1],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    });\n  })), forms.map(function (x) {\n    return __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, x.literal, \" \");\n  }));\n}\n\n_s(PhrasalVerbPage, \"WVveI0ACa0LqOSOlGzu58xcz+KE=\");\n\n_c = PhrasalVerbPage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (PhrasalVerbPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PhrasalVerbPage\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvcGhyYXNhbHZlcmIudHN4PzZmM2MiXSwibmFtZXMiOlsiUGhyYXNhbFZlcmJQYWdlIiwidXNlU3RhdGUiLCJpbnB1dCIsInNldElucHV0IiwiaGFuZGxlQ2hhbmdlIiwiZSIsInRhcmdldCIsInZhbHVlIiwicGhyYXNhbFZlcmJzIiwibWF0Y2hlcyIsImZpbHRlciIsIngiLCJqb2luIiwiZnIxIiwiaW5mbGVjdFRvUHJvY2VlZGluZyIsImZvcm1zIiwiZ2V0Rm9ybXMiLCJtYXAiLCJsaXRlcmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQSxTQUFTQSxlQUFULEdBQTJCO0FBQUE7O0FBQUE7O0FBQUEsa0JBQ0NDLHNEQUFRLENBQUMsRUFBRCxDQURUO0FBQUEsTUFDbEJDLEtBRGtCO0FBQUEsTUFDWEMsUUFEVzs7QUFHekIsTUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBVUMsQ0FBVixFQUFrRDtBQUNyRUYsWUFBUSxDQUFDRSxDQUFDLENBQUNDLE1BQUYsQ0FBU0MsS0FBVixDQUFSO0FBQ0QsR0FGRDs7QUFJQSxNQUFNQyxZQUFZLEdBQUcsQ0FDbkIsQ0FBQyxTQUFELEVBQVksT0FBWixDQURtQixFQUVuQixDQUFDLE9BQUQsRUFBVSxPQUFWLENBRm1CLENBQXJCO0FBS0EsTUFBTUMsT0FBTyxHQUFHRCxZQUFZLENBQUNFLE1BQWIsQ0FBb0IsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsSUFBRixDQUFPLEdBQVAsTUFBZ0JWLEtBQXBCO0FBQUEsR0FBckIsQ0FBaEI7QUFFQSxNQUFJVyxHQUFHLEdBQUdDLGlFQUFtQixDQUFDLEVBQUQsRUFBSyxFQUFMLENBQTdCOztBQUNBLE1BQUlMLE9BQU8sQ0FBQyxDQUFELENBQVgsRUFBZ0I7QUFDZEksT0FBRyxHQUFHQyxpRUFBbUIsQ0FBQ0wsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXLENBQVgsQ0FBRCxFQUFnQkEsT0FBTyxDQUFDLENBQUQsQ0FBUCxDQUFXLENBQVgsQ0FBaEIsQ0FBekI7QUFDRDs7QUFFRCxNQUFNTSxLQUFLLEdBQUdGLEdBQUcsQ0FBQ0csUUFBSixFQUFkO0FBRUEsU0FDRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxpRUFFRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBRkYsRUFHRTtBQUFPLFFBQUksRUFBQyxNQUFaO0FBQW1CLFFBQUksRUFBQyxPQUF4QjtBQUFnQyxZQUFRLEVBQUVaLFlBQTFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFIRixDQURGLEVBTUU7QUFBVSxNQUFFLEVBQUMsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dJLFlBQVksQ0FBQ1MsR0FBYixDQUFpQixVQUFBTixDQUFDO0FBQUEsV0FDakI7QUFBUSxTQUFHLEVBQUVBLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT0EsQ0FBQyxDQUFDLENBQUQsQ0FBckI7QUFBMEIsV0FBSyxFQUFFQSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sR0FBUCxHQUFhQSxDQUFDLENBQUMsQ0FBRCxDQUEvQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRGlCO0FBQUEsR0FBbEIsQ0FESCxDQU5GLEVBV0dJLEtBQUssQ0FBQ0UsR0FBTixDQUFVLFVBQUFOLENBQUM7QUFBQSxXQUNWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBSUEsQ0FBQyxDQUFDTyxPQUFOLE1BRFU7QUFBQSxHQUFYLENBWEgsQ0FERjtBQWlCRDs7R0F0Q1FsQixlOztLQUFBQSxlO0FBd0NNQSw4RUFBZiIsImZpbGUiOiIuL3BhZ2VzL3BocmFzYWx2ZXJiLnRzeC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5mbGVjdFRvUHJvY2VlZGluZyB9IGZyb20gJ3RhaXBhJztcblxuZnVuY3Rpb24gUGhyYXNhbFZlcmJQYWdlKCkge1xuICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKCcnKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pIHtcbiAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgcGhyYXNhbFZlcmJzID0gW1xuICAgIFsna2h1YW5udycsICd0aXVyaCddLFxuICAgIFsnbG9uZ3cnLCAndGl1cmgnXSxcbiAgXTtcblxuICBjb25zdCBtYXRjaGVzID0gcGhyYXNhbFZlcmJzLmZpbHRlcih4ID0+IHguam9pbignICcpID09PSBpbnB1dCk7XG5cbiAgbGV0IGZyMSA9IGluZmxlY3RUb1Byb2NlZWRpbmcoJycsICcnKTtcbiAgaWYgKG1hdGNoZXNbMF0pIHtcbiAgICBmcjEgPSBpbmZsZWN0VG9Qcm9jZWVkaW5nKG1hdGNoZXNbMF1bMF0sIG1hdGNoZXNbMF1bMV0pO1xuICB9XG5cbiAgY29uc3QgZm9ybXMgPSBmcjEuZ2V0Rm9ybXMoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8bGFiZWw+XG4gICAgICAgIOaLjee+hemmrOWtlywg6Ly45Ye657m857qM5b2iXG4gICAgICAgIDxiciAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBsaXN0PVwidmVyYnNcIiBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSAvPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkYXRhbGlzdCBpZD1cInZlcmJzXCI+XG4gICAgICAgIHtwaHJhc2FsVmVyYnMubWFwKHggPT4gKFxuICAgICAgICAgIDxvcHRpb24ga2V5PXt4WzBdICsgeFsxXX0gdmFsdWU9e3hbMF0gKyAnICcgKyB4WzFdfSAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGF0YWxpc3Q+XG4gICAgICB7Zm9ybXMubWFwKHggPT4gKFxuICAgICAgICA8YT57eC5saXRlcmFsfSA8L2E+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGhyYXNhbFZlcmJQYWdlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/phrasalverb.tsx\n");

/***/ })

},[["./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fphrasalverb&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fphrasalverb.tsx!./","webpack"]]]);