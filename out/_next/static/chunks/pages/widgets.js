_N_E =
(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([["pages/widgets"],{

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _assertThisInitialized; });\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcz8yNTdlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _classCallCheck; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzP2Q0ZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _createClass; });\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzP2JlZTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/createClass.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _defineProperty; });\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzP2FkZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _extends; });\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanM/YzMxZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWU7QUFDZjtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/extends.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _inheritsLoose; });\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanM/NzQ4ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _objectWithoutPropertiesLoose; });\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanM/Y2NiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\n");

/***/ }),

/***/ "./node_modules/memoize-one/dist/memoize-one.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (memoizeOne);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzPzViMGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLDBCQUEwQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLHlFQUFVLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXdJbnB1dHMsIGxhc3RJbnB1dHMpIHtcbiAgICBpZiAobmV3SW5wdXRzLmxlbmd0aCAhPT0gbGFzdElucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0lucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobmV3SW5wdXRzW2ldICE9PSBsYXN0SW5wdXRzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/memoize-one/dist/memoize-one.esm.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var assign=Object.assign.bind(Object);module.exports=assign;module.exports.default=module.exports;\n//# sourceMappingURL=object-assign.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbi5qcz80MWViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLHNDQUFzQyxzQkFBc0I7QUFDekUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7dmFyIGFzc2lnbj1PYmplY3QuYXNzaWduLmJpbmQoT2JqZWN0KTttb2R1bGUuZXhwb3J0cz1hc3NpZ247bW9kdWxlLmV4cG9ydHMuZGVmYXVsdD1tb2R1bGUuZXhwb3J0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC1hc3NpZ24uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/object-assign.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fwidgets&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fwidgets.tsx!./":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fwidgets&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fwidgets.tsx ***!
  \****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/widgets\",\n      function () {\n        return __webpack_require__(/*! ./pages/widgets.tsx */ \"./pages/widgets.tsx\");\n      }\n    ]);\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzPzVjNmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxnREFBOEM7QUFDckU7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9wYWdlPSUyRndpZGdldHMmYWJzb2x1dGVQYWdlUGF0aD0lMkZVc2VycyUyRmpzbHYlMkZQcm9qZWN0cyUyRmtleWluJTJGcGFnZXMlMkZ3aWRnZXRzLnRzeCEuLy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICh3aW5kb3cuX19ORVhUX1AgPSB3aW5kb3cuX19ORVhUX1AgfHwgW10pLnB1c2goW1xuICAgICAgXCIvd2lkZ2V0c1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi9Vc2Vycy9qc2x2L1Byb2plY3RzL2tleWluL3BhZ2VzL3dpZGdldHMudHN4XCIpO1xuICAgICAgfVxuICAgIF0pO1xuICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fwidgets&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fwidgets.tsx!./\n");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanM/YTE1YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUEsSUFBSSxJQUFxQztBQUN6Qyw2QkFBNkIsbUJBQU8sQ0FBQyx5RkFBNEI7QUFDakU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0R0FBNEc7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIHZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICcgK1xuICAgICAgICAgICAgbG9jYXRpb24gKyAnIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAnICsgdHlwZW9mIGVycm9yICsgJy4gJyArXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArXG4gICAgICAgICAgICAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICtcbiAgICAgICAgICAgICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVzZXRzIHdhcm5pbmcgY2FjaGUgd2hlbiB0ZXN0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prop-types/checkPropTypes.js\n");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzPzU5YjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/ReactPropTypesSecret.js\n");

/***/ }),

/***/ "./node_modules/react-window/dist/index.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-window/dist/index.esm.js ***!
  \*****************************************************/
/*! exports provided: VariableSizeGrid, VariableSizeList, FixedSizeGrid, FixedSizeList, areEqual, shouldComponentUpdate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VariableSizeGrid\", function() { return VariableSizeGrid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VariableSizeList\", function() { return VariableSizeList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FixedSizeGrid\", function() { return FixedSizeGrid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FixedSizeList\", function() { return FixedSizeList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"areEqual\", function() { return areEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shouldComponentUpdate\", function() { return shouldComponentUpdate; });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! memoize-one */ \"./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n\n\n\n\n\n\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (true) {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount =\n    /*#__PURE__*/\n    new WeakSet();\n    devWarningsOverscanRowsColumnsCount =\n    /*#__PURE__*/\n    new WeakSet();\n    devWarningsTagName =\n    /*#__PURE__*/\n    new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class, _temp;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this)));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this)),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _style;\n\n          itemStyleCache[key] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = getColumnOffset(_this.props, columnIndex, _this._instanceProps), _style.top = getRowOffset(_this.props, rowIndex, _this._instanceProps), _style.height = getRowHeight(_this.props, rowIndex, _this._instanceProps), _style.width = getColumnWidth(_this.props, columnIndex, _this._instanceProps), _style);\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(react__WEBPACK_IMPORTED_MODULE_4__[\"PureComponent\"]), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _temp;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (true) {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid =\n/*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (true) {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (true) {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection =\n    /*#__PURE__*/\n    new WeakSet();\n    devWarningsTagName$1 =\n    /*#__PURE__*/\n    new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class, _temp;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this)));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this)),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _style;\n\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          itemStyleCache[index] = style = (_style = {\n            position: 'absolute'\n          }, _style[direction === 'rtl' ? 'right' : 'left'] = isHorizontal ? _offset : 0, _style.top = !isHorizontal ? _offset : 0, _style.height = !isHorizontal ? size : '100%', _style.width = isHorizontal ? size : '100%', _style);\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = Object(memoize_one__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var itemCount = this.props.itemCount;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1));\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props2 = this.props,\n          direction = _this$props2.direction,\n          initialScrollOffset = _this$props2.initialScrollOffset,\n          layout = _this$props2.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          layout = _this$props3.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemCount = _this$props4.itemCount,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey$1 : _this$props4$itemKey,\n          layout = _this$props4.layout,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, Object(react__WEBPACK_IMPORTED_MODULE_4__[\"createElement\"])(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    }; // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props5 = this.props,\n          itemCount = _this$props5.itemCount,\n          overscanCount = _this$props5.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(react__WEBPACK_IMPORTED_MODULE_4__[\"PureComponent\"]), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _temp;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (true) {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList =\n/*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (true) {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeGrid =\n/*#__PURE__*/\ncreateGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (true) {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\nvar FixedSizeList =\n/*#__PURE__*/\ncreateListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (true) {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(prevProps, [\"style\"]);\n\n  var nextStyle = nextProps.style,\n      nextRest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(nextProps, [\"style\"]);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-window/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.12.0\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/next/dist/build/polyfills/object-assign.js\");\nvar checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.12.0';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\n\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar lowPriorityWarningWithoutStack = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarningWithoutStack = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(void 0, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nvar warningWithoutStack = function () {};\n\n{\n  warningWithoutStack = function (condition, format) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n    }\n\n    if (condition) {\n      return;\n    }\n\n    if (typeof console !== 'undefined') {\n      var argsWithFormat = args.map(function (item) {\n        return '' + item;\n      });\n      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nvar warningWithoutStack$1 = warningWithoutStack;\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  suspense: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\nvar describeComponentFrame = function (name, source, ownerName) {\n  var sourceInfo = '';\n\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n\n        if (match) {\n          var pathBeforeSlash = match[1];\n\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n};\n\nvar Resolved = 1;\n\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return \"Profiler\";\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n\n          break;\n        }\n    }\n  }\n\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\nvar currentlyValidatingElement = null;\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = warningWithoutStack$1;\n\n{\n  warning = function (condition, format) {\n    if (condition) {\n      return;\n    }\n\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    warningWithoutStack$1.apply(void 0, [false, format + '%s'].concat(args, [stack]));\n  };\n}\n\nvar warning$1 = warning;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\n\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n\n  if (maybeKey !== undefined) {\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  } // Remaining properties are added to a new props object\n\n\n  for (propName in config) {\n    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n      props[propName] = config[propName];\n    }\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\n\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \").\" + addendum);\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\n\n\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n  func.call(context, child, bookKeeping.count++);\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error(\"React.Children.only expected to receive a single React element child.\");\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          propTypes = newPropTypes; // Match production behavior more closely:\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n    }\n\n    if (render != null) {\n      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\");\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, inputs);\n}\nfunction useLayoutEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, inputs);\n}\nfunction useCallback(callback, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, inputs);\n}\nfunction useMemo(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, inputs);\n}\nfunction useImperativeHandle(ref, create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, inputs);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nvar emptyObject$1 = {};\nfunction useResponder(responder, listenerProps) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (responder == null || responder.$$typeof !== REACT_RESPONDER_TYPE) {\n      warning$1(false, 'useResponder: invalid first argument. Expected an event responder, but instead got %s', responder);\n      return;\n    }\n  }\n\n  return dispatcher.useResponder(responder, listenerProps || emptyObject$1);\n}\nfunction useTransition(config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition(config);\n}\nfunction useDeferredValue(value, config) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, config);\n}\n\nfunction withSuspenseConfig(scope, config) {\n  var previousConfig = ReactCurrentBatchConfig.suspense;\n  ReactCurrentBatchConfig.suspense = config === undefined ? null : config;\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.suspense = previousConfig;\n  }\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  setCurrentlyValidatingElement(element);\n\n  {\n    warning$1(false, 'Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  var type = element.type;\n\n  if (type === null || type === undefined || typeof type === 'string') {\n    return;\n  }\n\n  var name = getComponentName(type);\n  var propTypes;\n\n  if (typeof type === 'function') {\n    propTypes = type.propTypes;\n  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n  // Inner props are checked in the reconciler.\n  type.$$typeof === REACT_MEMO_TYPE)) {\n    propTypes = type.propTypes;\n  } else {\n    return;\n  }\n\n  if (propTypes) {\n    setCurrentlyValidatingElement(element);\n    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n    setCurrentlyValidatingElement(null);\n  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown = true;\n    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n\n  if (typeof type.getDefaultProps === 'function') {\n    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  setCurrentlyValidatingElement(fragment);\n  var keys = Object.keys(fragment.props);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (key !== 'children' && key !== 'key') {\n      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n      break;\n    }\n  }\n\n  if (fragment.ref !== null) {\n    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(source);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    var children = props.children;\n\n    if (children !== undefined) {\n      if (isStaticChildren) {\n        if (Array.isArray(children)) {\n          for (var i = 0; i < children.length; i++) {\n            validateChildKeys(children[i], type);\n          }\n\n          if (Object.freeze) {\n            Object.freeze(children);\n          }\n        } else {\n          warning$1(false, 'React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n        }\n      } else {\n        validateChildKeys(children, type);\n      }\n    }\n  }\n\n  if (hasOwnProperty$1.call(props, 'key')) {\n    warning$1(false, 'React.jsx: Spreading a key to JSX is a deprecated pattern. ' + 'Explicitly pass a key after spreading props in your JSX call. ' + 'E.g. <ComponentName {...props} key={key} />');\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n} // These two functions exist to still get child warnings in dev\n// even with the prod transform. This means that jsxDEV is purely\n// opt-in behavior for better messages but that we won't stop\n// giving you warnings if you use production apis.\n\nfunction jsxWithValidationStatic(type, props, key) {\n  return jsxWithValidation(type, props, key, true);\n}\nfunction jsxWithValidationDynamic(type, props, key) {\n  return jsxWithValidation(type, props, key, false);\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type; // Legacy hook: remove it\n\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarningWithoutStack$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var frozenObject = Object.freeze({});\n    var testMap = new Map([[frozenObject, null]]);\n    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction createFundamentalComponent(impl) {\n  // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(impl);\n  }\n\n  var fundamantalComponent = {\n    $$typeof: REACT_FUNDAMENTAL_TYPE,\n    impl: impl\n  };\n\n  {\n    Object.freeze(fundamantalComponent);\n  }\n\n  return fundamantalComponent;\n}\n\nfunction createEventResponder(displayName, responderConfig) {\n  var getInitialState = responderConfig.getInitialState,\n      onEvent = responderConfig.onEvent,\n      onMount = responderConfig.onMount,\n      onUnmount = responderConfig.onUnmount,\n      onRootEvent = responderConfig.onRootEvent,\n      rootEventTypes = responderConfig.rootEventTypes,\n      targetEventTypes = responderConfig.targetEventTypes,\n      targetPortalPropagation = responderConfig.targetPortalPropagation;\n  var eventResponder = {\n    $$typeof: REACT_RESPONDER_TYPE,\n    displayName: displayName,\n    getInitialState: getInitialState || null,\n    onEvent: onEvent || null,\n    onMount: onMount || null,\n    onRootEvent: onRootEvent || null,\n    onUnmount: onUnmount || null,\n    rootEventTypes: rootEventTypes || null,\n    targetEventTypes: targetEventTypes || null,\n    targetPortalPropagation: targetPortalPropagation || false\n  }; // We use responder as a Map key later on. When we have a bad\n  // polyfill, then we can't use it as a key as the polyfill tries\n  // to add a property to the object.\n\n  if ( true && !hasBadMapPolyfill) {\n    Object.freeze(eventResponder);\n  }\n\n  return eventResponder;\n}\n\nfunction createScope() {\n  var scopeComponent = {\n    $$typeof: REACT_SCOPE_TYPE\n  };\n\n  {\n    Object.freeze(scopeComponent);\n  }\n\n  return scopeComponent;\n}\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in Strict Mode.\n\n // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\n // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\n // Gather advanced timing metrics for Profiler subtrees.\n\n // Trace which interactions trigger each commit.\n\n // SSR experiments\n\n\n // Only used in www builds.\n\n // Only used in www builds.\n\n // Disable javascript: URL strings in href for XSS protection.\n\n // React Fire: prevent the value and checked attributes from syncing\n// with their related DOM properties\n\n // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n\nvar exposeConcurrentModeAPIs = false;\n // Experimental React Flare event system and event components support.\n\nvar enableFlareAPI = false; // Experimental Host Component support.\n\nvar enableFundamentalAPI = false; // Experimental Scope support.\n\nvar enableScopeAPI = false; // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\nvar enableJSXTransformAPI = false; // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)\n// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version\n\n // For tests, we flush suspense fallbacks in an act scope;\n// *except* in some of our own tests, where we test incremental loading states.\n\n // Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n\n // Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\n\n\n\n\n\n // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance\n\nvar React = {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n  createRef: createRef,\n  Component: Component,\n  PureComponent: PureComponent,\n  createContext: createContext,\n  forwardRef: forwardRef,\n  lazy: lazy,\n  memo: memo,\n  useCallback: useCallback,\n  useContext: useContext,\n  useEffect: useEffect,\n  useImperativeHandle: useImperativeHandle,\n  useDebugValue: useDebugValue,\n  useLayoutEffect: useLayoutEffect,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  Fragment: REACT_FRAGMENT_TYPE,\n  Profiler: REACT_PROFILER_TYPE,\n  StrictMode: REACT_STRICT_MODE_TYPE,\n  Suspense: REACT_SUSPENSE_TYPE,\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n  version: ReactVersion,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n};\n\nif (exposeConcurrentModeAPIs) {\n  React.useTransition = useTransition;\n  React.useDeferredValue = useDeferredValue;\n  React.SuspenseList = REACT_SUSPENSE_LIST_TYPE;\n  React.unstable_withSuspenseConfig = withSuspenseConfig;\n}\n\nif (enableFlareAPI) {\n  React.unstable_useResponder = useResponder;\n  React.unstable_createResponder = createEventResponder;\n}\n\nif (enableFundamentalAPI) {\n  React.unstable_createFundamental = createFundamentalComponent;\n}\n\nif (enableScopeAPI) {\n  React.unstable_createScope = createScope;\n} // Note: some APIs are added with feature flags.\n// Make sure that stable builds for open source\n// don't modify the React object to avoid deopts.\n// Also let's not expose their names in stable builds.\n\n\nif (enableJSXTransformAPI) {\n  {\n    React.jsxDEV = jsxWithValidation;\n    React.jsx = jsxWithValidationDynamic;\n    React.jsxs = jsxWithValidationStatic;\n  }\n}\n\n\n\nvar React$2 = Object.freeze({\n\tdefault: React\n});\n\nvar React$3 = ( React$2 && React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\n\n\nvar react = React$3.default || React$3;\n\nmodule.exports = react;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcz83MmQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7Ozs7QUFJYixJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLGdGQUFlO0FBQ3JDLHFCQUFxQixtQkFBTyxDQUFDLDhFQUEyQjs7QUFFeEQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBGQUEwRixhQUFhO0FBQ3ZHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdHQUFnRyxlQUFlO0FBQy9HO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBGQUEwRixhQUFhO0FBQ3ZHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsbURBQW1EO0FBQ25EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxT0FBcU87QUFDck87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsVUFBVTtBQUN2QixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsT0FBTztBQUNwQixhQUFhLFVBQVU7QUFDdkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsVUFBVTtBQUN2QixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLHlCQUF5Qjs7QUFFekIsMEJBQTBCO0FBQzFCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1EQUFtRDs7QUFFbkQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwREFBMEQ7O0FBRTFELDBGQUEwRixhQUFhO0FBQ3ZHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssRUFBRTs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxFQUFFO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7Ozs7QUFJQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjs7QUFFQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQix5REFBeUQsU0FBUztBQUNsRSx1QkFBdUIsU0FBUztBQUNoQztBQUNBLFdBQVcsU0FBUztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvRUFBb0U7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7OztBQUdBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOzs7QUFHSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlOztBQUVmLHdCQUF3QixpQkFBaUI7OztBQUd6QztBQUNBLHdCQUF3Qjs7QUFFeEIsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7OztBQUdMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsR0FBRztBQUNkO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7O0FBRUE7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxxSUFBcUkseUNBQXlDO0FBQzlLO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsR0FBRztBQUNkLFlBQVksUUFBUTtBQUNwQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLGlCQUFpQjtBQUM1QixXQUFXLEVBQUU7QUFDYjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyxFQUFFO0FBQ2IsWUFBWSxPQUFPO0FBQ25COzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFlBQVksT0FBTztBQUNuQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLEVBQUU7O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMGJBQTBiOztBQUUxYjtBQUNBLHlDQUF5QztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxFQUFFO0FBQ2I7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBEQUEwRDtBQUMxRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsRUFBRTtBQUNiOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4Qjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixpQkFBaUI7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1REFBdUQ7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscUJBQXFCO0FBQzlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4S0FBOEssU0FBUyxNQUFNLElBQUk7QUFDak07O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxREFBcUQ7QUFDckQ7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLHNCQUFzQjtBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBSTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLE1BQU0sS0FBSTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbURBQW1EOztBQUVuRDs7QUFFQTs7QUFFQTs7O0FBR0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMkJBQTJCOztBQUUzQixpQ0FBaUM7O0FBRWpDLDJCQUEyQjs7QUFFM0Isa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7OztBQU1BOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMnKTtcblxuLy8gVE9ETzogdGhpcyBpcyBzcGVjaWFsIGJlY2F1c2UgaXQgZ2V0cyBpbXBvcnRlZCBkdXJpbmcgYnVpbGQuXG5cbnZhciBSZWFjdFZlcnNpb24gPSAnMTYuMTIuMCc7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpIDogMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpIDogMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpIDogMHhlYWNjO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpIDogMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpIDogMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKSA6IDB4ZWFjZTsgLy8gVE9ETzogV2UgZG9uJ3QgdXNlIEFzeW5jTW9kZSBvciBDb25jdXJyZW50TW9kZSBhbnltb3JlLiBUaGV5IHdlcmUgdGVtcG9yYXJ5XG4vLyAodW5zdGFibGUpIEFQSXMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZC4gQ2FuIHdlIHJlbW92ZSB0aGUgc3ltYm9scz9cblxuXG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0JykgOiAweGVhZDg7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubWVtbycpIDogMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSA6IDB4ZWFkNDtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnVuZGFtZW50YWwnKSA6IDB4ZWFkNTtcbnZhciBSRUFDVF9SRVNQT05ERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnJlc3BvbmRlcicpIDogMHhlYWQ2O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zY29wZScpIDogMHhlYWQ3O1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChtYXliZUl0ZXJhYmxlID09PSBudWxsIHx8IHR5cGVvZiBtYXliZUl0ZXJhYmxlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1heWJlSXRlcmF0b3IgPSBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdO1xuXG4gIGlmICh0eXBlb2YgbWF5YmVJdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIGBpbnZhcmlhbnRgIGNhbGxzIHdpdGhcbi8vIHRlbXBsYXRlIGxpdGVyYWwgc3RyaW5ncy4gVGhlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuLy8gZHVyaW5nIGJ1aWxkLlxuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG4vKipcbiAqIEZvcmtlZCBmcm9tIGZianMvd2FybmluZzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvZTY2YmEyMGFkNWJlNDMzZWI1NDQyM2YyYjA5N2Q4MjkzMjRkOWRlNi9wYWNrYWdlcy9mYmpzL3NyYy9fX2ZvcmtzX18vd2FybmluZy5qc1xuICpcbiAqIE9ubHkgY2hhbmdlIGlzIHdlIHVzZSBjb25zb2xlLndhcm4gaW5zdGVhZCBvZiBjb25zb2xlLmVycm9yLFxuICogYW5kIGRvIG5vdGhpbmcgd2hlbiAnY29uc29sZScgaXMgbm90IHN1cHBvcnRlZC5cbiAqIFRoaXMgcmVhbGx5IHNpbXBsaWZpZXMgdGhlIGNvZGUuXG4gKiAtLS1cbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xudmFyIGxvd1ByaW9yaXR5V2FybmluZ1dpdGhvdXRTdGFjayA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nV2l0aG91dFN0YWNrID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bsb3dQcmlvcml0eVdhcm5pbmdXaXRob3V0U3RhY2soY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh2b2lkIDAsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nV2l0aG91dFN0YWNrJDEgPSBsb3dQcmlvcml0eVdhcm5pbmdXaXRob3V0U3RhY2s7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG52YXIgd2FybmluZ1dpdGhvdXRTdGFjayA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHdhcm5pbmdXaXRob3V0U3RhY2sgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmdXaXRob3V0U3RhY2soY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gOCkge1xuICAgICAgLy8gQ2hlY2sgYmVmb3JlIHRoZSBjb25kaXRpb24gdG8gY2F0Y2ggdmlvbGF0aW9ucyBlYXJseS5cbiAgICAgIHRocm93IG5ldyBFcnJvcignd2FybmluZ1dpdGhvdXRTdGFjaygpIGN1cnJlbnRseSBzdXBwb3J0cyBhdCBtb3N0IDggYXJndW1lbnRzLicpO1xuICAgIH1cblxuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gJycgKyBpdGVtO1xuICAgICAgfSk7XG4gICAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTsgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAgIC8vIGJyZWFrcyBJRTk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2MTBcblxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5lcnJvciwgY29uc29sZSwgYXJnc1dpdGhGb3JtYXQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbnZhciB3YXJuaW5nV2l0aG91dFN0YWNrJDEgPSB3YXJuaW5nV2l0aG91dFN0YWNrO1xuXG52YXIgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50ID0ge307XG5cbmZ1bmN0aW9uIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIHtcbiAgICB2YXIgX2NvbnN0cnVjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBfY29uc3RydWN0b3IgJiYgKF9jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBfY29uc3RydWN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnO1xuICAgIHZhciB3YXJuaW5nS2V5ID0gY29tcG9uZW50TmFtZSArIFwiLlwiICsgY2FsbGVyTmFtZTtcblxuICAgIGlmIChkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsIFwiQ2FuJ3QgY2FsbCAlcyBvbiBhIGNvbXBvbmVudCB0aGF0IGlzIG5vdCB5ZXQgbW91bnRlZC4gXCIgKyAnVGhpcyBpcyBhIG5vLW9wLCBidXQgaXQgbWlnaHQgaW5kaWNhdGUgYSBidWcgaW4geW91ciBhcHBsaWNhdGlvbi4gJyArICdJbnN0ZWFkLCBhc3NpZ24gdG8gYHRoaXMuc3RhdGVgIGRpcmVjdGx5IG9yIGRlZmluZSBhIGBzdGF0ZSA9IHt9O2AgJyArICdjbGFzcyBwcm9wZXJ0eSB3aXRoIHRoZSBkZXNpcmVkIHN0YXRlIGluIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W3dhcm5pbmdLZXldID0gdHJ1ZTtcbiAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBhYnN0cmFjdCBBUEkgZm9yIGFuIHVwZGF0ZSBxdWV1ZS5cbiAqL1xuXG5cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGNhbGxlck5hbWUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxue1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OyAvLyBJZiBhIGNvbXBvbmVudCBoYXMgc3RyaW5nIHJlZnMsIHdlIHdpbGwgYXNzaWduIGEgZGlmZmVyZW50IG9iamVjdCBsYXRlci5cblxuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDsgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG5cbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cblxuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKCEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkpIHtcbiAgICB7XG4gICAgICB0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xufTtcbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5cblxuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsIGNhbGxiYWNrLCAnZm9yY2VVcGRhdGUnKTtcbn07XG4vKipcbiAqIERlcHJlY2F0ZWQgQVBJcy4gVGhlc2UgQVBJcyB1c2VkIHRvIGV4aXN0IG9uIGNsYXNzaWMgUmVhY3QgY2xhc3NlcyBidXQgc2luY2VcbiAqIHdlIHdvdWxkIGxpa2UgdG8gZGVwcmVjYXRlIHRoZW0sIHdlJ3JlIG5vdCBnb2luZyB0byBtb3ZlIHRoZW0gb3ZlciB0byB0aGlzXG4gKiBtb2Rlcm4gYmFzZSBjbGFzcy4gSW5zdGVhZCwgd2UgZGVmaW5lIGEgZ2V0dGVyIHRoYXQgd2FybnMgaWYgaXQncyBhY2Nlc3NlZC5cbiAqL1xuXG5cbntcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuXG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5mbykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlcycsIGluZm9bMF0sIGluZm9bMV0pO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcoZm5OYW1lLCBkZXByZWNhdGVkQVBJc1tmbk5hbWVdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ29tcG9uZW50RHVtbXkoKSB7fVxuXG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuLyoqXG4gKiBDb252ZW5pZW5jZSBjb21wb25lbnQgd2l0aCBkZWZhdWx0IHNoYWxsb3cgZXF1YWxpdHkgY2hlY2sgZm9yIHNDVS5cbiAqL1xuXG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsgLy8gSWYgYSBjb21wb25lbnQgaGFzIHN0cmluZyByZWZzLCB3ZSB3aWxsIGFzc2lnbiBhIGRpZmZlcmVudCBvYmplY3QgbGF0ZXIuXG5cbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbnZhciBwdXJlQ29tcG9uZW50UHJvdG90eXBlID0gUHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuY29uc3RydWN0b3IgPSBQdXJlQ29tcG9uZW50OyAvLyBBdm9pZCBhbiBleHRyYSBwcm90b3R5cGUganVtcCBmb3IgdGhlc2UgbWV0aG9kcy5cblxuX2Fzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcblxucHVyZUNvbXBvbmVudFByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA9IHRydWU7XG5cbi8vIGFuIGltbXV0YWJsZSBvYmplY3Qgd2l0aCBhIHNpbmdsZSBtdXRhYmxlIHZhbHVlXG5mdW5jdGlvbiBjcmVhdGVSZWYoKSB7XG4gIHZhciByZWZPYmplY3QgPSB7XG4gICAgY3VycmVudDogbnVsbFxuICB9O1xuXG4gIHtcbiAgICBPYmplY3Quc2VhbChyZWZPYmplY3QpO1xuICB9XG5cbiAgcmV0dXJuIHJlZk9iamVjdDtcbn1cblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBkaXNwYXRjaGVyLlxuICovXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG59O1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IGJhdGNoJ3MgY29uZmlndXJhdGlvbiBzdWNoIGFzIGhvdyBsb25nIGFuIHVwZGF0ZVxuICogc2hvdWxkIHN1c3BlbmQgZm9yIGlmIGl0IG5lZWRzIHRvLlxuICovXG52YXIgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcgPSB7XG4gIHN1c3BlbnNlOiBudWxsXG59O1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbnZhciBCRUZPUkVfU0xBU0hfUkUgPSAvXiguKilbXFxcXFxcL10vO1xudmFyIGRlc2NyaWJlQ29tcG9uZW50RnJhbWUgPSBmdW5jdGlvbiAobmFtZSwgc291cmNlLCBvd25lck5hbWUpIHtcbiAgdmFyIHNvdXJjZUluZm8gPSAnJztcblxuICBpZiAoc291cmNlKSB7XG4gICAgdmFyIHBhdGggPSBzb3VyY2UuZmlsZU5hbWU7XG4gICAgdmFyIGZpbGVOYW1lID0gcGF0aC5yZXBsYWNlKEJFRk9SRV9TTEFTSF9SRSwgJycpO1xuXG4gICAge1xuICAgICAgLy8gSW4gREVWLCBpbmNsdWRlIGNvZGUgZm9yIGEgY29tbW9uIHNwZWNpYWwgY2FzZTpcbiAgICAgIC8vIHByZWZlciBcImZvbGRlci9pbmRleC5qc1wiIGluc3RlYWQgb2YganVzdCBcImluZGV4LmpzXCIuXG4gICAgICBpZiAoL15pbmRleFxcLi8udGVzdChmaWxlTmFtZSkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaChCRUZPUkVfU0xBU0hfUkUpO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBwYXRoQmVmb3JlU2xhc2ggPSBtYXRjaFsxXTtcblxuICAgICAgICAgIGlmIChwYXRoQmVmb3JlU2xhc2gpIHtcbiAgICAgICAgICAgIHZhciBmb2xkZXJOYW1lID0gcGF0aEJlZm9yZVNsYXNoLnJlcGxhY2UoQkVGT1JFX1NMQVNIX1JFLCAnJyk7XG4gICAgICAgICAgICBmaWxlTmFtZSA9IGZvbGRlck5hbWUgKyAnLycgKyBmaWxlTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzb3VyY2VJbmZvID0gJyAoYXQgJyArIGZpbGVOYW1lICsgJzonICsgc291cmNlLmxpbmVOdW1iZXIgKyAnKSc7XG4gIH0gZWxzZSBpZiAob3duZXJOYW1lKSB7XG4gICAgc291cmNlSW5mbyA9ICcgKGNyZWF0ZWQgYnkgJyArIG93bmVyTmFtZSArICcpJztcbiAgfVxuXG4gIHJldHVybiAnXFxuICAgIGluICcgKyAobmFtZSB8fCAnVW5rbm93bicpICsgc291cmNlSW5mbztcbn07XG5cbnZhciBSZXNvbHZlZCA9IDE7XG5cbmZ1bmN0aW9uIHJlZmluZVJlc29sdmVkTGF6eUNvbXBvbmVudChsYXp5Q29tcG9uZW50KSB7XG4gIHJldHVybiBsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPT09IFJlc29sdmVkID8gbGF6eUNvbXBvbmVudC5fcmVzdWx0IDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7XG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBvdXRlclR5cGUuZGlzcGxheU5hbWUgfHwgKGZ1bmN0aW9uTmFtZSAhPT0gJycgPyB3cmFwcGVyTmFtZSArIFwiKFwiICsgZnVuY3Rpb25OYW1lICsgXCIpXCIgOiB3cmFwcGVyTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodHlwZSkge1xuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgLy8gSG9zdCByb290LCB0ZXh0IG5vZGUgb3IganVzdCBpbnZhbGlkIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB7XG4gICAgaWYgKHR5cGVvZiB0eXBlLnRhZyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1JlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWUoKS4gJyArICdUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ0ZyYWdtZW50JztcblxuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1BvcnRhbCc7XG5cbiAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICByZXR1cm4gXCJQcm9maWxlclwiO1xuXG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuICdTdHJpY3RNb2RlJztcblxuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2UnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlTGlzdCc7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgcmV0dXJuICdDb250ZXh0LkNvbnN1bWVyJztcblxuICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICByZXR1cm4gJ0NvbnRleHQuUHJvdmlkZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUudHlwZSk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHRoZW5hYmxlID0gdHlwZTtcbiAgICAgICAgICB2YXIgcmVzb2x2ZWRUaGVuYWJsZSA9IHJlZmluZVJlc29sdmVkTGF6eUNvbXBvbmVudCh0aGVuYWJsZSk7XG5cbiAgICAgICAgICBpZiAocmVzb2x2ZWRUaGVuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUocmVzb2x2ZWRUaGVuYWJsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSB7fTtcbnZhciBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7XG4gIHtcbiAgICBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cbn1cblxue1xuICAvLyBTdGFjayBpbXBsZW1lbnRhdGlvbiBpbmplY3RlZCBieSB0aGUgY3VycmVudCByZW5kZXJlci5cbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBudWxsO1xuXG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhY2sgPSAnJzsgLy8gQWRkIGFuIGV4dHJhIHRvcCBmcmFtZSB3aGlsZSBhbiBlbGVtZW50IGlzIGJlaW5nIHZhbGlkYXRlZFxuXG4gICAgaWYgKGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQudHlwZSk7XG4gICAgICB2YXIgb3duZXIgPSBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudC5fb3duZXI7XG4gICAgICBzdGFjayArPSBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50Ll9zb3VyY2UsIG93bmVyICYmIGdldENvbXBvbmVudE5hbWUob3duZXIudHlwZSkpO1xuICAgIH0gLy8gRGVsZWdhdGUgdG8gdGhlIGluamVjdGVkIHJlbmRlcmVyLXNwZWNpZmljIGltcGxlbWVudGF0aW9uXG5cblxuICAgIHZhciBpbXBsID0gUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2s7XG5cbiAgICBpZiAoaW1wbCkge1xuICAgICAgc3RhY2sgKz0gaW1wbCgpIHx8ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFjaztcbiAgfTtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGFjdCgpIHRvIHRyYWNrIHdoZXRoZXIgeW91J3JlIGluc2lkZSBhbiBhY3QoKSBzY29wZS5cbiAqL1xudmFyIElzU29tZVJlbmRlcmVyQWN0aW5nID0ge1xuICBjdXJyZW50OiBmYWxzZVxufTtcblxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID0ge1xuICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyOiBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzogUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsXG4gIFJlYWN0Q3VycmVudE93bmVyOiBSZWFjdEN1cnJlbnRPd25lcixcbiAgSXNTb21lUmVuZGVyZXJBY3Rpbmc6IElzU29tZVJlbmRlcmVyQWN0aW5nLFxuICAvLyBVc2VkIGJ5IHJlbmRlcmVycyB0byBhdm9pZCBidW5kbGluZyBvYmplY3QtYXNzaWduIHR3aWNlIGluIFVNRCBidW5kbGVzOlxuICBhc3NpZ246IF9hc3NpZ25cbn07XG5cbntcbiAgX2Fzc2lnbihSZWFjdFNoYXJlZEludGVybmFscywge1xuICAgIC8vIFRoZXNlIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gcHJvZHVjdGlvbi5cbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lOiBSZWFjdERlYnVnQ3VycmVudEZyYW1lLFxuICAgIC8vIFNoaW0gZm9yIFJlYWN0IERPTSAxNi4wLjAgd2hpY2ggc3RpbGwgZGVzdHJ1Y3R1cmVkIChidXQgbm90IHVzZWQpIHRoaXMuXG4gICAgLy8gVE9ETzogcmVtb3ZlIGluIFJlYWN0IDE3LjAuXG4gICAgUmVhY3RDb21wb25lbnRUcmVlSG9vazoge31cbiAgfSk7XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gd2FybmluZ1dpdGhvdXRTdGFjayQxO1xuXG57XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvd2FybmluZy1hbmQtaW52YXJpYW50LWFyZ3NcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMS5hcHBseSh2b2lkIDAsIFtmYWxzZSwgZm9ybWF0ICsgJyVzJ10uY29uY2F0KGFyZ3MsIFtzdGFja10pKTtcbiAgfTtcbn1cblxudmFyIHdhcm5pbmckMSA9IHdhcm5pbmc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ0tleSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duKSB7XG4gICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCBkaXNwbGF5TmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHdhcm5BYm91dEFjY2Vzc2luZ0tleS5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgd2FybkFib3V0QWNjZXNzaW5nUmVmLmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTsgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvcHVsbC8xMDdcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cblxuXG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzEwN1xuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuXG5mdW5jdGlvbiBqc3hERVYodHlwZSwgY29uZmlnLCBtYXliZUtleSwgc291cmNlLCBzZWxmKSB7XG4gIHZhciBwcm9wTmFtZTsgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuXG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7IC8vIEN1cnJlbnRseSwga2V5IGNhbiBiZSBzcHJlYWQgaW4gYXMgYSBwcm9wLiBUaGlzIGNhdXNlcyBhIHBvdGVudGlhbFxuICAvLyBpc3N1ZSBpZiBrZXkgaXMgYWxzbyBleHBsaWNpdGx5IGRlY2xhcmVkIChpZS4gPGRpdiB7Li4ucHJvcHN9IGtleT1cIkhpXCIgLz5cbiAgLy8gb3IgPGRpdiBrZXk9XCJIaVwiIHsuLi5wcm9wc30gLz4gKS4gV2Ugd2FudCB0byBkZXByZWNhdGUga2V5IHNwcmVhZCxcbiAgLy8gYnV0IGFzIGFuIGludGVybWVkaWFyeSBzdGVwLCB3ZSB3aWxsIHVzZSBqc3hERVYgZm9yIGV2ZXJ5dGhpbmcgZXhjZXB0XG4gIC8vIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+LCBiZWNhdXNlIHdlIGFyZW4ndCBjdXJyZW50bHkgYWJsZSB0byB0ZWxsIGlmXG4gIC8vIGtleSBpcyBleHBsaWNpdGx5IGRlY2xhcmVkIHRvIGJlIHVuZGVmaW5lZCBvciBub3QuXG5cbiAgaWYgKG1heWJlS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBrZXkgPSAnJyArIG1heWJlS2V5O1xuICB9XG5cbiAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gIH1cblxuICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gIH0gLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuXG5cbiAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcblxuXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAocmVmKSB7XG4gICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xufVxuLyoqXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2NyZWF0ZWVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcbiAgdmFyIHNlbGYgPSBudWxsO1xuICB2YXIgc291cmNlID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9IC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG5cblxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcblxuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkQXJyYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcblxuXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBpZiAoa2V5IHx8IHJlZikge1xuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsIHByb3BzKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBSZWFjdEVsZW1lbnRzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjY3JlYXRlZmFjdG9yeVxuICovXG5cblxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cbi8qKlxuICogQ2xvbmUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgdXNpbmcgZWxlbWVudCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2Nsb25lZWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGNsb25lRWxlbWVudChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIGlmICghIShlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHVuZGVmaW5lZCkpIHtcbiAgICB7XG4gICAgICB0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiICsgZWxlbWVudCArIFwiLlwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvcE5hbWU7IC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcblxuICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTsgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuXG5cbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7IC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG5cbiAgdmFyIHNlbGYgPSBlbGVtZW50Ll9zZWxmOyAvLyBTb3VyY2UgaXMgcHJlc2VydmVkIHNpbmNlIGNsb25lRWxlbWVudCBpcyB1bmxpa2VseSB0byBiZSB0YXJnZXRlZCBieSBhXG4gIC8vIHRyYW5zcGlsZXIsIGFuZCB0aGUgb3JpZ2luYWwgc291cmNlIGlzIHByb2JhYmx5IGEgYmV0dGVyIGluZGljYXRvciBvZiB0aGVcbiAgLy8gdHJ1ZSBvd25lci5cblxuICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlOyAvLyBPd25lciB3aWxsIGJlIHByZXNlcnZlZCwgdW5sZXNzIHJlZiBpcyBvdmVycmlkZGVuXG5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIC8vIFNpbGVudGx5IHN0ZWFsIHRoZSByZWYgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH0gLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcblxuXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcblxuICAgIGlmIChlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICB9XG5cbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBpZiAoY29uZmlnW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG5cblxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcblxuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG5cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn1cbi8qKlxuICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjaXN2YWxpZGVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgUmVhY3RFbGVtZW50LlxuICogQGZpbmFsXG4gKi9cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuLyoqXG4gKiBFc2NhcGUgYW5kIHdyYXAga2V5IHNvIGl0IGlzIHNhZmUgdG8gdXNlIGFzIGEgcmVhY3RpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVzY2FwZWQga2V5LlxuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZVJlZ2V4ID0gL1s9Ol0vZztcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0nOiAnPTAnLFxuICAgICc6JzogJz0yJ1xuICB9O1xuICB2YXIgZXNjYXBlZFN0cmluZyA9ICgnJyArIGtleSkucmVwbGFjZShlc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbiAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG59XG4vKipcbiAqIFRPRE86IFRlc3QgdGhhdCBhIHNpbmdsZSBjaGlsZCBhbmQgYW4gYXJyYXkgd2l0aCBvbmUgaXRlbSBoYXZlIHRoZSBzYW1lIGtleVxuICogcGF0dGVybi5cbiAqL1xuXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuXG5mdW5jdGlvbiBlc2NhcGVVc2VyUHJvdmlkZWRLZXkodGV4dCkge1xuICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgJyQmLycpO1xufVxuXG52YXIgUE9PTF9TSVpFID0gMTA7XG52YXIgdHJhdmVyc2VDb250ZXh0UG9vbCA9IFtdO1xuXG5mdW5jdGlvbiBnZXRQb29sZWRUcmF2ZXJzZUNvbnRleHQobWFwUmVzdWx0LCBrZXlQcmVmaXgsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIGlmICh0cmF2ZXJzZUNvbnRleHRQb29sLmxlbmd0aCkge1xuICAgIHZhciB0cmF2ZXJzZUNvbnRleHQgPSB0cmF2ZXJzZUNvbnRleHRQb29sLnBvcCgpO1xuICAgIHRyYXZlcnNlQ29udGV4dC5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gICAgdHJhdmVyc2VDb250ZXh0LmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICB0cmF2ZXJzZUNvbnRleHQuZnVuYyA9IG1hcEZ1bmN0aW9uO1xuICAgIHRyYXZlcnNlQ29udGV4dC5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgICB0cmF2ZXJzZUNvbnRleHQuY291bnQgPSAwO1xuICAgIHJldHVybiB0cmF2ZXJzZUNvbnRleHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdDogbWFwUmVzdWx0LFxuICAgICAga2V5UHJlZml4OiBrZXlQcmVmaXgsXG4gICAgICBmdW5jOiBtYXBGdW5jdGlvbixcbiAgICAgIGNvbnRleHQ6IG1hcENvbnRleHQsXG4gICAgICBjb3VudDogMFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVsZWFzZVRyYXZlcnNlQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdHJhdmVyc2VDb250ZXh0LnJlc3VsdCA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5rZXlQcmVmaXggPSBudWxsO1xuICB0cmF2ZXJzZUNvbnRleHQuZnVuYyA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5jb250ZXh0ID0gbnVsbDtcbiAgdHJhdmVyc2VDb250ZXh0LmNvdW50ID0gMDtcblxuICBpZiAodHJhdmVyc2VDb250ZXh0UG9vbC5sZW5ndGggPCBQT09MX1NJWkUpIHtcbiAgICB0cmF2ZXJzZUNvbnRleHRQb29sLnB1c2godHJhdmVyc2VDb250ZXh0KTtcbiAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIGNoaWxkIGZvdW5kLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcbiAqIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCBuYW1lU29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG5cbiAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfVxuXG4gIHZhciBpbnZva2VDYWxsYmFjayA9IGZhbHNlO1xuXG4gIGlmIChjaGlsZHJlbiA9PT0gbnVsbCkge1xuICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgaWYgKGludm9rZUNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBjaGlsZHJlbiwgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cblxuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SIDogbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKTtcbiAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB7XG4gICAgICAgIC8vIFdhcm4gYWJvdXQgdXNpbmcgTWFwcyBhcyBjaGlsZHJlblxuICAgICAgICBpZiAoaXRlcmF0b3JGbiA9PT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICAgICFkaWRXYXJuQWJvdXRNYXBzID8gd2FybmluZyQxKGZhbHNlLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyB1bnN1cHBvcnRlZCBhbmQgd2lsbCBsaWtlbHkgeWllbGQgJyArICd1bmV4cGVjdGVkIHJlc3VsdHMuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZS9pdGVyYWJsZSBvZiBrZXllZCAnICsgJ1JlYWN0RWxlbWVudHMgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaWkgPSAwO1xuXG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuXG4gICAgICB7XG4gICAgICAgIGFkZGVuZHVtID0gJyBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5ICcgKyAnaW5zdGVhZC4nICsgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9ICcnICsgY2hpbGRyZW47XG5cbiAgICAgIHtcbiAgICAgICAge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIiArIChjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcpICsgXCIpLlwiICsgYWRkZW5kdW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgJycsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQgIT09IG51bGwgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIGVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfSAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuXG5cbiAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkKGJvb2tLZWVwaW5nLCBjaGlsZCwgbmFtZSkge1xuICB2YXIgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmMsXG4gICAgICBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVuZm9yZWFjaFxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IGdldFBvb2xlZFRyYXZlcnNlQ29udGV4dChudWxsLCBudWxsLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIHJlbGVhc2VUcmF2ZXJzZUNvbnRleHQodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQsXG4gICAgICBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXgsXG4gICAgICBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuICB2YXIgbWFwcGVkQ2hpbGQgPSBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgaWYgKGlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgbWFwcGVkQ2hpbGQgPSBjbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsIC8vIEtlZXAgYm90aCB0aGUgKG1hcHBlZCkgYW5kIG9sZCBrZXlzIGlmIHRoZXkgZGlmZmVyLCBqdXN0IGFzXG4gICAgICAvLyB0cmF2ZXJzZUFsbENoaWxkcmVuIHVzZWQgdG8gZG8gZm9yIG9iamVjdHMgYXMgY2hpbGRyZW5cbiAgICAgIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICB9XG5cbiAgICByZXN1bHQucHVzaChtYXBwZWRDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuXG4gIGlmIChwcmVmaXggIT0gbnVsbCkge1xuICAgIGVzY2FwZWRQcmVmaXggPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkocHJlZml4KSArICcvJztcbiAgfVxuXG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBnZXRQb29sZWRUcmF2ZXJzZUNvbnRleHQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LCB0cmF2ZXJzZUNvbnRleHQpO1xuICByZWxlYXNlVHJhdmVyc2VDb250ZXh0KHRyYXZlcnNlQ29udGV4dCk7XG59XG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbm1hcFxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cblxuXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbmNvdW50XG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cblxuXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG51bGwpO1xufVxuLyoqXG4gKiBGbGF0dGVuIGEgY2hpbGRyZW4gb2JqZWN0ICh0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmApIGFuZFxuICogcmV0dXJuIGFuIGFycmF5IHdpdGggYXBwcm9wcmlhdGVseSByZS1rZXllZCBjaGlsZHJlbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW50b2FycmF5XG4gKi9cblxuXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbm9ubHlcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzXG4gKiBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGUgcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0b1xuICogYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmUgb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdEVsZW1lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIHtcbiAgICAgIHRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIGlmIChjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHtcbiAgICAgICEoY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09IG51bGwgfHwgdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2NyZWF0ZUNvbnRleHQ6IEV4cGVjdGVkIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYSAnICsgJ2Z1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICB2YXIgY29udGV4dCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIF9jYWxjdWxhdGVDaGFuZ2VkQml0czogY2FsY3VsYXRlQ2hhbmdlZEJpdHMsXG4gICAgLy8gQXMgYSB3b3JrYXJvdW5kIHRvIHN1cHBvcnQgbXVsdGlwbGUgY29uY3VycmVudCByZW5kZXJlcnMsIHdlIGNhdGVnb3JpemVcbiAgICAvLyBzb21lIHJlbmRlcmVycyBhcyBwcmltYXJ5IGFuZCBvdGhlcnMgYXMgc2Vjb25kYXJ5LiBXZSBvbmx5IGV4cGVjdFxuICAgIC8vIHRoZXJlIHRvIGJlIHR3byBjb25jdXJyZW50IHJlbmRlcmVycyBhdCBtb3N0OiBSZWFjdCBOYXRpdmUgKHByaW1hcnkpIGFuZFxuICAgIC8vIEZhYnJpYyAoc2Vjb25kYXJ5KTsgUmVhY3QgRE9NIChwcmltYXJ5KSBhbmQgUmVhY3QgQVJUIChzZWNvbmRhcnkpLlxuICAgIC8vIFNlY29uZGFyeSByZW5kZXJlcnMgc3RvcmUgdGhlaXIgY29udGV4dCB2YWx1ZXMgb24gc2VwYXJhdGUgZmllbGRzLlxuICAgIF9jdXJyZW50VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlMjogZGVmYXVsdFZhbHVlLFxuICAgIC8vIFVzZWQgdG8gdHJhY2sgaG93IG1hbnkgY29uY3VycmVudCByZW5kZXJlcnMgdGhpcyBjb250ZXh0IGN1cnJlbnRseVxuICAgIC8vIHN1cHBvcnRzIHdpdGhpbiBpbiBhIHNpbmdsZSByZW5kZXJlci4gU3VjaCBhcyBwYXJhbGxlbCBzZXJ2ZXIgcmVuZGVyaW5nLlxuICAgIF90aHJlYWRDb3VudDogMCxcbiAgICAvLyBUaGVzZSBhcmUgY2lyY3VsYXJcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuICBjb250ZXh0LlByb3ZpZGVyID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9QUk9WSURFUl9UWVBFLFxuICAgIF9jb250ZXh0OiBjb250ZXh0XG4gIH07XG4gIHZhciBoYXNXYXJuZWRBYm91dFVzaW5nTmVzdGVkQ29udGV4dENvbnN1bWVycyA9IGZhbHNlO1xuICB2YXIgaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIgPSBmYWxzZTtcblxuICB7XG4gICAgLy8gQSBzZXBhcmF0ZSBvYmplY3QsIGJ1dCBwcm94aWVzIGJhY2sgdG8gdGhlIG9yaWdpbmFsIGNvbnRleHQgb2JqZWN0IGZvclxuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBJdCBoYXMgYSBkaWZmZXJlbnQgJCR0eXBlb2YsIHNvIHdlIGNhbiBwcm9wZXJseVxuICAgIC8vIHdhcm4gZm9yIHRoZSBpbmNvcnJlY3QgdXNhZ2Ugb2YgQ29udGV4dCBhcyBhIENvbnN1bWVyLlxuICAgIHZhciBDb25zdW1lciA9IHtcbiAgICAgICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgIF9jYWxjdWxhdGVDaGFuZ2VkQml0czogY29udGV4dC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHNcbiAgICB9OyAvLyAkRmxvd0ZpeE1lOiBGbG93IGNvbXBsYWlucyBhYm91dCBub3Qgc2V0dGluZyBhIHZhbHVlLCB3aGljaCBpcyBpbnRlbnRpb25hbCBoZXJlXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb25zdW1lciwge1xuICAgICAgUHJvdmlkZXI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dFVzaW5nQ29uc3VtZXJQcm92aWRlcikge1xuICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIgPSB0cnVlO1xuICAgICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVuZGVyaW5nIDxDb250ZXh0LkNvbnN1bWVyLlByb3ZpZGVyPiBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LlByb3ZpZGVyPiBpbnN0ZWFkPycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb250ZXh0LlByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfUHJvdmlkZXIpIHtcbiAgICAgICAgICBjb250ZXh0LlByb3ZpZGVyID0gX1Byb3ZpZGVyO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2N1cnJlbnRWYWx1ZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgY29udGV4dC5fY3VycmVudFZhbHVlID0gX2N1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jdXJyZW50VmFsdWUyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0Ll9jdXJyZW50VmFsdWUyO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfY3VycmVudFZhbHVlMikge1xuICAgICAgICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTIgPSBfY3VycmVudFZhbHVlMjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF90aHJlYWRDb3VudDoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5fdGhyZWFkQ291bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF90aHJlYWRDb3VudCkge1xuICAgICAgICAgIGNvbnRleHQuX3RocmVhZENvdW50ID0gX3RocmVhZENvdW50O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgQ29uc3VtZXI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dFVzaW5nTmVzdGVkQ29udGV4dENvbnN1bWVycykge1xuICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMgPSB0cnVlO1xuICAgICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVuZGVyaW5nIDxDb250ZXh0LkNvbnN1bWVyLkNvbnN1bWVyPiBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LkNvbnN1bWVyPiBpbnN0ZWFkPycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb250ZXh0LkNvbnN1bWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7IC8vICRGbG93Rml4TWU6IEZsb3cgY29tcGxhaW5zIGFib3V0IG1pc3NpbmcgcHJvcGVydGllcyBiZWNhdXNlIGl0IGRvZXNuJ3QgdW5kZXJzdGFuZCBkZWZpbmVQcm9wZXJ0eVxuXG4gICAgY29udGV4dC5Db25zdW1lciA9IENvbnN1bWVyO1xuICB9XG5cbiAge1xuICAgIGNvbnRleHQuX2N1cnJlbnRSZW5kZXJlciA9IG51bGw7XG4gICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyMiA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gbGF6eShjdG9yKSB7XG4gIHZhciBsYXp5VHlwZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTEFaWV9UWVBFLFxuICAgIF9jdG9yOiBjdG9yLFxuICAgIC8vIFJlYWN0IHVzZXMgdGhlc2UgZmllbGRzIHRvIHN0b3JlIHRoZSByZXN1bHQuXG4gICAgX3N0YXR1czogLTEsXG4gICAgX3Jlc3VsdDogbnVsbFxuICB9O1xuXG4gIHtcbiAgICAvLyBJbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIGp1c3Qgc2V0IGl0IG9uIHRoZSBvYmplY3QuXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICB2YXIgcHJvcFR5cGVzO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGxhenlUeXBlLCB7XG4gICAgICBkZWZhdWx0UHJvcHM6IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFByb3BzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdEZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdC5sYXp5KC4uLik6IEl0IGlzIG5vdCBzdXBwb3J0ZWQgdG8gYXNzaWduIGBkZWZhdWx0UHJvcHNgIHRvICcgKyAnYSBsYXp5IGNvbXBvbmVudCBpbXBvcnQuIEVpdGhlciBzcGVjaWZ5IHRoZW0gd2hlcmUgdGhlIGNvbXBvbmVudCAnICsgJ2lzIGRlZmluZWQsIG9yIGNyZWF0ZSBhIHdyYXBwaW5nIGNvbXBvbmVudCBhcm91bmQgaXQuJyk7XG4gICAgICAgICAgZGVmYXVsdFByb3BzID0gbmV3RGVmYXVsdFByb3BzOyAvLyBNYXRjaCBwcm9kdWN0aW9uIGJlaGF2aW9yIG1vcmUgY2xvc2VseTpcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsYXp5VHlwZSwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb3BUeXBlczoge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBwcm9wVHlwZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1Byb3BUeXBlcykge1xuICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlYWN0LmxhenkoLi4uKTogSXQgaXMgbm90IHN1cHBvcnRlZCB0byBhc3NpZ24gYHByb3BUeXBlc2AgdG8gJyArICdhIGxhenkgY29tcG9uZW50IGltcG9ydC4gRWl0aGVyIHNwZWNpZnkgdGhlbSB3aGVyZSB0aGUgY29tcG9uZW50ICcgKyAnaXMgZGVmaW5lZCwgb3IgY3JlYXRlIGEgd3JhcHBpbmcgY29tcG9uZW50IGFyb3VuZCBpdC4nKTtcbiAgICAgICAgICBwcm9wVHlwZXMgPSBuZXdQcm9wVHlwZXM7IC8vIE1hdGNoIHByb2R1Y3Rpb24gYmVoYXZpb3IgbW9yZSBjbG9zZWx5OlxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxhenlUeXBlLCAncHJvcFR5cGVzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbGF6eVR5cGU7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSZWYocmVuZGVyKSB7XG4gIHtcbiAgICBpZiAocmVuZGVyICE9IG51bGwgJiYgcmVuZGVyLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2ZvcndhcmRSZWYgcmVxdWlyZXMgYSByZW5kZXIgZnVuY3Rpb24gYnV0IHJlY2VpdmVkIGEgYG1lbW9gICcgKyAnY29tcG9uZW50LiBJbnN0ZWFkIG9mIGZvcndhcmRSZWYobWVtbyguLi4pKSwgdXNlICcgKyAnbWVtbyhmb3J3YXJkUmVmKC4uLikpLicpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgd2FzIGdpdmVuICVzLicsIHJlbmRlciA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiByZW5kZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAhKCAvLyBEbyBub3Qgd2FybiBmb3IgMCBhcmd1bWVudHMgYmVjYXVzZSBpdCBjb3VsZCBiZSBkdWUgdG8gdXNhZ2Ugb2YgdGhlICdhcmd1bWVudHMnIG9iamVjdFxuICAgICAgcmVuZGVyLmxlbmd0aCA9PT0gMCB8fCByZW5kZXIubGVuZ3RoID09PSAyKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2ZvcndhcmRSZWYgcmVuZGVyIGZ1bmN0aW9ucyBhY2NlcHQgZXhhY3RseSB0d28gcGFyYW1ldGVyczogcHJvcHMgYW5kIHJlZi4gJXMnLCByZW5kZXIubGVuZ3RoID09PSAxID8gJ0RpZCB5b3UgZm9yZ2V0IHRvIHVzZSB0aGUgcmVmIHBhcmFtZXRlcj8nIDogJ0FueSBhZGRpdGlvbmFsIHBhcmFtZXRlciB3aWxsIGJlIHVuZGVmaW5lZC4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAocmVuZGVyICE9IG51bGwpIHtcbiAgICAgICEocmVuZGVyLmRlZmF1bHRQcm9wcyA9PSBudWxsICYmIHJlbmRlci5wcm9wVHlwZXMgPT0gbnVsbCkgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdmb3J3YXJkUmVmIHJlbmRlciBmdW5jdGlvbnMgZG8gbm90IHN1cHBvcnQgcHJvcFR5cGVzIG9yIGRlZmF1bHRQcm9wcy4gJyArICdEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIGEgUmVhY3QgY29tcG9uZW50PycpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsXG4gICAgcmVuZGVyOiByZW5kZXJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUkVTUE9OREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfU0NPUEVfVFlQRSk7XG59XG5cbmZ1bmN0aW9uIG1lbW8odHlwZSwgY29tcGFyZSkge1xuICB7XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ21lbW86IFRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgY29tcG9uZW50LiBJbnN0ZWFkICcgKyAncmVjZWl2ZWQ6ICVzJywgdHlwZSA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiB0eXBlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9NRU1PX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBjb21wYXJlOiBjb21wYXJlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29tcGFyZVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRGlzcGF0Y2hlcigpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQ7XG5cbiAgaWYgKCEoZGlzcGF0Y2hlciAhPT0gbnVsbCkpIHtcbiAgICB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgaG9vayBjYWxsLiBIb29rcyBjYW4gb25seSBiZSBjYWxsZWQgaW5zaWRlIG9mIHRoZSBib2R5IG9mIGEgZnVuY3Rpb24gY29tcG9uZW50LiBUaGlzIGNvdWxkIGhhcHBlbiBmb3Igb25lIG9mIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcXG4xLiBZb3UgbWlnaHQgaGF2ZSBtaXNtYXRjaGluZyB2ZXJzaW9ucyBvZiBSZWFjdCBhbmQgdGhlIHJlbmRlcmVyIChzdWNoIGFzIFJlYWN0IERPTSlcXG4yLiBZb3UgbWlnaHQgYmUgYnJlYWtpbmcgdGhlIFJ1bGVzIG9mIEhvb2tzXFxuMy4gWW91IG1pZ2h0IGhhdmUgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0IGluIHRoZSBzYW1lIGFwcFxcblNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWludmFsaWQtaG9vay1jYWxsIGZvciB0aXBzIGFib3V0IGhvdyB0byBkZWJ1ZyBhbmQgZml4IHRoaXMgcHJvYmxlbS5cIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3BhdGNoZXI7XG59XG5cbmZ1bmN0aW9uIHVzZUNvbnRleHQoQ29udGV4dCwgdW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcblxuICB7XG4gICAgISh1bnN0YWJsZV9vYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCkgPyB3YXJuaW5nJDEoZmFsc2UsICd1c2VDb250ZXh0KCkgc2Vjb25kIGFyZ3VtZW50IGlzIHJlc2VydmVkIGZvciBmdXR1cmUgJyArICd1c2UgaW4gUmVhY3QuIFBhc3NpbmcgaXQgaXMgbm90IHN1cHBvcnRlZC4gJyArICdZb3UgcGFzc2VkOiAlcy4lcycsIHVuc3RhYmxlX29ic2VydmVkQml0cywgdHlwZW9mIHVuc3RhYmxlX29ic2VydmVkQml0cyA9PT0gJ251bWJlcicgJiYgQXJyYXkuaXNBcnJheShhcmd1bWVudHNbMl0pID8gJ1xcblxcbkRpZCB5b3UgY2FsbCBhcnJheS5tYXAodXNlQ29udGV4dCk/ICcgKyAnQ2FsbGluZyBIb29rcyBpbnNpZGUgYSBsb29wIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnTGVhcm4gbW9yZSBhdCBodHRwczovL2ZiLm1lL3J1bGVzLW9mLWhvb2tzJyA6ICcnKSA6IHZvaWQgMDsgLy8gVE9ETzogYWRkIGEgbW9yZSBnZW5lcmljIHdhcm5pbmcgZm9yIGludmFsaWQgdmFsdWVzLlxuXG4gICAgaWYgKENvbnRleHQuX2NvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHJlYWxDb250ZXh0ID0gQ29udGV4dC5fY29udGV4dDsgLy8gRG9uJ3QgZGVkdXBsaWNhdGUgYmVjYXVzZSB0aGlzIGxlZ2l0aW1hdGVseSBjYXVzZXMgYnVnc1xuICAgICAgLy8gYW5kIG5vYm9keSBzaG91bGQgYmUgdXNpbmcgdGhpcyBpbiBleGlzdGluZyBjb2RlLlxuXG4gICAgICBpZiAocmVhbENvbnRleHQuQ29uc3VtZXIgPT09IENvbnRleHQpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnQ2FsbGluZyB1c2VDb250ZXh0KENvbnRleHQuQ29uc3VtZXIpIGlzIG5vdCBzdXBwb3J0ZWQsIG1heSBjYXVzZSBidWdzLCBhbmQgd2lsbCBiZSAnICsgJ3JlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIGNhbGwgdXNlQ29udGV4dChDb250ZXh0KSBpbnN0ZWFkPycpO1xuICAgICAgfSBlbHNlIGlmIChyZWFsQ29udGV4dC5Qcm92aWRlciA9PT0gQ29udGV4dCkge1xuICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdDYWxsaW5nIHVzZUNvbnRleHQoQ29udGV4dC5Qcm92aWRlcikgaXMgbm90IHN1cHBvcnRlZC4gJyArICdEaWQgeW91IG1lYW4gdG8gY2FsbCB1c2VDb250ZXh0KENvbnRleHQpIGluc3RlYWQ/Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlQ29udGV4dChDb250ZXh0LCB1bnN0YWJsZV9vYnNlcnZlZEJpdHMpO1xufVxuZnVuY3Rpb24gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn1cbmZ1bmN0aW9uIHVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG59XG5mdW5jdGlvbiB1c2VSZWYoaW5pdGlhbFZhbHVlKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59XG5mdW5jdGlvbiB1c2VFZmZlY3QoY3JlYXRlLCBpbnB1dHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VFZmZlY3QoY3JlYXRlLCBpbnB1dHMpO1xufVxuZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgaW5wdXRzKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgaW5wdXRzKTtcbn1cbmZ1bmN0aW9uIHVzZUNhbGxiYWNrKGNhbGxiYWNrLCBpbnB1dHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VDYWxsYmFjayhjYWxsYmFjaywgaW5wdXRzKTtcbn1cbmZ1bmN0aW9uIHVzZU1lbW8oY3JlYXRlLCBpbnB1dHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VNZW1vKGNyZWF0ZSwgaW5wdXRzKTtcbn1cbmZ1bmN0aW9uIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGlucHV0cykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGlucHV0cyk7XG59XG5mdW5jdGlvbiB1c2VEZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXJGbikge1xuICB7XG4gICAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICAgIHJldHVybiBkaXNwYXRjaGVyLnVzZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKTtcbiAgfVxufVxudmFyIGVtcHR5T2JqZWN0JDEgPSB7fTtcbmZ1bmN0aW9uIHVzZVJlc3BvbmRlcihyZXNwb25kZXIsIGxpc3RlbmVyUHJvcHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuXG4gIHtcbiAgICBpZiAocmVzcG9uZGVyID09IG51bGwgfHwgcmVzcG9uZGVyLiQkdHlwZW9mICE9PSBSRUFDVF9SRVNQT05ERVJfVFlQRSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAndXNlUmVzcG9uZGVyOiBpbnZhbGlkIGZpcnN0IGFyZ3VtZW50LiBFeHBlY3RlZCBhbiBldmVudCByZXNwb25kZXIsIGJ1dCBpbnN0ZWFkIGdvdCAlcycsIHJlc3BvbmRlcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlUmVzcG9uZGVyKHJlc3BvbmRlciwgbGlzdGVuZXJQcm9wcyB8fCBlbXB0eU9iamVjdCQxKTtcbn1cbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb24oY29uZmlnKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlVHJhbnNpdGlvbihjb25maWcpO1xufVxuZnVuY3Rpb24gdXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgY29uZmlnKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gd2l0aFN1c3BlbnNlQ29uZmlnKHNjb3BlLCBjb25maWcpIHtcbiAgdmFyIHByZXZpb3VzQ29uZmlnID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWcuc3VzcGVuc2U7XG4gIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnN1c3BlbnNlID0gY29uZmlnID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnO1xuXG4gIHRyeSB7XG4gICAgc2NvcGUoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZy5zdXNwZW5zZSA9IHByZXZpb3VzQ29uZmlnO1xuICB9XG59XG5cbi8qKlxuICogUmVhY3RFbGVtZW50VmFsaWRhdG9yIHByb3ZpZGVzIGEgd3JhcHBlciBhcm91bmQgYSBlbGVtZW50IGZhY3RvcnlcbiAqIHdoaWNoIHZhbGlkYXRlcyB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBlbGVtZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gKiB1c2VkIG9ubHkgaW4gREVWIGFuZCBjb3VsZCBiZSByZXBsYWNlZCBieSBhIHN0YXRpYyB0eXBlIGNoZWNrZXIgZm9yIGxhbmd1YWdlc1xuICogdGhhdCBzdXBwb3J0IGl0LlxuICovXG52YXIgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd247XG5cbntcbiAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSBmYWxzZTtcbn1cblxudmFyIGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQudHlwZSk7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0oc291cmNlKSB7XG4gIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmaWxlTmFtZSA9IHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCAnJyk7XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBzb3VyY2UubGluZU51bWJlcjtcbiAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bUZvclByb3BzKGVsZW1lbnRQcm9wcykge1xuICBpZiAoZWxlbWVudFByb3BzICE9PSBudWxsICYmIGVsZW1lbnRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKGVsZW1lbnRQcm9wcy5fX3NvdXJjZSk7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG4vKipcbiAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICogdXBkYXRlcy5cbiAqL1xuXG5cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKSB7XG4gIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG5cbiAgICBpZiAocGFyZW50TmFtZSkge1xuICAgICAgaW5mbyA9IFwiXFxuXFxuQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8XCIgKyBwYXJlbnROYW1lICsgXCI+LlwiO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmZvO1xufVxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10gPSB0cnVlOyAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICB2YXIgY2hpbGRPd25lciA9ICcnO1xuXG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX293bmVyICYmIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgLy8gR2l2ZSB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgY2hpbGRPd25lciA9IFwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiICsgZ2V0Q29tcG9uZW50TmFtZShlbGVtZW50Ll9vd25lci50eXBlKSArIFwiLlwiO1xuICB9XG5cbiAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ0VhY2ggY2hpbGQgaW4gYSBsaXN0IHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8sIGNoaWxkT3duZXIpO1xuICB9XG5cbiAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuXG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAvLyBidXQgbm93IHdlIHByaW50IGEgc2VwYXJhdGUgd2FybmluZyBmb3IgdGhlbSBsYXRlci5cbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcblxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cbiAgaWYgKHR5cGUgPT09IG51bGwgfHwgdHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh0eXBlKTtcbiAgdmFyIHByb3BUeXBlcztcblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLlxuICAvLyBJbm5lciBwcm9wcyBhcmUgY2hlY2tlZCBpbiB0aGUgcmVjb25jaWxlci5cbiAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSkge1xuICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwcm9wVHlwZXMpIHtcbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcbiAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKTtcbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgfSBlbHNlIGlmICh0eXBlLlByb3BUeXBlcyAhPT0gdW5kZWZpbmVkICYmICFwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bikge1xuICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdDb21wb25lbnQgJXMgZGVjbGFyZWQgYFByb3BUeXBlc2AgaW5zdGVhZCBvZiBgcHJvcFR5cGVzYC4gRGlkIHlvdSBtaXNzcGVsbCB0aGUgcHJvcGVydHkgYXNzaWdubWVudD8nLCBuYW1lIHx8ICdVbmtub3duJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgIXR5cGUuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgZnJhZ21lbnQsIHZhbGlkYXRlIHRoYXQgaXQgY2FuIG9ubHkgYmUgcHJvdmlkZWQgd2l0aCBmcmFnbWVudCBwcm9wc1xuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGZyYWdtZW50XG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHtcbiAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZnJhZ21lbnQpO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50LnByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgIGlmIChrZXkgIT09ICdjaGlsZHJlbicgJiYga2V5ICE9PSAna2V5Jykge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBwcm9wIGAlc2Agc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4gJyArICdSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLicsIGtleSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZnJhZ21lbnQucmVmICE9PSBudWxsKSB7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4nKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xufVxuXG5mdW5jdGlvbiBqc3hXaXRoVmFsaWRhdGlvbih0eXBlLCBwcm9wcywga2V5LCBpc1N0YXRpY0NoaWxkcmVuLCBzb3VyY2UsIHNlbGYpIHtcbiAgdmFyIHZhbGlkVHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKTsgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cblxuICBpZiAoIXZhbGlkVHlwZSkge1xuICAgIHZhciBpbmZvID0gJyc7XG5cbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSk7XG5cbiAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgaW5mbyArPSBzb3VyY2VJbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgIH1cblxuICAgIHZhciB0eXBlU3RyaW5nO1xuXG4gICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSBcIjxcIiArIChnZXRDb21wb25lbnROYW1lKHR5cGUudHlwZSkgfHwgJ1Vua25vd24nKSArIFwiIC8+XCI7XG4gICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICB9XG5cbiAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdC5qc3g6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGpzeERFVih0eXBlLCBwcm9wcywga2V5LCBzb3VyY2UsIHNlbGYpOyAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG5cbiAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9IC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pXG5cblxuICBpZiAodmFsaWRUeXBlKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG5cbiAgICBpZiAoY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW5baV0sIHR5cGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVhY3QuanN4OiBTdGF0aWMgY2hpbGRyZW4gc2hvdWxkIGFsd2F5cyBiZSBhbiBhcnJheS4gJyArICdZb3UgYXJlIGxpa2VseSBleHBsaWNpdGx5IGNhbGxpbmcgUmVhY3QuanN4cyBvciBSZWFjdC5qc3hERVYuICcgKyAnVXNlIHRoZSBCYWJlbCB0cmFuc2Zvcm0gaW5zdGVhZC4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW4sIHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eSQxLmNhbGwocHJvcHMsICdrZXknKSkge1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlYWN0LmpzeDogU3ByZWFkaW5nIGEga2V5IHRvIEpTWCBpcyBhIGRlcHJlY2F0ZWQgcGF0dGVybi4gJyArICdFeHBsaWNpdGx5IHBhc3MgYSBrZXkgYWZ0ZXIgc3ByZWFkaW5nIHByb3BzIGluIHlvdXIgSlNYIGNhbGwuICcgKyAnRS5nLiA8Q29tcG9uZW50TmFtZSB7Li4ucHJvcHN9IGtleT17a2V5fSAvPicpO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn0gLy8gVGhlc2UgdHdvIGZ1bmN0aW9ucyBleGlzdCB0byBzdGlsbCBnZXQgY2hpbGQgd2FybmluZ3MgaW4gZGV2XG4vLyBldmVuIHdpdGggdGhlIHByb2QgdHJhbnNmb3JtLiBUaGlzIG1lYW5zIHRoYXQganN4REVWIGlzIHB1cmVseVxuLy8gb3B0LWluIGJlaGF2aW9yIGZvciBiZXR0ZXIgbWVzc2FnZXMgYnV0IHRoYXQgd2Ugd29uJ3Qgc3RvcFxuLy8gZ2l2aW5nIHlvdSB3YXJuaW5ncyBpZiB5b3UgdXNlIHByb2R1Y3Rpb24gYXBpcy5cblxuZnVuY3Rpb24ganN4V2l0aFZhbGlkYXRpb25TdGF0aWModHlwZSwgcHJvcHMsIGtleSkge1xuICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBqc3hXaXRoVmFsaWRhdGlvbkR5bmFtaWModHlwZSwgcHJvcHMsIGtleSkge1xuICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgZmFsc2UpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpOyAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuXG4gIGlmICghdmFsaWRUeXBlKSB7XG4gICAgdmFyIGluZm8gPSAnJztcblxuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLCBvciB5b3UgbWlnaHQgaGF2ZSBtaXhlZCB1cCBkZWZhdWx0IGFuZCBuYW1lZCBpbXBvcnRzLlwiO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VJbmZvID0gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW1Gb3JQcm9wcyhwcm9wcyk7XG5cbiAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgaW5mbyArPSBzb3VyY2VJbmZvO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgIH1cblxuICAgIHZhciB0eXBlU3RyaW5nO1xuXG4gICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSBcIjxcIiArIChnZXRDb21wb25lbnROYW1lKHR5cGUudHlwZSkgfHwgJ1Vua25vd24nKSArIFwiIC8+XCI7XG4gICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICB9XG5cbiAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGVTdHJpbmcsIGluZm8pO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cblxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmcgZXJyb3JzLlxuICAvLyBXZSBkb24ndCB3YW50IGV4Y2VwdGlvbiBiZWhhdmlvciB0byBkaWZmZXIgYmV0d2VlbiBkZXYgYW5kIHByb2QuXG4gIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gIC8vIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcblxuXG4gIGlmICh2YWxpZFR5cGUpIHtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uKHR5cGUpIHtcbiAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24uYmluZChudWxsLCB0eXBlKTtcbiAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTsgLy8gTGVnYWN5IGhvb2s6IHJlbW92ZSBpdFxuXG4gIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSwgJ3R5cGUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgKyAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgIHZhbHVlOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xufVxuZnVuY3Rpb24gY2xvbmVFbGVtZW50V2l0aFZhbGlkYXRpb24oZWxlbWVudCwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gIHZhciBuZXdFbGVtZW50ID0gY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gIH1cblxuICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59XG5cbnZhciBoYXNCYWRNYXBQb2x5ZmlsbDtcblxue1xuICBoYXNCYWRNYXBQb2x5ZmlsbCA9IGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgIHZhciB0ZXN0TWFwID0gbmV3IE1hcChbW2Zyb3plbk9iamVjdCwgbnVsbF1dKTtcbiAgICB2YXIgdGVzdFNldCA9IG5ldyBTZXQoW2Zyb3plbk9iamVjdF0pOyAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgUm9sbHVwIHRvIG5vdCBjb25zaWRlciB0aGVzZSB1bnVzZWQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE3NzFcbiAgICAvLyBUT0RPOiB3ZSBjYW4gcmVtb3ZlIHRoZXNlIGlmIFJvbGx1cCBmaXhlcyB0aGUgYnVnLlxuXG4gICAgdGVzdE1hcC5zZXQoMCwgMCk7XG4gICAgdGVzdFNldC5hZGQoMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUT0RPOiBDb25zaWRlciB3YXJuaW5nIGFib3V0IGJhZCBwb2x5ZmlsbHNcbiAgICBoYXNCYWRNYXBQb2x5ZmlsbCA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRnVuZGFtZW50YWxDb21wb25lbnQoaW1wbCkge1xuICAvLyBXZSB1c2UgcmVzcG9uZGVyIGFzIGEgTWFwIGtleSBsYXRlciBvbi4gV2hlbiB3ZSBoYXZlIGEgYmFkXG4gIC8vIHBvbHlmaWxsLCB0aGVuIHdlIGNhbid0IHVzZSBpdCBhcyBhIGtleSBhcyB0aGUgcG9seWZpbGwgdHJpZXNcbiAgLy8gdG8gYWRkIGEgcHJvcGVydHkgdG8gdGhlIG9iamVjdC5cbiAgaWYgKHRydWUgJiYgIWhhc0JhZE1hcFBvbHlmaWxsKSB7XG4gICAgT2JqZWN0LmZyZWV6ZShpbXBsKTtcbiAgfVxuXG4gIHZhciBmdW5kYW1hbnRhbENvbXBvbmVudCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSxcbiAgICBpbXBsOiBpbXBsXG4gIH07XG5cbiAge1xuICAgIE9iamVjdC5mcmVlemUoZnVuZGFtYW50YWxDb21wb25lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmRhbWFudGFsQ29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudFJlc3BvbmRlcihkaXNwbGF5TmFtZSwgcmVzcG9uZGVyQ29uZmlnKSB7XG4gIHZhciBnZXRJbml0aWFsU3RhdGUgPSByZXNwb25kZXJDb25maWcuZ2V0SW5pdGlhbFN0YXRlLFxuICAgICAgb25FdmVudCA9IHJlc3BvbmRlckNvbmZpZy5vbkV2ZW50LFxuICAgICAgb25Nb3VudCA9IHJlc3BvbmRlckNvbmZpZy5vbk1vdW50LFxuICAgICAgb25Vbm1vdW50ID0gcmVzcG9uZGVyQ29uZmlnLm9uVW5tb3VudCxcbiAgICAgIG9uUm9vdEV2ZW50ID0gcmVzcG9uZGVyQ29uZmlnLm9uUm9vdEV2ZW50LFxuICAgICAgcm9vdEV2ZW50VHlwZXMgPSByZXNwb25kZXJDb25maWcucm9vdEV2ZW50VHlwZXMsXG4gICAgICB0YXJnZXRFdmVudFR5cGVzID0gcmVzcG9uZGVyQ29uZmlnLnRhcmdldEV2ZW50VHlwZXMsXG4gICAgICB0YXJnZXRQb3J0YWxQcm9wYWdhdGlvbiA9IHJlc3BvbmRlckNvbmZpZy50YXJnZXRQb3J0YWxQcm9wYWdhdGlvbjtcbiAgdmFyIGV2ZW50UmVzcG9uZGVyID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9SRVNQT05ERVJfVFlQRSxcbiAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfHwgbnVsbCxcbiAgICBvbkV2ZW50OiBvbkV2ZW50IHx8IG51bGwsXG4gICAgb25Nb3VudDogb25Nb3VudCB8fCBudWxsLFxuICAgIG9uUm9vdEV2ZW50OiBvblJvb3RFdmVudCB8fCBudWxsLFxuICAgIG9uVW5tb3VudDogb25Vbm1vdW50IHx8IG51bGwsXG4gICAgcm9vdEV2ZW50VHlwZXM6IHJvb3RFdmVudFR5cGVzIHx8IG51bGwsXG4gICAgdGFyZ2V0RXZlbnRUeXBlczogdGFyZ2V0RXZlbnRUeXBlcyB8fCBudWxsLFxuICAgIHRhcmdldFBvcnRhbFByb3BhZ2F0aW9uOiB0YXJnZXRQb3J0YWxQcm9wYWdhdGlvbiB8fCBmYWxzZVxuICB9OyAvLyBXZSB1c2UgcmVzcG9uZGVyIGFzIGEgTWFwIGtleSBsYXRlciBvbi4gV2hlbiB3ZSBoYXZlIGEgYmFkXG4gIC8vIHBvbHlmaWxsLCB0aGVuIHdlIGNhbid0IHVzZSBpdCBhcyBhIGtleSBhcyB0aGUgcG9seWZpbGwgdHJpZXNcbiAgLy8gdG8gYWRkIGEgcHJvcGVydHkgdG8gdGhlIG9iamVjdC5cblxuICBpZiAodHJ1ZSAmJiAhaGFzQmFkTWFwUG9seWZpbGwpIHtcbiAgICBPYmplY3QuZnJlZXplKGV2ZW50UmVzcG9uZGVyKTtcbiAgfVxuXG4gIHJldHVybiBldmVudFJlc3BvbmRlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2NvcGUoKSB7XG4gIHZhciBzY29wZUNvbXBvbmVudCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfU0NPUEVfVFlQRVxuICB9O1xuXG4gIHtcbiAgICBPYmplY3QuZnJlZXplKHNjb3BlQ29tcG9uZW50KTtcbiAgfVxuXG4gIHJldHVybiBzY29wZUNvbXBvbmVudDtcbn1cblxuLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIHJlbmRlci1waGFzZSBsaWZlY3ljbGUgaG9va3MgYW5kIHNldFN0YXRlXG4vLyByZWR1Y2VycyBieSBkb3VibGUgaW52b2tpbmcgdGhlbSBpbiBTdHJpY3QgTW9kZS5cblxuIC8vIFRvIHByZXNlcnZlIHRoZSBcIlBhdXNlIG9uIGNhdWdodCBleGNlcHRpb25zXCIgYmVoYXZpb3Igb2YgdGhlIGRlYnVnZ2VyLCB3ZVxuLy8gcmVwbGF5IHRoZSBiZWdpbiBwaGFzZSBvZiBhIGZhaWxlZCBjb21wb25lbnQgaW5zaWRlIGludm9rZUd1YXJkZWRDYWxsYmFjay5cblxuIC8vIFdhcm4gYWJvdXQgZGVwcmVjYXRlZCwgYXN5bmMtdW5zYWZlIGxpZmVjeWNsZXM7IHJlbGF0ZXMgdG8gUkZDICM2OlxuXG4gLy8gR2F0aGVyIGFkdmFuY2VkIHRpbWluZyBtZXRyaWNzIGZvciBQcm9maWxlciBzdWJ0cmVlcy5cblxuIC8vIFRyYWNlIHdoaWNoIGludGVyYWN0aW9ucyB0cmlnZ2VyIGVhY2ggY29tbWl0LlxuXG4gLy8gU1NSIGV4cGVyaW1lbnRzXG5cblxuIC8vIE9ubHkgdXNlZCBpbiB3d3cgYnVpbGRzLlxuXG4gLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cbiAvLyBEaXNhYmxlIGphdmFzY3JpcHQ6IFVSTCBzdHJpbmdzIGluIGhyZWYgZm9yIFhTUyBwcm90ZWN0aW9uLlxuXG4gLy8gUmVhY3QgRmlyZTogcHJldmVudCB0aGUgdmFsdWUgYW5kIGNoZWNrZWQgYXR0cmlidXRlcyBmcm9tIHN5bmNpbmdcbi8vIHdpdGggdGhlaXIgcmVsYXRlZCBET00gcHJvcGVydGllc1xuXG4gLy8gVGhlc2UgQVBJcyB3aWxsIG5vIGxvbmdlciBiZSBcInVuc3RhYmxlXCIgaW4gdGhlIHVwY29taW5nIDE2LjcgcmVsZWFzZSxcbi8vIENvbnRyb2wgdGhpcyBiZWhhdmlvciB3aXRoIGEgZmxhZyB0byBzdXBwb3J0IDE2LjYgbWlub3IgcmVsZWFzZXMgaW4gdGhlIG1lYW53aGlsZS5cblxudmFyIGV4cG9zZUNvbmN1cnJlbnRNb2RlQVBJcyA9IGZhbHNlO1xuIC8vIEV4cGVyaW1lbnRhbCBSZWFjdCBGbGFyZSBldmVudCBzeXN0ZW0gYW5kIGV2ZW50IGNvbXBvbmVudHMgc3VwcG9ydC5cblxudmFyIGVuYWJsZUZsYXJlQVBJID0gZmFsc2U7IC8vIEV4cGVyaW1lbnRhbCBIb3N0IENvbXBvbmVudCBzdXBwb3J0LlxuXG52YXIgZW5hYmxlRnVuZGFtZW50YWxBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIFNjb3BlIHN1cHBvcnQuXG5cbnZhciBlbmFibGVTY29wZUFQSSA9IGZhbHNlOyAvLyBOZXcgQVBJIGZvciBKU1ggdHJhbnNmb3JtcyB0byB0YXJnZXQgLSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL3B1bGwvMTA3XG5cbnZhciBlbmFibGVKU1hUcmFuc2Zvcm1BUEkgPSBmYWxzZTsgLy8gV2Ugd2lsbCBlbmZvcmNlIG1vY2tpbmcgc2NoZWR1bGVyIHdpdGggc2NoZWR1bGVyL3Vuc3RhYmxlX21vY2sgYXQgc29tZSBwb2ludC4gKHYxNz8pXG4vLyBUaWxsIHRoZW4sIHdlIHdhcm4gYWJvdXQgdGhlIG1pc3NpbmcgbW9jaywgYnV0IHN0aWxsIGZhbGxiYWNrIHRvIGEgbGVnYWN5IG1vZGUgY29tcGF0aWJsZSB2ZXJzaW9uXG5cbiAvLyBGb3IgdGVzdHMsIHdlIGZsdXNoIHN1c3BlbnNlIGZhbGxiYWNrcyBpbiBhbiBhY3Qgc2NvcGU7XG4vLyAqZXhjZXB0KiBpbiBzb21lIG9mIG91ciBvd24gdGVzdHMsIHdoZXJlIHdlIHRlc3QgaW5jcmVtZW50YWwgbG9hZGluZyBzdGF0ZXMuXG5cbiAvLyBBZGQgYSBjYWxsYmFjayBwcm9wZXJ0eSB0byBzdXNwZW5zZSB0byBub3RpZnkgd2hpY2ggcHJvbWlzZXMgYXJlIGN1cnJlbnRseVxuLy8gaW4gdGhlIHVwZGF0ZSBxdWV1ZS4gVGhpcyBhbGxvd3MgcmVwb3J0aW5nIGFuZCB0cmFjaW5nIG9mIHdoYXQgaXMgY2F1c2luZ1xuLy8gdGhlIHVzZXIgdG8gc2VlIGEgbG9hZGluZyBzdGF0ZS5cbi8vIEFsc28gYWxsb3dzIGh5ZHJhdGlvbiBjYWxsYmFja3MgdG8gZmlyZSB3aGVuIGEgZGVoeWRyYXRlZCBib3VuZGFyeSBnZXRzXG4vLyBoeWRyYXRlZCBvciBkZWxldGVkLlxuXG4gLy8gUGFydCBvZiB0aGUgc2ltcGxpZmljYXRpb24gb2YgUmVhY3QuY3JlYXRlRWxlbWVudCBzbyB3ZSBjYW4gZXZlbnR1YWxseSBtb3ZlXG4vLyBmcm9tIFJlYWN0LmNyZWF0ZUVsZW1lbnQgdG8gUmVhY3QuanN4XG4vLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL2Jsb2IvY3JlYXRlbGVtZW50LXJmYy90ZXh0LzAwMDAtY3JlYXRlLWVsZW1lbnQtY2hhbmdlcy5tZFxuXG5cblxuXG5cbiAvLyBGbGFnIHRvIHR1cm4gZXZlbnQudGFyZ2V0IGFuZCBldmVudC5jdXJyZW50VGFyZ2V0IGluIFJlYWN0TmF0aXZlIGZyb20gYSByZWFjdFRhZyB0byBhIGNvbXBvbmVudCBpbnN0YW5jZVxuXG52YXIgUmVhY3QgPSB7XG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBtYXBDaGlsZHJlbixcbiAgICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gICAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcbiAgY3JlYXRlUmVmOiBjcmVhdGVSZWYsXG4gIENvbXBvbmVudDogQ29tcG9uZW50LFxuICBQdXJlQ29tcG9uZW50OiBQdXJlQ29tcG9uZW50LFxuICBjcmVhdGVDb250ZXh0OiBjcmVhdGVDb250ZXh0LFxuICBmb3J3YXJkUmVmOiBmb3J3YXJkUmVmLFxuICBsYXp5OiBsYXp5LFxuICBtZW1vOiBtZW1vLFxuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHVzZUNvbnRleHQsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1c2VJbXBlcmF0aXZlSGFuZGxlLFxuICB1c2VEZWJ1Z1ZhbHVlOiB1c2VEZWJ1Z1ZhbHVlLFxuICB1c2VMYXlvdXRFZmZlY3Q6IHVzZUxheW91dEVmZmVjdCxcbiAgdXNlTWVtbzogdXNlTWVtbyxcbiAgdXNlUmVkdWNlcjogdXNlUmVkdWNlcixcbiAgdXNlUmVmOiB1c2VSZWYsXG4gIHVzZVN0YXRlOiB1c2VTdGF0ZSxcbiAgRnJhZ21lbnQ6IFJFQUNUX0ZSQUdNRU5UX1RZUEUsXG4gIFByb2ZpbGVyOiBSRUFDVF9QUk9GSUxFUl9UWVBFLFxuICBTdHJpY3RNb2RlOiBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFLFxuICBTdXNwZW5zZTogUkVBQ1RfU1VTUEVOU0VfVFlQRSxcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxuICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24sXG4gIGlzVmFsaWRFbGVtZW50OiBpc1ZhbGlkRWxlbWVudCxcbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuICBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDogUmVhY3RTaGFyZWRJbnRlcm5hbHNcbn07XG5cbmlmIChleHBvc2VDb25jdXJyZW50TW9kZUFQSXMpIHtcbiAgUmVhY3QudXNlVHJhbnNpdGlvbiA9IHVzZVRyYW5zaXRpb247XG4gIFJlYWN0LnVzZURlZmVycmVkVmFsdWUgPSB1c2VEZWZlcnJlZFZhbHVlO1xuICBSZWFjdC5TdXNwZW5zZUxpc3QgPSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU7XG4gIFJlYWN0LnVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZyA9IHdpdGhTdXNwZW5zZUNvbmZpZztcbn1cblxuaWYgKGVuYWJsZUZsYXJlQVBJKSB7XG4gIFJlYWN0LnVuc3RhYmxlX3VzZVJlc3BvbmRlciA9IHVzZVJlc3BvbmRlcjtcbiAgUmVhY3QudW5zdGFibGVfY3JlYXRlUmVzcG9uZGVyID0gY3JlYXRlRXZlbnRSZXNwb25kZXI7XG59XG5cbmlmIChlbmFibGVGdW5kYW1lbnRhbEFQSSkge1xuICBSZWFjdC51bnN0YWJsZV9jcmVhdGVGdW5kYW1lbnRhbCA9IGNyZWF0ZUZ1bmRhbWVudGFsQ29tcG9uZW50O1xufVxuXG5pZiAoZW5hYmxlU2NvcGVBUEkpIHtcbiAgUmVhY3QudW5zdGFibGVfY3JlYXRlU2NvcGUgPSBjcmVhdGVTY29wZTtcbn0gLy8gTm90ZTogc29tZSBBUElzIGFyZSBhZGRlZCB3aXRoIGZlYXR1cmUgZmxhZ3MuXG4vLyBNYWtlIHN1cmUgdGhhdCBzdGFibGUgYnVpbGRzIGZvciBvcGVuIHNvdXJjZVxuLy8gZG9uJ3QgbW9kaWZ5IHRoZSBSZWFjdCBvYmplY3QgdG8gYXZvaWQgZGVvcHRzLlxuLy8gQWxzbyBsZXQncyBub3QgZXhwb3NlIHRoZWlyIG5hbWVzIGluIHN0YWJsZSBidWlsZHMuXG5cblxuaWYgKGVuYWJsZUpTWFRyYW5zZm9ybUFQSSkge1xuICB7XG4gICAgUmVhY3QuanN4REVWID0ganN4V2l0aFZhbGlkYXRpb247XG4gICAgUmVhY3QuanN4ID0ganN4V2l0aFZhbGlkYXRpb25EeW5hbWljO1xuICAgIFJlYWN0LmpzeHMgPSBqc3hXaXRoVmFsaWRhdGlvblN0YXRpYztcbiAgfVxufVxuXG5cblxudmFyIFJlYWN0JDIgPSBPYmplY3QuZnJlZXplKHtcblx0ZGVmYXVsdDogUmVhY3Rcbn0pO1xuXG52YXIgUmVhY3QkMyA9ICggUmVhY3QkMiAmJiBSZWFjdCApIHx8IFJlYWN0JDI7XG5cbi8vIFRPRE86IGRlY2lkZSBvbiB0aGUgdG9wLWxldmVsIGV4cG9ydCBmb3JtLlxuLy8gVGhpcyBpcyBoYWNreSBidXQgbWFrZXMgaXQgd29yayB3aXRoIGJvdGggUm9sbHVwIGFuZCBKZXN0LlxuXG5cbnZhciByZWFjdCA9IFJlYWN0JDMuZGVmYXVsdCB8fCBSZWFjdCQzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0O1xuICB9KSgpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react.development.js\n");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsaUZBQTRCO0FBQ3ZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/client.js":
/*!******************************************!*\
  !*** ./node_modules/taipa/lib/client.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nconst init_1 = __webpack_require__(/*! ./tonal/init */ \"./node_modules/taipa/lib/tonal/init.js\");\nconst analyzer_1 = __webpack_require__(/*! ./tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\nconst init_2 = __webpack_require__(/*! ./kana/init */ \"./node_modules/taipa/lib/kana/init.js\");\nconst analyzer_2 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nconst token_1 = __webpack_require__(/*! ./token */ \"./node_modules/taipa/lib/token.js\");\nclass Client {\n    processKana(str) {\n        init_2.checkNumberOfLettersKana();\n        // kana\n        let ta = new token_1.TokenAnalysis();\n        if (str) {\n            const ka = analyzer_2.kanaLemmatizationAnalyzer;\n            const morphemes = ka.morphAnalyze(str);\n            ta.blockSequences = init_2.getKanaBlocks(morphemes);\n            for (let m of morphemes) {\n                ta.letterSequences.push(m.letters);\n            }\n        }\n        return ta;\n    }\n    processTonal(str) {\n        init_1.checkNumberOfLetterTonal();\n        // tonal lurzmafjiz\n        let ta = new token_1.TokenAnalysis();\n        if (str) {\n            const tla = analyzer_1.tonalLemmatizationAnalyzer;\n            const morphemes = tla.morphAnalyze(str);\n            const lexeme = tla.lexAnalyze(morphemes);\n            ta.word = lexeme.word;\n            ta.lemmas = lexeme.getLemmas();\n            ta.inflectionalEnding = lexeme.getInflectionalEnding();\n            ta.blockSequences = init_1.getTaiKanaBlocks(morphemes);\n            for (let m of morphemes) {\n                ta.letterSequences.push(m.letters);\n                // TODO: first free tone to fourth. first checked tone to eighth\n                ta.uncombiningSequences.push(m.getForms().map(it => it.literal));\n            }\n        }\n        return ta;\n    }\n}\nexports.Client = Client;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9jbGllbnQuanM/ZjAyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDREQUFjO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLG9FQUFrQjtBQUM3QyxlQUFlLG1CQUFPLENBQUMsMERBQWE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMsa0VBQWlCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2NsaWVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DbGllbnQgPSB2b2lkIDA7XG5jb25zdCBpbml0XzEgPSByZXF1aXJlKFwiLi90b25hbC9pbml0XCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL3RvbmFsL2FuYWx5emVyXCIpO1xuY29uc3QgaW5pdF8yID0gcmVxdWlyZShcIi4va2FuYS9pbml0XCIpO1xuY29uc3QgYW5hbHl6ZXJfMiA9IHJlcXVpcmUoXCIuL2thbmEvYW5hbHl6ZXJcIik7XG5jb25zdCB0b2tlbl8xID0gcmVxdWlyZShcIi4vdG9rZW5cIik7XG5jbGFzcyBDbGllbnQge1xuICAgIHByb2Nlc3NLYW5hKHN0cikge1xuICAgICAgICBpbml0XzIuY2hlY2tOdW1iZXJPZkxldHRlcnNLYW5hKCk7XG4gICAgICAgIC8vIGthbmFcbiAgICAgICAgbGV0IHRhID0gbmV3IHRva2VuXzEuVG9rZW5BbmFseXNpcygpO1xuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgICBjb25zdCBrYSA9IGFuYWx5emVyXzIua2FuYUxlbW1hdGl6YXRpb25BbmFseXplcjtcbiAgICAgICAgICAgIGNvbnN0IG1vcnBoZW1lcyA9IGthLm1vcnBoQW5hbHl6ZShzdHIpO1xuICAgICAgICAgICAgdGEuYmxvY2tTZXF1ZW5jZXMgPSBpbml0XzIuZ2V0S2FuYUJsb2Nrcyhtb3JwaGVtZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgbSBvZiBtb3JwaGVtZXMpIHtcbiAgICAgICAgICAgICAgICB0YS5sZXR0ZXJTZXF1ZW5jZXMucHVzaChtLmxldHRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YTtcbiAgICB9XG4gICAgcHJvY2Vzc1RvbmFsKHN0cikge1xuICAgICAgICBpbml0XzEuY2hlY2tOdW1iZXJPZkxldHRlclRvbmFsKCk7XG4gICAgICAgIC8vIHRvbmFsIGx1cnptYWZqaXpcbiAgICAgICAgbGV0IHRhID0gbmV3IHRva2VuXzEuVG9rZW5BbmFseXNpcygpO1xuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgICBjb25zdCB0bGEgPSBhbmFseXplcl8xLnRvbmFsTGVtbWF0aXphdGlvbkFuYWx5emVyO1xuICAgICAgICAgICAgY29uc3QgbW9ycGhlbWVzID0gdGxhLm1vcnBoQW5hbHl6ZShzdHIpO1xuICAgICAgICAgICAgY29uc3QgbGV4ZW1lID0gdGxhLmxleEFuYWx5emUobW9ycGhlbWVzKTtcbiAgICAgICAgICAgIHRhLndvcmQgPSBsZXhlbWUud29yZDtcbiAgICAgICAgICAgIHRhLmxlbW1hcyA9IGxleGVtZS5nZXRMZW1tYXMoKTtcbiAgICAgICAgICAgIHRhLmluZmxlY3Rpb25hbEVuZGluZyA9IGxleGVtZS5nZXRJbmZsZWN0aW9uYWxFbmRpbmcoKTtcbiAgICAgICAgICAgIHRhLmJsb2NrU2VxdWVuY2VzID0gaW5pdF8xLmdldFRhaUthbmFCbG9ja3MobW9ycGhlbWVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IG0gb2YgbW9ycGhlbWVzKSB7XG4gICAgICAgICAgICAgICAgdGEubGV0dGVyU2VxdWVuY2VzLnB1c2gobS5sZXR0ZXJzKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBmaXJzdCBmcmVlIHRvbmUgdG8gZm91cnRoLiBmaXJzdCBjaGVja2VkIHRvbmUgdG8gZWlnaHRoXG4gICAgICAgICAgICAgICAgdGEudW5jb21iaW5pbmdTZXF1ZW5jZXMucHVzaChtLmdldEZvcm1zKCkubWFwKGl0ID0+IGl0LmxpdGVyYWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGE7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnQgPSBDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/client.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/analyzer.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/analyzer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tonalInflectionAnalyzer = exports.morphAnalyzeChanging = void 0;\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst analyzer_1 = __webpack_require__(/*! ../tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\n/**\n * Analyzes a string into morphemes. Morphological analysis.\n * @param str A word.\n */\nfunction morphAnalyzeChanging(str) {\n    const gs = analyzer_1.graphAnalyzeTonal(str);\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const mrphs = tschmm.makeMorphemes(gs);\n    return mrphs;\n}\nexports.morphAnalyzeChanging = morphAnalyzeChanging;\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalInflectionAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     * @param metaplasm A combining metaplasm\n     */\n    morphAnalyze(x, metaplasm) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = analyzer_1.graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalCombiningMorphemeMaker(metaplasm);\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or combining morphemes\n     * @param metaplasm An inflection metaplasm\n     */\n    lexAnalyze(x, metaplasm) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x, new metaplasm_1.TonalCombiningForms());\n        }\n        const lm = new lexeme_1.TonalInflectionLexemeMaker(metaplasm);\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2FuYWx5emVyLmpzPzBhYmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLDREQUFVO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFtQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b25hbEluZmxlY3Rpb25BbmFseXplciA9IGV4cG9ydHMubW9ycGhBbmFseXplQ2hhbmdpbmcgPSB2b2lkIDA7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBsZXhlbWVfMSA9IHJlcXVpcmUoXCIuL2xleGVtZVwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuLi90b25hbC9hbmFseXplclwiKTtcbi8qKlxuICogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gKiBAcGFyYW0gc3RyIEEgd29yZC5cbiAqL1xuZnVuY3Rpb24gbW9ycGhBbmFseXplQ2hhbmdpbmcoc3RyKSB7XG4gICAgY29uc3QgZ3MgPSBhbmFseXplcl8xLmdyYXBoQW5hbHl6ZVRvbmFsKHN0cik7XG4gICAgY29uc3QgdHNjaG1tID0gbmV3IG1vcnBoZW1lXzEuVG9uYWxTb3VuZENoYW5naW5nTW9ycGhlbWVNYWtlcigpO1xuICAgIGNvbnN0IG1ycGhzID0gdHNjaG1tLm1ha2VNb3JwaGVtZXMoZ3MpO1xuICAgIHJldHVybiBtcnBocztcbn1cbmV4cG9ydHMubW9ycGhBbmFseXplQ2hhbmdpbmcgPSBtb3JwaEFuYWx5emVDaGFuZ2luZztcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcyBvciBsZXhlbWUuICovXG5leHBvcnRzLnRvbmFsSW5mbGVjdGlvbkFuYWx5emVyID0ge1xuICAgIC8qKlxuICAgICAqIEFuYWx5emVzIGEgc3RyaW5nIG9yIGdyYXBoZW1lcyBpbnRvIG1vcnBoZW1lcy4gTW9ycGhvbG9naWNhbCBhbmFseXNpcy5cbiAgICAgKiBAcGFyYW0geCBBIHN0cmluZyBvciBncmFwaGVtZXNcbiAgICAgKiBAcGFyYW0gbWV0YXBsYXNtIEEgY29tYmluaW5nIG1ldGFwbGFzbVxuICAgICAqL1xuICAgIG1vcnBoQW5hbHl6ZSh4LCBtZXRhcGxhc20pIHtcbiAgICAgICAgbGV0IGdzID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZ3MgPSB4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBncyA9IGFuYWx5emVyXzEuZ3JhcGhBbmFseXplVG9uYWwoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5Ub25hbENvbWJpbmluZ01vcnBoZW1lTWFrZXIobWV0YXBsYXNtKTtcbiAgICAgICAgcmV0dXJuIG1tLm1ha2VNb3JwaGVtZXMoZ3MpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQW5hbHl6ZXMgYSBzdHJpbmcgb3IgbW9ycGhlbWVzIGludG8gYSBsZXhlbWUuIExleGljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgY29tYmluaW5nIG1vcnBoZW1lc1xuICAgICAqIEBwYXJhbSBtZXRhcGxhc20gQW4gaW5mbGVjdGlvbiBtZXRhcGxhc21cbiAgICAgKi9cbiAgICBsZXhBbmFseXplKHgsIG1ldGFwbGFzbSkge1xuICAgICAgICBsZXQgbXMgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBtcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1zID0gdGhpcy5tb3JwaEFuYWx5emUoeCwgbmV3IG1ldGFwbGFzbV8xLlRvbmFsQ29tYmluaW5nRm9ybXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG0gPSBuZXcgbGV4ZW1lXzEuVG9uYWxJbmZsZWN0aW9uTGV4ZW1lTWFrZXIobWV0YXBsYXNtKTtcbiAgICAgICAgcmV0dXJuIGxtLm1ha2VMZXhlbWVzKG1zKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuYWx5emVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/creator.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/creator.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCompoundPhraseme = exports.createTonalPhrase = exports.createTonalInflectionLexeme = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_2 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst metaplasm_3 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\n/** Creates a lexeme given a `TonalCombiningMetaplasm`. If metaplasm is not provided, `TonalZeroCombining` is defaulted. Excessive tokens are ignored. */\nfunction createTonalInflectionLexeme(str, metaplasm) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = metaplasm\n        ? tia.morphAnalyze(str, metaplasm)\n        : tia.morphAnalyze(str, new metaplasm_2.TonalZeroCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_3.TonalDesinenceInflection());\n    return lx;\n}\nexports.createTonalInflectionLexeme = createTonalInflectionLexeme;\n/** Creates a phrase given a sequence of arbitrary words regardless of syntax. Tokens are analyzed one by one. */\nfunction createTonalPhrase(str) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const strs = str.match(/\\w+/g);\n    const lxs = strs\n        ? strs.map(it => tia.lexAnalyze(it, new metaplasm_1.TonalZeroInflection()))\n        : [];\n    return new phraseme_1.TonalPhrase(lxs.map(it => it.word));\n}\nexports.createTonalPhrase = createTonalPhrase;\n/**\n * Creates a compound in which the preceding word will be inflected and the following word will not.\n * @param preceding A word that will be inflected.\n * @param following A word that will not be inflected.\n */\nfunction createCompoundPhraseme(preceding, following) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const tiphm = new phraseme_2.TonalInflectionPhrasemeMaker();\n    const lxPreceding = tia.lexAnalyze(preceding, new metaplasm_3.TonalDesinenceInflection());\n    const lxFollowing = createTonalInflectionLexeme(following);\n    return tiphm.makeCompoundPhraseme(lxPreceding, lxFollowing);\n}\nexports.createCompoundPhraseme = createCompoundPhraseme;\n//# sourceMappingURL=creator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2NyZWF0b3IuanM/YTM3NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMscUVBQW1CO0FBQzlDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG1CQUFtQixtQkFBTyxDQUFDLGdFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDJEQUFjO0FBQzFDLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2NyZWF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQ29tcG91bmRQaHJhc2VtZSA9IGV4cG9ydHMuY3JlYXRlVG9uYWxQaHJhc2UgPSBleHBvcnRzLmNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZSA9IHZvaWQgMDtcbmNvbnN0IGFuYWx5emVyXzEgPSByZXF1aXJlKFwiLi9hbmFseXplclwiKTtcbmNvbnN0IHBocmFzZW1lXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvcGhyYXNlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMSA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBwaHJhc2VtZV8yID0gcmVxdWlyZShcIi4vcGhyYXNlbWVcIik7XG5jb25zdCBtZXRhcGxhc21fMiA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBtZXRhcGxhc21fMyA9IHJlcXVpcmUoXCIuL21ldGFwbGFzbVwiKTtcbi8qKiBDcmVhdGVzIGEgbGV4ZW1lIGdpdmVuIGEgYFRvbmFsQ29tYmluaW5nTWV0YXBsYXNtYC4gSWYgbWV0YXBsYXNtIGlzIG5vdCBwcm92aWRlZCwgYFRvbmFsWmVyb0NvbWJpbmluZ2AgaXMgZGVmYXVsdGVkLiBFeGNlc3NpdmUgdG9rZW5zIGFyZSBpZ25vcmVkLiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9uYWxJbmZsZWN0aW9uTGV4ZW1lKHN0ciwgbWV0YXBsYXNtKSB7XG4gICAgY29uc3QgdGlhID0gYW5hbHl6ZXJfMS50b25hbEluZmxlY3Rpb25BbmFseXplcjtcbiAgICBjb25zdCBtcyA9IG1ldGFwbGFzbVxuICAgICAgICA/IHRpYS5tb3JwaEFuYWx5emUoc3RyLCBtZXRhcGxhc20pXG4gICAgICAgIDogdGlhLm1vcnBoQW5hbHl6ZShzdHIsIG5ldyBtZXRhcGxhc21fMi5Ub25hbFplcm9Db21iaW5pbmcoKSk7XG4gICAgY29uc3QgbHggPSB0aWEubGV4QW5hbHl6ZShtcywgbmV3IG1ldGFwbGFzbV8zLlRvbmFsRGVzaW5lbmNlSW5mbGVjdGlvbigpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLmNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZSA9IGNyZWF0ZVRvbmFsSW5mbGVjdGlvbkxleGVtZTtcbi8qKiBDcmVhdGVzIGEgcGhyYXNlIGdpdmVuIGEgc2VxdWVuY2Ugb2YgYXJiaXRyYXJ5IHdvcmRzIHJlZ2FyZGxlc3Mgb2Ygc3ludGF4LiBUb2tlbnMgYXJlIGFuYWx5emVkIG9uZSBieSBvbmUuICovXG5mdW5jdGlvbiBjcmVhdGVUb25hbFBocmFzZShzdHIpIHtcbiAgICBjb25zdCB0aWEgPSBhbmFseXplcl8xLnRvbmFsSW5mbGVjdGlvbkFuYWx5emVyO1xuICAgIGNvbnN0IHN0cnMgPSBzdHIubWF0Y2goL1xcdysvZyk7XG4gICAgY29uc3QgbHhzID0gc3Ryc1xuICAgICAgICA/IHN0cnMubWFwKGl0ID0+IHRpYS5sZXhBbmFseXplKGl0LCBuZXcgbWV0YXBsYXNtXzEuVG9uYWxaZXJvSW5mbGVjdGlvbigpKSlcbiAgICAgICAgOiBbXTtcbiAgICByZXR1cm4gbmV3IHBocmFzZW1lXzEuVG9uYWxQaHJhc2UobHhzLm1hcChpdCA9PiBpdC53b3JkKSk7XG59XG5leHBvcnRzLmNyZWF0ZVRvbmFsUGhyYXNlID0gY3JlYXRlVG9uYWxQaHJhc2U7XG4vKipcbiAqIENyZWF0ZXMgYSBjb21wb3VuZCBpbiB3aGljaCB0aGUgcHJlY2VkaW5nIHdvcmQgd2lsbCBiZSBpbmZsZWN0ZWQgYW5kIHRoZSBmb2xsb3dpbmcgd29yZCB3aWxsIG5vdC5cbiAqIEBwYXJhbSBwcmVjZWRpbmcgQSB3b3JkIHRoYXQgd2lsbCBiZSBpbmZsZWN0ZWQuXG4gKiBAcGFyYW0gZm9sbG93aW5nIEEgd29yZCB0aGF0IHdpbGwgbm90IGJlIGluZmxlY3RlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRQaHJhc2VtZShwcmVjZWRpbmcsIGZvbGxvd2luZykge1xuICAgIGNvbnN0IHRpYSA9IGFuYWx5emVyXzEudG9uYWxJbmZsZWN0aW9uQW5hbHl6ZXI7XG4gICAgY29uc3QgdGlwaG0gPSBuZXcgcGhyYXNlbWVfMi5Ub25hbEluZmxlY3Rpb25QaHJhc2VtZU1ha2VyKCk7XG4gICAgY29uc3QgbHhQcmVjZWRpbmcgPSB0aWEubGV4QW5hbHl6ZShwcmVjZWRpbmcsIG5ldyBtZXRhcGxhc21fMy5Ub25hbERlc2luZW5jZUluZmxlY3Rpb24oKSk7XG4gICAgY29uc3QgbHhGb2xsb3dpbmcgPSBjcmVhdGVUb25hbEluZmxlY3Rpb25MZXhlbWUoZm9sbG93aW5nKTtcbiAgICByZXR1cm4gdGlwaG0ubWFrZUNvbXBvdW5kUGhyYXNlbWUobHhQcmVjZWRpbmcsIGx4Rm9sbG93aW5nKTtcbn1cbmV4cG9ydHMuY3JlYXRlQ29tcG91bmRQaHJhc2VtZSA9IGNyZWF0ZUNvbXBvdW5kUGhyYXNlbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdG9yLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/creator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/dictionary.js":
/*!******************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/dictionary.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dictOfSeperateVVCompounds = exports.dictOfPhrasalVerbTwos = exports.dictOfPhrasalVerbs = exports.dictOfVerbs = void 0;\n// prettier-ignore\nexports.dictOfVerbs = [\n    'koannw',\n    'pah',\n];\n// prettier-ignore\nexports.dictOfPhrasalVerbs = [\n    ['koannw', 'diurh'],\n    ['longw', 'diurh'],\n];\n// prettier-ignore\nexports.dictOfPhrasalVerbTwos = [\n    ['tehh', 'cut', 'kih'],\n];\n/** Base forms of separate VV compounds. */\nexports.dictOfSeperateVVCompounds = [['siamy', 'qoew']];\n//# sourceMappingURL=dictionary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2RpY3Rpb25hcnkuanM/NmRhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9kaWN0aW9uYXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpY3RPZlNlcGVyYXRlVlZDb21wb3VuZHMgPSBleHBvcnRzLmRpY3RPZlBocmFzYWxWZXJiVHdvcyA9IGV4cG9ydHMuZGljdE9mUGhyYXNhbFZlcmJzID0gZXhwb3J0cy5kaWN0T2ZWZXJicyA9IHZvaWQgMDtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0cy5kaWN0T2ZWZXJicyA9IFtcbiAgICAna29hbm53JyxcbiAgICAncGFoJyxcbl07XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydHMuZGljdE9mUGhyYXNhbFZlcmJzID0gW1xuICAgIFsna29hbm53JywgJ2RpdXJoJ10sXG4gICAgWydsb25ndycsICdkaXVyaCddLFxuXTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuZXhwb3J0cy5kaWN0T2ZQaHJhc2FsVmVyYlR3b3MgPSBbXG4gICAgWyd0ZWhoJywgJ2N1dCcsICdraWgnXSxcbl07XG4vKiogQmFzZSBmb3JtcyBvZiBzZXBhcmF0ZSBWViBjb21wb3VuZHMuICovXG5leHBvcnRzLmRpY3RPZlNlcGVyYXRlVlZDb21wb3VuZHMgPSBbWydzaWFteScsICdxb2V3J11dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGljdGlvbmFyeS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/dictionary.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/inflector.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/inflector.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inflectSerial = exports.inflectVppToParticiple = exports.inflectToParticiple = exports.inflectPossesive = exports.inflectLeToConjunctive = exports.inflectEToAdnominal = exports.inflectVppToTransitive = exports.inflectVppToProceeding = exports.inflectToProceeding = exports.inflectEighthToSecond = exports.inflectEighthToFirst = exports.inflectTo = exports.inflectPossesiveEx = exports.inflectEncliticLe = exports.inflectPhrasalVerbParticle = exports.inflectEncliticE = exports.inflectTransfix = exports.inflectDesinence = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_2 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\n/** Inflects the inflectional suffix of a word. Lexical inflector. */\nfunction inflectDesinence(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.TonalCombiningForms());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectDesinence = inflectDesinence;\n/** Inflects the transfix of a word. All tonals other than 3rd tone will be changed to 3rd tone. Lexical inflector. */\nfunction inflectTransfix(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ThirdCombiningForm());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TransfixInflection());\n    return lx;\n}\nexports.inflectTransfix = inflectTransfix;\n/**\n * Inflects e to ez. Lexical inflector.\n * @param word E, ew, or ez\n */\nfunction inflectEncliticE(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.AdnominalECombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticE = inflectEncliticE;\n/**\n * Inflects 4th tone to 1st tone or 3rd tone accordingly. Inflects laih to laiz. Lexical inflector.\n * @param word particle\n * @param tone F, w, or z\n */\nfunction inflectPhrasalVerbParticle(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PhrasalVerbParticleCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPhrasalVerbParticle = inflectPhrasalVerbParticle;\n/**\n * Inflects lez and lew to le. Lexical inflector.\n * @param word Lew, lez, or le\n */\nfunction inflectEncliticLe(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.ConjunctiveLeCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEncliticLe = inflectEncliticLe;\n/**\n * Inflects ex to ew. Lexical inflector.\n * @param word Ex\n */\nfunction inflectPossesiveEx(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.PossesiveExCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectPossesiveEx = inflectPossesiveEx;\n/**\n * Inflects 4th tone to either 1st free tone or 7th free tone. Lexical inflector.\n * @param word 4th checked tone\n * @param tone F or z\n */\nfunction inflectTo(word, tone) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.FirstSeventhCombining(tone));\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectTo = inflectTo;\n/**\n * Inflects 8th tone to 1st tone. Addon inflector.\n * @param word 8th checked tone\n */\nfunction inflectEighthToFirst(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToFirstCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToFirst = inflectEighthToFirst;\n/**\n * Inflects 8th tone to 2nd tone. Addon inflector.\n * @param word 8th neutral tone\n */\nfunction inflectEighthToSecond(word) {\n    const tia = analyzer_1.tonalInflectionAnalyzer;\n    const ms = tia.morphAnalyze(word, new metaplasm_1.EighthToSecondCombining());\n    const lx = tia.lexAnalyze(ms, new metaplasm_2.TonalDesinenceInflection());\n    return lx;\n}\nexports.inflectEighthToSecond = inflectEighthToSecond;\n/**\n * Inflects a phrasal verb of length 2 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n */\nfunction inflectToProceeding(verb, particle) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    if (particle === 'kih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n    }\n    else {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.w);\n    }\n    return phm.makePhrasalVerbPhraseme(lxVerb, lxParticle);\n}\nexports.inflectToProceeding = inflectToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to proceeding form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToProceeding(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    let lxParticle = creator_1.createTonalInflectionLexeme('');\n    let lxParticleTwo = creator_1.createTonalInflectionLexeme('');\n    if (particle === 'cut' && particleTwo === 'kih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.f);\n    }\n    else if (particle === 'kih' && particleTwo === 'laih') {\n        lxParticle = inflectPhrasalVerbParticle(particle, version2_1.TonalLetterTags.f);\n        lxParticleTwo = inflectPhrasalVerbParticle(particleTwo, version2_1.TonalLetterTags.z);\n    }\n    return phm.makePhrasalVerbVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToProceeding = inflectVppToProceeding;\n/**\n * Inflects a phrasal verb of length 3 to transitive form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n */\nfunction inflectVppToTransitive(verb, particle, particleTwo) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxParticle = inflectDesinence(particle);\n    const lxParticleTwo = inflectDesinence(particleTwo);\n    return phm.makeTransitiveVppPhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToTransitive = inflectVppToTransitive;\n/**\n * Inflects e form to adnominal form. Phrasal inflector.\n * @param adjectivalNoun Main word\n * @param e E, ew, or ez\n */\nfunction inflectEToAdnominal(adjectivalNoun, e) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxAdjective = creator_1.createTonalInflectionLexeme(adjectivalNoun);\n    const lxE = inflectEncliticE(e);\n    return phm.makeAdjectivePhraseme(lxAdjective, lxE);\n}\nexports.inflectEToAdnominal = inflectEToAdnominal;\n/**\n * Inflects le form to conjunctive form. Phrasal inflector.\n * @param verb Main word\n * @param le Le, lew, or lez\n */\nfunction inflectLeToConjunctive(verb, le) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectDesinence(verb);\n    const lxLe = inflectEncliticLe(le);\n    return phm.makeConjunctivePhraseme(lxVerb, lxLe);\n}\nexports.inflectLeToConjunctive = inflectLeToConjunctive;\n/**\n * Inflects possesive case from teriminal form to adnominal form. Phrasal inflector.\n * @param noun Main word\n * @param ex Ex\n */\nfunction inflectPossesive(noun, ex) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxNoun = creator_1.createTonalInflectionLexeme(noun);\n    const lxEx = inflectPossesiveEx(ex);\n    return phm.makePossesivePhraseme(lxNoun, lxEx);\n}\nexports.inflectPossesive = inflectPossesive;\n/**\n * Inflects a phrasal verb of length 2 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle\n * @param tone 1st tone or 7th tone\n * */\nfunction inflectToParticiple(verb, particle, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    return phm.makeParticiplePhraseme(lxVerb, lxParticle);\n}\nexports.inflectToParticiple = inflectToParticiple;\n/**\n * Inflects a phrasal verb of length 3 to participle form. Phrasal inflector.\n * @param verb Main word\n * @param particle Particle one\n * @param particleTwo Particle two\n * @param tone 1st tone or 7th tone\n */\nfunction inflectVppToParticiple(verb, particle, particleTwo, tone) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lxVerb = inflectTo(verb, tone);\n    const lxParticle = inflectTo(particle, tone);\n    const lxParticleTwo = inflectTo(particleTwo, tone);\n    return phm.makeVppParticiplePhraseme(lxVerb, lxParticle, lxParticleTwo);\n}\nexports.inflectVppToParticiple = inflectVppToParticiple;\n/** Inflects a series of words. The forms of the last word indicates the whole phrase is in proceeding form or not. Phrasal inflector. */\nfunction inflectSerial(...words) {\n    const phm = new phraseme_1.TonalInflectionPhrasemeMaker();\n    const lexemes = words.map(it => inflectDesinence(it));\n    return phm.makeSerialPhraseme(lexemes);\n}\nexports.inflectSerial = inflectSerial;\n//# sourceMappingURL=inflector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/inflector.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/inserter.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/inserter.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertToFollowingWord = exports.insertToFollowingSyllable = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nfunction getNoInsertion(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_2.TonalZeroInsertionMetaplasm());\n    return lx;\n}\n/**\n * Inserts an initial m, n, or ng to syllable ay if the preceding syllable has a final m, n, or ng.\n * @param word A word whose second syllable is ay, a, or af. The word has at least 2 syllables for the second one to be inserted an initial.\n */\nfunction insertToFollowingSyllable(word) {\n    const tschmm = new morpheme_1.TonalSoundChangingMorphemeMaker();\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    const gs = gm.makeGraphemes(word);\n    const mrphs = tschmm.makeMorphemes(gs);\n    // TODO: add initial g. b? l?\n    const lx = new lexeme_1.TonalInsertionLexeme(mrphs, new metaplasm_1.Epenthesis());\n    return lx;\n}\nexports.insertToFollowingSyllable = insertToFollowingSyllable;\n/**\n * Insert an initial to the enclitic.\n * @param preceding Thre preceding word.\n * @param following The following word. The enclitic.\n */\nfunction insertToFollowingWord(preceding, following) {\n    const lxPreceding = getNoInsertion(preceding);\n    const lxFollowing = getNoInsertion(following);\n    const phmk = new phraseme_1.TonalInsertionPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.InsertionToEnclitic());\n}\nexports.insertToFollowingWord = insertToFollowingWord;\n//# sourceMappingURL=inserter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2luc2VydGVyLmpzP2M0MjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBbUI7QUFDOUMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsNERBQVU7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMsa0VBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9pbnNlcnRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbnNlcnRUb0ZvbGxvd2luZ1dvcmQgPSBleHBvcnRzLmluc2VydFRvRm9sbG93aW5nU3lsbGFibGUgPSB2b2lkIDA7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IHZlcnNpb24yXzEgPSByZXF1aXJlKFwiLi4vdG9uYWwvdmVyc2lvbjJcIik7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBsZXhlbWVfMSA9IHJlcXVpcmUoXCIuL2xleGVtZVwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgcGhyYXNlbWVfMSA9IHJlcXVpcmUoXCIuL3BocmFzZW1lXCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL2FuYWx5emVyXCIpO1xuY29uc3QgbWV0YXBsYXNtXzIgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuZnVuY3Rpb24gZ2V0Tm9JbnNlcnRpb24od29yZCkge1xuICAgIGNvbnN0IG1ycGhzID0gYW5hbHl6ZXJfMS5tb3JwaEFuYWx5emVDaGFuZ2luZyh3b3JkKTtcbiAgICBjb25zdCBseCA9IG5ldyBsZXhlbWVfMS5Ub25hbEluc2VydGlvbkxleGVtZShtcnBocywgbmV3IG1ldGFwbGFzbV8yLlRvbmFsWmVyb0luc2VydGlvbk1ldGFwbGFzbSgpKTtcbiAgICByZXR1cm4gbHg7XG59XG4vKipcbiAqIEluc2VydHMgYW4gaW5pdGlhbCBtLCBuLCBvciBuZyB0byBzeWxsYWJsZSBheSBpZiB0aGUgcHJlY2VkaW5nIHN5bGxhYmxlIGhhcyBhIGZpbmFsIG0sIG4sIG9yIG5nLlxuICogQHBhcmFtIHdvcmQgQSB3b3JkIHdob3NlIHNlY29uZCBzeWxsYWJsZSBpcyBheSwgYSwgb3IgYWYuIFRoZSB3b3JkIGhhcyBhdCBsZWFzdCAyIHN5bGxhYmxlcyBmb3IgdGhlIHNlY29uZCBvbmUgdG8gYmUgaW5zZXJ0ZWQgYW4gaW5pdGlhbC5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0VG9Gb2xsb3dpbmdTeWxsYWJsZSh3b3JkKSB7XG4gICAgY29uc3QgdHNjaG1tID0gbmV3IG1vcnBoZW1lXzEuVG9uYWxTb3VuZENoYW5naW5nTW9ycGhlbWVNYWtlcigpO1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKHZlcnNpb24yXzEubG93ZXJMZXR0ZXJzVG9uYWwpO1xuICAgIGNvbnN0IGdzID0gZ20ubWFrZUdyYXBoZW1lcyh3b3JkKTtcbiAgICBjb25zdCBtcnBocyA9IHRzY2htbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICAvLyBUT0RPOiBhZGQgaW5pdGlhbCBnLiBiPyBsP1xuICAgIGNvbnN0IGx4ID0gbmV3IGxleGVtZV8xLlRvbmFsSW5zZXJ0aW9uTGV4ZW1lKG1ycGhzLCBuZXcgbWV0YXBsYXNtXzEuRXBlbnRoZXNpcygpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLmluc2VydFRvRm9sbG93aW5nU3lsbGFibGUgPSBpbnNlcnRUb0ZvbGxvd2luZ1N5bGxhYmxlO1xuLyoqXG4gKiBJbnNlcnQgYW4gaW5pdGlhbCB0byB0aGUgZW5jbGl0aWMuXG4gKiBAcGFyYW0gcHJlY2VkaW5nIFRocmUgcHJlY2VkaW5nIHdvcmQuXG4gKiBAcGFyYW0gZm9sbG93aW5nIFRoZSBmb2xsb3dpbmcgd29yZC4gVGhlIGVuY2xpdGljLlxuICovXG5mdW5jdGlvbiBpbnNlcnRUb0ZvbGxvd2luZ1dvcmQocHJlY2VkaW5nLCBmb2xsb3dpbmcpIHtcbiAgICBjb25zdCBseFByZWNlZGluZyA9IGdldE5vSW5zZXJ0aW9uKHByZWNlZGluZyk7XG4gICAgY29uc3QgbHhGb2xsb3dpbmcgPSBnZXROb0luc2VydGlvbihmb2xsb3dpbmcpO1xuICAgIGNvbnN0IHBobWsgPSBuZXcgcGhyYXNlbWVfMS5Ub25hbEluc2VydGlvblBocmFzZW1lTWFrZXIoKTtcbiAgICByZXR1cm4gcGhtay5tYWtlUGhyYXNlbWUobHhQcmVjZWRpbmcsIGx4Rm9sbG93aW5nLCBuZXcgbWV0YXBsYXNtXzEuSW5zZXJ0aW9uVG9FbmNsaXRpYygpKTtcbn1cbmV4cG9ydHMuaW5zZXJ0VG9Gb2xsb3dpbmdXb3JkID0gaW5zZXJ0VG9Gb2xsb3dpbmdXb3JkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zZXJ0ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/inserter.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/keywords.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/keywords.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyWords = exports.AuxiliaryElement = exports.PrepositionElement = exports.ParticleElement = exports.PronounElement = exports.EncliticElement = exports.VerbElement = exports.PersonalPronounElement = exports.ConstructionElement = void 0;\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst visitor_1 = __webpack_require__(/*! ./visitor */ \"./node_modules/taipa/lib/dparser/visitor.js\");\n/** Construction element. */\nclass ConstructionElement {\n    constructor() {\n        /** Orthographic text. */\n        this.orth = '';\n        /** The simple part-of-speech tag. */\n        this.pos = '';\n        /** The detailed part-of-speech tag. */\n        this.tag = '';\n    }\n}\nexports.ConstructionElement = ConstructionElement;\nclass PersonalPronounElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.orth = str;\n        this.pos = symbols_1.POSTags.pronoun;\n    }\n}\nexports.PersonalPronounElement = PersonalPronounElement;\nclass VerbElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.orth = str;\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nexports.VerbElement = VerbElement;\nclass EncliticElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.particle;\n        this.orth = str;\n    }\n}\nexports.EncliticElement = EncliticElement;\nclass PronounElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.pronoun;\n        this.orth = str;\n    }\n}\nexports.PronounElement = PronounElement;\nclass NounElement extends ConstructionElement {\n    constructor() {\n        super();\n        this.pos = symbols_1.POSTags.noun;\n    }\n}\nclass ParticleElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.particle;\n        this.orth = str;\n    }\n}\nexports.ParticleElement = ParticleElement;\nclass PrepositionElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.adposition;\n        this.orth = str;\n    }\n}\nexports.PrepositionElement = PrepositionElement;\nclass AuxiliaryElement extends ConstructionElement {\n    constructor(str) {\n        super();\n        this.pos = symbols_1.POSTags.auxiliary;\n        this.orth = str;\n    }\n}\nexports.AuxiliaryElement = AuxiliaryElement;\nclass KeyWords {\n    constructor() {\n        this.words = new Array();\n        this.lexemes = new Array();\n        this.populateWords();\n        this.populateLexemes();\n    }\n    createWord(orth, pos) {\n        const w1 = new visitor_1.OrthoWord();\n        w1.form = orth;\n        const ce1 = new ConstructionElement();\n        ce1.orth = orth;\n        ce1.pos = pos;\n        this.words.push([w1, ce1]);\n    }\n    populateWords() {\n        this.createWord('qaz', symbols_1.POSTags.auxiliary);\n        this.createWord('che', symbols_1.POSTags.pronoun);\n    }\n    createLexeme(orth, pos) {\n        const lx1 = new visitor_1.OrthoLexeme();\n        lx1.form = orth;\n        const ilx1 = creator_1.createTonalInflectionLexeme(lx1.form, new metaplasm_1.TonalCombiningForms());\n        lx1.inflected.push(ilx1.getForms()[0].literal);\n        const ce1 = new ConstructionElement();\n        ce1.orth = orth;\n        ce1.pos = pos;\n        this.lexemes.push([lx1, ce1]);\n    }\n    populateLexemes() {\n        this.createLexeme('goay', symbols_1.POSTags.pronoun);\n        this.createLexeme('longy', symbols_1.POSTags.particle);\n        this.createLexeme('bez', symbols_1.POSTags.particle);\n    }\n    matchLexemes(word) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.lexemes.filter(it => it[0].accept(v, word));\n        if (arr.length > 0) {\n            const ce = new ConstructionElement();\n            ce.orth = word;\n            ce.pos = arr[0][1].pos;\n            return ce;\n        }\n        return new ConstructionElement();\n    }\n    matchWords(word) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.words.filter(it => it[0].accept(v, word));\n        if (arr.length > 0) {\n            return arr[0][1];\n        }\n        return new ConstructionElement();\n    }\n}\nexports.KeyWords = KeyWords;\n//# sourceMappingURL=keywords.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2tleXdvcmRzLmpzP2QyMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLDhEQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL2tleXdvcmRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktleVdvcmRzID0gZXhwb3J0cy5BdXhpbGlhcnlFbGVtZW50ID0gZXhwb3J0cy5QcmVwb3NpdGlvbkVsZW1lbnQgPSBleHBvcnRzLlBhcnRpY2xlRWxlbWVudCA9IGV4cG9ydHMuUHJvbm91bkVsZW1lbnQgPSBleHBvcnRzLkVuY2xpdGljRWxlbWVudCA9IGV4cG9ydHMuVmVyYkVsZW1lbnQgPSBleHBvcnRzLlBlcnNvbmFsUHJvbm91bkVsZW1lbnQgPSBleHBvcnRzLkNvbnN0cnVjdGlvbkVsZW1lbnQgPSB2b2lkIDA7XG5jb25zdCBzeW1ib2xzXzEgPSByZXF1aXJlKFwiLi9zeW1ib2xzXCIpO1xuY29uc3QgY3JlYXRvcl8xID0gcmVxdWlyZShcIi4vY3JlYXRvclwiKTtcbmNvbnN0IG1ldGFwbGFzbV8xID0gcmVxdWlyZShcIi4vbWV0YXBsYXNtXCIpO1xuY29uc3QgdmlzaXRvcl8xID0gcmVxdWlyZShcIi4vdmlzaXRvclwiKTtcbi8qKiBDb25zdHJ1Y3Rpb24gZWxlbWVudC4gKi9cbmNsYXNzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogT3J0aG9ncmFwaGljIHRleHQuICovXG4gICAgICAgIHRoaXMub3J0aCA9ICcnO1xuICAgICAgICAvKiogVGhlIHNpbXBsZSBwYXJ0LW9mLXNwZWVjaCB0YWcuICovXG4gICAgICAgIHRoaXMucG9zID0gJyc7XG4gICAgICAgIC8qKiBUaGUgZGV0YWlsZWQgcGFydC1vZi1zcGVlY2ggdGFnLiAqL1xuICAgICAgICB0aGlzLnRhZyA9ICcnO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uc3RydWN0aW9uRWxlbWVudCA9IENvbnN0cnVjdGlvbkVsZW1lbnQ7XG5jbGFzcyBQZXJzb25hbFByb25vdW5FbGVtZW50IGV4dGVuZHMgQ29uc3RydWN0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3J0aCA9IHN0cjtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuO1xuICAgIH1cbn1cbmV4cG9ydHMuUGVyc29uYWxQcm9ub3VuRWxlbWVudCA9IFBlcnNvbmFsUHJvbm91bkVsZW1lbnQ7XG5jbGFzcyBWZXJiRWxlbWVudCBleHRlbmRzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHN0cikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgICAgIHRoaXMucG9zID0gc3ltYm9sc18xLlBPU1RhZ3MudmVyYjtcbiAgICB9XG59XG5leHBvcnRzLlZlcmJFbGVtZW50ID0gVmVyYkVsZW1lbnQ7XG5jbGFzcyBFbmNsaXRpY0VsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wYXJ0aWNsZTtcbiAgICAgICAgdGhpcy5vcnRoID0gc3RyO1xuICAgIH1cbn1cbmV4cG9ydHMuRW5jbGl0aWNFbGVtZW50ID0gRW5jbGl0aWNFbGVtZW50O1xuY2xhc3MgUHJvbm91bkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9ub3VuRWxlbWVudCA9IFByb25vdW5FbGVtZW50O1xuY2xhc3MgTm91bkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5ub3VuO1xuICAgIH1cbn1cbmNsYXNzIFBhcnRpY2xlRWxlbWVudCBleHRlbmRzIENvbnN0cnVjdGlvbkVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHN0cikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBvcyA9IHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5QYXJ0aWNsZUVsZW1lbnQgPSBQYXJ0aWNsZUVsZW1lbnQ7XG5jbGFzcyBQcmVwb3NpdGlvbkVsZW1lbnQgZXh0ZW5kcyBDb25zdHJ1Y3Rpb25FbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdHIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBzeW1ib2xzXzEuUE9TVGFncy5hZHBvc2l0aW9uO1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5QcmVwb3NpdGlvbkVsZW1lbnQgPSBQcmVwb3NpdGlvbkVsZW1lbnQ7XG5jbGFzcyBBdXhpbGlhcnlFbGVtZW50IGV4dGVuZHMgQ29uc3RydWN0aW9uRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9zID0gc3ltYm9sc18xLlBPU1RhZ3MuYXV4aWxpYXJ5O1xuICAgICAgICB0aGlzLm9ydGggPSBzdHI7XG4gICAgfVxufVxuZXhwb3J0cy5BdXhpbGlhcnlFbGVtZW50ID0gQXV4aWxpYXJ5RWxlbWVudDtcbmNsYXNzIEtleVdvcmRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLmxleGVtZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5wb3B1bGF0ZVdvcmRzKCk7XG4gICAgICAgIHRoaXMucG9wdWxhdGVMZXhlbWVzKCk7XG4gICAgfVxuICAgIGNyZWF0ZVdvcmQob3J0aCwgcG9zKSB7XG4gICAgICAgIGNvbnN0IHcxID0gbmV3IHZpc2l0b3JfMS5PcnRob1dvcmQoKTtcbiAgICAgICAgdzEuZm9ybSA9IG9ydGg7XG4gICAgICAgIGNvbnN0IGNlMSA9IG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgICAgIGNlMS5vcnRoID0gb3J0aDtcbiAgICAgICAgY2UxLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy53b3Jkcy5wdXNoKFt3MSwgY2UxXSk7XG4gICAgfVxuICAgIHBvcHVsYXRlV29yZHMoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlV29yZCgncWF6Jywgc3ltYm9sc18xLlBPU1RhZ3MuYXV4aWxpYXJ5KTtcbiAgICAgICAgdGhpcy5jcmVhdGVXb3JkKCdjaGUnLCBzeW1ib2xzXzEuUE9TVGFncy5wcm9ub3VuKTtcbiAgICB9XG4gICAgY3JlYXRlTGV4ZW1lKG9ydGgsIHBvcykge1xuICAgICAgICBjb25zdCBseDEgPSBuZXcgdmlzaXRvcl8xLk9ydGhvTGV4ZW1lKCk7XG4gICAgICAgIGx4MS5mb3JtID0gb3J0aDtcbiAgICAgICAgY29uc3QgaWx4MSA9IGNyZWF0b3JfMS5jcmVhdGVUb25hbEluZmxlY3Rpb25MZXhlbWUobHgxLmZvcm0sIG5ldyBtZXRhcGxhc21fMS5Ub25hbENvbWJpbmluZ0Zvcm1zKCkpO1xuICAgICAgICBseDEuaW5mbGVjdGVkLnB1c2goaWx4MS5nZXRGb3JtcygpWzBdLmxpdGVyYWwpO1xuICAgICAgICBjb25zdCBjZTEgPSBuZXcgQ29uc3RydWN0aW9uRWxlbWVudCgpO1xuICAgICAgICBjZTEub3J0aCA9IG9ydGg7XG4gICAgICAgIGNlMS5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMubGV4ZW1lcy5wdXNoKFtseDEsIGNlMV0pO1xuICAgIH1cbiAgICBwb3B1bGF0ZUxleGVtZXMoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlTGV4ZW1lKCdnb2F5Jywgc3ltYm9sc18xLlBPU1RhZ3MucHJvbm91bik7XG4gICAgICAgIHRoaXMuY3JlYXRlTGV4ZW1lKCdsb25neScsIHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlKTtcbiAgICAgICAgdGhpcy5jcmVhdGVMZXhlbWUoJ2JleicsIHN5bWJvbHNfMS5QT1NUYWdzLnBhcnRpY2xlKTtcbiAgICB9XG4gICAgbWF0Y2hMZXhlbWVzKHdvcmQpIHtcbiAgICAgICAgY29uc3QgdiA9IG5ldyB2aXNpdG9yXzEuVmlzaXRvck1hdGNoaW5nKCk7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMubGV4ZW1lcy5maWx0ZXIoaXQgPT4gaXRbMF0uYWNjZXB0KHYsIHdvcmQpKTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjZSA9IG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgICAgICAgICBjZS5vcnRoID0gd29yZDtcbiAgICAgICAgICAgIGNlLnBvcyA9IGFyclswXVsxXS5wb3M7XG4gICAgICAgICAgICByZXR1cm4gY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rpb25FbGVtZW50KCk7XG4gICAgfVxuICAgIG1hdGNoV29yZHMod29yZCkge1xuICAgICAgICBjb25zdCB2ID0gbmV3IHZpc2l0b3JfMS5WaXNpdG9yTWF0Y2hpbmcoKTtcbiAgICAgICAgY29uc3QgYXJyID0gdGhpcy53b3Jkcy5maWx0ZXIoaXQgPT4gaXRbMF0uYWNjZXB0KHYsIHdvcmQpKTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyWzBdWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0aW9uRWxlbWVudCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuS2V5V29yZHMgPSBLZXlXb3Jkcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXdvcmRzLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/keywords.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/lexeme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/lexeme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalInflectionLexemeMaker = exports.TonalUnmutationLexeme = exports.TonalMutationLexeme = exports.TonalUninfectionLexeme = exports.TonalInfectionLexeme = exports.TonalUninsertionLexeme = exports.TonalInsertionLexeme = exports.TonalInflectionLexeme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lexeme_1 = __webpack_require__(/*! ../tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\n/** A word and its inflected forms. */\nclass TonalInflectionLexeme extends unit_1.Lexeme {\n    // TODO: word patterns for tiapwsux chongwtaiwgiy, ay, etc.. check out member positional letters in morpheme.\n    constructor(morphemes, metaplasm) {\n        super();\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1]) {\n                // tonal ending needs to be assigned to sandhi lexeme\n                this.allomorphicEnding = this.assignAllomorphicEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                this.allomorphicEnding = new lexeme_1.AllomorphicEnding();\n            }\n        }\n        else {\n            this.allomorphicEnding = new lexeme_1.AllomorphicEnding();\n        }\n        if (morphemes.length > 0)\n            this.forms = this.assignWordForms(morphemes, metaplasm);\n    }\n    assignAllomorphicEnding(allomorph) {\n        let tse = new lexeme_1.AllomorphicEnding();\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            // replace the tonal ending\n            let fte = new lexeme_1.FreeAllomorphicEnding();\n            fte.allomorph = allomorph;\n            tse = fte;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            // append the tonal of the tonal ending\n            let cte = new lexeme_1.CheckedAllomorphicEnding();\n            cte.allomorph = allomorph;\n            tse = cte;\n        }\n        return tse;\n    }\n    getInflectionalEnding() {\n        if (this.allomorphicEnding)\n            return this.allomorphicEnding.allomorph.tonal.toString();\n        return '';\n    }\n    getAllomorphicEnding() {\n        if (this.allomorphicEnding)\n            return this.allomorphicEnding;\n        return '';\n    }\n    assignWordForms(ms, ti) {\n        return ti.apply(ms);\n    }\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInflectionLexeme = TonalInflectionLexeme;\n/** A word and its inserted forms. */\nclass TonalInsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    insertWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentLtrs = preceding.morphemes[preceding.morphemes.length - 1].letters;\n            let pl = new unit_2.PositionalLetter();\n            if (adjacentLtrs[adjacentLtrs.length - 1].name ===\n                version2_1.TonalSpellingTags.freeTonal &&\n                adjacentLtrs[adjacentLtrs.length - 2].name ===\n                    version2_1.TonalSpellingTags.nasalFinal) {\n                pl = adjacentLtrs[adjacentLtrs.length - 2];\n            }\n            else if (adjacentLtrs[adjacentLtrs.length - 1].name ===\n                version2_1.TonalSpellingTags.nasalFinal) {\n                pl = adjacentLtrs[adjacentLtrs.length - 1];\n            }\n            const syls = this.morphemes[0].insertNasal(pl);\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInsertionLexeme = TonalInsertionLexeme;\n/** A word and its inserted forms. */\nclass TonalUninsertionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninsertWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentLtrs = preceding.morphemes[preceding.morphemes.length - 1].letters;\n            let pl = new unit_2.PositionalLetter();\n            if ((adjacentLtrs[adjacentLtrs.length - 1].name ===\n                version2_1.TonalSpellingTags.freeTonal &&\n                adjacentLtrs[adjacentLtrs.length - 2].name ===\n                    version2_1.TonalSpellingTags.nasalFinal) ||\n                adjacentLtrs[adjacentLtrs.length - 1].name ===\n                    version2_1.TonalSpellingTags.nasalFinal) {\n                pl = adjacentLtrs[adjacentLtrs.length - 2];\n            }\n            const syls = this.morphemes[0].uninsertNasal();\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalUninsertionLexeme = TonalUninsertionLexeme;\nclass TonalInfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    infectWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n        if (preceding.morphemes.length > 0 &&\n            preceding.morphemes[preceding.morphemes.length - 1].letters.filter(i => i.name === version2_1.TonalSpellingTags.nasalization).length > 0) {\n            // if there is a nasalization in the preceding word\n            const syls = this.morphemes[0].infect();\n            wrd.replaceSyllable(0, syls[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.TonalInfectionLexeme = TonalInfectionLexeme;\nclass TonalUninfectionLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    uninfectWith(preceding) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (preceding.morphemes.length > 0) {\n            const adjacentLtrs = this.morphemes[this.morphemes.length - 1].letters;\n            const n = preceding.morphemes[preceding.morphemes.length - 1].letters.filter(i => i.name === version2_1.TonalSpellingTags.nasalization);\n            if (n.length == 1 &&\n                adjacentLtrs.filter(it => it.name === version2_1.TonalSpellingTags.nasalization)\n                    .length == 1) {\n                // if there is a nasalization in thre preceding word and the current word\n                wrd.replaceSyllable(0, this.morphemes[0].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUninfectionLexeme = TonalUninfectionLexeme;\n/** A word and its mutated forms. */\nclass TonalMutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    mutateWith(following) {\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes.length > 0) {\n            const adjacentLtrs = following.morphemes[following.morphemes.length - 1].letters;\n            if (adjacentLtrs[0].name === version2_1.TonalSpellingTags.initial) {\n                const s = adjacentLtrs[0];\n                const syls = this.morphemes[this.morphemes.length - 1].changeFinalPtkppttkk(s);\n                if (syls && syls.length > 0) {\n                    wrd.popSyllable();\n                    wrd.pushSyllable(syls[0]);\n                }\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalMutationLexeme = TonalMutationLexeme;\n/** A word and its unmutated forms. */\nclass TonalUnmutationLexeme {\n    constructor(morphemes, metaplasm) {\n        this.morphemes = morphemes;\n        this.forms = new Array();\n        if (morphemes.length == 0)\n            this.word = new lexeme_1.TonalWord([]);\n        else\n            this.word = new lexeme_1.TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0)\n            this.forms = metaplasm.apply(morphemes);\n    }\n    getForms() {\n        // for internal samdhi\n        return this.forms;\n    }\n    unmutateWith(following) {\n        const ltrs = this.morphemes[this.morphemes.length - 1].letters;\n        const fnls = ltrs.filter(i => i.name === version2_1.TonalSpellingTags.stopFinal);\n        const wrd = new lexeme_1.TonalWord(this.morphemes.map(i => new morpheme_1.TonalSyllable(i.syllable.letters)));\n        if (following.morphemes[0].letters[0].toString() === version2_1.TonalLetterTags.g) {\n            if (fnls[0].toString() === version2_1.TonalLetterTags.gg ||\n                fnls[0].toString() === version2_1.TonalLetterTags.g) {\n                wrd.replaceSyllable(0, this.morphemes[0].unmutateFinalConsonant(following.morphemes[0].letters[0])[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUnmutationLexeme = TonalUnmutationLexeme;\nclass TonalInflectionLexemeMaker extends unit_1.LexemeMaker {\n    constructor(metaplasm) {\n        super();\n        this.metaplasm = metaplasm;\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        let isInflStemWithX = false; // inflectional stem with x in the middle\n        if (morphemes) {\n            isInflStemWithX = this.checkFifth(morphemes);\n            if (isInflStemWithX)\n                return new TonalInflectionLexeme([], this.metaplasm);\n        }\n        return new TonalInflectionLexeme(morphemes, this.metaplasm);\n    }\n    checkFifth(ms) {\n        for (let i = 0; i < ms.length; i++) {\n            if (ms[i] && ms[i].syllable.lastLetter.literal === version2_1.TonalLetterTags.x) {\n                if (i < ms.length - 1 && !ms[ms.length - 1].isAy()) {\n                    if (ms[ms.length - 1].syllable.lastLetter.literal === version2_1.TonalLetterTags.a) {\n                        break;\n                    }\n                    else {\n                        // tonal x can't not appear in them middle of an inflectional stem\n                        // if it is not preceding an ay or a\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\nexports.TonalInflectionLexemeMaker = TonalInflectionLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/metaplasm.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/metaplasm.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FinalConsonantUnmutationInternal = exports.FinalConsonantMutationInternal = exports.FinalConsonantUnmutationExternal = exports.FinalConsonantMutationExternal = exports.UninfectionExternal = exports.InfectionExternal = exports.UninsertionFromEnclitic = exports.InsertionToEnclitic = exports.Conjunctive = exports.Adnominal = exports.ConjugateVppToParticiple = exports.ConjugateToParticiple = exports.ConjugateVppToTransitive = exports.ConjugateVppToProceeding = exports.ConjugateToProceeding = exports.ConsonantUnmutation = exports.ConsonantMutation = exports.Uninfection = exports.Infection = exports.Uninsertion = exports.Epenthesis = exports.TransfixInflection = exports.TonalDesinenceInflection = exports.FirstSeventhCombining = exports.PossesiveExCombining = exports.ConjunctiveLeCombining = exports.PhrasalVerbParticleCombining = exports.AdnominalECombining = exports.EighthToSecondCombining = exports.EighthToFirstCombining = exports.FourthToFirstCombining = exports.ThirdCombiningForm = exports.TonalCombiningForms = void 0;\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lexeme_1 = __webpack_require__(/*! ../tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\n/** Returns the combining forms of a syllable. */\nclass TonalCombiningForms extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n                else if (allomorph instanceof version2_1.AllomorphY) {\n                    s.popLetter();\n                    return [s];\n                }\n                else {\n                    s.popLetter();\n                    const tos = collections_1.combiningRules.get(allomorph.tonal.toString());\n                    const rets = [];\n                    if (tos) {\n                        for (let k = 0; k < tos.length; k++) {\n                            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                            rets.push(new morpheme_1.TonalSyllable(s.letters));\n                            s.popLetter();\n                        }\n                    }\n                    return rets;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // nothing to pop here\n                if (allomorph.tonal.toString().length > 0)\n                    return [];\n                const tos = collections_1.combiningRules.get(allomorph.final.toString());\n                const rets = [];\n                if (tos) {\n                    for (let k = 0; k < tos.length; k++) {\n                        if (allomorph.final.toString().length == 2) {\n                            // 8th finals are of length 2\n                            s.popLetter(); // pop the 8th final\n                            const got = collections_1.eighthToFourthFinals.get(allomorph.final.toString());\n                            if (got) {\n                                s.pushLetter(version2_1.lowerLettersTonal.get(got)); // push the 4th final\n                            }\n                        }\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[k]).characters));\n                        rets.push(new morpheme_1.TonalSyllable(s.letters));\n                        s.popLetter();\n                    }\n                }\n                return rets;\n            }\n        }\n        return [];\n    }\n}\nexports.TonalCombiningForms = TonalCombiningForms;\n/** Changes to 3rd tone. */\nclass ThirdCombiningForm extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph) {\n            const s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                if (allomorph.tonal.toString()) {\n                    s.popLetter();\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n                else {\n                    s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n                }\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.ThirdCombiningForm = ThirdCombiningForm;\n/** Changes 4th tone to 1st tone. */\nclass FourthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.AllomorphH) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FourthToFirstCombining = FourthToFirstCombining;\n/** Changes 8th tone to 1st tone. */\nclass EighthToFirstCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            const tnl = collections_1.eighthToFirst.get(allomorph.toString());\n            if (tnl) {\n                s.popLetter();\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tnl).characters));\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToFirstCombining = EighthToFirstCombining;\n/** Changes 8th tone to 2nd tone. */\nclass EighthToSecondCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph && allomorph instanceof version2_1.CheckedAllomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.h).characters));\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.EighthToSecondCombining = EighthToSecondCombining;\n/** Returns the combining form of enclitic e. */\nclass AdnominalECombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        // 1->7, 7->7, 3->3\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    const tos = collections_1.combiningRules.get(version2_1.TonalLetterTags.zero);\n                    if (tos) {\n                        // it should loop only once\n                        s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(tos[0]).characters));\n                    }\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.AdnominalECombining = AdnominalECombining;\n/** Returns the combining form of a phrasal verb particle. */\nclass PhrasalVerbParticleCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    toThird(syllable, final) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w));\n        return s;\n    }\n    toFirst(syllable) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f));\n        return s;\n    }\n    toSeventh(syllable) {\n        let s = new morpheme_1.TonalSyllable(syllable.letters);\n        s.popLetter();\n        s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z));\n        return s;\n    }\n    apply(letters, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n            if (allomorph instanceof version2_1.CheckedAllomorph) {\n                const ret = [];\n                let syl = new morpheme_1.TonalSyllable([]);\n                if (this.tone === version2_1.TonalLetterTags.f) {\n                    syl = this.toFirst(s);\n                }\n                else if (this.tone === version2_1.TonalLetterTags.w) {\n                    syl = this.toThird(s, letters[letters.length - 1].toString());\n                }\n                else if (this.tone === version2_1.TonalLetterTags.z) {\n                    syl = this.toSeventh(s);\n                }\n                ret.push(syl);\n                // TODO: free form of the syllable could be handled outside of this routine by popping out f/w and h/hh\n                return ret;\n            }\n        }\n        return [];\n    }\n}\nexports.PhrasalVerbParticleCombining = PhrasalVerbParticleCombining;\n/** Returns the combining form of enclitic le. */\nclass ConjunctiveLeCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph.tonal.toString() === version2_1.TonalLetterTags.z ||\n                    allomorph.tonal.toString() === version2_1.TonalLetterTags.w) {\n                    s.popLetter();\n                    return [s];\n                }\n            }\n        }\n        return [];\n    }\n}\nexports.ConjunctiveLeCombining = ConjunctiveLeCombining;\n/** Returns the combining form of possesive case marker ex. */\nclass PossesiveExCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            s.popLetter();\n            s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.w).characters));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.PossesiveExCombining = PossesiveExCombining;\n/** Changes 4th tone to either 1st or 7th tone. */\nclass FirstSeventhCombining extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(tone) {\n        super();\n        this.tone = tone;\n    }\n    apply(letters, allomorph) {\n        // from -h to 1 or 7\n        if (allomorph) {\n            let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n            if (s.lastLetter.literal === version2_1.TonalLetterTags.h) {\n                s.popLetter();\n            }\n            if (this.tone === version2_1.TonalLetterTags.z) {\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z).characters));\n            }\n            else if (this.tone === version2_1.TonalLetterTags.zero &&\n                letters[letters.length - 1].toString() === version2_1.TonalLetterTags.t) {\n                s.pushLetter(new unit_1.AlphabeticLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.f).characters));\n            }\n            return [s];\n        }\n        return [];\n    }\n}\nexports.FirstSeventhCombining = FirstSeventhCombining;\n/** Inflects an inflectional suffix. */\nclass TonalDesinenceInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 0 && morphemes[morphemes.length - 1]) {\n            const last = morphemes[morphemes.length - 1];\n            const syls = last.getForms();\n            let rets = [];\n            if (syls) {\n                for (let i in syls) {\n                    let wd = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n                    wd.popSyllable();\n                    wd.pushSyllable(syls[i]);\n                    rets.push(wd);\n                }\n            }\n            return rets;\n        }\n        return [];\n    }\n}\nexports.TonalDesinenceInflection = TonalDesinenceInflection;\n/** Inflects a transfix. */\nclass TransfixInflection extends metaplasm_1.TonalInflectionMetaplasm {\n    apply(morphemes) {\n        const rets = [];\n        if (morphemes.length > 0) {\n            const tw = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n            for (let i = 0; i < morphemes.length; i++) {\n                const form = morphemes[i].getForms()[0];\n                if (form)\n                    tw.replaceSyllable(i, form);\n            }\n            rets.push(tw);\n        }\n        return rets;\n    }\n}\nexports.TransfixInflection = TransfixInflection;\n/** Inserts an initial m, n, or ng to syllable ay. */\nclass Epenthesis extends metaplasm_1.TonalInsertionMetaplasm {\n    // adding of nasal consonants. insertion\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(x => new morpheme_1.TonalSyllable(x.syllable.letters)));\n            if (ltrs[ltrs.length - 2].name == version2_1.TonalSpellingTags.nasalFinal &&\n                morphemes[morphemes.length - 1].syllable.letters[0].literal ===\n                    version2_1.TonalLetterTags.a) {\n                // m, n, ng followed by -ay. pass the preceding nasal to get forms\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].insertNasal(ltrs[ltrs.length - 2])[0]);\n                return [wrd];\n            }\n            // TODO: insert to syllable e. e.g. lagwex -> lagwgex\n        }\n        return [];\n    }\n}\nexports.Epenthesis = Epenthesis;\n/** Uninsert an initial m, n, or ng from syllable ~ay */\nclass Uninsertion extends metaplasm_1.TonalUninsertionMetaplasm {\n    // removal of nasal consonants\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs[ltrs.length - 2].name == version2_1.TonalSpellingTags.nasalFinal &&\n                collections_1.nasalInitials.includes(morphemes[morphemes.length - 1].syllable.letters[0].literal) &&\n                morphemes[morphemes.length - 1].syllable.letters[1].literal ===\n                    version2_1.TonalLetterTags.a) {\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].uninsertNasal()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninsertion = Uninsertion;\n/** Infect the following syllable with nasalization. */\nclass Infection extends metaplasm_1.TonalInfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs.filter(it => it.name === version2_1.TonalSpellingTags.nasalization).length ==\n                1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].infect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Infection = Infection;\n/** Uninfect the following syllable which is infected by a nasalization. */\nclass Uninfection extends metaplasm_1.TonalUninfectionMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            if (ltrs.filter(it => it.name === version2_1.TonalSpellingTags.nasalization).length ==\n                1) {\n                // nasalization of vowels\n                wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].uninfect()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n}\nexports.Uninfection = Uninfection;\n/** Mutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantMutation extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            // duplifix. pass the preceding initial to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].mutateInitialConsonant(ltrs[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantMutation = ConsonantMutation;\n/** Unmutate the initial of the following syllable with the initial of the preceding syllable. */\nclass ConsonantUnmutation extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        if (morphemes.length > 1 && morphemes[morphemes.length - 2]) {\n            const ltrs = morphemes[morphemes.length - 2].letters;\n            const wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n            // pass the initial of the following word to get forms\n            wrd.replaceSyllable(wrd.syllables.length - 1, morphemes[morphemes.length - 1].unmutateInitialConsonant(ltrs[0])[0]);\n            return [wrd];\n        }\n        return [];\n    }\n}\nexports.ConsonantUnmutation = ConsonantUnmutation;\n/** Returns the proceeding forms of a phrasal verb of length 2. */\nclass ConjugateToProceeding extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.getForms()[0], it])));\n            return ret;\n        }\n        else if (verb.getForms().length > 0) {\n            // equivalent to compound in terms of phrasal verb\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], particle.word])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.ConjugateToProceeding = ConjugateToProceeding;\n/** Returns the proceeding forms of a phrasal verb of length 3. */\nclass ConjugateVppToProceeding extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 || particleTwo.getForms().length > 0) {\n            return [\n                new phraseme_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]),\n            ];\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToProceeding = ConjugateVppToProceeding;\n/** Returns the transitive forms of a phrasal verb of length 3. */\nclass ConjugateVppToTransitive extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (verb.getForms().length > 0) {\n            return [\n                new phraseme_1.TonalPhrase([verb.getForms()[0], particle.word, particleTwo.word]),\n            ];\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToTransitive = ConjugateVppToTransitive;\n/** Returns the participle forms of a phrasal verb of length 2. */\nclass ConjugateToParticiple extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, particle) {\n        if (verb.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            const forms = particle.getForms();\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.getForms()[0], it])));\n            }\n            else {\n                forms.map(it => ret.push(new phraseme_1.TonalPhrase([verb.word, it])));\n            }\n            return ret;\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateToParticiple = ConjugateToParticiple;\n/** Returns the participle forms of a phrasal verb of length 3. */\nclass ConjugateVppToParticiple extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    applyVpp(verb, particle, particleTwo) {\n        if (verb.word.literal === '' ||\n            particle.word.literal === '' ||\n            particleTwo.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0 && particleTwo.getForms().length > 0) {\n            const ret = [];\n            if (verb.getForms().length > 0) {\n                ret.push(new phraseme_1.TonalPhrase([\n                    verb.getForms()[0],\n                    particle.getForms()[0],\n                    particleTwo.getForms()[0],\n                ]));\n            }\n            return ret;\n        }\n        return [new phraseme_1.TonalPhrase([])];\n    }\n}\nexports.ConjugateVppToParticiple = ConjugateVppToParticiple;\n/** Returns the adnominal forms of a possesive or e-adjective. */\nclass Adnominal extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(noun, particle) {\n        if (noun.word.literal === '' || particle.word.literal === '')\n            return [];\n        if (particle.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([noun.word, particle.getForms()[0]])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Adnominal = Adnominal;\n/** Returns the conjunctive form of le form. */\nclass Conjunctive extends metaplasm_2.TonalPhrasalInflectionMetaplasm {\n    apply(verb, le) {\n        if (verb.word.literal === '' || le.word.literal === '')\n            return [];\n        if (le.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], le.getForms()[0]])];\n        }\n        else if (verb.getForms().length > 0) {\n            return [new phraseme_1.TonalPhrase([verb.getForms()[0], le.word])];\n        }\n        else {\n            return [new phraseme_1.TonalPhrase([])];\n        }\n    }\n}\nexports.Conjunctive = Conjunctive;\n/** Insert an initial to the enclitic. */\nclass InsertionToEnclitic extends metaplasm_1.TonalPhrasalInsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.insertWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InsertionToEnclitic = InsertionToEnclitic;\n/** Uninsert an initial from the enclitic. */\nclass UninsertionFromEnclitic extends metaplasm_1.TonalPhrasalUninsertionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninsertWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninsertionFromEnclitic = UninsertionFromEnclitic;\n/** Infect the following word with a nasalization. */\nclass InfectionExternal extends metaplasm_1.TonalPhrasalInfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.infectWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.InfectionExternal = InfectionExternal;\n/** Uninfect the following word which is infected by a nasalization. */\nclass UninfectionExternal extends metaplasm_1.TonalPhrasalUninfectionMetaplasm {\n    apply(preceding, following) {\n        const wrds = following.uninfectWith(preceding);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([preceding.word, wrds[0]])];\n        return [];\n    }\n}\nexports.UninfectionExternal = UninfectionExternal;\n/** Consonant mutation of the final of the preceding word. */\nclass FinalConsonantMutationExternal extends metaplasm_1.TonalPhrasalMutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.mutateWith(following);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantMutationExternal = FinalConsonantMutationExternal;\n/** Consonant unmutation of the final of the preceding word. */\nclass FinalConsonantUnmutationExternal extends metaplasm_1.TonalPhrasalUnmutationMetaplasm {\n    apply(preceding, following) {\n        const wrds = preceding.unmutateWith(following);\n        if (wrds.length > 0)\n            return [new phraseme_1.TonalPhrase([wrds[0], following.word])];\n        return [];\n    }\n}\nexports.FinalConsonantUnmutationExternal = FinalConsonantUnmutationExternal;\n/** Consonant mutation of the final of the preceding syllable. */\nclass FinalConsonantMutationInternal extends metaplasm_1.TonalMutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                if (morphemes[i].letters[0].name === version2_1.TonalSpellingTags.initial &&\n                    (morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.t ||\n                        morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.tt)) {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].letters[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else if (morphemes[i].letters[0].toString() === version2_1.TonalLetterTags.b &&\n                    morphemes[i - 1].lastSecondLetter === version2_1.TonalLetterTags.n) {\n                    const syls = morphemes[i - 1].changeFinalN(morphemes[i].letters[0]);\n                    if (syls && syls.length > 0) {\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                    }\n                }\n                else {\n                    const syls = morphemes[i - 1].changeFinalPtkppttkk(morphemes[i].letters[0]);\n                    if (syls && syls.length > 0)\n                        wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantMutationInternal = FinalConsonantMutationInternal;\n/** Consonant unmutation of the final of the preceding syllable. */\nclass FinalConsonantUnmutationInternal extends metaplasm_1.TonalUnmutationMetaplasm {\n    apply(morphemes) {\n        let wrd = new lexeme_1.TonalWord(morphemes.map(it => new morpheme_1.TonalSyllable(it.syllable.letters)));\n        if (morphemes.length > 1) {\n            for (let i = 1; i < morphemes.length; i++) {\n                // combine b, g, h, j, l with m, n, ng\n                const initialsBghjlmnng = collections_1.initialsBghjl.concat(collections_1.nasalInitials);\n                const finalsBglbbggll = Array.from(collections_1.voicedVoicelessFinals.keys());\n                if (morphemes[i].letters[0].name === version2_1.TonalSpellingTags.initial &&\n                    finalsBglbbggll.includes(morphemes[i - 1].lastSecondLetter) &&\n                    initialsBghjlmnng.includes(morphemes[i].letters[0].toString())) {\n                    const syls = morphemes[i - 1].toVoicelessFinal();\n                    wrd.replaceSyllable(i - 1, syls[0]);\n                }\n            }\n        }\n        return [wrd];\n    }\n}\nexports.FinalConsonantUnmutationInternal = FinalConsonantUnmutationInternal;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/morpheme.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/morpheme.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalSoundUnchangingMorphemeMaker = exports.TonalSoundChangingMorphemeMaker = exports.TonalCombiningMorphemeMaker = exports.TonalSoundUnchangingMorpheme = exports.TonalSoundChangingMorpheme = exports.TonalCombiningMorpheme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst morpheme_1 = __webpack_require__(/*! ../tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst version2_1 = __webpack_require__(/*! ../tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst collections_1 = __webpack_require__(/*! ../tonal/collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** A syllable and its combining forms. */\nclass TonalCombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, letters, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.allomorph = this.assignAllomorph(this.syllable);\n        this.letters = letters;\n        this.forms = this.metaplasm.apply(this.letters, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    isAy() {\n        if (this.letters[this.letters.length - 1].toString() === version2_1.TonalLetterTags.y &&\n            this.letters[this.letters.length - 2].toString() === version2_1.TonalLetterTags.a)\n            return true;\n        return false;\n    }\n    assignAllomorph(syllable) {\n        if (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.uncombinedCheckedAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.checkedTonalsTonal.includes(syllable.lastLetter.literal) &&\n            (version2_1.uncombinedCheckedAllomorphs.has(syllable.lastSecondLetter.literal) ||\n                collections_1.finalsBgjlsbbggllss.has(syllable.lastSecondLetter.literal))) {\n            // in case of a final followed by a tonal\n            const ams = version2_1.combinedCheckedAllomorphs.get(syllable.lastSecondLetter.literal + syllable.lastLetter.literal);\n            if (ams && ams.length > 0) {\n                const ret = ams.filter(it => it.tonal.toString() === syllable.lastLetter.literal);\n                return ret[0];\n            }\n            return new version2_1.Allomorph();\n        }\n        if (version2_1.combinedFreeAllomorphs.has(syllable.lastLetter.literal)) {\n            const am = version2_1.combinedFreeAllomorphs.get(syllable.lastLetter.literal);\n            if (am)\n                return am;\n            return new version2_1.Allomorph(); // return empty allomorph\n        }\n        return new version2_1.ZeroAllomorph();\n    }\n}\nexports.TonalCombiningMorpheme = TonalCombiningMorpheme;\n/** A syllable and its sound changing forms. */\nclass TonalSoundChangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, letters) {\n        super();\n        this.syllable = syllable;\n        this.letters = letters;\n    }\n    get lastSecondLetter() {\n        return this.letters[this.letters.length - 2].toString();\n    }\n    insertNasal(letter) {\n        if (letter) {\n            if (letter.name === version2_1.TonalSpellingTags.nasalFinal) {\n                // insertion of nasals, both internal and external sandhi\n                const ltrs = this.letters;\n                ltrs.splice(0, 0, letter);\n                return [\n                    new morpheme_1.TonalSyllable(ltrs.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    infect() {\n        const n = version2_1.nasalizationsTonal.letters[0];\n        if (n) {\n            if (n.name === version2_1.TonalSpellingTags.nasalization) {\n                const ltrs = this.letters;\n                if (ltrs[ltrs.length - 1].name === version2_1.TonalSpellingTags.freeTonal) {\n                    ltrs.splice(ltrs.length - 1, 0, n);\n                }\n                else if (ltrs[ltrs.length - 1].name === version2_1.TonalSpellingTags.medial) {\n                    ltrs.push(n);\n                }\n                return [\n                    new morpheme_1.TonalSyllable(ltrs.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    /** Mutate initial consonants. */\n    mutateInitialConsonant(letter) {\n        if (letter) {\n            if (letter.name === version2_1.TonalSpellingTags.initial) {\n                const ltrs = this.letters;\n                if (ltrs[0].toString() === letter.toString()) {\n                    const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                    s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.l));\n                    return [s];\n                }\n                return [\n                    new morpheme_1.TonalSyllable(ltrs.map(x => new unit_2.AlphabeticLetter(x.characters))),\n                ];\n            }\n        }\n        return [];\n    }\n    mutateFinalConsonant(letter) {\n        if (letter) {\n            const ltrs = this.letters;\n            const syl = new morpheme_1.TonalSyllable(this.letters.map(i => new unit_2.AlphabeticLetter(i.characters)));\n            const idx = ltrs.findIndex(i => i.name === version2_1.TonalSpellingTags.stopFinal);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.gg));\n            return [syl];\n        }\n        return [];\n    }\n    changeFinalTTt(initial) {\n        // absolute assimilation, except for t or tt followed by j. regressive\n        if ((this.letters[this.letters.length - 2].toString() ===\n            version2_1.TonalLetterTags.tt &&\n            Object.values(collections_1.initialsForTT).includes(initial.toString())) ||\n            (this.letters[this.letters.length - 2].toString() === version2_1.TonalLetterTags.t &&\n                Object.values(collections_1.initialsForFinalT).includes(initial.toString()))) {\n            const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            let fnl = collections_1.ttInitialTInitialPairs.get(this.letters[this.letters.length - 2].toString() + initial.toString());\n            if (!fnl && initial.toString() === version2_1.TonalLetterTags.j) {\n                // this block is dedicated to -tfj- and -twj-, since there is only -jfj- but not -jwj-\n                // TODO: need to clarify if there is -jwj-\n                fnl = collections_1.ttInitialTInitialPairs.get(this.letters[this.letters.length - 2].toString() +\n                    this.letters[this.letters.length - 1] +\n                    initial.toString());\n            }\n            if (fnl) {\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                if (collections_1.nasalInitials.includes(initial.toString())) {\n                    s.insertLetter(s.letters.length - 2, new unit_2.AlphabeticLetter(initial.characters));\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n    changeFinalHHh(initial) {\n        // TODO: mutate consonants hh and h.\n        return [];\n    }\n    changeFinalPPp(initial) {\n        // TODO: neutrals. pp -> hh. p -> h.\n        return [];\n    }\n    changeWithInitialMnng(initial) {\n        if (initial.name === version2_1.TonalSpellingTags.initial &&\n            collections_1.nasalInitials.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithMedial(medial) {\n        if (medial.name === version2_1.TonalSpellingTags.medial &&\n            version2_1.vowelsTonal.includes(medial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    changeWithInitialBghjl(initial) {\n        if (initial.name === version2_1.TonalSpellingTags.initial &&\n            collections_1.initialsBghjl.includes(initial.toString())) {\n            return this.voicedFinal();\n        }\n        return [];\n    }\n    /**\n     * Change a final with the beginning letter of the following syllable\n     * @param beginning Beginning letter of the following syllable\n     */\n    changeFinalPtkppttkk(beginning) {\n        const sandhiTTt = this.changeFinalTTt(beginning);\n        if (sandhiTTt.length > 0)\n            return sandhiTTt;\n        const sandhiHHh = this.changeFinalHHh(beginning);\n        if (sandhiHHh.length > 0)\n            return sandhiHHh;\n        const sandhiPPp = this.changeFinalPPp(beginning);\n        if (sandhiPPp.length > 0)\n            return sandhiPPp;\n        const voicedWithMnng = this.changeWithInitialMnng(beginning);\n        if (voicedWithMnng.length > 0)\n            return voicedWithMnng;\n        const voicedWithMedial = this.changeWithMedial(beginning);\n        if (voicedWithMedial.length > 0)\n            return voicedWithMedial;\n        const voicedWithBghjl = this.changeWithInitialBghjl(beginning);\n        if (voicedWithBghjl.length > 0)\n            return voicedWithBghjl;\n    }\n    changeFinalN(initial) {\n        if (this.letters[this.letters.length - 2].name !=\n            version2_1.TonalSpellingTags.stopFinal &&\n            this.letters[this.letters.length - 2].name != version2_1.TonalSpellingTags.nasalFinal) {\n            return [];\n        }\n        if (initial.toString() === version2_1.TonalLetterTags.b &&\n            this.letters[this.letters.length - 2].toString() === version2_1.TonalLetterTags.n) {\n            // replace final n with final m\n            const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.m));\n            return [s];\n        }\n        return [];\n    }\n    voicedFinal() {\n        const fnl = collections_1.voicelessVoicedFinals.get(this.letters[this.letters.length - 2].toString());\n        if (fnl) {\n            const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundChangingMorpheme = TonalSoundChangingMorpheme;\n/** A syllable and its sound changing forms. */\nclass TonalSoundUnchangingMorpheme extends unit_1.Morpheme {\n    constructor(syllable, letters) {\n        super();\n        this.syllable = syllable;\n        this.letters = letters;\n    }\n    get lastSecondLetter() {\n        return this.letters[this.letters.length - 2].toString();\n    }\n    uninsertNasal() {\n        const ltrs = this.letters;\n        ltrs.shift();\n        return [\n            new morpheme_1.TonalSyllable(ltrs.map(it => new unit_2.AlphabeticLetter(it.characters))),\n        ];\n    }\n    toVoicelessFinal() {\n        // unvoiced\n        if (collections_1.voicedVoicelessFinals.has(this.letters[this.letters.length - 2].toString())) {\n            const fnl = collections_1.voicedVoicelessFinals.get(this.letters[this.letters.length - 2].toString());\n            if (fnl) {\n                const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n                s.replaceLetter(s.letters.length - 2, version2_1.lowerLettersTonal.get(fnl));\n                return [s];\n            }\n        }\n        return [];\n    }\n    unmutateInitialConsonant(initial) {\n        if (initial.name === version2_1.TonalSpellingTags.initial &&\n            initial.toString() === version2_1.TonalLetterTags.d) {\n            // l -> d\n            const s = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            s.replaceLetter(0, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.d));\n            return [s];\n        }\n        return [];\n    }\n    unmutateFinalConsonant(initial) {\n        if (initial.name === version2_1.TonalSpellingTags.initial &&\n            initial.toString() === version2_1.TonalLetterTags.g) {\n            // gg -> tt\n            const syl = new morpheme_1.TonalSyllable(this.letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            const idx = this.letters.findIndex(i => i.name === version2_1.TonalSpellingTags.stopFinal);\n            syl.replaceLetter(idx, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return [syl];\n        }\n        return [];\n    }\n    uninfect() {\n        const n = this.letters.filter(i => i.name === version2_1.TonalSpellingTags.nasalization);\n        if (n.length == 1) {\n            let ltrs = this.letters.filter(i => i.name !== version2_1.TonalSpellingTags.nasalization);\n            const s = new morpheme_1.TonalSyllable(ltrs.map(it => new unit_2.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.TonalSoundUnchangingMorpheme = TonalSoundUnchangingMorpheme;\nclass TonalCombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor(tsm) {\n        super();\n        this.metaplasm = tsm;\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(msp) {\n        const tcm = new TonalCombiningMorpheme(new morpheme_1.TonalSyllable(msp.letters), msp.pattern, this.metaplasm);\n        return tcm;\n    }\n    postprocess(patterns) {\n        let morphemes = this.createMorphemes();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalCombiningMorphemeMaker = TonalCombiningMorphemeMaker;\nclass TonalSoundChangingMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundChangingMorpheme(new morpheme_1.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        let morphemes = this.createMorphemes();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundChangingMorphemeMaker = TonalSoundChangingMorphemeMaker;\nclass TonalSoundUnchangingMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(match) {\n        const tcm = new TonalSoundUnchangingMorpheme(new morpheme_1.TonalSyllable(match.letters), match.pattern);\n        return tcm;\n    }\n    postprocess(matches) {\n        let morphemes = this.createMorphemes();\n        for (let i in matches) {\n            morphemes.push(this.createMorpheme(matches[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, morpheme_1.syllabifyTonal);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.TonalSoundUnchangingMorphemeMaker = TonalSoundUnchangingMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/mutator.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/mutator.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mutateFinalOfPrecedingWord = exports.mutateFinalOfPrecedingSyllable = exports.mutateInitialOfFollowingSyllable = void 0;\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ./phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nfunction getNoMutation(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_2.TonalZeroMutationMetaplasm());\n    return lx;\n}\n/** Mutates the initial of the following syllable. */\nfunction mutateInitialOfFollowingSyllable(word) {\n    const ms = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(ms, new metaplasm_1.ConsonantMutation());\n    return lx;\n}\nexports.mutateInitialOfFollowingSyllable = mutateInitialOfFollowingSyllable;\n/** Mutates the final of the preceding syllable. */\nfunction mutateFinalOfPrecedingSyllable(word) {\n    const mrphs = analyzer_1.morphAnalyzeChanging(word);\n    const lx = new lexeme_1.TonalMutationLexeme(mrphs, new metaplasm_1.FinalConsonantMutationInternal());\n    return lx;\n}\nexports.mutateFinalOfPrecedingSyllable = mutateFinalOfPrecedingSyllable;\n/** Mutates the final of the preceding word. */\nfunction mutateFinalOfPrecedingWord(preceding, following) {\n    const lxPreceding = getNoMutation(preceding);\n    const lxFollowing = getNoMutation(following);\n    const phmk = new phraseme_1.TonalMutationPhrasemeMaker();\n    return phmk.makePhraseme(lxPreceding, lxFollowing, new metaplasm_1.FinalConsonantMutationExternal());\n}\nexports.mutateFinalOfPrecedingWord = mutateFinalOfPrecedingWord;\n//# sourceMappingURL=mutator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL211dGF0b3IuanM/ZjI3ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsNERBQVU7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsa0VBQWE7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUMsbUJBQW1CLG1CQUFPLENBQUMsZ0VBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2RwYXJzZXIvbXV0YXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tdXRhdGVGaW5hbE9mUHJlY2VkaW5nV29yZCA9IGV4cG9ydHMubXV0YXRlRmluYWxPZlByZWNlZGluZ1N5bGxhYmxlID0gZXhwb3J0cy5tdXRhdGVJbml0aWFsT2ZGb2xsb3dpbmdTeWxsYWJsZSA9IHZvaWQgMDtcbmNvbnN0IGxleGVtZV8xID0gcmVxdWlyZShcIi4vbGV4ZW1lXCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL2FuYWx5emVyXCIpO1xuY29uc3QgbWV0YXBsYXNtXzEgPSByZXF1aXJlKFwiLi9tZXRhcGxhc21cIik7XG5jb25zdCBtZXRhcGxhc21fMiA9IHJlcXVpcmUoXCIuLi9tZXRhcGxhc21cIik7XG5jb25zdCBwaHJhc2VtZV8xID0gcmVxdWlyZShcIi4vcGhyYXNlbWVcIik7XG5mdW5jdGlvbiBnZXROb011dGF0aW9uKHdvcmQpIHtcbiAgICBjb25zdCBtcnBocyA9IGFuYWx5emVyXzEubW9ycGhBbmFseXplQ2hhbmdpbmcod29yZCk7XG4gICAgY29uc3QgbHggPSBuZXcgbGV4ZW1lXzEuVG9uYWxNdXRhdGlvbkxleGVtZShtcnBocywgbmV3IG1ldGFwbGFzbV8yLlRvbmFsWmVyb011dGF0aW9uTWV0YXBsYXNtKCkpO1xuICAgIHJldHVybiBseDtcbn1cbi8qKiBNdXRhdGVzIHRoZSBpbml0aWFsIG9mIHRoZSBmb2xsb3dpbmcgc3lsbGFibGUuICovXG5mdW5jdGlvbiBtdXRhdGVJbml0aWFsT2ZGb2xsb3dpbmdTeWxsYWJsZSh3b3JkKSB7XG4gICAgY29uc3QgbXMgPSBhbmFseXplcl8xLm1vcnBoQW5hbHl6ZUNoYW5naW5nKHdvcmQpO1xuICAgIGNvbnN0IGx4ID0gbmV3IGxleGVtZV8xLlRvbmFsTXV0YXRpb25MZXhlbWUobXMsIG5ldyBtZXRhcGxhc21fMS5Db25zb25hbnRNdXRhdGlvbigpKTtcbiAgICByZXR1cm4gbHg7XG59XG5leHBvcnRzLm11dGF0ZUluaXRpYWxPZkZvbGxvd2luZ1N5bGxhYmxlID0gbXV0YXRlSW5pdGlhbE9mRm9sbG93aW5nU3lsbGFibGU7XG4vKiogTXV0YXRlcyB0aGUgZmluYWwgb2YgdGhlIHByZWNlZGluZyBzeWxsYWJsZS4gKi9cbmZ1bmN0aW9uIG11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdTeWxsYWJsZSh3b3JkKSB7XG4gICAgY29uc3QgbXJwaHMgPSBhbmFseXplcl8xLm1vcnBoQW5hbHl6ZUNoYW5naW5nKHdvcmQpO1xuICAgIGNvbnN0IGx4ID0gbmV3IGxleGVtZV8xLlRvbmFsTXV0YXRpb25MZXhlbWUobXJwaHMsIG5ldyBtZXRhcGxhc21fMS5GaW5hbENvbnNvbmFudE11dGF0aW9uSW50ZXJuYWwoKSk7XG4gICAgcmV0dXJuIGx4O1xufVxuZXhwb3J0cy5tdXRhdGVGaW5hbE9mUHJlY2VkaW5nU3lsbGFibGUgPSBtdXRhdGVGaW5hbE9mUHJlY2VkaW5nU3lsbGFibGU7XG4vKiogTXV0YXRlcyB0aGUgZmluYWwgb2YgdGhlIHByZWNlZGluZyB3b3JkLiAqL1xuZnVuY3Rpb24gbXV0YXRlRmluYWxPZlByZWNlZGluZ1dvcmQocHJlY2VkaW5nLCBmb2xsb3dpbmcpIHtcbiAgICBjb25zdCBseFByZWNlZGluZyA9IGdldE5vTXV0YXRpb24ocHJlY2VkaW5nKTtcbiAgICBjb25zdCBseEZvbGxvd2luZyA9IGdldE5vTXV0YXRpb24oZm9sbG93aW5nKTtcbiAgICBjb25zdCBwaG1rID0gbmV3IHBocmFzZW1lXzEuVG9uYWxNdXRhdGlvblBocmFzZW1lTWFrZXIoKTtcbiAgICByZXR1cm4gcGhtay5tYWtlUGhyYXNlbWUobHhQcmVjZWRpbmcsIGx4Rm9sbG93aW5nLCBuZXcgbWV0YXBsYXNtXzEuRmluYWxDb25zb25hbnRNdXRhdGlvbkV4dGVybmFsKCkpO1xufVxuZXhwb3J0cy5tdXRhdGVGaW5hbE9mUHJlY2VkaW5nV29yZCA9IG11dGF0ZUZpbmFsT2ZQcmVjZWRpbmdXb3JkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRvci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/mutator.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/phraseme.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/phraseme.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalUnmutationPhrasemeMaker = exports.TonalUnmutationPhraseme = exports.TonalMutationPhrasemeMaker = exports.TonalMutationPhraseme = exports.TonalUninfectionPhrasemeMaker = exports.TonalUninfectionPhraseme = exports.TonalInfectionPhrasemeMaker = exports.TonalInfectionPhraseme = exports.TonalUninsertionPhrasemeMaker = exports.TonalUninsertionPhraseme = exports.TonalInsertionPhrasemeMaker = exports.TonalInsertionPhraseme = exports.TonalInflectionPhrasemeMaker = exports.SerialPhraseme = exports.TonalMainParticlePhraseme = exports.TonalCompoundPhraseme = exports.PhrasalVerbVppPhraseme = exports.PhrasalVerbPhraseme = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nconst phraseme_1 = __webpack_require__(/*! ../tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\n/** A phrase of length 2 and its inflected forms. */\nclass PhrasalVerbPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([verb.word, particle.word]);\n        this.forms = metaplasm.apply(verb, particle);\n    }\n    /** Returns proceeding forms or participle forms */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbPhraseme = PhrasalVerbPhraseme;\n/** A phrase of length 3 and its inflected forms. */\nclass PhrasalVerbVppPhraseme extends unit_1.Phraseme {\n    constructor(verb, particle, particleTwo, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([verb.word, particle.word, particleTwo.word]);\n        this.forms = metaplasm.applyVpp(verb, particle, particleTwo);\n    }\n    /** Returns proceeding forms, participle forms, or transitive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.PhrasalVerbVppPhraseme = PhrasalVerbVppPhraseme;\n/** A compound. */\nclass TonalCompoundPhraseme extends unit_1.Phraseme {\n    /** Separable phrasal verb. Separate compound verb. Separable verb. Tiapwsux gifchongwguy. Tiapwsux gifsiannzguy. Adverb + verb. Prepositional verb. */\n    constructor(preceding, following) {\n        super();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.getForms()[0], following.word]);\n    }\n}\nexports.TonalCompoundPhraseme = TonalCompoundPhraseme;\n/** A phrase and its inflected forms. */\nclass TonalMainParticlePhraseme extends unit_1.Phraseme {\n    /** E-adjective. Le form. Terminal form of possesive case. */\n    constructor(main, particle, metaplasm) {\n        super();\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([main.word, particle.word]);\n        this.forms = metaplasm.apply(main, particle);\n    }\n    /** Returns adnominal forms or conjunctive forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMainParticlePhraseme = TonalMainParticlePhraseme;\n/** A phrase and its proceeding forms. */\nclass SerialPhraseme extends unit_1.Phraseme {\n    /** A series of lexemes. */\n    constructor(lexemes) {\n        super();\n        this.forms = new Array();\n        // the base form is equivalent to a compound when there are only 2 words\n        const words = [];\n        for (let i = 0; i < lexemes.length - 1; i++) {\n            if (lexemes[i].getForms().length > 0 && lexemes[i].getForms()[0]) {\n                words.push(lexemes[i].getForms()[0]);\n            }\n        }\n        if (lexemes[lexemes.length - 1] &&\n            lexemes[lexemes.length - 1].word.literal.length > 0) {\n            words.push(lexemes[lexemes.length - 1].word);\n        }\n        this.phrase = new phraseme_1.TonalPhrase(words);\n        const forms = lexemes\n            .filter(it => it.getForms().length > 0 && it.getForms()[0])\n            .map(it => it.getForms()[0]);\n        if (forms.length > 0)\n            this.forms = [new phraseme_1.TonalPhrase(forms)];\n        else\n            this.forms = [];\n    }\n    /** Returna a series of inflected words. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.SerialPhraseme = SerialPhraseme;\nclass TonalInflectionPhrasemeMaker {\n    makePhrasalVerbPhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToProceeding());\n    }\n    makePhrasalVerbVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToProceeding());\n    }\n    makeTransitiveVppPhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToTransitive());\n    }\n    makeCompoundPhraseme(preceding, following) {\n        return new TonalCompoundPhraseme(preceding, following);\n    }\n    makeAdjectivePhraseme(adjectivalNoun, e) {\n        return new TonalMainParticlePhraseme(adjectivalNoun, e, new metaplasm_1.Adnominal());\n    }\n    makeConjunctivePhraseme(verb, le) {\n        return new TonalMainParticlePhraseme(verb, le, new metaplasm_1.Conjunctive());\n    }\n    makePossesivePhraseme(noun, ex) {\n        return new TonalMainParticlePhraseme(noun, ex, new metaplasm_1.Adnominal());\n    }\n    makeParticiplePhraseme(verb, particle) {\n        return new PhrasalVerbPhraseme(verb, particle, new metaplasm_1.ConjugateToParticiple());\n    }\n    makeVppParticiplePhraseme(verb, particle, particleTwo) {\n        return new PhrasalVerbVppPhraseme(verb, particle, particleTwo, new metaplasm_1.ConjugateVppToParticiple());\n    }\n    makeSerialPhraseme(lexemes) {\n        return new SerialPhraseme(lexemes);\n    }\n}\nexports.TonalInflectionPhrasemeMaker = TonalInflectionPhrasemeMaker;\nclass TonalInsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns inserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInsertionPhraseme = TonalInsertionPhraseme;\nclass TonalInsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInsertionPhrasemeMaker = TonalInsertionPhrasemeMaker;\nclass TonalUninsertionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninserted forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninsertionPhraseme = TonalUninsertionPhraseme;\nclass TonalUninsertionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninsertionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninsertionPhrasemeMaker = TonalUninsertionPhrasemeMaker;\nclass TonalInfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns infected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalInfectionPhraseme = TonalInfectionPhraseme;\nclass TonalInfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalInfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalInfectionPhrasemeMaker = TonalInfectionPhrasemeMaker;\nclass TonalUninfectionPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns uninfected forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUninfectionPhraseme = TonalUninfectionPhraseme;\nclass TonalUninfectionPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUninfectionPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUninfectionPhrasemeMaker = TonalUninfectionPhrasemeMaker;\n/** A phrase and its mutated form. */\nclass TonalMutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns mutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalMutationPhraseme = TonalMutationPhraseme;\nclass TonalMutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalMutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalMutationPhrasemeMaker = TonalMutationPhrasemeMaker;\n/** A phrase and its unmutated form. */\nclass TonalUnmutationPhraseme {\n    constructor(preceding, following, metaplasm) {\n        this.forms = new Array();\n        this.phrase = new phraseme_1.TonalPhrase([preceding.word, following.word]);\n        this.forms = metaplasm.apply(preceding, following);\n    }\n    /** Returns unmutated forms. */\n    getForms() {\n        return this.forms;\n    }\n}\nexports.TonalUnmutationPhraseme = TonalUnmutationPhraseme;\nclass TonalUnmutationPhrasemeMaker {\n    makePhraseme(preceding, following, metaplasm) {\n        return new TonalUnmutationPhraseme(preceding, following, metaplasm);\n    }\n}\nexports.TonalUnmutationPhrasemeMaker = TonalUnmutationPhrasemeMaker;\n//# sourceMappingURL=phraseme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/phraseme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/rules.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/rules.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Rules = exports.SetOfSmallClauses = exports.SeparateCompoundVerbs = exports.PhrasalVerbs = exports.VerbWithEnclitic = exports.PhrasalVerbWithEnclitic = exports.PhrasalVerb = exports.ConstructionOfPhrase = void 0;\nconst keywords_1 = __webpack_require__(/*! ./keywords */ \"./node_modules/taipa/lib/dparser/keywords.js\");\nconst symbols_1 = __webpack_require__(/*! ./symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst inflector_1 = __webpack_require__(/*! ./inflector */ \"./node_modules/taipa/lib/dparser/inflector.js\");\nconst visitor_1 = __webpack_require__(/*! ./visitor */ \"./node_modules/taipa/lib/dparser/visitor.js\");\nconst dictionary_1 = __webpack_require__(/*! ./dictionary */ \"./node_modules/taipa/lib/dparser/dictionary.js\");\nconst creator_1 = __webpack_require__(/*! ./creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\n/** Construction of a phrase. */\nclass ConstructionOfPhrase {\n    constructor(arr) {\n        /** Part-of-speech of this phrase. */\n        this.pos = '';\n        /** Construction elements of this phrase. */\n        this.elements = new Array();\n        for (let key in arr) {\n            this.elements.push(arr[key]);\n        }\n    }\n}\nexports.ConstructionOfPhrase = ConstructionOfPhrase;\nclass PhrasalVerb extends ConstructionOfPhrase {\n    constructor(arr) {\n        super(arr);\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nexports.PhrasalVerb = PhrasalVerb;\nclass VerbPhrase extends ConstructionOfPhrase {\n    constructor() {\n        super([]);\n        this.pos = symbols_1.POSTags.verb;\n    }\n}\nclass PrepositionPhrase extends ConstructionOfPhrase {\n}\nclass NounPhrase extends ConstructionOfPhrase {\n}\nclass PhrasalVerbWithEnclitic extends VerbPhrase {\n    constructor(verb, particle, enclitic) {\n        super();\n        verb.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb);\n        particle.tag = symbols_1.Tagset.ppv;\n        this.elements.push(particle);\n        enclitic.tag = symbols_1.Tagset.psub;\n        this.elements.push(enclitic);\n    }\n}\nexports.PhrasalVerbWithEnclitic = PhrasalVerbWithEnclitic;\nclass VerbWithEnclitic extends VerbPhrase {\n    constructor(verb, enclitic) {\n        super();\n        verb.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb);\n        enclitic.tag = symbols_1.Tagset.psub;\n        this.elements.push(enclitic);\n    }\n}\nexports.VerbWithEnclitic = VerbWithEnclitic;\nclass PhrasalVerbs {\n    constructor() {\n        this.phvbs = new Array();\n        this.populatePhrasemes();\n    }\n    populatePhrasemes() {\n        dictionary_1.dictOfPhrasalVerbs\n            .map(it => inflector_1.inflectToProceeding(it[0], it[1]))\n            .map(it => {\n            const ol = new visitor_1.OrthoPhraseme();\n            ol.form = it.phrase.words[0].literal + ' ' + it.phrase.words[1].literal;\n            ol.inflected.push(it.getForms()[0].words[0].literal +\n                ' ' +\n                it.getForms()[0].words[1].literal);\n            this.phvbs.push(ol);\n        });\n        dictionary_1.dictOfPhrasalVerbTwos\n            .map(it => inflector_1.inflectVppToProceeding(it[0], it[1], it[2]))\n            .map(it => {\n            const ol = new visitor_1.OrthoPhraseme();\n            ol.form =\n                it.phrase.words[0].literal +\n                    ' ' +\n                    it.phrase.words[1].literal +\n                    ' ' +\n                    it.phrase.words[2].literal;\n            ol.inflected.push(it.getForms()[0].words[0].literal +\n                ' ' +\n                it.getForms()[0].words[1].literal +\n                ' ' +\n                it.getForms()[0].words[2].literal);\n            this.phvbs.push(ol);\n        });\n    }\n    match(sequence) {\n        // match any form, return the base one\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.phvbs.filter(it => it.accept(v, sequence));\n        if (arr.length > 0)\n            return arr[0].form;\n        return '';\n    }\n}\nexports.PhrasalVerbs = PhrasalVerbs;\nclass SeparateCompoundVerbs {\n    constructor() {\n        this.compounds = new Array();\n        this.populatePhrasemes();\n    }\n    populatePhrasemes() {\n        dictionary_1.dictOfSeperateVVCompounds.map(it => {\n            const oe = new visitor_1.OrthoPhraseme();\n            oe.form = it[0] + ' ' + it[1];\n            oe.inflected.push(creator_1.createCompoundPhraseme(it[0], it[1]).phrase.literal);\n            this.compounds.push(oe);\n        });\n    }\n    matchHead(head) {\n        const v = new visitor_1.VisitorMatching();\n        const arr = this.compounds\n            .map(it => {\n            const oe = new visitor_1.OrthoCompoundHead();\n            // assign the inflected form to oe\n            oe.form = it.inflected[0];\n            return oe;\n        })\n            .filter(it => it.accept(v, head));\n        if (arr.length > 0 && arr[0])\n            return arr[0].form.split(' ')[1];\n        return '';\n    }\n}\nexports.SeparateCompoundVerbs = SeparateCompoundVerbs;\nclass SmallClause extends VerbPhrase {\n    constructor(verb1, pronoun, verb2) {\n        super();\n        verb1.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb1);\n        pronoun.tag = symbols_1.Tagset.npr;\n        this.elements.push(pronoun);\n        verb2.tag = symbols_1.Tagset.vb;\n        this.elements.push(verb2);\n    }\n}\nclass SetOfSmallClauses {\n    constructor() {\n        this.constructions = [];\n        // obj. xcomp.\n        const sc = new SmallClause(new keywords_1.VerbElement('oannw'), new keywords_1.PersonalPronounElement('goa'), new keywords_1.VerbElement('churw'));\n        this.constructions.push(sc);\n    }\n}\nexports.SetOfSmallClauses = SetOfSmallClauses;\nclass Rules {\n    constructor() {\n        this.phrases = new Array();\n        this.keyWords = new keywords_1.KeyWords();\n        this.populatePatterns();\n    }\n    lookupDictionary(str) {\n        let phr;\n        if (dictionary_1.dictOfVerbs.includes(str)) {\n            let vs = new keywords_1.VerbElement(str);\n            if (vs.pos === symbols_1.POSTags.verb)\n                vs.tag = symbols_1.Tagset.vb;\n            phr = [new ConstructionOfPhrase([])];\n            phr[0].elements.push(vs);\n            phr[0].pos = symbols_1.POSTags.verb;\n            return phr;\n        }\n        return undefined;\n    }\n    lookupRules(sequence) {\n        const pvbs = new PhrasalVerbs();\n        if ((sequence.length == 2 && pvbs.match(sequence) != '') ||\n            pvbs.match([sequence[0], sequence[1]])) {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                ]),\n            ];\n        }\n        if (sequence.length == 3 && pvbs.match(sequence) != '') {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                    new keywords_1.ParticleElement(sequence[2]),\n                ]),\n            ];\n        }\n        if (sequence.length > 3 &&\n            pvbs.match([sequence[0], sequence[1], sequence[2]]) != '') {\n            return [\n                new PhrasalVerb([\n                    new keywords_1.VerbElement(sequence[0]),\n                    new keywords_1.ParticleElement(sequence[1]),\n                    new keywords_1.ParticleElement(sequence[2]),\n                ]),\n            ];\n        }\n        return [];\n    }\n    matchKeyWords(str) {\n        const ce1 = this.keyWords.matchWords(str);\n        if (ce1.orth.length > 0) {\n            return ce1;\n        }\n        const ce2 = this.keyWords.matchLexemes(str);\n        if (ce2.orth.length > 0) {\n            return ce2;\n        }\n    }\n    seperateMatches(str) {\n        const compounds = new SeparateCompoundVerbs();\n        const ptcl = compounds.matchHead(str);\n        if (ptcl)\n            return ptcl;\n    }\n    matches(sequence) {\n        const phrD = this.lookupDictionary(sequence[0]);\n        const phrR = this.lookupRules(sequence);\n        if (phrR && phrR.length > 0)\n            return phrR;\n        else if (phrD)\n            return phrD;\n        return undefined;\n    }\n    populatePatterns() {\n        this.phrases.push([new SetOfSmallClauses().constructions[0]]);\n    }\n}\nexports.Rules = Rules;\n//# sourceMappingURL=rules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/rules.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/symbols.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/symbols.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PronType = exports.Tagset = exports.DependencyLabels = exports.POSTags = void 0;\nvar POSTags;\n(function (POSTags) {\n    /*\n        Universal POS tags\n        https://universaldependencies.org/u/pos/\n      */\n    POSTags[\"adjective\"] = \"ADJ\";\n    POSTags[\"adposition\"] = \"ADP\";\n    POSTags[\"adverb\"] = \"ADV\";\n    POSTags[\"auxiliary\"] = \"AUX\";\n    POSTags[\"conjunction\"] = \"CONJ\";\n    POSTags[\"coordinatingConjunction\"] = \"CCONJ\";\n    POSTags[\"determiner\"] = \"DET\";\n    POSTags[\"interjection\"] = \"INTJ\";\n    POSTags[\"noun\"] = \"NOUN\";\n    POSTags[\"number\"] = \"NUM\";\n    POSTags[\"particle\"] = \"PART\";\n    POSTags[\"pronoun\"] = \"PRON\";\n    POSTags[\"properNoun\"] = \"PROPN\";\n    POSTags[\"punctuation\"] = \"PUNCT\";\n    POSTags[\"subordinatingConjunction\"] = \"SCONJ\";\n    POSTags[\"symbol\"] = \"SYM\";\n    POSTags[\"verb\"] = \"VERB\";\n    POSTags[\"other\"] = \"X\";\n})(POSTags = exports.POSTags || (exports.POSTags = {}));\nvar DependencyLabels;\n(function (DependencyLabels) {\n    /*\n        Universal Dependencies\n        https://universaldependencies.org/u/dep/all.html\n      */\n    DependencyLabels[\"acl\"] = \"acl\";\n    DependencyLabels[\"advcl\"] = \"advcl\";\n    DependencyLabels[\"amod\"] = \"amod\";\n    DependencyLabels[\"advmod\"] = \"advmod\";\n    DependencyLabels[\"aux\"] = \"aux\";\n    DependencyLabels[\"auxCaus\"] = \"aux:caus\";\n    DependencyLabels[\"case\"] = \"case\";\n    DependencyLabels[\"ccomp\"] = \"ccomp\";\n    DependencyLabels[\"compound\"] = \"compound\";\n    DependencyLabels[\"compoundPrt\"] = \"compound:prt\";\n    // comooundSvc = 'compound:svc', // serial verbs\n    DependencyLabels[\"cop\"] = \"cop\";\n    DependencyLabels[\"csubj\"] = \"csubj\";\n    DependencyLabels[\"det\"] = \"det\";\n    DependencyLabels[\"dislocated\"] = \"dislocated\";\n    DependencyLabels[\"fix\"] = \"fix\";\n    DependencyLabels[\"flat\"] = \"flat\";\n    DependencyLabels[\"obj\"] = \"obj\";\n    DependencyLabels[\"iobj\"] = \"iobj\";\n    DependencyLabels[\"iobjAgent\"] = \"iobj:agent\";\n    DependencyLabels[\"mark\"] = \"mark\";\n    DependencyLabels[\"nmod\"] = \"nmod\";\n    DependencyLabels[\"nobj\"] = \"nobj\";\n    DependencyLabels[\"nsubj\"] = \"nsubj\";\n    DependencyLabels[\"nsubjCaus\"] = \"nsubj:caus\";\n    DependencyLabels[\"obl\"] = \"obl\";\n    DependencyLabels[\"prt\"] = \"prt\";\n    DependencyLabels[\"root\"] = \"root\";\n    DependencyLabels[\"xcomp\"] = \"xcomp\";\n})(DependencyLabels = exports.DependencyLabels || (exports.DependencyLabels = {}));\nvar Tagset;\n(function (Tagset) {\n    Tagset[\"aux\"] = \"AUX\";\n    Tagset[\"adj\"] = \"ADJ\";\n    Tagset[\"adnom\"] = \"ADNOM\";\n    Tagset[\"adv\"] = \"ADV\";\n    Tagset[\"appr\"] = \"APPR\";\n    Tagset[\"appo\"] = \"APPO\";\n    Tagset[\"cl\"] = \"CL\";\n    Tagset[\"conj\"] = \"CONJ\";\n    Tagset[\"fil\"] = \"FIL\";\n    Tagset[\"intj\"] = \"INTJ\";\n    Tagset[\"nn\"] = \"NN\";\n    Tagset[\"nnp\"] = \"NNP\";\n    Tagset[\"npr\"] = \"NPR\";\n    Tagset[\"num\"] = \"NUM\";\n    Tagset[\"nv\"] = \"NV\";\n    Tagset[\"nadj\"] = \"NADJ\";\n    Tagset[\"nadv\"] = \"NADV\";\n    Tagset[\"par\"] = \"PAR\";\n    Tagset[\"pcs\"] = \"PCS\";\n    Tagset[\"pco\"] = \"PCO\";\n    Tagset[\"pcj\"] = \"PCJ\";\n    Tagset[\"pend\"] = \"PEND\";\n    Tagset[\"padv\"] = \"PADV\";\n    Tagset[\"ppv\"] = \"PPV\";\n    Tagset[\"psub\"] = \"PSUB\";\n    Tagset[\"pnc\"] = \"PNC\";\n    Tagset[\"px\"] = \"PX\";\n    Tagset[\"sx\"] = \"SX\";\n    Tagset[\"sym\"] = \"SYM\";\n    Tagset[\"vb\"] = \"VB\";\n})(Tagset = exports.Tagset || (exports.Tagset = {}));\nvar PronType;\n(function (PronType) {\n    /*\n        pronominal types\n        https://universaldependencies.org/u/feat/PronType.html\n      */\n    PronType[\"dem\"] = \"Dem\";\n    PronType[\"prs\"] = \"Prs\";\n    PronType[\"rel\"] = \"Rel\";\n})(PronType = exports.PronType || (exports.PronType = {}));\n//# sourceMappingURL=symbols.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL3N5bWJvbHMuanM/NTBiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0VBQStFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlEQUFpRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVEQUF1RDtBQUN4RCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci9zeW1ib2xzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb25UeXBlID0gZXhwb3J0cy5UYWdzZXQgPSBleHBvcnRzLkRlcGVuZGVuY3lMYWJlbHMgPSBleHBvcnRzLlBPU1RhZ3MgPSB2b2lkIDA7XG52YXIgUE9TVGFncztcbihmdW5jdGlvbiAoUE9TVGFncykge1xuICAgIC8qXG4gICAgICAgIFVuaXZlcnNhbCBQT1MgdGFnc1xuICAgICAgICBodHRwczovL3VuaXZlcnNhbGRlcGVuZGVuY2llcy5vcmcvdS9wb3MvXG4gICAgICAqL1xuICAgIFBPU1RhZ3NbXCJhZGplY3RpdmVcIl0gPSBcIkFESlwiO1xuICAgIFBPU1RhZ3NbXCJhZHBvc2l0aW9uXCJdID0gXCJBRFBcIjtcbiAgICBQT1NUYWdzW1wiYWR2ZXJiXCJdID0gXCJBRFZcIjtcbiAgICBQT1NUYWdzW1wiYXV4aWxpYXJ5XCJdID0gXCJBVVhcIjtcbiAgICBQT1NUYWdzW1wiY29uanVuY3Rpb25cIl0gPSBcIkNPTkpcIjtcbiAgICBQT1NUYWdzW1wiY29vcmRpbmF0aW5nQ29uanVuY3Rpb25cIl0gPSBcIkNDT05KXCI7XG4gICAgUE9TVGFnc1tcImRldGVybWluZXJcIl0gPSBcIkRFVFwiO1xuICAgIFBPU1RhZ3NbXCJpbnRlcmplY3Rpb25cIl0gPSBcIklOVEpcIjtcbiAgICBQT1NUYWdzW1wibm91blwiXSA9IFwiTk9VTlwiO1xuICAgIFBPU1RhZ3NbXCJudW1iZXJcIl0gPSBcIk5VTVwiO1xuICAgIFBPU1RhZ3NbXCJwYXJ0aWNsZVwiXSA9IFwiUEFSVFwiO1xuICAgIFBPU1RhZ3NbXCJwcm9ub3VuXCJdID0gXCJQUk9OXCI7XG4gICAgUE9TVGFnc1tcInByb3Blck5vdW5cIl0gPSBcIlBST1BOXCI7XG4gICAgUE9TVGFnc1tcInB1bmN0dWF0aW9uXCJdID0gXCJQVU5DVFwiO1xuICAgIFBPU1RhZ3NbXCJzdWJvcmRpbmF0aW5nQ29uanVuY3Rpb25cIl0gPSBcIlNDT05KXCI7XG4gICAgUE9TVGFnc1tcInN5bWJvbFwiXSA9IFwiU1lNXCI7XG4gICAgUE9TVGFnc1tcInZlcmJcIl0gPSBcIlZFUkJcIjtcbiAgICBQT1NUYWdzW1wib3RoZXJcIl0gPSBcIlhcIjtcbn0pKFBPU1RhZ3MgPSBleHBvcnRzLlBPU1RhZ3MgfHwgKGV4cG9ydHMuUE9TVGFncyA9IHt9KSk7XG52YXIgRGVwZW5kZW5jeUxhYmVscztcbihmdW5jdGlvbiAoRGVwZW5kZW5jeUxhYmVscykge1xuICAgIC8qXG4gICAgICAgIFVuaXZlcnNhbCBEZXBlbmRlbmNpZXNcbiAgICAgICAgaHR0cHM6Ly91bml2ZXJzYWxkZXBlbmRlbmNpZXMub3JnL3UvZGVwL2FsbC5odG1sXG4gICAgICAqL1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhY2xcIl0gPSBcImFjbFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhZHZjbFwiXSA9IFwiYWR2Y2xcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiYW1vZFwiXSA9IFwiYW1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhZHZtb2RcIl0gPSBcImFkdm1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhdXhcIl0gPSBcImF1eFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJhdXhDYXVzXCJdID0gXCJhdXg6Y2F1c1wiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjYXNlXCJdID0gXCJjYXNlXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcImNjb21wXCJdID0gXCJjY29tcFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjb21wb3VuZFwiXSA9IFwiY29tcG91bmRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiY29tcG91bmRQcnRcIl0gPSBcImNvbXBvdW5kOnBydFwiO1xuICAgIC8vIGNvbW9vdW5kU3ZjID0gJ2NvbXBvdW5kOnN2YycsIC8vIHNlcmlhbCB2ZXJic1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjb3BcIl0gPSBcImNvcFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJjc3VialwiXSA9IFwiY3N1YmpcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiZGV0XCJdID0gXCJkZXRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiZGlzbG9jYXRlZFwiXSA9IFwiZGlzbG9jYXRlZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJmaXhcIl0gPSBcImZpeFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJmbGF0XCJdID0gXCJmbGF0XCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm9ialwiXSA9IFwib2JqXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcImlvYmpcIl0gPSBcImlvYmpcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wiaW9iakFnZW50XCJdID0gXCJpb2JqOmFnZW50XCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm1hcmtcIl0gPSBcIm1hcmtcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wibm1vZFwiXSA9IFwibm1vZFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJub2JqXCJdID0gXCJub2JqXCI7XG4gICAgRGVwZW5kZW5jeUxhYmVsc1tcIm5zdWJqXCJdID0gXCJuc3VialwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJuc3ViakNhdXNcIl0gPSBcIm5zdWJqOmNhdXNcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wib2JsXCJdID0gXCJvYmxcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wicHJ0XCJdID0gXCJwcnRcIjtcbiAgICBEZXBlbmRlbmN5TGFiZWxzW1wicm9vdFwiXSA9IFwicm9vdFwiO1xuICAgIERlcGVuZGVuY3lMYWJlbHNbXCJ4Y29tcFwiXSA9IFwieGNvbXBcIjtcbn0pKERlcGVuZGVuY3lMYWJlbHMgPSBleHBvcnRzLkRlcGVuZGVuY3lMYWJlbHMgfHwgKGV4cG9ydHMuRGVwZW5kZW5jeUxhYmVscyA9IHt9KSk7XG52YXIgVGFnc2V0O1xuKGZ1bmN0aW9uIChUYWdzZXQpIHtcbiAgICBUYWdzZXRbXCJhdXhcIl0gPSBcIkFVWFwiO1xuICAgIFRhZ3NldFtcImFkalwiXSA9IFwiQURKXCI7XG4gICAgVGFnc2V0W1wiYWRub21cIl0gPSBcIkFETk9NXCI7XG4gICAgVGFnc2V0W1wiYWR2XCJdID0gXCJBRFZcIjtcbiAgICBUYWdzZXRbXCJhcHByXCJdID0gXCJBUFBSXCI7XG4gICAgVGFnc2V0W1wiYXBwb1wiXSA9IFwiQVBQT1wiO1xuICAgIFRhZ3NldFtcImNsXCJdID0gXCJDTFwiO1xuICAgIFRhZ3NldFtcImNvbmpcIl0gPSBcIkNPTkpcIjtcbiAgICBUYWdzZXRbXCJmaWxcIl0gPSBcIkZJTFwiO1xuICAgIFRhZ3NldFtcImludGpcIl0gPSBcIklOVEpcIjtcbiAgICBUYWdzZXRbXCJublwiXSA9IFwiTk5cIjtcbiAgICBUYWdzZXRbXCJubnBcIl0gPSBcIk5OUFwiO1xuICAgIFRhZ3NldFtcIm5wclwiXSA9IFwiTlBSXCI7XG4gICAgVGFnc2V0W1wibnVtXCJdID0gXCJOVU1cIjtcbiAgICBUYWdzZXRbXCJudlwiXSA9IFwiTlZcIjtcbiAgICBUYWdzZXRbXCJuYWRqXCJdID0gXCJOQURKXCI7XG4gICAgVGFnc2V0W1wibmFkdlwiXSA9IFwiTkFEVlwiO1xuICAgIFRhZ3NldFtcInBhclwiXSA9IFwiUEFSXCI7XG4gICAgVGFnc2V0W1wicGNzXCJdID0gXCJQQ1NcIjtcbiAgICBUYWdzZXRbXCJwY29cIl0gPSBcIlBDT1wiO1xuICAgIFRhZ3NldFtcInBjalwiXSA9IFwiUENKXCI7XG4gICAgVGFnc2V0W1wicGVuZFwiXSA9IFwiUEVORFwiO1xuICAgIFRhZ3NldFtcInBhZHZcIl0gPSBcIlBBRFZcIjtcbiAgICBUYWdzZXRbXCJwcHZcIl0gPSBcIlBQVlwiO1xuICAgIFRhZ3NldFtcInBzdWJcIl0gPSBcIlBTVUJcIjtcbiAgICBUYWdzZXRbXCJwbmNcIl0gPSBcIlBOQ1wiO1xuICAgIFRhZ3NldFtcInB4XCJdID0gXCJQWFwiO1xuICAgIFRhZ3NldFtcInN4XCJdID0gXCJTWFwiO1xuICAgIFRhZ3NldFtcInN5bVwiXSA9IFwiU1lNXCI7XG4gICAgVGFnc2V0W1widmJcIl0gPSBcIlZCXCI7XG59KShUYWdzZXQgPSBleHBvcnRzLlRhZ3NldCB8fCAoZXhwb3J0cy5UYWdzZXQgPSB7fSkpO1xudmFyIFByb25UeXBlO1xuKGZ1bmN0aW9uIChQcm9uVHlwZSkge1xuICAgIC8qXG4gICAgICAgIHByb25vbWluYWwgdHlwZXNcbiAgICAgICAgaHR0cHM6Ly91bml2ZXJzYWxkZXBlbmRlbmNpZXMub3JnL3UvZmVhdC9Qcm9uVHlwZS5odG1sXG4gICAgICAqL1xuICAgIFByb25UeXBlW1wiZGVtXCJdID0gXCJEZW1cIjtcbiAgICBQcm9uVHlwZVtcInByc1wiXSA9IFwiUHJzXCI7XG4gICAgUHJvblR5cGVbXCJyZWxcIl0gPSBcIlJlbFwiO1xufSkoUHJvblR5cGUgPSBleHBvcnRzLlByb25UeXBlIHx8IChleHBvcnRzLlByb25UeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bWJvbHMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/symbols.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/dparser/visitor.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/dparser/visitor.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrthoCompoundHead = exports.OrthoWord = exports.OrthoLexeme = exports.OrthoPhraseme = exports.VisitorMatching = void 0;\n/** Concrete visitor. */\nclass VisitorMatching {\n    /**\n     * Matches the phrase to the forms of a phraseme.\n     * @param phraseme A container of phrase forms.\n     * @param phrase The phrase to be matched.\n     */\n    visitPhraseme(phraseme, phrase) {\n        if (phrase === phraseme.form)\n            return true;\n        if (phraseme.inflected.filter(it => it === phrase).length > 0)\n            return true;\n        if (phraseme.assimilated.filter(it => it === phrase).length > 0)\n            return true;\n        return false;\n    }\n    /**\n     * Matches the word to the forms of a lexeme.\n     * @param lexeme A container of word forms.\n     * @param word The word to be matched.\n     */\n    visitLexeme(lexeme, word) {\n        // match a form of a lexeme\n        if (word === lexeme.form)\n            return true;\n        if (lexeme.inflected.filter(it => it === word).length > 0)\n            return true;\n        if (lexeme.assimilated.filter(it => it === word).length > 0)\n            return true;\n        return false;\n    }\n    /**\n     * Matches the word to the form.\n     * @param orth A container of a form.\n     * @param word The word to be matched.\n     */\n    visitWord(orth, word) {\n        if (word === orth.form)\n            return true;\n        return false;\n    }\n    /**\n     * Match a head to the head of the compound.\n     * @param compound A compound.\n     * @param head A head to be matched with the head of the compound.\n     */\n    visitCompoundHead(compound, head) {\n        if (head === compound.form.split(' ')[0])\n            return true;\n        return false;\n    }\n}\nexports.VisitorMatching = VisitorMatching;\n/** Orthographic phraseme. */\nclass OrthoPhraseme {\n    constructor() {\n        /** A base form that inflected forms or assimilated forms are based on. */\n        this.form = '';\n        this.inflected = [];\n        this.assimilated = [];\n    }\n    accept(visitor, words) {\n        return visitor.visitPhraseme(this, words.join(' '));\n    }\n}\nexports.OrthoPhraseme = OrthoPhraseme;\n/** Orthographic lexeme. */\nclass OrthoLexeme {\n    constructor() {\n        /** A base form that inflected forms or assimilated forms are based on. */\n        this.form = '';\n        this.inflected = [];\n        this.assimilated = [];\n    }\n    accept(visitor, word) {\n        return visitor.visitLexeme(this, word);\n    }\n}\nexports.OrthoLexeme = OrthoLexeme;\n/** Orthographic word. */\nclass OrthoWord {\n    constructor() {\n        /** A word form. */\n        this.form = '';\n    }\n    accept(visitor, word) {\n        return visitor.visitWord(this, word);\n    }\n}\nexports.OrthoWord = OrthoWord;\n/** Orthographic compound whose head will be used to match another head. */\nclass OrthoCompoundHead {\n    constructor() {\n        /** Compound as a phrase of length 2. */\n        this.form = '';\n    }\n    /**\n     * Accepts a visitor and the head of a compound.\n     * @param visitor A visitor.\n     * @param head Head of a compound.\n     */\n    accept(visitor, head) {\n        return visitor.visitCompoundHead(this, head);\n    }\n}\nexports.OrthoCompoundHead = OrthoCompoundHead;\n//# sourceMappingURL=visitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9kcGFyc2VyL3Zpc2l0b3IuanM/ZTYxZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIvZHBhcnNlci92aXNpdG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ydGhvQ29tcG91bmRIZWFkID0gZXhwb3J0cy5PcnRob1dvcmQgPSBleHBvcnRzLk9ydGhvTGV4ZW1lID0gZXhwb3J0cy5PcnRob1BocmFzZW1lID0gZXhwb3J0cy5WaXNpdG9yTWF0Y2hpbmcgPSB2b2lkIDA7XG4vKiogQ29uY3JldGUgdmlzaXRvci4gKi9cbmNsYXNzIFZpc2l0b3JNYXRjaGluZyB7XG4gICAgLyoqXG4gICAgICogTWF0Y2hlcyB0aGUgcGhyYXNlIHRvIHRoZSBmb3JtcyBvZiBhIHBocmFzZW1lLlxuICAgICAqIEBwYXJhbSBwaHJhc2VtZSBBIGNvbnRhaW5lciBvZiBwaHJhc2UgZm9ybXMuXG4gICAgICogQHBhcmFtIHBocmFzZSBUaGUgcGhyYXNlIHRvIGJlIG1hdGNoZWQuXG4gICAgICovXG4gICAgdmlzaXRQaHJhc2VtZShwaHJhc2VtZSwgcGhyYXNlKSB7XG4gICAgICAgIGlmIChwaHJhc2UgPT09IHBocmFzZW1lLmZvcm0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHBocmFzZW1lLmluZmxlY3RlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHBocmFzZSkubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAocGhyYXNlbWUuYXNzaW1pbGF0ZWQuZmlsdGVyKGl0ID0+IGl0ID09PSBwaHJhc2UpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHRoZSB3b3JkIHRvIHRoZSBmb3JtcyBvZiBhIGxleGVtZS5cbiAgICAgKiBAcGFyYW0gbGV4ZW1lIEEgY29udGFpbmVyIG9mIHdvcmQgZm9ybXMuXG4gICAgICogQHBhcmFtIHdvcmQgVGhlIHdvcmQgdG8gYmUgbWF0Y2hlZC5cbiAgICAgKi9cbiAgICB2aXNpdExleGVtZShsZXhlbWUsIHdvcmQpIHtcbiAgICAgICAgLy8gbWF0Y2ggYSBmb3JtIG9mIGEgbGV4ZW1lXG4gICAgICAgIGlmICh3b3JkID09PSBsZXhlbWUuZm9ybSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAobGV4ZW1lLmluZmxlY3RlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHdvcmQpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGxleGVtZS5hc3NpbWlsYXRlZC5maWx0ZXIoaXQgPT4gaXQgPT09IHdvcmQpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIHRoZSB3b3JkIHRvIHRoZSBmb3JtLlxuICAgICAqIEBwYXJhbSBvcnRoIEEgY29udGFpbmVyIG9mIGEgZm9ybS5cbiAgICAgKiBAcGFyYW0gd29yZCBUaGUgd29yZCB0byBiZSBtYXRjaGVkLlxuICAgICAqL1xuICAgIHZpc2l0V29yZChvcnRoLCB3b3JkKSB7XG4gICAgICAgIGlmICh3b3JkID09PSBvcnRoLmZvcm0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXRjaCBhIGhlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSBjb21wb3VuZCBBIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSBoZWFkIEEgaGVhZCB0byBiZSBtYXRjaGVkIHdpdGggdGhlIGhlYWQgb2YgdGhlIGNvbXBvdW5kLlxuICAgICAqL1xuICAgIHZpc2l0Q29tcG91bmRIZWFkKGNvbXBvdW5kLCBoZWFkKSB7XG4gICAgICAgIGlmIChoZWFkID09PSBjb21wb3VuZC5mb3JtLnNwbGl0KCcgJylbMF0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuVmlzaXRvck1hdGNoaW5nID0gVmlzaXRvck1hdGNoaW5nO1xuLyoqIE9ydGhvZ3JhcGhpYyBwaHJhc2VtZS4gKi9cbmNsYXNzIE9ydGhvUGhyYXNlbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQSBiYXNlIGZvcm0gdGhhdCBpbmZsZWN0ZWQgZm9ybXMgb3IgYXNzaW1pbGF0ZWQgZm9ybXMgYXJlIGJhc2VkIG9uLiAqL1xuICAgICAgICB0aGlzLmZvcm0gPSAnJztcbiAgICAgICAgdGhpcy5pbmZsZWN0ZWQgPSBbXTtcbiAgICAgICAgdGhpcy5hc3NpbWlsYXRlZCA9IFtdO1xuICAgIH1cbiAgICBhY2NlcHQodmlzaXRvciwgd29yZHMpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQaHJhc2VtZSh0aGlzLCB3b3Jkcy5qb2luKCcgJykpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3J0aG9QaHJhc2VtZSA9IE9ydGhvUGhyYXNlbWU7XG4vKiogT3J0aG9ncmFwaGljIGxleGVtZS4gKi9cbmNsYXNzIE9ydGhvTGV4ZW1lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIEEgYmFzZSBmb3JtIHRoYXQgaW5mbGVjdGVkIGZvcm1zIG9yIGFzc2ltaWxhdGVkIGZvcm1zIGFyZSBiYXNlZCBvbi4gKi9cbiAgICAgICAgdGhpcy5mb3JtID0gJyc7XG4gICAgICAgIHRoaXMuaW5mbGVjdGVkID0gW107XG4gICAgICAgIHRoaXMuYXNzaW1pbGF0ZWQgPSBbXTtcbiAgICB9XG4gICAgYWNjZXB0KHZpc2l0b3IsIHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMZXhlbWUodGhpcywgd29yZCk7XG4gICAgfVxufVxuZXhwb3J0cy5PcnRob0xleGVtZSA9IE9ydGhvTGV4ZW1lO1xuLyoqIE9ydGhvZ3JhcGhpYyB3b3JkLiAqL1xuY2xhc3MgT3J0aG9Xb3JkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqIEEgd29yZCBmb3JtLiAqL1xuICAgICAgICB0aGlzLmZvcm0gPSAnJztcbiAgICB9XG4gICAgYWNjZXB0KHZpc2l0b3IsIHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRXb3JkKHRoaXMsIHdvcmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3J0aG9Xb3JkID0gT3J0aG9Xb3JkO1xuLyoqIE9ydGhvZ3JhcGhpYyBjb21wb3VuZCB3aG9zZSBoZWFkIHdpbGwgYmUgdXNlZCB0byBtYXRjaCBhbm90aGVyIGhlYWQuICovXG5jbGFzcyBPcnRob0NvbXBvdW5kSGVhZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKiBDb21wb3VuZCBhcyBhIHBocmFzZSBvZiBsZW5ndGggMi4gKi9cbiAgICAgICAgdGhpcy5mb3JtID0gJyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjY2VwdHMgYSB2aXNpdG9yIGFuZCB0aGUgaGVhZCBvZiBhIGNvbXBvdW5kLlxuICAgICAqIEBwYXJhbSB2aXNpdG9yIEEgdmlzaXRvci5cbiAgICAgKiBAcGFyYW0gaGVhZCBIZWFkIG9mIGEgY29tcG91bmQuXG4gICAgICovXG4gICAgYWNjZXB0KHZpc2l0b3IsIGhlYWQpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDb21wb3VuZEhlYWQodGhpcywgaGVhZCk7XG4gICAgfVxufVxuZXhwb3J0cy5PcnRob0NvbXBvdW5kSGVhZCA9IE9ydGhvQ29tcG91bmRIZWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmlzaXRvci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/dparser/visitor.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/hangul/analyzer.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/hangul/analyzer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.graphAnalyzeHangul = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst hangul_1 = __webpack_require__(/*! ./hangul */ \"./node_modules/taipa/lib/hangul/hangul.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeHangul(str) {\n    const gm = new unit_1.GraphemeMaker(hangul_1.lowerLettersHangul);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeHangul = graphAnalyzeHangul;\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvYW5hbHl6ZXIuanM/Y2IyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvYW5hbHl6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ3JhcGhBbmFseXplSGFuZ3VsID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBoYW5ndWxfMSA9IHJlcXVpcmUoXCIuL2hhbmd1bFwiKTtcbi8qKlxuICogQW5hbHl6ZXMgYSBzdHJpbmcgaW50byBncmFwaGVtZXMuIEdyYXBoZW1pYyBhbmFseXNpcy5cbiAqIEBwYXJhbSBzdHIgQSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ3JhcGhBbmFseXplSGFuZ3VsKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKGhhbmd1bF8xLmxvd2VyTGV0dGVyc0hhbmd1bCk7XG4gICAgcmV0dXJuIGdtLm1ha2VHcmFwaGVtZXMoc3RyKTtcbn1cbmV4cG9ydHMuZ3JhcGhBbmFseXplSGFuZ3VsID0gZ3JhcGhBbmFseXplSGFuZ3VsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/hangul/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/hangul/hangul.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/hangul/hangul.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HangulSpellingTags = exports.lowerLettersHangul = exports.LettersOfHangul = exports.HangulLetterTags = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nvar HangulLetterTags;\n(function (HangulLetterTags) {\n    HangulLetterTags[\"a\"] = \"a\";\n    HangulLetterTags[\"e\"] = \"e\";\n    HangulLetterTags[\"i\"] = \"i\";\n    HangulLetterTags[\"o\"] = \"o\";\n    HangulLetterTags[\"u\"] = \"u\";\n    HangulLetterTags[\"oe\"] = \"oe\";\n    HangulLetterTags[\"er\"] = \"er\";\n    HangulLetterTags[\"ir\"] = \"ir\";\n    HangulLetterTags[\"ur\"] = \"ur\";\n    HangulLetterTags[\"b\"] = \"b\";\n    HangulLetterTags[\"d\"] = \"d\";\n    HangulLetterTags[\"g\"] = \"g\";\n    HangulLetterTags[\"j\"] = \"j\";\n    HangulLetterTags[\"ch\"] = \"ch\";\n    HangulLetterTags[\"p\"] = \"p\";\n    HangulLetterTags[\"t\"] = \"t\";\n    HangulLetterTags[\"k\"] = \"k\";\n    HangulLetterTags[\"c\"] = \"c\";\n    HangulLetterTags[\"ph\"] = \"ph\";\n    HangulLetterTags[\"th\"] = \"th\";\n    HangulLetterTags[\"kh\"] = \"kh\";\n    HangulLetterTags[\"pp\"] = \"pp\";\n    HangulLetterTags[\"tt\"] = \"tt\";\n    HangulLetterTags[\"kk\"] = \"kk\";\n    HangulLetterTags[\"ss\"] = \"ss\";\n    HangulLetterTags[\"jj\"] = \"jj\";\n    HangulLetterTags[\"h\"] = \"h\";\n    HangulLetterTags[\"l\"] = \"l\";\n    HangulLetterTags[\"s\"] = \"s\";\n    HangulLetterTags[\"w\"] = \"w\";\n    HangulLetterTags[\"y\"] = \"y\";\n    HangulLetterTags[\"m\"] = \"m\";\n    HangulLetterTags[\"n\"] = \"n\";\n    HangulLetterTags[\"ng\"] = \"ng\";\n    HangulLetterTags[\"gs\"] = \"gs\";\n    HangulLetterTags[\"nj\"] = \"nj\";\n    HangulLetterTags[\"lg\"] = \"lg\";\n    HangulLetterTags[\"lm\"] = \"lm\";\n    HangulLetterTags[\"lb\"] = \"lb\";\n    HangulLetterTags[\"ls\"] = \"ls\";\n    HangulLetterTags[\"lt\"] = \"lt\";\n    HangulLetterTags[\"lp\"] = \"lp\";\n    HangulLetterTags[\"lh\"] = \"lh\";\n    HangulLetterTags[\"bs\"] = \"bs\";\n})(HangulLetterTags = exports.HangulLetterTags || (exports.HangulLetterTags = {}));\nclass LettersOfHangul extends unit_1.Letters {\n}\nexports.LettersOfHangul = LettersOfHangul;\nexports.lowerLettersHangul = new LettersOfHangul([\n    HangulLetterTags.a,\n    HangulLetterTags.e,\n    HangulLetterTags.i,\n    HangulLetterTags.o,\n    HangulLetterTags.u,\n    HangulLetterTags.oe,\n    HangulLetterTags.er,\n    HangulLetterTags.ir,\n    HangulLetterTags.ur,\n    HangulLetterTags.b,\n    HangulLetterTags.d,\n    HangulLetterTags.g,\n    HangulLetterTags.j,\n    HangulLetterTags.ch,\n    HangulLetterTags.p,\n    HangulLetterTags.t,\n    HangulLetterTags.k,\n    HangulLetterTags.c,\n    HangulLetterTags.ph,\n    HangulLetterTags.th,\n    HangulLetterTags.kh,\n    HangulLetterTags.pp,\n    HangulLetterTags.tt,\n    HangulLetterTags.kk,\n    HangulLetterTags.ss,\n    HangulLetterTags.jj,\n    HangulLetterTags.h,\n    HangulLetterTags.l,\n    HangulLetterTags.s,\n    HangulLetterTags.w,\n    HangulLetterTags.y,\n    HangulLetterTags.m,\n    HangulLetterTags.n,\n    HangulLetterTags.ng,\n    HangulLetterTags.gs,\n    HangulLetterTags.nj,\n    HangulLetterTags.lg,\n    HangulLetterTags.lm,\n    HangulLetterTags.lb,\n    HangulLetterTags.ls,\n    HangulLetterTags.lt,\n    HangulLetterTags.lp,\n    HangulLetterTags.lh,\n    HangulLetterTags.bs,\n]);\nvar HangulSpellingTags;\n(function (HangulSpellingTags) {\n    HangulSpellingTags[\"initialConsonant\"] = \"initialConsonant\";\n    HangulSpellingTags[\"semivowel\"] = \"semivowel\";\n    HangulSpellingTags[\"vowel\"] = \"vowel\";\n    HangulSpellingTags[\"finalConsonant\"] = \"finalConsonant\";\n})(HangulSpellingTags = exports.HangulSpellingTags || (exports.HangulSpellingTags = {}));\n//# sourceMappingURL=hangul.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9oYW5ndWwvaGFuZ3VsLmpzPzU4MWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0VBQStFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxxRkFBcUY7QUFDdEYiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2hhbmd1bC9oYW5ndWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGFuZ3VsU3BlbGxpbmdUYWdzID0gZXhwb3J0cy5sb3dlckxldHRlcnNIYW5ndWwgPSBleHBvcnRzLkxldHRlcnNPZkhhbmd1bCA9IGV4cG9ydHMuSGFuZ3VsTGV0dGVyVGFncyA9IHZvaWQgMDtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xudmFyIEhhbmd1bExldHRlclRhZ3M7XG4oZnVuY3Rpb24gKEhhbmd1bExldHRlclRhZ3MpIHtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiYVwiXSA9IFwiYVwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJlXCJdID0gXCJlXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImlcIl0gPSBcImlcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wib1wiXSA9IFwib1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ1XCJdID0gXCJ1XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm9lXCJdID0gXCJvZVwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJlclwiXSA9IFwiZXJcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiaXJcIl0gPSBcImlyXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInVyXCJdID0gXCJ1clwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJiXCJdID0gXCJiXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImRcIl0gPSBcImRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiZ1wiXSA9IFwiZ1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJqXCJdID0gXCJqXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImNoXCJdID0gXCJjaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJwXCJdID0gXCJwXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInRcIl0gPSBcInRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia1wiXSA9IFwia1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJjXCJdID0gXCJjXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInBoXCJdID0gXCJwaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ0aFwiXSA9IFwidGhcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia2hcIl0gPSBcImtoXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInBwXCJdID0gXCJwcFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ0dFwiXSA9IFwidHRcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wia2tcIl0gPSBcImtrXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInNzXCJdID0gXCJzc1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJqalwiXSA9IFwiampcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiaFwiXSA9IFwiaFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsXCJdID0gXCJsXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcInNcIl0gPSBcInNcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wid1wiXSA9IFwid1wiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJ5XCJdID0gXCJ5XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm1cIl0gPSBcIm1cIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiblwiXSA9IFwiblwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJuZ1wiXSA9IFwibmdcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiZ3NcIl0gPSBcImdzXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcIm5qXCJdID0gXCJualwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsZ1wiXSA9IFwibGdcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wibG1cIl0gPSBcImxtXCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImxiXCJdID0gXCJsYlwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsc1wiXSA9IFwibHNcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wibHRcIl0gPSBcImx0XCI7XG4gICAgSGFuZ3VsTGV0dGVyVGFnc1tcImxwXCJdID0gXCJscFwiO1xuICAgIEhhbmd1bExldHRlclRhZ3NbXCJsaFwiXSA9IFwibGhcIjtcbiAgICBIYW5ndWxMZXR0ZXJUYWdzW1wiYnNcIl0gPSBcImJzXCI7XG59KShIYW5ndWxMZXR0ZXJUYWdzID0gZXhwb3J0cy5IYW5ndWxMZXR0ZXJUYWdzIHx8IChleHBvcnRzLkhhbmd1bExldHRlclRhZ3MgPSB7fSkpO1xuY2xhc3MgTGV0dGVyc09mSGFuZ3VsIGV4dGVuZHMgdW5pdF8xLkxldHRlcnMge1xufVxuZXhwb3J0cy5MZXR0ZXJzT2ZIYW5ndWwgPSBMZXR0ZXJzT2ZIYW5ndWw7XG5leHBvcnRzLmxvd2VyTGV0dGVyc0hhbmd1bCA9IG5ldyBMZXR0ZXJzT2ZIYW5ndWwoW1xuICAgIEhhbmd1bExldHRlclRhZ3MuYSxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmUsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5pLFxuICAgIEhhbmd1bExldHRlclRhZ3MubyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnUsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5vZSxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmVyLFxuICAgIEhhbmd1bExldHRlclRhZ3MuaXIsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy51cixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmIsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5kLFxuICAgIEhhbmd1bExldHRlclRhZ3MuZyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmosXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5jaCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnAsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy50LFxuICAgIEhhbmd1bExldHRlclRhZ3MuayxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmMsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5waCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnRoLFxuICAgIEhhbmd1bExldHRlclRhZ3Mua2gsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5wcCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnR0LFxuICAgIEhhbmd1bExldHRlclRhZ3Mua2ssXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5zcyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmpqLFxuICAgIEhhbmd1bExldHRlclRhZ3MuaCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmwsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5zLFxuICAgIEhhbmd1bExldHRlclRhZ3MudyxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLnksXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5tLFxuICAgIEhhbmd1bExldHRlclRhZ3MubixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLm5nLFxuICAgIEhhbmd1bExldHRlclRhZ3MuZ3MsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5uaixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxnLFxuICAgIEhhbmd1bExldHRlclRhZ3MubG0sXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5sYixcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxzLFxuICAgIEhhbmd1bExldHRlclRhZ3MubHQsXG4gICAgSGFuZ3VsTGV0dGVyVGFncy5scCxcbiAgICBIYW5ndWxMZXR0ZXJUYWdzLmxoLFxuICAgIEhhbmd1bExldHRlclRhZ3MuYnMsXG5dKTtcbnZhciBIYW5ndWxTcGVsbGluZ1RhZ3M7XG4oZnVuY3Rpb24gKEhhbmd1bFNwZWxsaW5nVGFncykge1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcImluaXRpYWxDb25zb25hbnRcIl0gPSBcImluaXRpYWxDb25zb25hbnRcIjtcbiAgICBIYW5ndWxTcGVsbGluZ1RhZ3NbXCJzZW1pdm93ZWxcIl0gPSBcInNlbWl2b3dlbFwiO1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcInZvd2VsXCJdID0gXCJ2b3dlbFwiO1xuICAgIEhhbmd1bFNwZWxsaW5nVGFnc1tcImZpbmFsQ29uc29uYW50XCJdID0gXCJmaW5hbENvbnNvbmFudFwiO1xufSkoSGFuZ3VsU3BlbGxpbmdUYWdzID0gZXhwb3J0cy5IYW5ndWxTcGVsbGluZ1RhZ3MgfHwgKGV4cG9ydHMuSGFuZ3VsU3BlbGxpbmdUYWdzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmd1bC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/hangul/hangul.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// client\nvar client_1 = __webpack_require__(/*! ./client */ \"./node_modules/taipa/lib/client.js\");\nObject.defineProperty(exports, \"Client\", { enumerable: true, get: function () { return client_1.Client; } });\n// API\nvar analyzer_1 = __webpack_require__(/*! ./tonal/analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\nObject.defineProperty(exports, \"tonalLemmatizationAnalyzer\", { enumerable: true, get: function () { return analyzer_1.tonalLemmatizationAnalyzer; } });\nObject.defineProperty(exports, \"graphAnalyzeTonal\", { enumerable: true, get: function () { return analyzer_1.graphAnalyzeTonal; } });\nvar analyzer_2 = __webpack_require__(/*! ./dparser/analyzer */ \"./node_modules/taipa/lib/dparser/analyzer.js\");\nObject.defineProperty(exports, \"tonalInflectionAnalyzer\", { enumerable: true, get: function () { return analyzer_2.tonalInflectionAnalyzer; } });\nvar analyzer_3 = __webpack_require__(/*! ./kana/analyzer */ \"./node_modules/taipa/lib/kana/analyzer.js\");\nObject.defineProperty(exports, \"kanaLemmatizationAnalyzer\", { enumerable: true, get: function () { return analyzer_3.kanaLemmatizationAnalyzer; } });\nObject.defineProperty(exports, \"graphAnalyzeKana\", { enumerable: true, get: function () { return analyzer_3.graphAnalyzeKana; } });\nvar analyzer_4 = __webpack_require__(/*! ./hangul/analyzer */ \"./node_modules/taipa/lib/hangul/analyzer.js\");\nObject.defineProperty(exports, \"graphAnalyzeHangul\", { enumerable: true, get: function () { return analyzer_4.graphAnalyzeHangul; } });\nvar unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"GraphemeMaker\", { enumerable: true, get: function () { return unit_1.GraphemeMaker; } });\nvar version2_1 = __webpack_require__(/*! ./tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nObject.defineProperty(exports, \"lowerLettersTonal\", { enumerable: true, get: function () { return version2_1.lowerLettersTonal; } });\nObject.defineProperty(exports, \"TonalLetterTags\", { enumerable: true, get: function () { return version2_1.TonalLetterTags; } });\nObject.defineProperty(exports, \"TonalSpellingTags\", { enumerable: true, get: function () { return version2_1.TonalSpellingTags; } });\nvar kana_1 = __webpack_require__(/*! ./kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nObject.defineProperty(exports, \"KanaLetterTags\", { enumerable: true, get: function () { return kana_1.KanaLetterTags; } });\nvar lemmatizer_1 = __webpack_require__(/*! ./tonal/lemmatizer */ \"./node_modules/taipa/lib/tonal/lemmatizer.js\");\nObject.defineProperty(exports, \"lemmatize\", { enumerable: true, get: function () { return lemmatizer_1.lemmatize; } });\nvar creator_1 = __webpack_require__(/*! ./dparser/creator */ \"./node_modules/taipa/lib/dparser/creator.js\");\nObject.defineProperty(exports, \"createTonalPhrase\", { enumerable: true, get: function () { return creator_1.createTonalPhrase; } });\nObject.defineProperty(exports, \"createTonalInflectionLexeme\", { enumerable: true, get: function () { return creator_1.createTonalInflectionLexeme; } });\nObject.defineProperty(exports, \"createCompoundPhraseme\", { enumerable: true, get: function () { return creator_1.createCompoundPhraseme; } });\nvar inflector_1 = __webpack_require__(/*! ./dparser/inflector */ \"./node_modules/taipa/lib/dparser/inflector.js\");\nObject.defineProperty(exports, \"inflectDesinence\", { enumerable: true, get: function () { return inflector_1.inflectDesinence; } });\nObject.defineProperty(exports, \"inflectTransfix\", { enumerable: true, get: function () { return inflector_1.inflectTransfix; } });\nObject.defineProperty(exports, \"inflectEncliticE\", { enumerable: true, get: function () { return inflector_1.inflectEncliticE; } });\nObject.defineProperty(exports, \"inflectPhrasalVerbParticle\", { enumerable: true, get: function () { return inflector_1.inflectPhrasalVerbParticle; } });\nObject.defineProperty(exports, \"inflectEncliticLe\", { enumerable: true, get: function () { return inflector_1.inflectEncliticLe; } });\nObject.defineProperty(exports, \"inflectPossesiveEx\", { enumerable: true, get: function () { return inflector_1.inflectPossesiveEx; } });\nObject.defineProperty(exports, \"inflectTo\", { enumerable: true, get: function () { return inflector_1.inflectTo; } });\nObject.defineProperty(exports, \"inflectEighthToFirst\", { enumerable: true, get: function () { return inflector_1.inflectEighthToFirst; } });\nObject.defineProperty(exports, \"inflectEighthToSecond\", { enumerable: true, get: function () { return inflector_1.inflectEighthToSecond; } });\nObject.defineProperty(exports, \"inflectToProceeding\", { enumerable: true, get: function () { return inflector_1.inflectToProceeding; } });\nObject.defineProperty(exports, \"inflectVppToProceeding\", { enumerable: true, get: function () { return inflector_1.inflectVppToProceeding; } });\nObject.defineProperty(exports, \"inflectVppToTransitive\", { enumerable: true, get: function () { return inflector_1.inflectVppToTransitive; } });\nObject.defineProperty(exports, \"inflectEToAdnominal\", { enumerable: true, get: function () { return inflector_1.inflectEToAdnominal; } });\nObject.defineProperty(exports, \"inflectLeToConjunctive\", { enumerable: true, get: function () { return inflector_1.inflectLeToConjunctive; } });\nObject.defineProperty(exports, \"inflectPossesive\", { enumerable: true, get: function () { return inflector_1.inflectPossesive; } });\nObject.defineProperty(exports, \"inflectToParticiple\", { enumerable: true, get: function () { return inflector_1.inflectToParticiple; } });\nObject.defineProperty(exports, \"inflectVppToParticiple\", { enumerable: true, get: function () { return inflector_1.inflectVppToParticiple; } });\nObject.defineProperty(exports, \"inflectSerial\", { enumerable: true, get: function () { return inflector_1.inflectSerial; } });\nvar inserter_1 = __webpack_require__(/*! ./dparser/inserter */ \"./node_modules/taipa/lib/dparser/inserter.js\");\nObject.defineProperty(exports, \"insertToFollowingSyllable\", { enumerable: true, get: function () { return inserter_1.insertToFollowingSyllable; } });\nvar mutator_1 = __webpack_require__(/*! ./dparser/mutator */ \"./node_modules/taipa/lib/dparser/mutator.js\");\nObject.defineProperty(exports, \"mutateFinalOfPrecedingSyllable\", { enumerable: true, get: function () { return mutator_1.mutateFinalOfPrecedingSyllable; } });\nvar token_1 = __webpack_require__(/*! ./token */ \"./node_modules/taipa/lib/token.js\");\nObject.defineProperty(exports, \"TokenAnalysis\", { enumerable: true, get: function () { return token_1.TokenAnalysis; } });\nvar unit_2 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"AlphabeticGrapheme\", { enumerable: true, get: function () { return unit_2.AlphabeticGrapheme; } });\nvar morpheme_1 = __webpack_require__(/*! ./dparser/morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\nObject.defineProperty(exports, \"TonalCombiningMorpheme\", { enumerable: true, get: function () { return morpheme_1.TonalCombiningMorpheme; } });\nvar morpheme_2 = __webpack_require__(/*! ./tonal/morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nObject.defineProperty(exports, \"TonalUncombiningMorpheme\", { enumerable: true, get: function () { return morpheme_2.TonalUncombiningMorpheme; } });\nvar lexeme_1 = __webpack_require__(/*! ./dparser/lexeme */ \"./node_modules/taipa/lib/dparser/lexeme.js\");\nObject.defineProperty(exports, \"TonalInflectionLexeme\", { enumerable: true, get: function () { return lexeme_1.TonalInflectionLexeme; } });\nObject.defineProperty(exports, \"TonalInsertionLexeme\", { enumerable: true, get: function () { return lexeme_1.TonalInsertionLexeme; } });\nvar lexeme_2 = __webpack_require__(/*! ./tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nObject.defineProperty(exports, \"TonalLemmatizationLexeme\", { enumerable: true, get: function () { return lexeme_2.TonalLemmatizationLexeme; } });\nvar phraseme_1 = __webpack_require__(/*! ./dparser/phraseme */ \"./node_modules/taipa/lib/dparser/phraseme.js\");\nObject.defineProperty(exports, \"PhrasalVerbPhraseme\", { enumerable: true, get: function () { return phraseme_1.PhrasalVerbPhraseme; } });\nObject.defineProperty(exports, \"PhrasalVerbVppPhraseme\", { enumerable: true, get: function () { return phraseme_1.PhrasalVerbVppPhraseme; } });\nObject.defineProperty(exports, \"TonalMainParticlePhraseme\", { enumerable: true, get: function () { return phraseme_1.TonalMainParticlePhraseme; } });\nObject.defineProperty(exports, \"TonalCompoundPhraseme\", { enumerable: true, get: function () { return phraseme_1.TonalCompoundPhraseme; } });\nObject.defineProperty(exports, \"SerialPhraseme\", { enumerable: true, get: function () { return phraseme_1.SerialPhraseme; } });\nvar morpheme_3 = __webpack_require__(/*! ./kana/morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nObject.defineProperty(exports, \"KanaUncombiningMorpheme\", { enumerable: true, get: function () { return morpheme_3.KanaUncombiningMorpheme; } });\nvar lexeme_3 = __webpack_require__(/*! ./tonal/lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nObject.defineProperty(exports, \"TonalWord\", { enumerable: true, get: function () { return lexeme_3.TonalWord; } });\nvar phraseme_2 = __webpack_require__(/*! ./tonal/phraseme */ \"./node_modules/taipa/lib/tonal/phraseme.js\");\nObject.defineProperty(exports, \"TonalPhrase\", { enumerable: true, get: function () { return phraseme_2.TonalPhrase; } });\nvar unit_3 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nObject.defineProperty(exports, \"PositionalLetter\", { enumerable: true, get: function () { return unit_3.PositionalLetter; } });\nObject.defineProperty(exports, \"SpellingGeneration\", { enumerable: true, get: function () { return unit_3.PositionalLetterGeneration; } });\nvar version2_2 = __webpack_require__(/*! ./tonal/version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nObject.defineProperty(exports, \"initialsTonal\", { enumerable: true, get: function () { return version2_2.initialsTonal; } });\nObject.defineProperty(exports, \"nasalizationsTonal\", { enumerable: true, get: function () { return version2_2.nasalizationsTonal; } });\nObject.defineProperty(exports, \"vowelsTonal\", { enumerable: true, get: function () { return version2_2.vowelsTonal; } });\nvar metaplasm_1 = __webpack_require__(/*! ./dparser/metaplasm */ \"./node_modules/taipa/lib/dparser/metaplasm.js\");\nObject.defineProperty(exports, \"TonalDesinenceInflection\", { enumerable: true, get: function () { return metaplasm_1.TonalDesinenceInflection; } });\nObject.defineProperty(exports, \"TonalCombiningForms\", { enumerable: true, get: function () { return metaplasm_1.TonalCombiningForms; } });\nvar prediction_1 = __webpack_require__(/*! ./tonal/prediction */ \"./node_modules/taipa/lib/tonal/prediction.js\");\nObject.defineProperty(exports, \"predict\", { enumerable: true, get: function () { return prediction_1.predict; } });\nvar lettergen_1 = __webpack_require__(/*! ./tonal/lettergen */ \"./node_modules/taipa/lib/tonal/lettergen.js\");\nObject.defineProperty(exports, \"syllableCompositions\", { enumerable: true, get: function () { return lettergen_1.syllableCompositions; } });\nvar tokenizer_1 = __webpack_require__(/*! ./tonal/tokenizer */ \"./node_modules/taipa/lib/tonal/tokenizer.js\");\nObject.defineProperty(exports, \"tokenizeLatinSyllable\", { enumerable: true, get: function () { return tokenizer_1.tokenizeLatinSyllable; } });\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/index.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/interface.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/interface.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Metaplasm = void 0;\nclass Metaplasm {\n}\nexports.Metaplasm = Metaplasm;\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9pbnRlcmZhY2UuanM/MWEwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL2ludGVyZmFjZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NZXRhcGxhc20gPSB2b2lkIDA7XG5jbGFzcyBNZXRhcGxhc20ge1xufVxuZXhwb3J0cy5NZXRhcGxhc20gPSBNZXRhcGxhc207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2UuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/interface.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/analyzer.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/analyzer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.kanaLemmatizationAnalyzer = exports.graphAnalyzeKana = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/kana/morpheme.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeKana(str) {\n    const gm = new unit_1.GraphemeMaker(kana_1.lowerLettersKana);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeKana = graphAnalyzeKana;\n/** Analyzes a string into morphemes. */\nexports.kanaLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x) {\n        let graphemes = [];\n        if (typeof x == 'object') {\n            graphemes = x;\n        }\n        else if (typeof x == 'string') {\n            graphemes = graphAnalyzeKana(x);\n        }\n        const mm = new morpheme_1.KanaUncombiningMorphemeMaker(new metaplasm_1.KanaCombiningMetaplasm());\n        return mm.makeMorphemes(graphemes);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9rYW5hL2FuYWx5emVyLmpzP2QyY2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyw2REFBWTtBQUN2QyxlQUFlLG1CQUFPLENBQUMscURBQVE7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsMkRBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9hbmFseXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5rYW5hTGVtbWF0aXphdGlvbkFuYWx5emVyID0gZXhwb3J0cy5ncmFwaEFuYWx5emVLYW5hID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBrYW5hXzEgPSByZXF1aXJlKFwiLi9rYW5hXCIpO1xuY29uc3QgbWV0YXBsYXNtXzEgPSByZXF1aXJlKFwiLi4vbWV0YXBsYXNtXCIpO1xuLyoqXG4gKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIGdyYXBoZW1lcy4gR3JhcGhlbWljIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHN0cmluZ1xuICovXG5mdW5jdGlvbiBncmFwaEFuYWx5emVLYW5hKHN0cikge1xuICAgIGNvbnN0IGdtID0gbmV3IHVuaXRfMS5HcmFwaGVtZU1ha2VyKGthbmFfMS5sb3dlckxldHRlcnNLYW5hKTtcbiAgICByZXR1cm4gZ20ubWFrZUdyYXBoZW1lcyhzdHIpO1xufVxuZXhwb3J0cy5ncmFwaEFuYWx5emVLYW5hID0gZ3JhcGhBbmFseXplS2FuYTtcbi8qKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIG1vcnBoZW1lcy4gKi9cbmV4cG9ydHMua2FuYUxlbW1hdGl6YXRpb25BbmFseXplciA9IHtcbiAgICAvKipcbiAgICAgKiBBbmFseXplcyBhIHN0cmluZyBvciBncmFwaGVtZXMgaW50byBtb3JwaGVtZXMuIE1vcnBob2xvZ2ljYWwgYW5hbHlzaXMuXG4gICAgICogQHBhcmFtIHggQSBzdHJpbmcgb3IgZ3JhcGhlbWVzXG4gICAgICovXG4gICAgbW9ycGhBbmFseXplKHgpIHtcbiAgICAgICAgbGV0IGdyYXBoZW1lcyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGdyYXBoZW1lcyA9IGdyYXBoQW5hbHl6ZUthbmEoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW0gPSBuZXcgbW9ycGhlbWVfMS5LYW5hVW5jb21iaW5pbmdNb3JwaGVtZU1ha2VyKG5ldyBtZXRhcGxhc21fMS5LYW5hQ29tYmluaW5nTWV0YXBsYXNtKCkpO1xuICAgICAgICByZXR1cm4gbW0ubWFrZU1vcnBoZW1lcyhncmFwaGVtZXMpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5hbHl6ZXIuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/init.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/init.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKanaBlocks = exports.checkNumberOfLettersKana = void 0;\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction checkNumberOfLettersKana() {\n    if (kana_1.kanaPositionalLetters.size !== kana_1.lowerLettersKana.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLettersKana = checkNumberOfLettersKana;\nfunction getKanasFollowingSmallChu(key) {\n    let kanaSequences = ['', '', ''];\n    let ks = kana_1.kogakimoji.get('chu');\n    if (ks) {\n        kanaSequences[0] += ks[0];\n        kanaSequences[1] += ks[1];\n        kanaSequences[2] += ks[1];\n    }\n    ks = kana_1.hiraganaKatakana.get(key);\n    if (ks) {\n        kanaSequences[0] += ks[0];\n        kanaSequences[1] += ks[1];\n        kanaSequences[2] += ks[1];\n    }\n    return kanaSequences;\n}\nfunction checkChouon(previousLetter, nextLetter) {\n    if (previousLetter === nextLetter)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.e && nextLetter === kana_1.KanaLetterTags.i)\n        return true;\n    if (previousLetter === kana_1.KanaLetterTags.o && nextLetter === kana_1.KanaLetterTags.u)\n        return true;\n    return false;\n}\nfunction lookUp(str) {\n    let kanas = kana_1.hiraganaKatakana.get(str);\n    if (kanas == undefined) {\n        kanas = kana_1.gailaigo.get(str);\n    }\n    if (kanas == undefined) {\n        kanas = kana_1.special.get(str);\n    }\n    return kanas;\n}\nfunction lookUpOtherKanas(str) {\n    if (kana_1.otherKanas.has(str)) {\n        return kana_1.otherKanas.get(str);\n    }\n}\nfunction getKanaBlocks(morphemes) {\n    // string one is hiragana, string two is katakana, string three is chouon\n    const kanaSequences = [];\n    kanaSequences[0] = '';\n    kanaSequences[1] = '';\n    kanaSequences[2] = '';\n    let previous = '';\n    for (const m of morphemes) {\n        let ks = lookUp(m.syllable.literal);\n        if (ks != undefined && ks[0] != undefined) {\n            // in case the kana is absent, we check against ks[0]\n            kanaSequences[0] += ks[0];\n            kanaSequences[1] += ks[1];\n            if (previous.length > 0 &&\n                checkChouon(previous[previous.length - 1], m.syllable.literal[m.syllable.literal.length - 1]) &&\n                kana_1.initialConsonantsKana.includes(m.syllable.literal) == false &&\n                m.syllable.literal.length == 1) {\n                // a vowel does not begin with a consonant and is of length 1\n                // a vowel follows a previous vowel\n                kanaSequences[2] += 'ー';\n            }\n            else {\n                kanaSequences[2] += ks[1];\n            }\n            if (morphemes.length == 1) {\n                const got = lookUpOtherKanas(m.syllable.literal);\n                if (got) {\n                    if (got[0])\n                        kanaSequences.push(got[0]);\n                    if (got[1])\n                        kanaSequences.push(got[1]);\n                }\n            }\n        }\n        else if (kana_1.finalConsonantsKana.includes(m.syllable.literal[m.syllable.literal.length - 1]) == true) {\n            ks = lookUp(m.syllable.literal.substring(0, m.syllable.literal.length - 1));\n            if (ks != undefined && ks[0] != undefined) {\n                kanaSequences[0] += ks[0];\n                kanaSequences[1] += ks[1];\n                kanaSequences[2] += ks[1];\n            }\n            if (kana_1.hatsuonsKana.includes(m.syllable.literal[m.syllable.literal.length - 1])) {\n                ks = kana_1.hatsuon.get('n');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n            else {\n                ks = kana_1.kogakimoji.get('chu');\n                if (ks) {\n                    kanaSequences[0] += ks[0];\n                    kanaSequences[1] += ks[1];\n                    kanaSequences[2] += ks[1];\n                }\n            }\n        }\n        else {\n            let first = m.syllable.literal[0];\n            let second = m.syllable.literal[1];\n            if (first === second &&\n                kana_1.germinatedConsonantsKana.includes(first) == true) {\n                const ret = getKanasFollowingSmallChu(m.letters[1].toString() + m.letters[2].toString());\n                kanaSequences[0] += ret[0];\n                kanaSequences[1] += ret[1];\n                kanaSequences[2] += ret[1];\n            }\n            else if (m.letters[0].toString() === kana_1.KanaLetterTags.t &&\n                m.letters[1].toString() === kana_1.KanaLetterTags.ch &&\n                kana_1.germinatedConsonantsKana.includes(m.letters[0].toString()) == true) {\n                const ret = getKanasFollowingSmallChu(m.letters[1].toString() + m.letters[2].toString());\n                kanaSequences[0] += ret[0];\n                kanaSequences[1] += ret[1];\n                kanaSequences[2] += ret[1];\n            }\n        }\n        previous = m.syllable.literal;\n    }\n    // remove duplicates\n    if (kanaSequences[1] === kanaSequences[2])\n        kanaSequences[2] = '';\n    return kanaSequences;\n}\nexports.getKanaBlocks = getKanaBlocks;\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9rYW5hL2luaXQuanM/Njk4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9pbml0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEthbmFCbG9ja3MgPSBleHBvcnRzLmNoZWNrTnVtYmVyT2ZMZXR0ZXJzS2FuYSA9IHZvaWQgMDtcbmNvbnN0IGthbmFfMSA9IHJlcXVpcmUoXCIuL2thbmFcIik7XG5mdW5jdGlvbiBjaGVja051bWJlck9mTGV0dGVyc0thbmEoKSB7XG4gICAgaWYgKGthbmFfMS5rYW5hUG9zaXRpb25hbExldHRlcnMuc2l6ZSAhPT0ga2FuYV8xLmxvd2VyTGV0dGVyc0thbmEuc2l6ZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnc2l6ZXMgdW5tYXRjaGVkJyk7XG4gICAgfVxufVxuZXhwb3J0cy5jaGVja051bWJlck9mTGV0dGVyc0thbmEgPSBjaGVja051bWJlck9mTGV0dGVyc0thbmE7XG5mdW5jdGlvbiBnZXRLYW5hc0ZvbGxvd2luZ1NtYWxsQ2h1KGtleSkge1xuICAgIGxldCBrYW5hU2VxdWVuY2VzID0gWycnLCAnJywgJyddO1xuICAgIGxldCBrcyA9IGthbmFfMS5rb2dha2ltb2ppLmdldCgnY2h1Jyk7XG4gICAgaWYgKGtzKSB7XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0ga3NbMF07XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0ga3NbMV07XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0ga3NbMV07XG4gICAgfVxuICAgIGtzID0ga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGtleSk7XG4gICAgaWYgKGtzKSB7XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0ga3NbMF07XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0ga3NbMV07XG4gICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0ga3NbMV07XG4gICAgfVxuICAgIHJldHVybiBrYW5hU2VxdWVuY2VzO1xufVxuZnVuY3Rpb24gY2hlY2tDaG91b24ocHJldmlvdXNMZXR0ZXIsIG5leHRMZXR0ZXIpIHtcbiAgICBpZiAocHJldmlvdXNMZXR0ZXIgPT09IG5leHRMZXR0ZXIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChwcmV2aW91c0xldHRlciA9PT0ga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUgJiYgbmV4dExldHRlciA9PT0ga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChwcmV2aW91c0xldHRlciA9PT0ga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8gJiYgbmV4dExldHRlciA9PT0ga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGxvb2tVcChzdHIpIHtcbiAgICBsZXQga2FuYXMgPSBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoc3RyKTtcbiAgICBpZiAoa2FuYXMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGthbmFzID0ga2FuYV8xLmdhaWxhaWdvLmdldChzdHIpO1xuICAgIH1cbiAgICBpZiAoa2FuYXMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGthbmFzID0ga2FuYV8xLnNwZWNpYWwuZ2V0KHN0cik7XG4gICAgfVxuICAgIHJldHVybiBrYW5hcztcbn1cbmZ1bmN0aW9uIGxvb2tVcE90aGVyS2FuYXMoc3RyKSB7XG4gICAgaWYgKGthbmFfMS5vdGhlckthbmFzLmhhcyhzdHIpKSB7XG4gICAgICAgIHJldHVybiBrYW5hXzEub3RoZXJLYW5hcy5nZXQoc3RyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRLYW5hQmxvY2tzKG1vcnBoZW1lcykge1xuICAgIC8vIHN0cmluZyBvbmUgaXMgaGlyYWdhbmEsIHN0cmluZyB0d28gaXMga2F0YWthbmEsIHN0cmluZyB0aHJlZSBpcyBjaG91b25cbiAgICBjb25zdCBrYW5hU2VxdWVuY2VzID0gW107XG4gICAga2FuYVNlcXVlbmNlc1swXSA9ICcnO1xuICAgIGthbmFTZXF1ZW5jZXNbMV0gPSAnJztcbiAgICBrYW5hU2VxdWVuY2VzWzJdID0gJyc7XG4gICAgbGV0IHByZXZpb3VzID0gJyc7XG4gICAgZm9yIChjb25zdCBtIG9mIG1vcnBoZW1lcykge1xuICAgICAgICBsZXQga3MgPSBsb29rVXAobS5zeWxsYWJsZS5saXRlcmFsKTtcbiAgICAgICAgaWYgKGtzICE9IHVuZGVmaW5lZCAmJiBrc1swXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIGthbmEgaXMgYWJzZW50LCB3ZSBjaGVjayBhZ2FpbnN0IGtzWzBdXG4gICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzBdICs9IGtzWzBdO1xuICAgICAgICAgICAga2FuYVNlcXVlbmNlc1sxXSArPSBrc1sxXTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91cy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgY2hlY2tDaG91b24ocHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV0sIG0uc3lsbGFibGUubGl0ZXJhbFttLnN5bGxhYmxlLmxpdGVyYWwubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgICAgICAgICAga2FuYV8xLmluaXRpYWxDb25zb25hbnRzS2FuYS5pbmNsdWRlcyhtLnN5bGxhYmxlLmxpdGVyYWwpID09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgbS5zeWxsYWJsZS5saXRlcmFsLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gYSB2b3dlbCBkb2VzIG5vdCBiZWdpbiB3aXRoIGEgY29uc29uYW50IGFuZCBpcyBvZiBsZW5ndGggMVxuICAgICAgICAgICAgICAgIC8vIGEgdm93ZWwgZm9sbG93cyBhIHByZXZpb3VzIHZvd2VsXG4gICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1syXSArPSAn44O8JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0ga3NbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9ycGhlbWVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ290ID0gbG9va1VwT3RoZXJLYW5hcyhtLnN5bGxhYmxlLmxpdGVyYWwpO1xuICAgICAgICAgICAgICAgIGlmIChnb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdvdFswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXMucHVzaChnb3RbMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ290WzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlcy5wdXNoKGdvdFsxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGthbmFfMS5maW5hbENvbnNvbmFudHNLYW5hLmluY2x1ZGVzKG0uc3lsbGFibGUubGl0ZXJhbFttLnN5bGxhYmxlLmxpdGVyYWwubGVuZ3RoIC0gMV0pID09IHRydWUpIHtcbiAgICAgICAgICAgIGtzID0gbG9va1VwKG0uc3lsbGFibGUubGl0ZXJhbC5zdWJzdHJpbmcoMCwgbS5zeWxsYWJsZS5saXRlcmFsLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIGlmIChrcyAhPSB1bmRlZmluZWQgJiYga3NbMF0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAga2FuYVNlcXVlbmNlc1swXSArPSBrc1swXTtcbiAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzFdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0ga3NbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2FuYV8xLmhhdHN1b25zS2FuYS5pbmNsdWRlcyhtLnN5bGxhYmxlLmxpdGVyYWxbbS5zeWxsYWJsZS5saXRlcmFsLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICAgICAgICAgIGtzID0ga2FuYV8xLmhhdHN1b24uZ2V0KCduJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0ga3NbMF07XG4gICAgICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0ga3NbMV07XG4gICAgICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0ga3NbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga3MgPSBrYW5hXzEua29nYWtpbW9qaS5nZXQoJ2NodScpO1xuICAgICAgICAgICAgICAgIGlmIChrcykge1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzBdICs9IGtzWzBdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzFdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgICAgICBrYW5hU2VxdWVuY2VzWzJdICs9IGtzWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IG0uc3lsbGFibGUubGl0ZXJhbFswXTtcbiAgICAgICAgICAgIGxldCBzZWNvbmQgPSBtLnN5bGxhYmxlLmxpdGVyYWxbMV07XG4gICAgICAgICAgICBpZiAoZmlyc3QgPT09IHNlY29uZCAmJlxuICAgICAgICAgICAgICAgIGthbmFfMS5nZXJtaW5hdGVkQ29uc29uYW50c0thbmEuaW5jbHVkZXMoZmlyc3QpID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBnZXRLYW5hc0ZvbGxvd2luZ1NtYWxsQ2h1KG0ubGV0dGVyc1sxXS50b1N0cmluZygpICsgbS5sZXR0ZXJzWzJdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0gcmV0WzBdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0gcmV0WzFdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0gcmV0WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobS5sZXR0ZXJzWzBdLnRvU3RyaW5nKCkgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy50ICYmXG4gICAgICAgICAgICAgICAgbS5sZXR0ZXJzWzFdLnRvU3RyaW5nKCkgPT09IGthbmFfMS5LYW5hTGV0dGVyVGFncy5jaCAmJlxuICAgICAgICAgICAgICAgIGthbmFfMS5nZXJtaW5hdGVkQ29uc29uYW50c0thbmEuaW5jbHVkZXMobS5sZXR0ZXJzWzBdLnRvU3RyaW5nKCkpID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBnZXRLYW5hc0ZvbGxvd2luZ1NtYWxsQ2h1KG0ubGV0dGVyc1sxXS50b1N0cmluZygpICsgbS5sZXR0ZXJzWzJdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMF0gKz0gcmV0WzBdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMV0gKz0gcmV0WzFdO1xuICAgICAgICAgICAgICAgIGthbmFTZXF1ZW5jZXNbMl0gKz0gcmV0WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gbS5zeWxsYWJsZS5saXRlcmFsO1xuICAgIH1cbiAgICAvLyByZW1vdmUgZHVwbGljYXRlc1xuICAgIGlmIChrYW5hU2VxdWVuY2VzWzFdID09PSBrYW5hU2VxdWVuY2VzWzJdKVxuICAgICAgICBrYW5hU2VxdWVuY2VzWzJdID0gJyc7XG4gICAgcmV0dXJuIGthbmFTZXF1ZW5jZXM7XG59XG5leHBvcnRzLmdldEthbmFCbG9ja3MgPSBnZXRLYW5hQmxvY2tzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/kana.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/kana/kana.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.specialH = exports.specialW = exports.specialY = exports.special = exports.gailaigoW = exports.gailaigoY = exports.gailaigo = exports.hiraganaKatakana = exports.otherKanas = exports.hatsuon = exports.kogakimoji = exports.kanaPositionalLetters = exports.hatsuonsKana = exports.finalConsonantsKana = exports.semivowelsKana = exports.germinatedConsonantsKana = exports.vowelsKana = exports.initialConsonantsKana = exports.KanaSpellingTags = exports.lowerLettersKana = exports.LettersOfKana = exports.KanaLetterTags = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nvar KanaLetterTags;\n(function (KanaLetterTags) {\n    KanaLetterTags[\"a\"] = \"a\";\n    KanaLetterTags[\"e\"] = \"e\";\n    KanaLetterTags[\"i\"] = \"i\";\n    KanaLetterTags[\"o\"] = \"o\";\n    KanaLetterTags[\"u\"] = \"u\";\n    KanaLetterTags[\"b\"] = \"b\";\n    KanaLetterTags[\"c\"] = \"c\";\n    KanaLetterTags[\"ch\"] = \"ch\";\n    KanaLetterTags[\"d\"] = \"d\";\n    KanaLetterTags[\"f\"] = \"f\";\n    KanaLetterTags[\"g\"] = \"g\";\n    KanaLetterTags[\"h\"] = \"h\";\n    KanaLetterTags[\"j\"] = \"j\";\n    KanaLetterTags[\"k\"] = \"k\";\n    KanaLetterTags[\"l\"] = \"l\";\n    KanaLetterTags[\"m\"] = \"m\";\n    KanaLetterTags[\"r\"] = \"r\";\n    KanaLetterTags[\"s\"] = \"s\";\n    KanaLetterTags[\"v\"] = \"v\";\n    KanaLetterTags[\"z\"] = \"z\";\n    KanaLetterTags[\"p\"] = \"p\";\n    KanaLetterTags[\"t\"] = \"t\";\n    KanaLetterTags[\"w\"] = \"w\";\n    KanaLetterTags[\"y\"] = \"y\";\n    KanaLetterTags[\"n\"] = \"n\";\n    KanaLetterTags[\"ng\"] = \"ng\";\n})(KanaLetterTags = exports.KanaLetterTags || (exports.KanaLetterTags = {}));\nclass LettersOfKana extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'ng'.length &&\n            listLength == exports.lowerLettersKana.size) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'g') {\n                // handling final n and initial ng in kana\n                if (characters[0].character === 'n' &&\n                    characters[beginOfLetter + 1].character === 'g') {\n                    ms.characters[0] = new unit_1.Character('n');\n                    ms.characters[1] = new unit_1.Character('g');\n                    return ms;\n                }\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfKana = LettersOfKana;\nexports.lowerLettersKana = new LettersOfKana([\n    KanaLetterTags.a,\n    KanaLetterTags.e,\n    KanaLetterTags.i,\n    KanaLetterTags.o,\n    KanaLetterTags.u,\n    KanaLetterTags.b,\n    KanaLetterTags.c,\n    KanaLetterTags.ch,\n    KanaLetterTags.d,\n    KanaLetterTags.f,\n    KanaLetterTags.g,\n    KanaLetterTags.h,\n    KanaLetterTags.j,\n    KanaLetterTags.k,\n    KanaLetterTags.l,\n    KanaLetterTags.m,\n    KanaLetterTags.r,\n    KanaLetterTags.s,\n    KanaLetterTags.v,\n    KanaLetterTags.z,\n    KanaLetterTags.p,\n    KanaLetterTags.t,\n    KanaLetterTags.w,\n    KanaLetterTags.y,\n    KanaLetterTags.n,\n    KanaLetterTags.ng,\n]);\nvar KanaSpellingTags;\n(function (KanaSpellingTags) {\n    KanaSpellingTags[\"germinatedConsonant\"] = \"germinatedConsonant\";\n    KanaSpellingTags[\"initialConsonant\"] = \"initialConsonant\";\n    KanaSpellingTags[\"semivowel\"] = \"semivowel\";\n    KanaSpellingTags[\"vowel\"] = \"vowel\";\n    KanaSpellingTags[\"finalConsonant\"] = \"finalConsonant\";\n})(KanaSpellingTags = exports.KanaSpellingTags || (exports.KanaSpellingTags = {}));\nclass GerminatedConsonant extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSpellingTags.germinatedConsonant;\n    }\n}\nclass InitialConsonant extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSpellingTags.initialConsonant;\n    }\n}\nclass Semivowel extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSpellingTags.semivowel;\n    }\n}\nclass Vowel extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSpellingTags.vowel;\n    }\n}\nclass FinalConsonant extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = KanaSpellingTags.finalConsonant;\n    }\n}\nclass InitialConsonantB extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass InitialConsonantC extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass InitialConsonantCH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ch);\n    }\n}\nclass InitialConsonantD extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass InitialConsonantF extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.f);\n    }\n}\nclass InitialConsonantG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass InitialConsonantH extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.h);\n    }\n}\nclass InitialConsonantJ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.j);\n    }\n}\nclass InitialConsonantK extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass InitialConsonantL extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.l);\n    }\n}\nclass InitialConsonantM extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.m);\n    }\n}\nclass InitialConsonantN extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass InitialConsonantNG extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.ng);\n    }\n}\nclass InitialConsonantP extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass InitialConsonantR extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.r);\n    }\n}\nclass InitialConsonantS extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass InitialConsonantT extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass InitialConsonantV extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.v);\n    }\n}\nclass InitialConsonantW extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass InitialConsonantY extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass InitialConsonantZ extends InitialConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.z);\n    }\n}\nclass SemivowelW extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.w);\n    }\n}\nclass SemivowelY extends Semivowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.y);\n    }\n}\nclass VowelA extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.a);\n    }\n}\nclass VowelE extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.e);\n    }\n}\nclass VowelI extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.i);\n    }\n}\nclass VowelO extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.o);\n    }\n}\nclass VowelU extends Vowel {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.u);\n    }\n}\nclass FinalConsonantB extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass FinalConsonantD extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass FinalConsonantG extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass FinalConsonantK extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass FinalConsonantH extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.h);\n    }\n}\nclass FinalConsonantN extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.n);\n    }\n}\nclass FinalConsonantP extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass FinalConsonantS extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass FinalConsonantT extends FinalConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nclass GerminatedConsonantB extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.b);\n    }\n}\nclass GerminatedConsonantC extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.c);\n    }\n}\nclass GerminatedConsonantD extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.d);\n    }\n}\nclass GerminatedConsonantG extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.g);\n    }\n}\nclass GerminatedConsonantK extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.k);\n    }\n}\nclass GerminatedConsonantP extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.p);\n    }\n}\nclass GerminatedConsonantS extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.s);\n    }\n}\nclass GerminatedConsonantT extends GerminatedConsonant {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(KanaLetterTags.t);\n    }\n}\nexports.initialConsonantsKana = unit_1.letterSequence([\n    new InitialConsonantB(),\n    new InitialConsonantC(),\n    new InitialConsonantCH(),\n    new InitialConsonantD(),\n    new InitialConsonantF(),\n    new InitialConsonantG(),\n    new InitialConsonantH(),\n    new InitialConsonantJ(),\n    new InitialConsonantK(),\n    new InitialConsonantL(),\n    new InitialConsonantM(),\n    new InitialConsonantN(),\n    new InitialConsonantNG(),\n    new InitialConsonantP(),\n    new InitialConsonantR(),\n    new InitialConsonantS(),\n    new InitialConsonantT(),\n    new InitialConsonantV(),\n    new InitialConsonantW(),\n    new InitialConsonantY(),\n    new InitialConsonantZ(),\n]);\nexports.vowelsKana = unit_1.letterSequence([\n    new VowelA(),\n    new VowelI(),\n    new VowelU(),\n    new VowelE(),\n    new VowelO(),\n]);\nexports.germinatedConsonantsKana = unit_1.letterSequence([\n    new GerminatedConsonantB(),\n    new GerminatedConsonantC(),\n    new GerminatedConsonantD(),\n    new GerminatedConsonantG(),\n    new GerminatedConsonantK(),\n    new GerminatedConsonantP(),\n    new GerminatedConsonantS(),\n    new GerminatedConsonantT(),\n]);\nexports.semivowelsKana = unit_1.letterSequence([\n    new SemivowelW(),\n    new SemivowelY(),\n]);\nexports.finalConsonantsKana = unit_1.letterSequence([\n    new FinalConsonantB(),\n    new FinalConsonantD(),\n    new FinalConsonantG(),\n    new FinalConsonantK(),\n    new FinalConsonantN(),\n    new FinalConsonantP(),\n    new FinalConsonantS(),\n    new FinalConsonantT(),\n]);\nexports.hatsuonsKana = unit_1.letterSequence([new FinalConsonantN()]);\nfunction positionalLetter(letters) {\n    return (t) => {\n        for (let i in letters) {\n            if (letters[i].name === t)\n                return letters[i];\n        }\n        return new unit_1.PositionalLetter();\n    };\n}\nconst plA = positionalLetter([new VowelA()]);\nconst plB = positionalLetter([\n    new InitialConsonantB(),\n    new FinalConsonantB(),\n    new GerminatedConsonantB(),\n]);\nconst plC = positionalLetter([\n    new InitialConsonantC(),\n    new GerminatedConsonantC(),\n]);\nconst plCH = positionalLetter([new InitialConsonantCH()]);\nconst plD = positionalLetter([\n    new InitialConsonantD(),\n    new FinalConsonantD(),\n    new GerminatedConsonantD(),\n]);\nconst plE = positionalLetter([new VowelE()]);\nconst plF = positionalLetter([new InitialConsonantF()]);\nconst plG = positionalLetter([\n    new InitialConsonantG(),\n    new FinalConsonantG(),\n    new GerminatedConsonantG(),\n]);\nconst plH = positionalLetter([new InitialConsonantH()]);\nconst plI = positionalLetter([new VowelI()]);\nconst plJ = positionalLetter([new InitialConsonantJ()]);\nconst plK = positionalLetter([\n    new InitialConsonantK(),\n    new FinalConsonantK(),\n    new GerminatedConsonantK(),\n]);\nconst plL = positionalLetter([new InitialConsonantL()]);\nconst plM = positionalLetter([new InitialConsonantM()]);\nconst plN = positionalLetter([new InitialConsonantN(), new FinalConsonantN()]);\nconst plNG = positionalLetter([new InitialConsonantNG()]);\nconst plO = positionalLetter([new VowelO()]);\nconst plP = positionalLetter([\n    new InitialConsonantP(),\n    new FinalConsonantP(),\n    new GerminatedConsonantP(),\n]);\nconst plR = positionalLetter([new InitialConsonantR()]);\nconst plS = positionalLetter([\n    new InitialConsonantS(),\n    new FinalConsonantS(),\n    new GerminatedConsonantS(),\n]);\nconst plT = positionalLetter([\n    new InitialConsonantT(),\n    new FinalConsonantT(),\n    new GerminatedConsonantT(),\n]);\nconst plU = positionalLetter([new VowelU()]);\nconst plV = positionalLetter([new InitialConsonantV()]);\nconst plW = positionalLetter([new InitialConsonantW(), new SemivowelW()]);\nconst plY = positionalLetter([new InitialConsonantY(), new SemivowelY()]);\nconst plZ = positionalLetter([new InitialConsonantZ()]);\nexports.kanaPositionalLetters = new Map()\n    .set(KanaLetterTags.a, plA)\n    .set(KanaLetterTags.b, plB)\n    .set(KanaLetterTags.c, plC)\n    .set(KanaLetterTags.ch, plCH)\n    .set(KanaLetterTags.d, plD)\n    .set(KanaLetterTags.e, plE)\n    .set(KanaLetterTags.f, plF)\n    .set(KanaLetterTags.g, plG)\n    .set(KanaLetterTags.h, plH)\n    .set(KanaLetterTags.i, plI)\n    .set(KanaLetterTags.j, plJ)\n    .set(KanaLetterTags.k, plK)\n    .set(KanaLetterTags.l, plL)\n    .set(KanaLetterTags.m, plM)\n    .set(KanaLetterTags.n, plN)\n    .set(KanaLetterTags.ng, plNG)\n    .set(KanaLetterTags.o, plO)\n    .set(KanaLetterTags.p, plP)\n    .set(KanaLetterTags.r, plR)\n    .set(KanaLetterTags.s, plS)\n    .set(KanaLetterTags.t, plT)\n    .set(KanaLetterTags.u, plU)\n    .set(KanaLetterTags.v, plV)\n    .set(KanaLetterTags.w, plW)\n    .set(KanaLetterTags.y, plY)\n    .set(KanaLetterTags.z, plZ);\nexports.kogakimoji = new Map().set(KanaLetterTags.ch + KanaLetterTags.u, ['っ', 'ッ']);\nexports.hatsuon = new Map().set(KanaLetterTags.n, [\n    'ん',\n    'ン',\n]);\nexports.otherKanas = new Map()\n    .set(KanaLetterTags.a, ['ぁ', 'ァ'])\n    .set(KanaLetterTags.i, ['ぃ', 'ィ'])\n    .set(KanaLetterTags.u, ['ぅ', 'ゥ'])\n    .set(KanaLetterTags.e, ['ぇ', 'ェ'])\n    .set(KanaLetterTags.o, ['ぉ', 'ォ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['', 'ㇵ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['', 'ㇶ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'ㇷ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['', 'ㇸ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['', 'ㇹ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['ゕ', 'ヵ'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['ゖ', 'ヶ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['', 'ㇰ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['', 'ㇻ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['', 'ㇼ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['', 'ㇽ'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['', 'ㇾ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['', 'ㇿ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['', 'ㇺ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['', 'ㇴ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['', 'ㇷ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'ㇱ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['', 'ㇲ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['', 'ㇳ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['ゃ', 'ャ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゅ', 'ュ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['ょ', 'ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['ゎ', 'ヮ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', '\\u{1b166}'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['', 'ㇷ゙']) // 'ㇷ'+ '\\u{3099}'\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['', 'ㇰ゙']) // 'ㇰ'+ '\\u{3099}'\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['', 'ㇲ゙']) // 'ㇲ'+ '\\u{3099}'\n    .set(KanaLetterTags.n, ['', '\\u{1B167}'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['ぢ', 'ヂ']) // moved from hiraganaKatakana\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['づ', 'ヅ']); // moved from hiraganaKatakana\nexports.hiraganaKatakana = new Map()\n    .set(KanaLetterTags.a, ['あ', 'ア'])\n    .set(KanaLetterTags.i, ['い', 'イ'])\n    .set(KanaLetterTags.u, ['う', 'ウ'])\n    .set(KanaLetterTags.e, ['え', 'エ'])\n    .set(KanaLetterTags.o, ['お', 'オ'])\n    .set(KanaLetterTags.k + KanaLetterTags.a, ['か', 'カ'])\n    .set(KanaLetterTags.k + KanaLetterTags.i, ['き', 'キ'])\n    .set(KanaLetterTags.k + KanaLetterTags.u, ['く', 'ク'])\n    .set(KanaLetterTags.k + KanaLetterTags.e, ['け', 'ケ'])\n    .set(KanaLetterTags.k + KanaLetterTags.o, ['こ', 'コ'])\n    .set(KanaLetterTags.s + KanaLetterTags.a, ['さ', 'サ'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['し', 'シ'])\n    .set(KanaLetterTags.s + KanaLetterTags.u, ['す', 'ス'])\n    .set(KanaLetterTags.s + KanaLetterTags.e, ['せ', 'セ'])\n    .set(KanaLetterTags.s + KanaLetterTags.o, ['そ', 'ソ'])\n    .set(KanaLetterTags.t + KanaLetterTags.a, ['た', 'タ'])\n    .set(KanaLetterTags.c + KanaLetterTags.i, ['ち', 'チ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['つ', 'ツ'])\n    .set(KanaLetterTags.t + KanaLetterTags.e, ['て', 'テ'])\n    .set(KanaLetterTags.t + KanaLetterTags.o, ['と', 'ト'])\n    .set(KanaLetterTags.n + KanaLetterTags.a, ['な', 'ナ'])\n    .set(KanaLetterTags.n + KanaLetterTags.i, ['に', 'ニ'])\n    .set(KanaLetterTags.n + KanaLetterTags.u, ['ぬ', 'ヌ'])\n    .set(KanaLetterTags.n + KanaLetterTags.e, ['ね', 'ネ'])\n    .set(KanaLetterTags.n + KanaLetterTags.o, ['の', 'ノ'])\n    .set(KanaLetterTags.h + KanaLetterTags.a, ['は', 'ハ'])\n    .set(KanaLetterTags.h + KanaLetterTags.i, ['ひ', 'ヒ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['ふ', 'フ'])\n    .set(KanaLetterTags.h + KanaLetterTags.e, ['へ', 'ヘ'])\n    .set(KanaLetterTags.h + KanaLetterTags.o, ['ほ', 'ホ'])\n    .set(KanaLetterTags.m + KanaLetterTags.a, ['ま', 'マ'])\n    .set(KanaLetterTags.m + KanaLetterTags.i, ['み', 'ミ'])\n    .set(KanaLetterTags.m + KanaLetterTags.u, ['む', 'ム'])\n    .set(KanaLetterTags.m + KanaLetterTags.e, ['め', 'メ'])\n    .set(KanaLetterTags.m + KanaLetterTags.o, ['も', 'モ'])\n    .set(KanaLetterTags.y + KanaLetterTags.a, ['や', 'ヤ'])\n    .set(KanaLetterTags.y + KanaLetterTags.u, ['ゆ', 'ユ'])\n    .set(KanaLetterTags.y + KanaLetterTags.o, ['よ', 'ヨ'])\n    .set(KanaLetterTags.r + KanaLetterTags.a, ['ら', 'ラ'])\n    .set(KanaLetterTags.r + KanaLetterTags.i, ['り', 'リ'])\n    .set(KanaLetterTags.r + KanaLetterTags.u, ['る', 'ル'])\n    .set(KanaLetterTags.r + KanaLetterTags.e, ['れ', 'レ'])\n    .set(KanaLetterTags.r + KanaLetterTags.o, ['ろ', 'ロ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['わ', 'ワ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['ゐ', 'ヰ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['ゑ', 'ヱ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['を', 'ヲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.a, ['が', 'ガ'])\n    .set(KanaLetterTags.g + KanaLetterTags.i, ['ぎ', 'ギ'])\n    .set(KanaLetterTags.g + KanaLetterTags.u, ['ぐ', 'グ'])\n    .set(KanaLetterTags.g + KanaLetterTags.e, ['げ', 'ゲ'])\n    .set(KanaLetterTags.g + KanaLetterTags.o, ['ご', 'ゴ'])\n    .set(KanaLetterTags.z + KanaLetterTags.a, ['ざ', 'ザ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['じ', 'ジ'])\n    .set(KanaLetterTags.z + KanaLetterTags.u, ['ず', 'ズ'])\n    .set(KanaLetterTags.z + KanaLetterTags.e, ['ぜ', 'ゼ'])\n    .set(KanaLetterTags.z + KanaLetterTags.o, ['ぞ', 'ゾ'])\n    .set(KanaLetterTags.d + KanaLetterTags.a, ['だ', 'ダ'])\n    .set(KanaLetterTags.d + KanaLetterTags.e, ['で', 'デ'])\n    .set(KanaLetterTags.d + KanaLetterTags.o, ['ど', 'ド'])\n    .set(KanaLetterTags.b + KanaLetterTags.a, ['ば', 'バ'])\n    .set(KanaLetterTags.b + KanaLetterTags.i, ['び', 'ビ'])\n    .set(KanaLetterTags.b + KanaLetterTags.u, ['ぶ', 'ブ'])\n    .set(KanaLetterTags.b + KanaLetterTags.e, ['べ', 'ベ'])\n    .set(KanaLetterTags.b + KanaLetterTags.o, ['ぼ', 'ボ'])\n    .set(KanaLetterTags.p + KanaLetterTags.a, ['ぱ', 'パ'])\n    .set(KanaLetterTags.p + KanaLetterTags.i, ['ぴ', 'ピ'])\n    .set(KanaLetterTags.p + KanaLetterTags.u, ['ぷ', 'プ'])\n    .set(KanaLetterTags.p + KanaLetterTags.e, ['ぺ', 'ペ'])\n    .set(KanaLetterTags.p + KanaLetterTags.o, ['ぽ', 'ポ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.a, ['きゃ', 'キャ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.u, ['きゅ', 'キュ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.o, ['きょ', 'キョ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['しゃ', 'シャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['しゅ', 'シュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['しょ', 'ショ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.a, ['ちゃ', 'チャ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.u, ['ちゅ', 'チュ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.o, ['ちょ', 'チョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.a, ['にゃ', 'ニャ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.u, ['にゅ', 'ニュ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.o, ['にょ', 'ニョ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.a, ['ひゃ', 'ヒャ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.u, ['ひゅ', 'ヒュ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.o, ['ひょ', 'ヒョ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.a, ['みゃ', 'ミャ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.u, ['みゅ', 'みょ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.o, ['ミュ', 'ミョ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.a, ['りゃ', 'リャ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.u, ['りゅ', 'リュ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.o, ['りょ', 'リョ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.a, ['ぎゃ', 'ギャ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.u, ['ぎゅ', 'ギュ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.o, ['ぎょ', 'ギョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.a, ['じゃ', 'ジャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.u, ['じゅ', 'ジュ'])\n    .set(KanaLetterTags.j + KanaLetterTags.o, ['じょ', 'ジョ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.a, ['ぢゃ', 'ヂャ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.u, [\n    'ぢ゙ゅ',\n    'ヂュ',\n])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぢ゙ょ',\n    'ヂョ',\n])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.a, ['びゃ', 'ビャ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.u, ['びゅ', 'ビュ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.o, ['びょ', 'ビョ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.a, ['ぴゃ', 'ピャ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.u, ['ぴゅ', 'ピュ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.o, [\n    'ぴょ',\n    'ピョ',\n]);\nexports.gailaigo = new Map()\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'スィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'シェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ズィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.e, ['', 'ジェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.a, ['', 'ジュァ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.i, ['', 'ジュィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.e, ['', 'ジュェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.w + KanaLetterTags.o, ['', 'ジュォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.i, ['', 'ティ'])\n    .set(KanaLetterTags.t + KanaLetterTags.u, ['', 'トゥ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.e, ['', 'チェ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヂェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.a, ['', 'チュァ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.i, ['', 'チュィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.e, ['', 'チュェ'])\n    .set(KanaLetterTags.c + KanaLetterTags.w + KanaLetterTags.o, ['', 'チュォ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.a, ['', 'ツァ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.i, ['', 'ツィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.e, ['', 'ツェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.o, ['', 'ツォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.i, ['', 'ディ'])\n    .set(KanaLetterTags.d + KanaLetterTags.u, ['', 'ドゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.a, ['', 'ファ'])\n    .set(KanaLetterTags.f + KanaLetterTags.i, ['', 'フィ'])\n    .set(KanaLetterTags.f + KanaLetterTags.e, ['', 'フェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.o, ['', 'フォ'])\n    .set(KanaLetterTags.y + KanaLetterTags.i, ['', 'イィ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'イェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.a, ['', 'ウァ'])\n    .set(KanaLetterTags.w + KanaLetterTags.i, ['', 'ウィ'])\n    .set(KanaLetterTags.w + KanaLetterTags.e, ['', 'ウェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.o, ['', 'ウォ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヴァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヴィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.u, ['', 'ヴ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヴェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヴォ']);\nexports.gailaigoY = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.i, ['', 'キィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.y + KanaLetterTags.e, ['', 'キェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.i, ['', 'ギィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.y + KanaLetterTags.e, ['', 'ギェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.a, ['', 'スャ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.u, ['', 'スュ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.e, ['', 'スィェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.o, ['', 'スョ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.a, ['', 'ズャ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.u, ['', 'ズュ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.e, ['', 'ズィェ'])\n    .set(KanaLetterTags.z + KanaLetterTags.y + KanaLetterTags.o, ['', 'ズョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.a, ['', 'テャ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.u, ['', 'テュ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'ティェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.o, ['', 'テョ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.a, ['', 'デャ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.u, ['', 'デュ'])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.e, [\n    '',\n    'デェ',\n    'ディェ',\n])\n    .set(KanaLetterTags.d + KanaLetterTags.y + KanaLetterTags.o, ['', 'デョ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.i, ['', 'ニィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.y + KanaLetterTags.e, ['', 'ニェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヒィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヒェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.a, ['', 'フャ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.u, ['', 'フュ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.e, ['', 'フィェ'])\n    .set(KanaLetterTags.f + KanaLetterTags.y + KanaLetterTags.o, ['', 'フョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.e, ['', 'ビェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.e, ['', 'ピェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.i, ['', 'ミィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.y + KanaLetterTags.e, ['', 'ミェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.i, ['', 'リィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.y + KanaLetterTags.e, ['', 'リェ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ウャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ウュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ウョ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヴャ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヴュ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.e, ['', 'ヴィェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヴョ']);\nexports.gailaigoW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クァ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.i, ['', 'クィ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.u, ['', 'クゥ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.e, ['', 'クェ'])\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.o, ['', 'クォ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グァ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.i, ['', 'グィ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.u, ['', 'グゥ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.e, ['', 'グェ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.o, ['', 'グォ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.a, ['', 'スァ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.i, ['', 'スゥィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.e, ['', 'スェ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.o, ['', 'スォ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヌァ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヌィ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヌェ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヌォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.a, ['', 'ブァ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.i, ['', 'ブィ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.e, ['', 'ブェ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.o, ['', 'ブォ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.a, ['', 'プァ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.i, ['', 'プィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.e, ['', 'プェ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.o, ['', 'プォ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.a, ['', 'ムァ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.i, ['', 'ムィ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.e, ['', 'ムェ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.o, ['', 'ムォ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.a, ['', 'ルァ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.i, ['', 'ルィ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.e, ['', 'ルェ'])\n    .set(KanaLetterTags.r + KanaLetterTags.w + KanaLetterTags.o, ['', 'ルォ']);\nexports.special = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.a, ['', 'カ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.i, ['', 'キ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.u, ['', 'ク゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.e, ['', 'ケ゚'])\n    .set(KanaLetterTags.ng + KanaLetterTags.o, ['', 'コ゚'])\n    .set(KanaLetterTags.s + KanaLetterTags.i, ['', 'セィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.i, ['', 'ゼィ'])\n    .set(KanaLetterTags.s + KanaLetterTags.y + KanaLetterTags.i, ['', 'シィ'])\n    .set(KanaLetterTags.j + KanaLetterTags.i, ['', 'ジィ'])\n    .set(KanaLetterTags.c + KanaLetterTags.y + KanaLetterTags.i, ['', 'チィ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.u, ['', 'ツゥ'])\n    .set(KanaLetterTags.j + KanaLetterTags.y + KanaLetterTags.i, ['', 'ヂィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.u, ['', 'ホゥ'])\n    .set(KanaLetterTags.f + KanaLetterTags.u, ['', 'フゥ'])\n    .set(KanaLetterTags.y + KanaLetterTags.e, ['', 'ユェ'])\n    .set(KanaLetterTags.l + KanaLetterTags.a, ['', 'ラ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.i, ['', 'リ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.u, ['', 'ル゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.e, ['', 'レ゚'])\n    .set(KanaLetterTags.l + KanaLetterTags.o, ['', 'ロ゚'])\n    .set(KanaLetterTags.w + KanaLetterTags.u, ['', 'ウゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.a, ['', 'ヷ'])\n    .set(KanaLetterTags.v + KanaLetterTags.i, ['', 'ヸ'])\n    .set(KanaLetterTags.v + KanaLetterTags.e, ['', 'ヹ'])\n    .set(KanaLetterTags.v + KanaLetterTags.o, ['', 'ヺ']);\nexports.specialY = new Map()\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.a, ['', 'キ゚ャ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.u, ['', 'キ゚ュ'])\n    .set(KanaLetterTags.ng + KanaLetterTags.y + KanaLetterTags.o, ['', 'キ゚ョ'])\n    .set(KanaLetterTags.t + KanaLetterTags.y + KanaLetterTags.e, ['', 'テェ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.a, ['', 'ツャ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.u, ['', 'ツュ'])\n    .set(KanaLetterTags.ch + KanaLetterTags.y + KanaLetterTags.o, ['', 'ツョ'])\n    .set(KanaLetterTags.b + KanaLetterTags.y + KanaLetterTags.i, ['', 'ビィ'])\n    .set(KanaLetterTags.p + KanaLetterTags.y + KanaLetterTags.i, ['', 'ピィ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.a, ['', 'リ゚ャ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.u, ['', 'リ゚ュ'])\n    .set(KanaLetterTags.l + KanaLetterTags.y + KanaLetterTags.o, ['', 'リ゚ョ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.a, ['', 'ヰャ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.u, ['', 'ヰュ'])\n    .set(KanaLetterTags.w + KanaLetterTags.y + KanaLetterTags.o, ['', 'ヰョ']);\nexports.specialW = new Map()\n    .set(KanaLetterTags.k + KanaLetterTags.w + KanaLetterTags.a, ['', 'クヮ'])\n    .set(KanaLetterTags.g + KanaLetterTags.w + KanaLetterTags.a, ['', 'グヮ'])\n    .set(KanaLetterTags.s + KanaLetterTags.w + KanaLetterTags.u, ['', 'スゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.a, ['', 'ズァ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.i, ['', 'ズゥィ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.e, ['', 'ズゥ'])\n    .set(KanaLetterTags.z + KanaLetterTags.w + KanaLetterTags.o, ['', 'ズォ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.a, ['', 'トゥァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.i, ['', 'トゥィ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.u, ['', 'トゥゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.e, ['', 'トゥェ'])\n    .set(KanaLetterTags.t + KanaLetterTags.w + KanaLetterTags.o, ['', 'トゥォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.a, ['', 'ドゥァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.i, ['', 'ドゥィ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.u, ['', 'ドゥゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.e, ['', 'ドゥェ'])\n    .set(KanaLetterTags.d + KanaLetterTags.w + KanaLetterTags.o, ['', 'ドゥォ'])\n    .set(KanaLetterTags.n + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヌゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.a, ['', 'ホゥァ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.i, ['', 'ホゥィ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.u, ['', 'ホゥゥ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.e, ['', 'ホゥェ'])\n    .set(KanaLetterTags.h + KanaLetterTags.w + KanaLetterTags.o, ['', 'ホゥォ'])\n    .set(KanaLetterTags.b + KanaLetterTags.w + KanaLetterTags.u, ['', 'ブゥ'])\n    .set(KanaLetterTags.p + KanaLetterTags.w + KanaLetterTags.u, ['', 'プゥ'])\n    .set(KanaLetterTags.m + KanaLetterTags.w + KanaLetterTags.u, ['', 'ムゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.a, ['', 'ヴゥァ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.i, ['', 'ヴゥィ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.u, ['', 'ヴゥゥ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.e, ['', 'ヴゥェ'])\n    .set(KanaLetterTags.v + KanaLetterTags.w + KanaLetterTags.o, ['', 'ヴゥォ']);\nexports.specialH = new Map()\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.a, ['', 'テァ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.u, ['', 'テゥ'])\n    .set(KanaLetterTags.t + KanaLetterTags.h + KanaLetterTags.o, ['', 'テォ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.a, ['', 'デァ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.u, ['', 'デゥ'])\n    .set(KanaLetterTags.d + KanaLetterTags.h + KanaLetterTags.o, ['', 'デォ']);\n//# sourceMappingURL=kana.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/kana.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/lettergen.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/kana/lettergen.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KanaPositionalLetterGenerator = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nfunction initialConsonant(sg) {\n    const sics = kana_1.initialConsonantsKana;\n    if (sics.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.initialConsonant);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction semivowel(sg) {\n    const ssvs = kana_1.semivowelsKana;\n    if (ssvs.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.semivowel);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    const svs = kana_1.vowelsKana;\n    if (svs.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.vowel);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    return sg;\n}\nfunction hatsuon(sg) {\n    const sfcs = kana_1.hatsuonsKana;\n    if (sfcs.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.finalConsonant);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    return sg;\n}\nfunction finalConsonant(sg) {\n    const sfcs = kana_1.finalConsonantsKana;\n    if (sfcs.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.finalConsonant);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    return sg;\n}\nfunction germinatedConsonant(sg) {\n    const sgcs = kana_1.germinatedConsonantsKana;\n    if (sgcs.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = kana_1.kanaPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(kana_1.KanaSpellingTags.germinatedConsonant);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    return sg;\n}\nconst scV = unit_1.sgPipe(vowel);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scVC = unit_1.sgPipe(vowel, hatsuon);\nconst scCVC = unit_1.sgPipe(initialConsonant, vowel, finalConsonant);\nconst scCSV = unit_1.sgPipe(initialConsonant, semivowel, vowel);\nconst scCCV = unit_1.sgPipe(germinatedConsonant, initialConsonant, vowel);\nclass KanaPositionalLetterGenerator {\n    constructor() {\n        this.sylCompositions = [scV, scCV, scVC, scCVC, scCSV, scCCV];\n    }\n    genSokuonAndGerminated(letters, lookahead) {\n        let strs = new Array();\n        strs.push(letters);\n        // consonant germination\n        if (kana_1.germinatedConsonantsKana.includes(letters[0]) == true) {\n            let syl = new Array();\n            syl.push(letters[0].charAt(0));\n            for (let e of letters) {\n                syl.push(e);\n            }\n            strs.push(syl);\n        }\n        // sokuon\n        let fcs = kana_1.finalConsonantsKana;\n        for (let e of fcs.letters) {\n            let syl = new Array();\n            Object.assign(syl, letters);\n            syl.push(e.toString());\n            if (e.toString() === lookahead)\n                strs.push(syl);\n        }\n        return strs;\n    }\n    generate(letters, lookahead) {\n        let strs = new Array();\n        let sequences = new Array(); // to be returned\n        strs = this.genSokuonAndGerminated(letters, lookahead);\n        // console.log(strs);\n        for (let i in strs) {\n            // generates all needed positional letters to be processed\n            for (let j = 0; j < this.sylCompositions.length; j++) {\n                let sg = new unit_1.PositionalLetterGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = this.sylCompositions[j](sg);\n                if (sg.letters.length == sg.matchedLetters.length &&\n                    sg.matching == true) {\n                    sequences.push(sg.matchedLetters);\n                    break;\n                }\n            }\n        }\n        // console.log(sequences);\n        return sequences;\n    }\n}\nexports.KanaPositionalLetterGenerator = KanaPositionalLetterGenerator;\n//# sourceMappingURL=lettergen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi9rYW5hL2xldHRlcmdlbi5qcz9mMzI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHFEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlDQUFpQztBQUM1RDtBQUNBO0FBQ0Esb0NBQW9DLEVBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90YWlwYS9saWIva2FuYS9sZXR0ZXJnZW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2FuYVBvc2l0aW9uYWxMZXR0ZXJHZW5lcmF0b3IgPSB2b2lkIDA7XG5jb25zdCB1bml0XzEgPSByZXF1aXJlKFwiLi4vdW5pdFwiKTtcbmNvbnN0IGthbmFfMSA9IHJlcXVpcmUoXCIuL2thbmFcIik7XG5mdW5jdGlvbiBpbml0aWFsQ29uc29uYW50KHNnKSB7XG4gICAgY29uc3Qgc2ljcyA9IGthbmFfMS5pbml0aWFsQ29uc29uYW50c0thbmE7XG4gICAgaWYgKHNpY3MuaW5jbHVkZXMoc2cubGV0dGVyc1tzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwbCA9IGthbmFfMS5rYW5hUG9zaXRpb25hbExldHRlcnMuZ2V0KHNnLmxldHRlcnNbc2cubWF0Y2hlZExldHRlcnMubGVuZ3RoXSk7XG4gICAgICAgIGlmIChwbCkge1xuICAgICAgICAgICAgY29uc3QgcyA9IHBsKGthbmFfMS5LYW5hU3BlbGxpbmdUYWdzLmluaXRpYWxDb25zb25hbnQpO1xuICAgICAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICAgICAgc2cubWF0Y2hlZExldHRlcnMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHNnLm1hdGNoaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHNnO1xufVxuZnVuY3Rpb24gc2VtaXZvd2VsKHNnKSB7XG4gICAgY29uc3Qgc3N2cyA9IGthbmFfMS5zZW1pdm93ZWxzS2FuYTtcbiAgICBpZiAoc3N2cy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLm1hdGNoZWRMZXR0ZXJzLmxlbmd0aF0pKSB7XG4gICAgICAgIGNvbnN0IHBsID0ga2FuYV8xLmthbmFQb3NpdGlvbmFsTGV0dGVycy5nZXQoc2cubGV0dGVyc1tzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBsKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcGwoa2FuYV8xLkthbmFTcGVsbGluZ1RhZ3Muc2VtaXZvd2VsKTtcbiAgICAgICAgICAgIGlmIChzKVxuICAgICAgICAgICAgICAgIHNnLm1hdGNoZWRMZXR0ZXJzLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNnO1xufVxuZnVuY3Rpb24gdm93ZWwoc2cpIHtcbiAgICBjb25zdCBzdnMgPSBrYW5hXzEudm93ZWxzS2FuYTtcbiAgICBpZiAoc3ZzLmluY2x1ZGVzKHNnLmxldHRlcnNbc2cubWF0Y2hlZExldHRlcnMubGVuZ3RoXSkpIHtcbiAgICAgICAgY29uc3QgcGwgPSBrYW5hXzEua2FuYVBvc2l0aW9uYWxMZXR0ZXJzLmdldChzZy5sZXR0ZXJzW3NnLm1hdGNoZWRMZXR0ZXJzLmxlbmd0aF0pO1xuICAgICAgICBpZiAocGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBwbChrYW5hXzEuS2FuYVNwZWxsaW5nVGFncy52b3dlbCk7XG4gICAgICAgICAgICBpZiAocylcbiAgICAgICAgICAgICAgICBzZy5tYXRjaGVkTGV0dGVycy5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZztcbn1cbmZ1bmN0aW9uIGhhdHN1b24oc2cpIHtcbiAgICBjb25zdCBzZmNzID0ga2FuYV8xLmhhdHN1b25zS2FuYTtcbiAgICBpZiAoc2Zjcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLm1hdGNoZWRMZXR0ZXJzLmxlbmd0aF0pKSB7XG4gICAgICAgIGNvbnN0IHBsID0ga2FuYV8xLmthbmFQb3NpdGlvbmFsTGV0dGVycy5nZXQoc2cubGV0dGVyc1tzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBsKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcGwoa2FuYV8xLkthbmFTcGVsbGluZ1RhZ3MuZmluYWxDb25zb25hbnQpO1xuICAgICAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICAgICAgc2cubWF0Y2hlZExldHRlcnMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2c7XG59XG5mdW5jdGlvbiBmaW5hbENvbnNvbmFudChzZykge1xuICAgIGNvbnN0IHNmY3MgPSBrYW5hXzEuZmluYWxDb25zb25hbnRzS2FuYTtcbiAgICBpZiAoc2Zjcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW3NnLm1hdGNoZWRMZXR0ZXJzLmxlbmd0aF0pKSB7XG4gICAgICAgIGNvbnN0IHBsID0ga2FuYV8xLmthbmFQb3NpdGlvbmFsTGV0dGVycy5nZXQoc2cubGV0dGVyc1tzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGhdKTtcbiAgICAgICAgaWYgKHBsKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gcGwoa2FuYV8xLkthbmFTcGVsbGluZ1RhZ3MuZmluYWxDb25zb25hbnQpO1xuICAgICAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICAgICAgc2cubWF0Y2hlZExldHRlcnMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2c7XG59XG5mdW5jdGlvbiBnZXJtaW5hdGVkQ29uc29uYW50KHNnKSB7XG4gICAgY29uc3Qgc2djcyA9IGthbmFfMS5nZXJtaW5hdGVkQ29uc29uYW50c0thbmE7XG4gICAgaWYgKHNnY3MuaW5jbHVkZXMoc2cubGV0dGVyc1tzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGhdKSkge1xuICAgICAgICBjb25zdCBwbCA9IGthbmFfMS5rYW5hUG9zaXRpb25hbExldHRlcnMuZ2V0KHNnLmxldHRlcnNbc2cubWF0Y2hlZExldHRlcnMubGVuZ3RoXSk7XG4gICAgICAgIGlmIChwbCkge1xuICAgICAgICAgICAgY29uc3QgcyA9IHBsKGthbmFfMS5LYW5hU3BlbGxpbmdUYWdzLmdlcm1pbmF0ZWRDb25zb25hbnQpO1xuICAgICAgICAgICAgaWYgKHMpXG4gICAgICAgICAgICAgICAgc2cubWF0Y2hlZExldHRlcnMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2c7XG59XG5jb25zdCBzY1YgPSB1bml0XzEuc2dQaXBlKHZvd2VsKTtcbmNvbnN0IHNjQ1YgPSB1bml0XzEuc2dQaXBlKGluaXRpYWxDb25zb25hbnQsIHZvd2VsKTtcbmNvbnN0IHNjVkMgPSB1bml0XzEuc2dQaXBlKHZvd2VsLCBoYXRzdW9uKTtcbmNvbnN0IHNjQ1ZDID0gdW5pdF8xLnNnUGlwZShpbml0aWFsQ29uc29uYW50LCB2b3dlbCwgZmluYWxDb25zb25hbnQpO1xuY29uc3Qgc2NDU1YgPSB1bml0XzEuc2dQaXBlKGluaXRpYWxDb25zb25hbnQsIHNlbWl2b3dlbCwgdm93ZWwpO1xuY29uc3Qgc2NDQ1YgPSB1bml0XzEuc2dQaXBlKGdlcm1pbmF0ZWRDb25zb25hbnQsIGluaXRpYWxDb25zb25hbnQsIHZvd2VsKTtcbmNsYXNzIEthbmFQb3NpdGlvbmFsTGV0dGVyR2VuZXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zeWxDb21wb3NpdGlvbnMgPSBbc2NWLCBzY0NWLCBzY1ZDLCBzY0NWQywgc2NDU1YsIHNjQ0NWXTtcbiAgICB9XG4gICAgZ2VuU29rdW9uQW5kR2VybWluYXRlZChsZXR0ZXJzLCBsb29rYWhlYWQpIHtcbiAgICAgICAgbGV0IHN0cnMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgc3Rycy5wdXNoKGxldHRlcnMpO1xuICAgICAgICAvLyBjb25zb25hbnQgZ2VybWluYXRpb25cbiAgICAgICAgaWYgKGthbmFfMS5nZXJtaW5hdGVkQ29uc29uYW50c0thbmEuaW5jbHVkZXMobGV0dGVyc1swXSkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IHN5bCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgc3lsLnB1c2gobGV0dGVyc1swXS5jaGFyQXQoMCkpO1xuICAgICAgICAgICAgZm9yIChsZXQgZSBvZiBsZXR0ZXJzKSB7XG4gICAgICAgICAgICAgICAgc3lsLnB1c2goZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJzLnB1c2goc3lsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzb2t1b25cbiAgICAgICAgbGV0IGZjcyA9IGthbmFfMS5maW5hbENvbnNvbmFudHNLYW5hO1xuICAgICAgICBmb3IgKGxldCBlIG9mIGZjcy5sZXR0ZXJzKSB7XG4gICAgICAgICAgICBsZXQgc3lsID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHN5bCwgbGV0dGVycyk7XG4gICAgICAgICAgICBzeWwucHVzaChlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYgKGUudG9TdHJpbmcoKSA9PT0gbG9va2FoZWFkKVxuICAgICAgICAgICAgICAgIHN0cnMucHVzaChzeWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJzO1xuICAgIH1cbiAgICBnZW5lcmF0ZShsZXR0ZXJzLCBsb29rYWhlYWQpIHtcbiAgICAgICAgbGV0IHN0cnMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgbGV0IHNlcXVlbmNlcyA9IG5ldyBBcnJheSgpOyAvLyB0byBiZSByZXR1cm5lZFxuICAgICAgICBzdHJzID0gdGhpcy5nZW5Tb2t1b25BbmRHZXJtaW5hdGVkKGxldHRlcnMsIGxvb2thaGVhZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cnMpO1xuICAgICAgICBmb3IgKGxldCBpIGluIHN0cnMpIHtcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyBhbGwgbmVlZGVkIHBvc2l0aW9uYWwgbGV0dGVycyB0byBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5zeWxDb21wb3NpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2cgPSBuZXcgdW5pdF8xLlBvc2l0aW9uYWxMZXR0ZXJHZW5lcmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgc2cubGV0dGVycyA9IHN0cnNbaV07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgajogJHtqfWApXG4gICAgICAgICAgICAgICAgc2cgPSB0aGlzLnN5bENvbXBvc2l0aW9uc1tqXShzZyk7XG4gICAgICAgICAgICAgICAgaWYgKHNnLmxldHRlcnMubGVuZ3RoID09IHNnLm1hdGNoZWRMZXR0ZXJzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBzZy5tYXRjaGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKHNnLm1hdGNoZWRMZXR0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNlcXVlbmNlcyk7XG4gICAgICAgIHJldHVybiBzZXF1ZW5jZXM7XG4gICAgfVxufVxuZXhwb3J0cy5LYW5hUG9zaXRpb25hbExldHRlckdlbmVyYXRvciA9IEthbmFQb3NpdGlvbmFsTGV0dGVyR2VuZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV0dGVyZ2VuLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/lettergen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/kana/morpheme.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/kana/morpheme.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KanaUncombiningMorphemeMaker = exports.KanaUncombiningMorpheme = exports.KanaSyllable = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst kana_1 = __webpack_require__(/*! ./kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst lettergen_1 = __webpack_require__(/*! ./lettergen */ \"./node_modules/taipa/lib/kana/lettergen.js\");\nclass KanaSyllable extends unit_1.Syllable {\n}\nexports.KanaSyllable = KanaSyllable;\n/** A syllable. */\nclass KanaUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, letters, kcm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = kcm;\n        this.letters = new Array();\n        this.letters = letters;\n    }\n}\nexports.KanaUncombiningMorpheme = KanaUncombiningMorpheme;\nfunction syllabifyKana(letters, beginOfSyllable) {\n    let literal = '';\n    let matched = '';\n    let lookAhead = '';\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    const vwls = kana_1.vowelsKana;\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        if (kana_1.hiraganaKatakana.has(literal) || kana_1.gailaigo.has(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            if (i + 1 < letters.length)\n                lookAhead = letters[i + 1].literal; // look-ahead\n        }\n        else if (literal.length == 3 &&\n            letters[0].literal === kana_1.KanaLetterTags.ng &&\n            kana_1.vowelsKana.includes(letters[1].literal)) {\n            // ng-\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n        }\n        else if (literal.length == 3 &&\n            literal[0] === literal[1] &&\n            vwls.includes(literal[2])) {\n            // for consonant germination of sokuon. e.g. ggu, kku, ppa, etc.\n            matched = literal;\n            ltrs.shift(); // shift the germinated consonants\n            Object.assign(matchedLtrs, ltrs);\n        }\n        else if (ltrs.length == 3 &&\n            ltrs[0] === kana_1.KanaLetterTags.t &&\n            ltrs[1] === kana_1.KanaLetterTags.ch &&\n            vwls.includes(ltrs[2])) {\n            matched = literal;\n            // no need to shift the germinated consonant? check out the above block\n            Object.assign(matchedLtrs, ltrs);\n        }\n        else if (kana_1.hatsuonsKana.includes(lookAhead) && i == 1) {\n            if (letters.length > 2 &&\n                kana_1.initialConsonantsKana.includes(letters[2].literal)) {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                lookAhead = letters[i + 1].literal; // look-ahead\n            }\n            // console.log(lookAhead, i);\n        }\n    }\n    let list = new Array();\n    if (matched.length > 0) {\n        // console.log(matchedLtrs, lookAhead);\n        const ksg = new lettergen_1.KanaPositionalLetterGenerator();\n        list = ksg.generate(matchedLtrs, lookAhead);\n        // console.log(list);\n    }\n    let arraysOfLetters = new Array();\n    let mp = new unit_1.MatchedPattern();\n    let pLetters = new Array();\n    for (let m in list) {\n        let min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        if (n + 1 == min) {\n                            // copy the matched letters\n                            let arr = new Array();\n                            for (let q = 0; q < min; q++) {\n                                arr[q] = letters[beginOfSyllable + q];\n                            }\n                            arraysOfLetters.push(arr);\n                            pLetters = list[m];\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (arraysOfLetters.length == 1) {\n        // only one matched\n        // copy the matched letters\n        for (let q = 0; q < arraysOfLetters[0].length; q++) {\n            mp.letters[q] = letters[beginOfSyllable + q];\n            mp.pattern[q] = pLetters[q];\n        }\n        return mp;\n    }\n    if (arraysOfLetters.length > 1) {\n        let longerEntry = -1; // length of the longest matched entry\n        let shorterEntry = -1;\n        let index = 0;\n        for (let j = 0; j < arraysOfLetters.length; j++) {\n            if (arraysOfLetters[j].length > arraysOfLetters[index].length) {\n                index = j;\n            }\n        }\n        if (index > 0) {\n            longerEntry = index;\n            shorterEntry = 0;\n        }\n        else {\n            longerEntry = 0;\n            shorterEntry = 1;\n        }\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length) {\n            if (kana_1.hatsuonsKana.includes(arraysOfLetters[longerEntry][arraysOfLetters[longerEntry].length - 1]\n                .literal)) {\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = pLetters[q];\n                }\n                return mp;\n            }\n            // return the shorter one\n            for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = pLetters[q];\n            }\n            return mp;\n        }\n        // look ahead for 1 letter\n        if (letters.length - beginOfSyllable ==\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.initialConsonantsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // consonant-ending\n                // return the longer one\n                for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = pLetters[q];\n                }\n            }\n            else {\n                // vowel ending\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = pLetters[q];\n                }\n            }\n            return mp;\n        }\n        // look ahead for 2 letters\n        if (letters.length - beginOfSyllable >\n            arraysOfLetters[longerEntry].length + 1) {\n            if (kana_1.vowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true ||\n                kana_1.semivowelsKana.includes(letters[beginOfSyllable + arraysOfLetters[longerEntry].length].literal) == true) {\n                // return the shorter one\n                for (let q = 0; q < arraysOfLetters[shorterEntry].length; q++) {\n                    mp.letters[q] = letters[beginOfSyllable + q];\n                    mp.pattern[q] = pLetters[q];\n                }\n                return mp;\n            }\n            // return the longer one\n            for (let q = 0; q < arraysOfLetters[longerEntry].length; q++) {\n                mp.letters[q] = letters[beginOfSyllable + q];\n                mp.pattern[q] = pLetters[q];\n            }\n        }\n    }\n    return mp;\n}\nclass KanaUncombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor(kcm) {\n        super();\n        this.metaplasm = kcm;\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(msp) {\n        return new KanaUncombiningMorpheme(new KanaSyllable(msp.letters), msp.pattern, this.metaplasm);\n    }\n    postprocess(patterns) {\n        let morphemes = this.createMorphemes();\n        for (let i in patterns) {\n            morphemes.push(this.createMorpheme(patterns[i]));\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = graphemes.map(it => it.letter);\n        const ptrns = this.make(ltrs, syllabifyKana);\n        const ms = this.postprocess(ptrns);\n        return ms;\n    }\n}\nexports.KanaUncombiningMorphemeMaker = KanaUncombiningMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/kana/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/metaplasm.js":
/*!*********************************************!*\
  !*** ./node_modules/taipa/lib/metaplasm.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalPhrasalUnmutationMetaplasm = exports.TonalPhrasalMutationMetaplasm = exports.TonalPhrasalUninfectionMetaplasm = exports.TonalPhrasalInfectionMetaplasm = exports.TonalPhrasalUninsertionMetaplasm = exports.TonalPhrasalInsertionMetaplasm = exports.TonalPhrasalZeroInflection = exports.TonalPhrasalInflectionMetaplasm = exports.TonalLemmatizationMetaplasm = exports.TonalZeroUnmutationMetaplasm = exports.TonalZeroMutationMetaplasm = exports.TonalUnmutationMetaplasm = exports.TonalMutationMetaplasm = exports.TonalZeroUninfectionMetaplasm = exports.TonalZeroInfectionMetaplasm = exports.TonalUninfectionMetaplasm = exports.TonalInfectionMetaplasm = exports.TonalZeroUninsertionMetaplasm = exports.TonalZeroInsertionMetaplasm = exports.TonalUninsertionMetaplasm = exports.TonalInsertionMetaplasm = exports.TonalZeroInflection = exports.TonalInflectionMetaplasm = exports.KanaCombiningMetaplasm = exports.RemovingNasalizationOfAy = exports.RemovingEpenthesisOfAy = exports.TonalZeroCombining = exports.TonalCombiningMetaplasm = void 0;\nconst interface_1 = __webpack_require__(/*! ./interface */ \"./node_modules/taipa/lib/interface.js\");\nclass TonalCombiningMetaplasm extends interface_1.Metaplasm {\n    apply(letters, allomorph) {\n        return [];\n    }\n}\nexports.TonalCombiningMetaplasm = TonalCombiningMetaplasm;\nclass TonalZeroCombining extends TonalCombiningMetaplasm {\n}\nexports.TonalZeroCombining = TonalZeroCombining;\nclass RemovingEpenthesisOfAy extends TonalCombiningMetaplasm {\n    applyToLetters(letters) {\n        letters.shift();\n        return letters;\n    }\n    applyToString(str) {\n        return str.slice(1, 2);\n    }\n}\nexports.RemovingEpenthesisOfAy = RemovingEpenthesisOfAy;\nclass RemovingNasalizationOfAy extends TonalCombiningMetaplasm {\n}\nexports.RemovingNasalizationOfAy = RemovingNasalizationOfAy;\nclass KanaCombiningMetaplasm extends interface_1.Metaplasm {\n}\nexports.KanaCombiningMetaplasm = KanaCombiningMetaplasm;\nclass TonalInflectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInflectionMetaplasm = TonalInflectionMetaplasm;\nclass TonalZeroInflection extends TonalInflectionMetaplasm {\n}\nexports.TonalZeroInflection = TonalZeroInflection;\nclass TonalInsertionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInsertionMetaplasm = TonalInsertionMetaplasm;\nclass TonalUninsertionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninsertionMetaplasm = TonalUninsertionMetaplasm;\nclass TonalZeroInsertionMetaplasm extends TonalInsertionMetaplasm {\n}\nexports.TonalZeroInsertionMetaplasm = TonalZeroInsertionMetaplasm;\nclass TonalZeroUninsertionMetaplasm extends TonalUninsertionMetaplasm {\n}\nexports.TonalZeroUninsertionMetaplasm = TonalZeroUninsertionMetaplasm;\nclass TonalInfectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalInfectionMetaplasm = TonalInfectionMetaplasm;\nclass TonalUninfectionMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUninfectionMetaplasm = TonalUninfectionMetaplasm;\nclass TonalZeroInfectionMetaplasm extends TonalInfectionMetaplasm {\n}\nexports.TonalZeroInfectionMetaplasm = TonalZeroInfectionMetaplasm;\nclass TonalZeroUninfectionMetaplasm extends TonalUninfectionMetaplasm {\n}\nexports.TonalZeroUninfectionMetaplasm = TonalZeroUninfectionMetaplasm;\nclass TonalMutationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalMutationMetaplasm = TonalMutationMetaplasm;\nclass TonalUnmutationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes) {\n        return [];\n    }\n}\nexports.TonalUnmutationMetaplasm = TonalUnmutationMetaplasm;\nclass TonalZeroMutationMetaplasm extends TonalMutationMetaplasm {\n}\nexports.TonalZeroMutationMetaplasm = TonalZeroMutationMetaplasm;\nclass TonalZeroUnmutationMetaplasm extends TonalUnmutationMetaplasm {\n}\nexports.TonalZeroUnmutationMetaplasm = TonalZeroUnmutationMetaplasm;\nclass TonalLemmatizationMetaplasm extends interface_1.Metaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return [];\n    }\n}\nexports.TonalLemmatizationMetaplasm = TonalLemmatizationMetaplasm;\nclass TonalPhrasalInflectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n    applyVpp(lexemeOne, lexemeTwo, lexemeThree) {\n        return [];\n    }\n}\nexports.TonalPhrasalInflectionMetaplasm = TonalPhrasalInflectionMetaplasm;\nclass TonalPhrasalZeroInflection extends TonalPhrasalInflectionMetaplasm {\n}\nexports.TonalPhrasalZeroInflection = TonalPhrasalZeroInflection;\nclass TonalPhrasalInsertionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInsertionMetaplasm = TonalPhrasalInsertionMetaplasm;\nclass TonalPhrasalUninsertionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninsertionMetaplasm = TonalPhrasalUninsertionMetaplasm;\nclass TonalPhrasalInfectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalInfectionMetaplasm = TonalPhrasalInfectionMetaplasm;\nclass TonalPhrasalUninfectionMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUninfectionMetaplasm = TonalPhrasalUninfectionMetaplasm;\nclass TonalPhrasalMutationMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalMutationMetaplasm = TonalPhrasalMutationMetaplasm;\nclass TonalPhrasalUnmutationMetaplasm extends interface_1.Metaplasm {\n    apply(lexemeOne, lexemeTwo) {\n        return [];\n    }\n}\nexports.TonalPhrasalUnmutationMetaplasm = TonalPhrasalUnmutationMetaplasm;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/token.js":
/*!*****************************************!*\
  !*** ./node_modules/taipa/lib/token.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenLemmaLookup = exports.TokenAnalysis = exports.Token = void 0;\nconst symbols_1 = __webpack_require__(/*! ./dparser/symbols */ \"./node_modules/taipa/lib/dparser/symbols.js\");\nconst rules_1 = __webpack_require__(/*! ./dparser/rules */ \"./node_modules/taipa/lib/dparser/rules.js\");\nconst unit_1 = __webpack_require__(/*! ./unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lemmatizer_1 = __webpack_require__(/*! ./tonal/lemmatizer */ \"./node_modules/taipa/lib/tonal/lemmatizer.js\");\nclass Token {\n    /**\n     * Constructor of Token.\n     * @param text The text of the token\n     */\n    constructor(text) {\n        this.text = text;\n        /** The simple part-of-speech tag. */\n        this.pos = ''; // upos\n        /** The detailed part-of-speech tag. */\n        this.tag = ''; // xpos\n        /** The base form of the word. */\n        this.lemma = '';\n        /** Syntactic dependnecy */\n        this.dep = ''; // deprel\n        /** The head of this token */\n        this.head = undefined;\n    }\n}\nexports.Token = Token;\nclass TokenAnalysis {\n    constructor() {\n        /** Analyzed token. */\n        this.word = new unit_1.Word();\n        /** Base forms of the word. */\n        this.lemmas = new Array();\n        /** Inflectional suffix. */\n        this.inflectionalEnding = '';\n        /** positional letter sequences. */\n        this.letterSequences = new Array();\n        /** Syllabic block or syllabogram sequences. */\n        this.blockSequences = [];\n        /** Uncombining form sequences. */\n        this.uncombiningSequences = new Array(); // uncombining form sequences\n    }\n}\nexports.TokenAnalysis = TokenAnalysis;\nclass TokenLemmaLookup {\n    getTonalLemmas(doc) {\n        const sophv = new rules_1.PhrasalVerbs();\n        let j = 0;\n        let k = 0;\n        let len = 0;\n        for (let i = 0; i < doc.tokens.length; i++) {\n            if (len == i) {\n                // loop over the doc.speeches sequence\n                if (j < doc.phrases.length) {\n                    len += doc.phrases[j].elements.length;\n                    if (j + 1 < doc.phrases.length)\n                        j++;\n                    k = 0;\n                }\n            }\n            else {\n                k++;\n            }\n            if (doc.tokens[i].text === 'che' || doc.tokens[i].text === 'he') {\n                doc.tokens[i].lemma = doc.tokens[i].text;\n                continue; // defective\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.psub ||\n                doc.tokens[i].tag === symbols_1.Tagset.aux) {\n                doc.tokens[i].lemma = doc.tokens[i].text;\n                continue;\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.vb && i + 1 < doc.tokens.length) {\n                if (i + 2 < doc.tokens.length && doc.tokens[i + 2].tag === symbols_1.Tagset.ppv) {\n                    // phrasal verbs of length 3\n                    const base = sophv.match([\n                        doc.tokens[i].text,\n                        doc.tokens[i + 1].text,\n                        doc.tokens[i + 2].text,\n                    ]);\n                    if (base != '') {\n                        const lemmas = base.split(' ');\n                        doc.tokens[i].lemma = lemmas[0];\n                        doc.tokens[i + 1].lemma = lemmas[1];\n                        doc.tokens[i + 2].lemma = lemmas[2];\n                        i++;\n                    }\n                    continue;\n                }\n                else if (doc.tokens[i + 1].tag === symbols_1.Tagset.ppv ||\n                    doc.tokens[i + 1].tag === symbols_1.Tagset.appr) {\n                    // phrasal verbs of length 2\n                    const base = sophv.match([\n                        doc.tokens[i].text,\n                        doc.tokens[i + 1].text,\n                    ]);\n                    if (base != '') {\n                        const lemmas = base.split(' ');\n                        doc.tokens[i].lemma = lemmas[0];\n                        doc.tokens[i + 1].lemma = lemmas[1];\n                        i++;\n                    }\n                    continue;\n                }\n            }\n            if (doc.tokens[i].tag === symbols_1.Tagset.vb) {\n                if (i + 1 < doc.tokens.length &&\n                    doc.tokens[i + 1].tag === symbols_1.Tagset.psub) {\n                    doc.tokens[i].lemma = doc.tokens[i].text; // copy the base form\n                    continue;\n                }\n            }\n            if (doc.phrases[j] && k + 1 == doc.phrases[j].elements.length) {\n                // at the end of a speech\n                // need to further check if the speech is a noun chunk or verb phrase\n                doc.tokens[i].lemma = doc.tokens[i].text; // copy the base form\n                continue;\n            }\n            let lemmas = [];\n            lemmas = lemmatizer_1.lemmatize(doc.tokens[i].text).getLemmas();\n            if (lemmas.length > 0)\n                doc.tokens[i].lemma = lemmas[0].literal;\n        }\n        return doc;\n    }\n}\nexports.TokenLemmaLookup = TokenLemmaLookup;\n//# sourceMappingURL=token.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/token.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/analyzer.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/analyzer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tonalLemmatizationAnalyzer = exports.graphAnalyzeTonal = exports.morphAnalyzeUnchanging = void 0;\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst morpheme_2 = __webpack_require__(/*! ../dparser/morpheme */ \"./node_modules/taipa/lib/dparser/morpheme.js\");\n/**\n * Analyzes a string into morphemes. Morphological analysis.\n * @param str A word.\n */\nfunction morphAnalyzeUnchanging(str) {\n    const gs = graphAnalyzeTonal(str);\n    const mm = new morpheme_2.TonalSoundUnchangingMorphemeMaker();\n    const ms = mm.makeMorphemes(gs);\n    return ms;\n}\nexports.morphAnalyzeUnchanging = morphAnalyzeUnchanging;\n/**\n * Analyzes a string into graphemes. Graphemic analysis.\n * @param str A string\n */\nfunction graphAnalyzeTonal(str) {\n    const gm = new unit_1.GraphemeMaker(version2_1.lowerLettersTonal);\n    return gm.makeGraphemes(str);\n}\nexports.graphAnalyzeTonal = graphAnalyzeTonal;\n/** Analyzes a string into morphemes or lexeme. */\nexports.tonalLemmatizationAnalyzer = {\n    /**\n     * Analyzes a string or graphemes into morphemes. Morphological analysis.\n     * @param x A string or graphemes\n     */\n    morphAnalyze(x) {\n        let gs = [];\n        if (typeof x == 'object') {\n            gs = x;\n        }\n        else if (typeof x == 'string') {\n            gs = graphAnalyzeTonal(x);\n        }\n        const mm = new morpheme_1.TonalUncombiningMorphemeMaker();\n        return mm.makeMorphemes(gs);\n    },\n    /**\n     * Analyzes a string or morphemes into a lexeme. Lexical analysis.\n     * @param x A string or uncombining morphemes\n     */\n    lexAnalyze(x) {\n        let ms = [];\n        if (typeof x == 'object') {\n            ms = x;\n        }\n        else if (typeof x == 'string') {\n            ms = this.morphAnalyze(x);\n        }\n        const lm = new lexeme_1.TonalLemmatizationLexemeMaker();\n        return lm.makeLexemes(ms);\n    },\n};\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9hbmFseXplci5qcz8xMDk2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwREFBVTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEMsbUJBQW1CLG1CQUFPLENBQUMsOERBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsOERBQVk7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMseUVBQXFCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2FuYWx5emVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvbmFsTGVtbWF0aXphdGlvbkFuYWx5emVyID0gZXhwb3J0cy5ncmFwaEFuYWx5emVUb25hbCA9IGV4cG9ydHMubW9ycGhBbmFseXplVW5jaGFuZ2luZyA9IHZvaWQgMDtcbmNvbnN0IGxleGVtZV8xID0gcmVxdWlyZShcIi4vbGV4ZW1lXCIpO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG5jb25zdCB2ZXJzaW9uMl8xID0gcmVxdWlyZShcIi4vdmVyc2lvbjJcIik7XG5jb25zdCBtb3JwaGVtZV8xID0gcmVxdWlyZShcIi4vbW9ycGhlbWVcIik7XG5jb25zdCBtb3JwaGVtZV8yID0gcmVxdWlyZShcIi4uL2RwYXJzZXIvbW9ycGhlbWVcIik7XG4vKipcbiAqIEFuYWx5emVzIGEgc3RyaW5nIGludG8gbW9ycGhlbWVzLiBNb3JwaG9sb2dpY2FsIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHdvcmQuXG4gKi9cbmZ1bmN0aW9uIG1vcnBoQW5hbHl6ZVVuY2hhbmdpbmcoc3RyKSB7XG4gICAgY29uc3QgZ3MgPSBncmFwaEFuYWx5emVUb25hbChzdHIpO1xuICAgIGNvbnN0IG1tID0gbmV3IG1vcnBoZW1lXzIuVG9uYWxTb3VuZFVuY2hhbmdpbmdNb3JwaGVtZU1ha2VyKCk7XG4gICAgY29uc3QgbXMgPSBtbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICByZXR1cm4gbXM7XG59XG5leHBvcnRzLm1vcnBoQW5hbHl6ZVVuY2hhbmdpbmcgPSBtb3JwaEFuYWx5emVVbmNoYW5naW5nO1xuLyoqXG4gKiBBbmFseXplcyBhIHN0cmluZyBpbnRvIGdyYXBoZW1lcy4gR3JhcGhlbWljIGFuYWx5c2lzLlxuICogQHBhcmFtIHN0ciBBIHN0cmluZ1xuICovXG5mdW5jdGlvbiBncmFwaEFuYWx5emVUb25hbChzdHIpIHtcbiAgICBjb25zdCBnbSA9IG5ldyB1bml0XzEuR3JhcGhlbWVNYWtlcih2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsKTtcbiAgICByZXR1cm4gZ20ubWFrZUdyYXBoZW1lcyhzdHIpO1xufVxuZXhwb3J0cy5ncmFwaEFuYWx5emVUb25hbCA9IGdyYXBoQW5hbHl6ZVRvbmFsO1xuLyoqIEFuYWx5emVzIGEgc3RyaW5nIGludG8gbW9ycGhlbWVzIG9yIGxleGVtZS4gKi9cbmV4cG9ydHMudG9uYWxMZW1tYXRpemF0aW9uQW5hbHl6ZXIgPSB7XG4gICAgLyoqXG4gICAgICogQW5hbHl6ZXMgYSBzdHJpbmcgb3IgZ3JhcGhlbWVzIGludG8gbW9ycGhlbWVzLiBNb3JwaG9sb2dpY2FsIGFuYWx5c2lzLlxuICAgICAqIEBwYXJhbSB4IEEgc3RyaW5nIG9yIGdyYXBoZW1lc1xuICAgICAqL1xuICAgIG1vcnBoQW5hbHl6ZSh4KSB7XG4gICAgICAgIGxldCBncyA9IFtdO1xuICAgICAgICBpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGdzID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgeCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZ3MgPSBncmFwaEFuYWx5emVUb25hbCh4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtbSA9IG5ldyBtb3JwaGVtZV8xLlRvbmFsVW5jb21iaW5pbmdNb3JwaGVtZU1ha2VyKCk7XG4gICAgICAgIHJldHVybiBtbS5tYWtlTW9ycGhlbWVzKGdzKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFuYWx5emVzIGEgc3RyaW5nIG9yIG1vcnBoZW1lcyBpbnRvIGEgbGV4ZW1lLiBMZXhpY2FsIGFuYWx5c2lzLlxuICAgICAqIEBwYXJhbSB4IEEgc3RyaW5nIG9yIHVuY29tYmluaW5nIG1vcnBoZW1lc1xuICAgICAqL1xuICAgIGxleEFuYWx5emUoeCkge1xuICAgICAgICBsZXQgbXMgPSBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBtcyA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1zID0gdGhpcy5tb3JwaEFuYWx5emUoeCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG0gPSBuZXcgbGV4ZW1lXzEuVG9uYWxMZW1tYXRpemF0aW9uTGV4ZW1lTWFrZXIoKTtcbiAgICAgICAgcmV0dXJuIGxtLm1ha2VMZXhlbWVzKG1zKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuYWx5emVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/analyzer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/collections.js":
/*!*****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/collections.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.impossibleSequences = exports.eighthToFourthFinals = exports.sandhiFinalsPPpttt = exports.fourthToEighthFinals = exports.fourthFinals = exports.finalsBgjlsbbggllss = exports.voicedVoicelessFinals = exports.voicelessVoicedFinals = exports.eighthToFirst = exports.initialsBghjl = exports.ttInitialTInitialPairs = exports.initialsForTT = exports.initialsForFinalT = exports.finalsBBggkkpp = exports.finalsLs = exports.finalsBgkp = exports.finalsJls = exports.epentheticLetters = exports.tonalsWx = exports.combiningRules = exports.nasalFinals = exports.nasalInitials = void 0;\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\n// m, n, ng\nconst nasals = [\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nexports.nasalInitials = nasals;\nexports.nasalFinals = nasals;\nexports.combiningRules = new Map()\n    .set(version2_1.TonalLetterTags.zero, [version2_1.TonalLetterTags.z])\n    .set(version2_1.TonalLetterTags.y, [version2_1.TonalLetterTags.zero, version2_1.TonalLetterTags.f])\n    .set(version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.y])\n    .set(version2_1.TonalLetterTags.x, [version2_1.TonalLetterTags.z, version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.z, [version2_1.TonalLetterTags.w])\n    .set(version2_1.TonalLetterTags.p, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.t, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.k, [\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.h, [\n    version2_1.TonalLetterTags.y,\n    version2_1.TonalLetterTags.f,\n    version2_1.TonalLetterTags.w,\n    version2_1.TonalLetterTags.x,\n])\n    .set(version2_1.TonalLetterTags.pp, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.tt, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.kk, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x])\n    .set(version2_1.TonalLetterTags.hh, [version2_1.TonalLetterTags.w, version2_1.TonalLetterTags.x]);\n// w, x\nexports.tonalsWx = [\n    version2_1.TonalLetterTags.w.toString(),\n    version2_1.TonalLetterTags.x.toString(),\n];\n// b, l, g, m, n\nexports.epentheticLetters = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.m.toString(),\n    version2_1.TonalLetterTags.n.toString(),\n];\n// j, l, s for first checked tones\nexports.finalsJls = [\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n// b, g, k, p\nexports.finalsBgkp = [\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.p.toString(),\n];\n// l, s for third and fifth checked tones\nexports.finalsLs = [\n    version2_1.TonalLetterTags.l.toString(),\n    version2_1.TonalLetterTags.s.toString(),\n];\n// bb, gg, kk, pp\nexports.finalsBBggkkpp = [\n    version2_1.TonalLetterTags.bb.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.pp.toString(),\n];\nexports.initialsForFinalT = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    q: version2_1.TonalLetterTags.q.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    v: version2_1.TonalLetterTags.v.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\nexports.initialsForTT = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    q: version2_1.TonalLetterTags.q.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n    v: version2_1.TonalLetterTags.v.toString(),\n    m: version2_1.TonalLetterTags.m.toString(),\n    n: version2_1.TonalLetterTags.n.toString(),\n    ng: version2_1.TonalLetterTags.ng.toString(),\n};\n// tt, t\nexports.ttInitialTInitialPairs = new Map()\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.p, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.v, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.k, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.q, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.g, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.f + exports.initialsForFinalT.j, version2_1.TonalLetterTags.j)\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.w + exports.initialsForFinalT.j, version2_1.TonalLetterTags.l)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.m, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.n, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.t + exports.initialsForFinalT.ng, version2_1.TonalLetterTags.h)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.p, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.v, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.k, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.q, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.g, version2_1.TonalLetterTags.gg)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.b, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.j, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.s, version2_1.TonalLetterTags.ss)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.m, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.n, version2_1.TonalLetterTags.hh)\n    .set(version2_1.TonalLetterTags.tt + exports.initialsForTT.ng, version2_1.TonalLetterTags.hh);\n// b, g, h, j, l\nexports.initialsBghjl = [\n    // turn preceding finals to voiced ones\n    version2_1.TonalLetterTags.b.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.h.toString(),\n    version2_1.TonalLetterTags.j.toString(),\n    version2_1.TonalLetterTags.l.toString(),\n];\n// 8 to 1\nexports.eighthToFirst = new Map()\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.p)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.hh, version2_1.TonalLetterTags.h);\n/** Turn preceding finals to voiced ones. Unvoiced to voiced */\nexports.voicelessVoicedFinals = new Map()\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.b)\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.l)\n    .set(version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.g)\n    .set(version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.bb)\n    .set(version2_1.TonalLetterTags.tt, version2_1.TonalLetterTags.ll)\n    .set(version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.gg);\nexports.voicedVoicelessFinals = new Map()\n    .set(version2_1.TonalLetterTags.b, version2_1.TonalLetterTags.p) // external sandhi\n    .set(version2_1.TonalLetterTags.l, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.g, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.p) // internal sandhi\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.t)\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.f, version2_1.TonalLetterTags.k)\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.x, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.bb, version2_1.TonalLetterTags.pp) // external sandhi\n    .set(version2_1.TonalLetterTags.ll, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.gg, version2_1.TonalLetterTags.kk);\n/** unchanged sounds for b, g, j, l, s, bb, gg, ll, ss */\nexports.finalsBgjlsbbggllss = new Map()\n    // keys are for the has method\n    // keys and values are for the get method. keys are finals plus no tonals\n    .set(version2_1.TonalLetterTags.b, [version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.g, [version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.j, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.l, [version2_1.TonalLetterTags.l, version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.s, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.bb, [version2_1.TonalLetterTags.pp, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.gg, [version2_1.TonalLetterTags.kk, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ll, [version2_1.TonalLetterTags.ll, version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.ss, [version2_1.TonalLetterTags.tt])\n    // both keys and values are for the has method\n    // the has method will not reach these pairs\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.tt])\n    .set(version2_1.TonalLetterTags.b + version2_1.TonalLetterTags.f, [\n    version2_1.TonalLetterTags.p,\n    version2_1.TonalLetterTags.t,\n])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.f, [\n    version2_1.TonalLetterTags.k,\n    version2_1.TonalLetterTags.t,\n])\n    .set(version2_1.TonalLetterTags.j + version2_1.TonalLetterTags.f, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.f, [version2_1.TonalLetterTags.t])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.w, [\n    version2_1.TonalLetterTags.kk,\n    version2_1.TonalLetterTags.tt,\n])\n    .set(version2_1.TonalLetterTags.g + version2_1.TonalLetterTags.x, [\n    version2_1.TonalLetterTags.kk,\n    version2_1.TonalLetterTags.tt,\n])\n    .set(version2_1.TonalLetterTags.l + version2_1.TonalLetterTags.w, [version2_1.TonalLetterTags.tt]);\nexports.fourthFinals = {\n    p: version2_1.TonalLetterTags.p.toString(),\n    t: version2_1.TonalLetterTags.t.toString(),\n    k: version2_1.TonalLetterTags.k.toString(),\n    h: version2_1.TonalLetterTags.h.toString(),\n    b: version2_1.TonalLetterTags.b.toString(),\n    g: version2_1.TonalLetterTags.g.toString(),\n    j: version2_1.TonalLetterTags.j.toString(),\n    l: version2_1.TonalLetterTags.l.toString(),\n    s: version2_1.TonalLetterTags.s.toString(),\n};\nexports.fourthToEighthFinals = new Map()\n    .set(version2_1.TonalLetterTags.p, version2_1.TonalLetterTags.pp)\n    .set(version2_1.TonalLetterTags.t, version2_1.TonalLetterTags.tt)\n    .set(version2_1.TonalLetterTags.k, version2_1.TonalLetterTags.kk)\n    .set(version2_1.TonalLetterTags.h, version2_1.TonalLetterTags.hh);\nexports.sandhiFinalsPPpttt = [\n    version2_1.TonalLetterTags.p.toString(),\n    version2_1.TonalLetterTags.pp.toString(),\n    version2_1.TonalLetterTags.t.toString(),\n    version2_1.TonalLetterTags.tt.toString(),\n];\n/** map eighth checked finals to fourth ones */\nexports.eighthToFourthFinals = new Map()\n    .set(version2_1.TonalLetterTags.bb, exports.fourthFinals.b.toString())\n    .set(version2_1.TonalLetterTags.gg, exports.fourthFinals.g.toString())\n    .set(version2_1.TonalLetterTags.hh, exports.fourthFinals.h.toString())\n    .set(version2_1.TonalLetterTags.kk, exports.fourthFinals.k.toString())\n    .set(version2_1.TonalLetterTags.ll, exports.fourthFinals.l.toString())\n    .set(version2_1.TonalLetterTags.pp, exports.fourthFinals.p.toString())\n    .set(version2_1.TonalLetterTags.ss, exports.fourthFinals.s.toString())\n    .set(version2_1.TonalLetterTags.tt, exports.fourthFinals.t.toString());\nexports.impossibleSequences = [\n    version2_1.TonalLetterTags.d.toString(),\n    version2_1.TonalLetterTags.q.toString(),\n    version2_1.TonalLetterTags.v.toString(),\n];\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/collections.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/init.js":
/*!**********************************************!*\
  !*** ./node_modules/taipa/lib/tonal/init.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTaiKanaBlocks = exports.checkNumberOfLetterTonal = void 0;\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst kana_1 = __webpack_require__(/*! ../kana/kana */ \"./node_modules/taipa/lib/kana/kana.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction checkNumberOfLetterTonal() {\n    if (version2_1.tonalPositionalLetters.size !== version2_1.lowerLettersTonal.size) {\n        console.log('sizes unmatched');\n    }\n}\nexports.checkNumberOfLetterTonal = checkNumberOfLetterTonal;\nconst combiningOverline = '\\u0305';\nconst combiningDotBelow = '\\u0323';\nfunction handleCombiningDotBelowOverline(initial, medial) {\n    const got = kanaInitials(mappingInitial.get(initial))(medial);\n    if (got && got[0]) {\n        if (initialsWithCombiningDotBelow.aspirated.includes(initial)) {\n            if (freeSyllablesWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline + combiningDotBelow;\n            }\n            return got[0] + combiningDotBelow;\n        }\n        else if (initialsWithCombiningDotBelow.withoutADotOrOverline.includes(initial)) {\n            return got[0];\n        }\n        else if (initialsWithCombiningDotBelow.withAnOverline.includes(initial)) {\n            if (freeSyllablesWithCombiningOverline.includes(initial + medial)) {\n                return got[0] + combiningOverline;\n            }\n            return got[0];\n        }\n    }\n    return '';\n}\nfunction getToneSymbolForFourthEighth(final, tonalLen) {\n    if (tonalLen == 0) {\n        // 4th tone and 8th tone\n        const kn = mappingSymbolForTones.get(final.toString());\n        if (kn) {\n            return kn[0];\n        }\n    }\n    return '';\n}\nfunction getReplicatedKanaVowel(letters, j, replica) {\n    if ((j == 0 &&\n        letters[0].name === version2_1.TonalSpellingTags.medial &&\n        (letters.length == 1 ||\n            (letters.length == 2 &&\n                letters[letters.length - 1].name === version2_1.TonalSpellingTags.freeTonal) ||\n            (letters.length == 2 &&\n                letters[letters.length - 1].name ===\n                    version2_1.TonalSpellingTags.nasalization))) ||\n        (letters.length == 3 &&\n            letters[letters.length - 2].name === version2_1.TonalSpellingTags.nasalization &&\n            letters[letters.length - 1].name === version2_1.TonalSpellingTags.freeTonal)) {\n        // reduplicate the vowel for syllables without an initial\n        // in case of a, e,\n        // in case ax, ex. enn,\n        // in case of ennx\n        return replica;\n    }\n    else if ((letters.length == 2 &&\n        letters[0].name === version2_1.TonalSpellingTags.medial &&\n        (letters[1].toString() === version2_1.TonalLetterTags.h ||\n            letters[1].toString() === version2_1.TonalLetterTags.hh)) ||\n        (letters.length == 3 &&\n            letters[0].name === version2_1.TonalSpellingTags.medial &&\n            (letters[1].toString() === version2_1.TonalLetterTags.h ||\n                letters[1].toString() === version2_1.TonalLetterTags.hh) &&\n            letters[2].name === version2_1.TonalSpellingTags.checkedTonal) ||\n        (letters.length == 3 &&\n            letters[0].name === version2_1.TonalSpellingTags.medial &&\n            letters[1].name === version2_1.TonalSpellingTags.nasalization &&\n            (letters[2].toString() === version2_1.TonalLetterTags.h ||\n                letters[2].toString() === version2_1.TonalLetterTags.hh))) {\n        // reduplicate the vowel for syllables without an initial\n        // in case of ah, ehh\n        // in case of ahy\n        // in case of ennh, innh\n        return getSmallKanaVowel(letters[0].toString());\n    }\n    return '';\n}\nfunction getSmallKanaVowel(medial) {\n    const got = kana_1.otherKanas.get(medial);\n    if (got && got[1]) {\n        // get the small form of the vowel and append it\n        return got[1];\n    }\n    return '';\n}\nfunction compose(morphemes) {\n    let kanaSeqs = [];\n    let kanas = new Array(morphemes.length);\n    let kanas4thToneWoArrow = '';\n    for (let i = 0; i < morphemes.length; i++) {\n        const initl = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.initial);\n        const mdls = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.medial);\n        const nslFnl = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.nasalFinal);\n        const stpFnl = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.stopFinal);\n        const frTnl = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.freeTonal);\n        const chkTnl = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.checkedTonal);\n        const nslz = morphemes[i].letters.filter(it => it.name === version2_1.TonalSpellingTags.nasalization);\n        const finalsForEToKanaIE = stpFnl\n            .filter(it => it.name === version2_1.TonalSpellingTags.stopFinal &&\n            finalsForEKegekkeggeng.includes(it.toString()))\n            .concat(nslFnl.filter(it => it.name === version2_1.TonalSpellingTags.nasalFinal &&\n            finalsForEKegekkeggeng.includes(it.toString())));\n        // initialize for this morpheme\n        kanas[i] = '';\n        if (initl.length == 1) {\n            if (mdls.length > 0) {\n                for (let j = 0; j < mdls.length; j++) {\n                    if (voewlsIRor.includes(mdls[j].toString())) {\n                        kanas[i] +=\n                            handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString()) + getKanaIRor(mdls, stpFnl.length + nslFnl.length == 1);\n                    }\n                    else if (mdls[j].toString() === version2_1.TonalLetterTags.ur) {\n                        if (j == 0) {\n                            // if the preceding letter is an initial\n                            const initialKana = handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString());\n                            kanas[i] += initialKana;\n                            if (stpFnl.length == 1) {\n                                const kn = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                            else {\n                                const kn = mappingMedial.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                        }\n                        else {\n                            if (stpFnl.length == 1) {\n                                const kn = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (kn)\n                                    kanas[i] += kn[1];\n                            }\n                            else {\n                                const gotVowels = mappingMedial.get(mdls[j].toString());\n                                if (gotVowels)\n                                    kanas[i] += gotVowels[1];\n                            }\n                        }\n                    }\n                    else {\n                        if (mdls[j].toString() === version2_1.TonalLetterTags.e &&\n                            nslFnl.length + stpFnl.length > 0 &&\n                            nslz.length == 0 &&\n                            finalsForEToKanaIE.length == 1) {\n                            // if there is a final, letter i should be used to retrieve an initial kana\n                            // in the case of ~eng or -ek\n                            kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), version2_1.TonalLetterTags.i);\n                            if (mdls[j].toString() === version2_1.TonalLetterTags.e) {\n                                // for letter e, an small kana e is appended to the preceding i-ending initial\n                                kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                            }\n                        }\n                        else {\n                            if (j > 0) {\n                                if (stpFnl.length == 1) {\n                                    // more that one vowels. e.g. goehh\n                                    kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                }\n                                else {\n                                    if (j == 1 && mdls.length == 3) {\n                                        kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                    }\n                                    else if (j == 1 && mdls.length == 2 && nslFnl.length == 1) {\n                                        kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                    }\n                                    else {\n                                        const kn = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                                        if (kn && kn[1])\n                                            kanas[i] += kn[1];\n                                    }\n                                }\n                            }\n                            else {\n                                // the first vowel. e.g. gehh, goehh\n                                kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), mdls[j].toString());\n                                if (nslFnl.length == 0 &&\n                                    mdls.length == 1 &&\n                                    stpFnl.length == 0) {\n                                    // open syllables with an initial\n                                    const kn = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                                    if (kn && kn[1]) {\n                                        // replicate the vowel and append it\n                                        kanas[i] += kn[1];\n                                    }\n                                }\n                                else if (nslFnl.length == 0 &&\n                                    mdls.length == 1 &&\n                                    stpFnl.length == 1 &&\n                                    version2_1.neutralFinalsTonal.includes(stpFnl[0].toString())) {\n                                    kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                // there is no medials\n            }\n        }\n        if (initl.length == 0) {\n            if (mdls.length > 0) {\n                for (let j = 0; j < mdls.length; j++) {\n                    let got;\n                    if (j == 0 &&\n                        mdls[j].toString() === version2_1.TonalLetterTags.o &&\n                        mdls.length > 1) {\n                        // map o to wo\n                        got = kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o);\n                    }\n                    else {\n                        // map o to o\n                        got = kana_1.hiraganaKatakana.get(mdls[j].toString());\n                    }\n                    if (got) {\n                        if (j == 1 && mdls.length == 3) {\n                            // get small kana for 2nd medial\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 1 && mdls.length == 2 && stpFnl.length == 1) {\n                            // get small kana for 2nd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 1 && mdls.length == 2 && nslFnl.length == 1) {\n                            // get small kana for 2nd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 2 && mdls.length == 3 && stpFnl.length == 1) {\n                            // get small kana for 3rd vowel\n                            kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                        }\n                        else if (j == 0 &&\n                            mdls[j].toString() === version2_1.TonalLetterTags.e &&\n                            nslFnl.length + stpFnl.length > 0 &&\n                            nslz.length == 0 &&\n                            finalsForEToKanaIE.length == 1) {\n                            // if there is a final, letter i should be used to retrieve an extra medial kana\n                            // in the case of ~eng or -ek\n                            const kn = kana_1.hiraganaKatakana.get(version2_1.TonalLetterTags.i);\n                            if (kn)\n                                kanas[i] += kn[1];\n                            if (mdls[j].toString() === version2_1.TonalLetterTags.e) {\n                                // for letter e, a small kana e is appended to the preceding i-\n                                kanas[i] += getSmallKanaVowel(mdls[j].toString());\n                            }\n                        }\n                        else {\n                            kanas[i] += got[1];\n                            kanas[i] += getReplicatedKanaVowel(morphemes[i].letters, j, got[1]);\n                        }\n                    }\n                    else {\n                        if (mdls[j].toString() === version2_1.TonalLetterTags.or ||\n                            mdls[j].toString() === version2_1.TonalLetterTags.ir) {\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            if (kn) {\n                                kanas[i] += kn[1] + combiningOverline;\n                                if (stpFnl.length == 1 &&\n                                    version2_1.neutralFinalsTonal.includes(stpFnl[0].toString())) {\n                                    // in case of orh, use kanaIRor to get one extra small kana\n                                    kanas[i] += getKanaIRor(mdls, stpFnl.length + nslFnl.length == 1);\n                                }\n                                else {\n                                    // there replicated kana other than ir, or\n                                    kanas[i] += getReplicatedKanaVowel(morphemes[i].letters, i, kn[1] + combiningOverline);\n                                }\n                            }\n                        }\n                        else if (mdls[j].toString() === version2_1.TonalLetterTags.ur ||\n                            mdls[j].toString() === version2_1.TonalLetterTags.er) {\n                            // if the preceding letter is not an initial\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            // in case of ur, iur. bypass urh, urhy, iurh, iurhy\n                            if (kn && stpFnl.length == 0)\n                                kanas[i] += kn[1];\n                            if (stpFnl.length == 1) {\n                                // in case of urh, urhy\n                                if (kn && mdls.length == 1)\n                                    kanas[i] += kn[1];\n                                const sml = mappingMedialSmallForm.get(mdls[j].toString());\n                                if (sml)\n                                    kanas[i] += sml[1];\n                            }\n                            else {\n                                if (mdls.length == 1) {\n                                    if (kn)\n                                        kanas[i] += getReplicatedKanaVowel(morphemes[i].letters, j, kn[1]);\n                                }\n                            }\n                        }\n                        else if (version2_1.materLectionisTonal.includes(mdls[j].toString())) {\n                            // mater lectionis: m, n, ng.\n                            const kn = mappingMedial.get(mdls[j].toString());\n                            if (kn) {\n                                kanas[i] += kn[1];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (nslz.length == 1) {\n            const tail = kanas[i].slice(1, kanas[i].length);\n            if (initl.length == 1) {\n                const kn = mappingNasalization.get(initl[0].toString() + mdls[0].toString());\n                if (kn)\n                    kanas[i] = kn + tail;\n            }\n            else {\n                const kn = mappingNasalization.get(mdls[0].toString());\n                if (kn)\n                    kanas[i] = kn + tail;\n            }\n        }\n        if (nslFnl.length == 1) {\n            // syllable finals\n            if (initl.length == 1 && mdls.length == 0) {\n                // there is no medials\n                const kn = kanaInitials(mappingInitial.get(initl[0].toString()))(nslFnl[0].toString());\n                if (kn && kn[0]) {\n                    kanas[i] += handleCombiningDotBelowOverline(initl[0].toString(), nslFnl[0].toString());\n                }\n            }\n            let kn;\n            if (stpFnl.length > 0)\n                kn = mappingSmallNasalFinal.get(nslFnl[0].toString());\n            else\n                kn = mappingNasalFinal.get(nslFnl[0].toString());\n            if (kn && kn[1])\n                kanas[i] += kn[1];\n        }\n        if (stpFnl.length == 1) {\n            // syllable finals\n            const kn = mappingStopFinal.get(stpFnl[0].toString());\n            if (kn && kn[1]) {\n                // stop finals p, t, k, pp, tt, kk\n                kanas[i] += kn[1];\n            }\n            if (Object.values(collections_1.fourthFinals).includes(stpFnl[0].toString())) {\n                kanas4thToneWoArrow = kanas[i];\n            }\n            kanas[i] += getToneSymbolForFourthEighth(stpFnl[0].toString(), chkTnl.length);\n        }\n        if (frTnl.length == 1) {\n            kanas[i] += mappingSymbolForTones.get(frTnl[0].toString());\n        }\n        if (chkTnl.length == 1) {\n            kanas[i] += mappingSymbolForTones.get(chkTnl[0].toString());\n        }\n    }\n    kanaSeqs.push(kanas.join(''));\n    if (kanas4thToneWoArrow.length > 0 && morphemes.length == 1) {\n        kanaSeqs.push(kanas4thToneWoArrow);\n    }\n    return kanaSeqs;\n}\n/** Get Taiwanese Kana blocks. */\nfunction getTaiKanaBlocks(morphemes) {\n    const kanaSequences = compose(morphemes);\n    return kanaSequences;\n}\nexports.getTaiKanaBlocks = getTaiKanaBlocks;\nconst kanaInitials = function (map) {\n    return function (following) {\n        if (following) {\n            if (map && map.has(following)) {\n                const got = map.get(following);\n                if (got && got[1]) {\n                    return [got[1]];\n                }\n            }\n        }\n        else {\n            if (map) {\n                /*\n                const kanas = Array.from(map.values());\n                const dupes = Array.from(kanas.map(it => (it ? it[1] : '')));\n                const dedupes = dupes.reduce(function (\n                  accumulator: string[],\n                  curr: string\n                ) {\n                  if (accumulator.filter(it => it === curr).length == 0) {\n                    accumulator.push(curr);\n                  }\n                  return accumulator;\n                },\n                []);\n                return dedupes;\n                */\n            }\n        }\n        return [];\n    };\n};\nconst getKanaIRor = function (vowels, hasOneFinal) {\n    if (vowels.length == 1) {\n        const kn = mappingMedial.get(vowels[0].toString());\n        if (kn) {\n            if (hasOneFinal) {\n                const sml = mappingMedialSmallForm.get(vowels[0].toString());\n                if (sml) {\n                    return sml[1] + combiningOverline;\n                }\n            }\n            return kn[1] + combiningOverline;\n        }\n    }\n    else if (vowels.length == 2) {\n        // return small form\n        const kn = mappingMedialSmallForm.get(vowels[0].toString());\n        if (kn) {\n            return kn[1] + combiningOverline;\n        }\n    }\n    return '';\n};\nconst freeSyllablesWithCombiningOverline = [\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.a.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.e.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.or.toString(),\n    version2_1.TonalLetterTags.ch.toString() + version2_1.TonalLetterTags.ur.toString(),\n    version2_1.TonalLetterTags.c.toString() + version2_1.TonalLetterTags.o.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.i.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.u.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.ng.toString(),\n    version2_1.TonalLetterTags.d.toString() + version2_1.TonalLetterTags.ir.toString(),\n    version2_1.TonalLetterTags.t.toString() + version2_1.TonalLetterTags.ir.toString(),\n];\nconst initialsWithCombiningDotBelow = {\n    // whether the dot should be combined\n    aspirated: [\n        // with a dot\n        version2_1.TonalLetterTags.k.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.p.toString(),\n        version2_1.TonalLetterTags.t.toString(),\n    ],\n    withoutADotOrOverline: [\n        version2_1.TonalLetterTags.q.toString(),\n        version2_1.TonalLetterTags.g.toString(),\n        version2_1.TonalLetterTags.b.toString(),\n        version2_1.TonalLetterTags.v.toString(),\n        version2_1.TonalLetterTags.j.toString(),\n        version2_1.TonalLetterTags.l.toString(),\n        version2_1.TonalLetterTags.h.toString(),\n        version2_1.TonalLetterTags.s.toString(),\n        version2_1.TonalLetterTags.m.toString(),\n        version2_1.TonalLetterTags.n.toString(),\n        version2_1.TonalLetterTags.ng.toString(),\n    ],\n    withAnOverline: [\n        version2_1.TonalLetterTags.ch.toString(),\n        version2_1.TonalLetterTags.c.toString(),\n        version2_1.TonalLetterTags.d.toString(),\n    ],\n};\n// includes mater lectionis\nconst mappingMedial = new Map()\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.er, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst voewlsIRor = [\n    version2_1.TonalLetterTags.ir.toString(),\n    version2_1.TonalLetterTags.or.toString(),\n];\nconst mappingMedialSmallForm = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.otherKanas.get(kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.otherKanas.get(kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.otherKanas.get(kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.or, kana_1.otherKanas.get(kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.otherKanas.get(kana_1.KanaLetterTags.w + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.otherKanas.get(kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.otherKanas.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.otherKanas.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.otherKanas.get(kana_1.KanaLetterTags.n));\nconst mappingSymbolForTones = new Map()\n    .set(version2_1.TonalLetterTags.f, '⍭') // apl functional symbol stile tilde (U+236D)\n    .set(version2_1.TonalLetterTags.y, '⎛') // left parenthesis upper hook (U+239B)\n    .set(version2_1.TonalLetterTags.w, '⎝') // left parenthesis lower hook (U+239D)\n    .set(version2_1.TonalLetterTags.x, '⟨') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.zx, '⟩') // mathematical left angle bracket (U+27E8)\n    .set(version2_1.TonalLetterTags.z, '⎸') // left vertical box line (U+23B8)\n    .set(version2_1.TonalLetterTags.xx, '⫽') // double solidus operator (U+2AFD)\n    .set(version2_1.TonalLetterTags.p, '⤆') // leftwards double arrow from bar (U+2906)\n    .set(version2_1.TonalLetterTags.t, '⤆')\n    .set(version2_1.TonalLetterTags.k, '⤆')\n    .set(version2_1.TonalLetterTags.h, '⤆')\n    .set(version2_1.TonalLetterTags.b, '⤆')\n    .set(version2_1.TonalLetterTags.g, '⤆')\n    .set(version2_1.TonalLetterTags.j, '⤆')\n    .set(version2_1.TonalLetterTags.l, '⤆')\n    .set(version2_1.TonalLetterTags.s, '⤆')\n    .set(version2_1.TonalLetterTags.pp, '⤇') // rightwards double arrow from bar (U+2907)\n    .set(version2_1.TonalLetterTags.tt, '⤇')\n    .set(version2_1.TonalLetterTags.kk, '⤇')\n    .set(version2_1.TonalLetterTags.hh, '⤇')\n    .set(version2_1.TonalLetterTags.bb, '⤇')\n    .set(version2_1.TonalLetterTags.gg, '⤇')\n    .set(version2_1.TonalLetterTags.ll, '⤇')\n    .set(version2_1.TonalLetterTags.ss, '⤇');\nconst mappingStopFinal = new Map()\n    .set(version2_1.TonalLetterTags.p, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.t, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.k, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.b, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.g, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.j, kana_1.otherKanas.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.l, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.s, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.pp, kana_1.otherKanas.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.tt, kana_1.kogakimoji.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.kk, kana_1.otherKanas.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.bb, kana_1.otherKanas.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.gg, kana_1.otherKanas.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ll, kana_1.otherKanas.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ss, kana_1.otherKanas.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingNasalization = new Map()\n    .set(version2_1.TonalLetterTags.a, '㋐')\n    .set(version2_1.TonalLetterTags.i, '㋑')\n    .set(version2_1.TonalLetterTags.ir, '㋒')\n    .set(version2_1.TonalLetterTags.u, '㋒')\n    .set(version2_1.TonalLetterTags.e, '㋓')\n    .set(version2_1.TonalLetterTags.o, '㋔')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.u, '㋗')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.k + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.i, '㋛')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.u, '㋜')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.s + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.ir, '㋡')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.c + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.a, '㋚')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.ir, '㋡')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.e, '㋝')\n    .set(version2_1.TonalLetterTags.ch + version2_1.TonalLetterTags.o, '㋞')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.d + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.j + version2_1.TonalLetterTags.i, '㋛' + '\\u{3099}') // ㋛゙\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}') // ㋩゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}') // ㋪゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.u, '㋫' + '\\u{309a}') // ㋫゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}') // ㋬゚\n    .set(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}') // ㋭゚\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.a, '㋕')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.i, '㋖')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.ir, '㋗')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.u, '㋗')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.e, '㋘')\n    .set(version2_1.TonalLetterTags.q + version2_1.TonalLetterTags.o, '㋙')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.a, '㋩')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.i, '㋪')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.ir, '㋫')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.u, '㋫')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.e, '㋬')\n    .set(version2_1.TonalLetterTags.h + version2_1.TonalLetterTags.o, '㋭')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.a, '㋟')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.i, '㋠')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.u, '㋡')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.e, '㋢')\n    .set(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.o, '㋣')\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.a, '㋩' + '\\u{309a}') // ㋩゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.i, '㋪' + '\\u{309a}') // ㋪゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.u, '㋫' + '\\u{309a}') // ㋫゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.e, '㋬' + '\\u{309a}') // ㋬゚\n    .set(version2_1.TonalLetterTags.v + version2_1.TonalLetterTags.o, '㋭' + '\\u{309a}'); // ㋭゚\nconst finalsForEKegekkeggeng = [\n    version2_1.TonalLetterTags.k.toString(),\n    version2_1.TonalLetterTags.g.toString(),\n    version2_1.TonalLetterTags.kk.toString(),\n    version2_1.TonalLetterTags.gg.toString(),\n    version2_1.TonalLetterTags.ng.toString(),\n];\nconst mappingNasalFinal = new Map()\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hatsuon.get(kana_1.KanaLetterTags.n));\nconst mappingSmallNasalFinal = new Map()\n    .set(version2_1.TonalLetterTags.m, kana_1.otherKanas.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.n, kana_1.otherKanas.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.otherKanas.get(kana_1.KanaLetterTags.n));\nconst mappingInitialB = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.b + kana_1.KanaLetterTags.o));\nconst mappingInitialC = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u));\nconst mappingInitialG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.g + kana_1.KanaLetterTags.o));\nconst mappingInitialH = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.f + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.h + kana_1.KanaLetterTags.o));\nconst mappingInitialJ = new Map()\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.j + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.z + kana_1.KanaLetterTags.u));\nconst mappingInitialK = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.k + kana_1.KanaLetterTags.u));\nconst mappingInitialL = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.r + kana_1.KanaLetterTags.o));\nconst mappingInitialM = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.m + kana_1.KanaLetterTags.u));\nconst mappingInitialN = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.n + kana_1.KanaLetterTags.u));\nconst mappingInitialNG = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.i, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.e, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.o, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ir, kana_1.special.get(kana_1.KanaLetterTags.ng + kana_1.KanaLetterTags.u));\nconst mappingInitialP = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.p + kana_1.KanaLetterTags.o));\nconst mappingInitialS = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.m, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.s + kana_1.KanaLetterTags.u));\nconst mappingInitialT = new Map()\n    .set(version2_1.TonalLetterTags.a, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.a))\n    .set(version2_1.TonalLetterTags.e, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.e))\n    .set(version2_1.TonalLetterTags.i, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.c + kana_1.KanaLetterTags.i))\n    .set(version2_1.TonalLetterTags.o, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.u, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ng, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ir, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.ch + kana_1.KanaLetterTags.u))\n    .set(version2_1.TonalLetterTags.ur, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o))\n    .set(version2_1.TonalLetterTags.or, kana_1.hiraganaKatakana.get(kana_1.KanaLetterTags.t + kana_1.KanaLetterTags.o));\nconst mappingInitial = new Map()\n    .set(version2_1.TonalLetterTags.b, mappingInitialB)\n    .set(version2_1.TonalLetterTags.c, mappingInitialC)\n    .set(version2_1.TonalLetterTags.ch, mappingInitialC)\n    .set(version2_1.TonalLetterTags.d, mappingInitialT)\n    .set(version2_1.TonalLetterTags.g, mappingInitialG)\n    .set(version2_1.TonalLetterTags.h, mappingInitialH)\n    .set(version2_1.TonalLetterTags.j, mappingInitialJ)\n    .set(version2_1.TonalLetterTags.k, mappingInitialK)\n    .set(version2_1.TonalLetterTags.l, mappingInitialL)\n    .set(version2_1.TonalLetterTags.m, mappingInitialM)\n    .set(version2_1.TonalLetterTags.n, mappingInitialN)\n    .set(version2_1.TonalLetterTags.ng, mappingInitialNG)\n    .set(version2_1.TonalLetterTags.p, mappingInitialP)\n    .set(version2_1.TonalLetterTags.q, mappingInitialK)\n    .set(version2_1.TonalLetterTags.s, mappingInitialS)\n    .set(version2_1.TonalLetterTags.t, mappingInitialT)\n    .set(version2_1.TonalLetterTags.v, mappingInitialP);\n//# sourceMappingURL=init.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9pbml0LmpzPzVhOWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQywyREFBYztBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyxvRUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsS0FBSztBQUNyRixnRkFBZ0YsS0FBSztBQUNyRixnRkFBZ0YsS0FBSztBQUNyRixnRkFBZ0YsS0FBSztBQUNyRixnRkFBZ0YsS0FBSztBQUNyRixnRkFBZ0YsS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLEtBQUs7QUFDckYsZ0ZBQWdGLEtBQUs7QUFDckYsZ0ZBQWdGLEtBQUs7QUFDckYsZ0ZBQWdGLEtBQUs7QUFDckYsZ0ZBQWdGLEtBQUssR0FBRztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9pbml0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRhaUthbmFCbG9ja3MgPSBleHBvcnRzLmNoZWNrTnVtYmVyT2ZMZXR0ZXJUb25hbCA9IHZvaWQgMDtcbmNvbnN0IHZlcnNpb24yXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uMlwiKTtcbmNvbnN0IGthbmFfMSA9IHJlcXVpcmUoXCIuLi9rYW5hL2thbmFcIik7XG5jb25zdCBjb2xsZWN0aW9uc18xID0gcmVxdWlyZShcIi4vY29sbGVjdGlvbnNcIik7XG5mdW5jdGlvbiBjaGVja051bWJlck9mTGV0dGVyVG9uYWwoKSB7XG4gICAgaWYgKHZlcnNpb24yXzEudG9uYWxQb3NpdGlvbmFsTGV0dGVycy5zaXplICE9PSB2ZXJzaW9uMl8xLmxvd2VyTGV0dGVyc1RvbmFsLnNpemUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NpemVzIHVubWF0Y2hlZCcpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2hlY2tOdW1iZXJPZkxldHRlclRvbmFsID0gY2hlY2tOdW1iZXJPZkxldHRlclRvbmFsO1xuY29uc3QgY29tYmluaW5nT3ZlcmxpbmUgPSAnXFx1MDMwNSc7XG5jb25zdCBjb21iaW5pbmdEb3RCZWxvdyA9ICdcXHUwMzIzJztcbmZ1bmN0aW9uIGhhbmRsZUNvbWJpbmluZ0RvdEJlbG93T3ZlcmxpbmUoaW5pdGlhbCwgbWVkaWFsKSB7XG4gICAgY29uc3QgZ290ID0ga2FuYUluaXRpYWxzKG1hcHBpbmdJbml0aWFsLmdldChpbml0aWFsKSkobWVkaWFsKTtcbiAgICBpZiAoZ290ICYmIGdvdFswXSkge1xuICAgICAgICBpZiAoaW5pdGlhbHNXaXRoQ29tYmluaW5nRG90QmVsb3cuYXNwaXJhdGVkLmluY2x1ZGVzKGluaXRpYWwpKSB7XG4gICAgICAgICAgICBpZiAoZnJlZVN5bGxhYmxlc1dpdGhDb21iaW5pbmdPdmVybGluZS5pbmNsdWRlcyhpbml0aWFsICsgbWVkaWFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnb3RbMF0gKyBjb21iaW5pbmdPdmVybGluZSArIGNvbWJpbmluZ0RvdEJlbG93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdvdFswXSArIGNvbWJpbmluZ0RvdEJlbG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluaXRpYWxzV2l0aENvbWJpbmluZ0RvdEJlbG93LndpdGhvdXRBRG90T3JPdmVybGluZS5pbmNsdWRlcyhpbml0aWFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGdvdFswXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbml0aWFsc1dpdGhDb21iaW5pbmdEb3RCZWxvdy53aXRoQW5PdmVybGluZS5pbmNsdWRlcyhpbml0aWFsKSkge1xuICAgICAgICAgICAgaWYgKGZyZWVTeWxsYWJsZXNXaXRoQ29tYmluaW5nT3ZlcmxpbmUuaW5jbHVkZXMoaW5pdGlhbCArIG1lZGlhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ290WzBdICsgY29tYmluaW5nT3ZlcmxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ290WzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cbmZ1bmN0aW9uIGdldFRvbmVTeW1ib2xGb3JGb3VydGhFaWdodGgoZmluYWwsIHRvbmFsTGVuKSB7XG4gICAgaWYgKHRvbmFsTGVuID09IDApIHtcbiAgICAgICAgLy8gNHRoIHRvbmUgYW5kIDh0aCB0b25lXG4gICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ1N5bWJvbEZvclRvbmVzLmdldChmaW5hbC50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKGtuKSB7XG4gICAgICAgICAgICByZXR1cm4ga25bMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuZnVuY3Rpb24gZ2V0UmVwbGljYXRlZEthbmFWb3dlbChsZXR0ZXJzLCBqLCByZXBsaWNhKSB7XG4gICAgaWYgKChqID09IDAgJiZcbiAgICAgICAgbGV0dGVyc1swXS5uYW1lID09PSB2ZXJzaW9uMl8xLlRvbmFsU3BlbGxpbmdUYWdzLm1lZGlhbCAmJlxuICAgICAgICAobGV0dGVycy5sZW5ndGggPT0gMSB8fFxuICAgICAgICAgICAgKGxldHRlcnMubGVuZ3RoID09IDIgJiZcbiAgICAgICAgICAgICAgICBsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMV0ubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5mcmVlVG9uYWwpIHx8XG4gICAgICAgICAgICAobGV0dGVycy5sZW5ndGggPT0gMiAmJlxuICAgICAgICAgICAgICAgIGxldHRlcnNbbGV0dGVycy5sZW5ndGggLSAxXS5uYW1lID09PVxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsU3BlbGxpbmdUYWdzLm5hc2FsaXphdGlvbikpKSB8fFxuICAgICAgICAobGV0dGVycy5sZW5ndGggPT0gMyAmJlxuICAgICAgICAgICAgbGV0dGVyc1tsZXR0ZXJzLmxlbmd0aCAtIDJdLm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3MubmFzYWxpemF0aW9uICYmXG4gICAgICAgICAgICBsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMV0ubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5mcmVlVG9uYWwpKSB7XG4gICAgICAgIC8vIHJlZHVwbGljYXRlIHRoZSB2b3dlbCBmb3Igc3lsbGFibGVzIHdpdGhvdXQgYW4gaW5pdGlhbFxuICAgICAgICAvLyBpbiBjYXNlIG9mIGEsIGUsXG4gICAgICAgIC8vIGluIGNhc2UgYXgsIGV4LiBlbm4sXG4gICAgICAgIC8vIGluIGNhc2Ugb2YgZW5ueFxuICAgICAgICByZXR1cm4gcmVwbGljYTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKGxldHRlcnMubGVuZ3RoID09IDIgJiZcbiAgICAgICAgbGV0dGVyc1swXS5uYW1lID09PSB2ZXJzaW9uMl8xLlRvbmFsU3BlbGxpbmdUYWdzLm1lZGlhbCAmJlxuICAgICAgICAobGV0dGVyc1sxXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oIHx8XG4gICAgICAgICAgICBsZXR0ZXJzWzFdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmhoKSkgfHxcbiAgICAgICAgKGxldHRlcnMubGVuZ3RoID09IDMgJiZcbiAgICAgICAgICAgIGxldHRlcnNbMF0ubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5tZWRpYWwgJiZcbiAgICAgICAgICAgIChsZXR0ZXJzWzFdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmggfHxcbiAgICAgICAgICAgICAgICBsZXR0ZXJzWzFdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmhoKSAmJlxuICAgICAgICAgICAgbGV0dGVyc1syXS5uYW1lID09PSB2ZXJzaW9uMl8xLlRvbmFsU3BlbGxpbmdUYWdzLmNoZWNrZWRUb25hbCkgfHxcbiAgICAgICAgKGxldHRlcnMubGVuZ3RoID09IDMgJiZcbiAgICAgICAgICAgIGxldHRlcnNbMF0ubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5tZWRpYWwgJiZcbiAgICAgICAgICAgIGxldHRlcnNbMV0ubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5uYXNhbGl6YXRpb24gJiZcbiAgICAgICAgICAgIChsZXR0ZXJzWzJdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmggfHxcbiAgICAgICAgICAgICAgICBsZXR0ZXJzWzJdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmhoKSkpIHtcbiAgICAgICAgLy8gcmVkdXBsaWNhdGUgdGhlIHZvd2VsIGZvciBzeWxsYWJsZXMgd2l0aG91dCBhbiBpbml0aWFsXG4gICAgICAgIC8vIGluIGNhc2Ugb2YgYWgsIGVoaFxuICAgICAgICAvLyBpbiBjYXNlIG9mIGFoeVxuICAgICAgICAvLyBpbiBjYXNlIG9mIGVubmgsIGlubmhcbiAgICAgICAgcmV0dXJuIGdldFNtYWxsS2FuYVZvd2VsKGxldHRlcnNbMF0udG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cbmZ1bmN0aW9uIGdldFNtYWxsS2FuYVZvd2VsKG1lZGlhbCkge1xuICAgIGNvbnN0IGdvdCA9IGthbmFfMS5vdGhlckthbmFzLmdldChtZWRpYWwpO1xuICAgIGlmIChnb3QgJiYgZ290WzFdKSB7XG4gICAgICAgIC8vIGdldCB0aGUgc21hbGwgZm9ybSBvZiB0aGUgdm93ZWwgYW5kIGFwcGVuZCBpdFxuICAgICAgICByZXR1cm4gZ290WzFdO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5mdW5jdGlvbiBjb21wb3NlKG1vcnBoZW1lcykge1xuICAgIGxldCBrYW5hU2VxcyA9IFtdO1xuICAgIGxldCBrYW5hcyA9IG5ldyBBcnJheShtb3JwaGVtZXMubGVuZ3RoKTtcbiAgICBsZXQga2FuYXM0dGhUb25lV29BcnJvdyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9ycGhlbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluaXRsID0gbW9ycGhlbWVzW2ldLmxldHRlcnMuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3MuaW5pdGlhbCk7XG4gICAgICAgIGNvbnN0IG1kbHMgPSBtb3JwaGVtZXNbaV0ubGV0dGVycy5maWx0ZXIoaXQgPT4gaXQubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5tZWRpYWwpO1xuICAgICAgICBjb25zdCBuc2xGbmwgPSBtb3JwaGVtZXNbaV0ubGV0dGVycy5maWx0ZXIoaXQgPT4gaXQubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5uYXNhbEZpbmFsKTtcbiAgICAgICAgY29uc3Qgc3RwRm5sID0gbW9ycGhlbWVzW2ldLmxldHRlcnMuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3Muc3RvcEZpbmFsKTtcbiAgICAgICAgY29uc3QgZnJUbmwgPSBtb3JwaGVtZXNbaV0ubGV0dGVycy5maWx0ZXIoaXQgPT4gaXQubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5mcmVlVG9uYWwpO1xuICAgICAgICBjb25zdCBjaGtUbmwgPSBtb3JwaGVtZXNbaV0ubGV0dGVycy5maWx0ZXIoaXQgPT4gaXQubmFtZSA9PT0gdmVyc2lvbjJfMS5Ub25hbFNwZWxsaW5nVGFncy5jaGVja2VkVG9uYWwpO1xuICAgICAgICBjb25zdCBuc2x6ID0gbW9ycGhlbWVzW2ldLmxldHRlcnMuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3MubmFzYWxpemF0aW9uKTtcbiAgICAgICAgY29uc3QgZmluYWxzRm9yRVRvS2FuYUlFID0gc3RwRm5sXG4gICAgICAgICAgICAuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3Muc3RvcEZpbmFsICYmXG4gICAgICAgICAgICBmaW5hbHNGb3JFS2VnZWtrZWdnZW5nLmluY2x1ZGVzKGl0LnRvU3RyaW5nKCkpKVxuICAgICAgICAgICAgLmNvbmNhdChuc2xGbmwuZmlsdGVyKGl0ID0+IGl0Lm5hbWUgPT09IHZlcnNpb24yXzEuVG9uYWxTcGVsbGluZ1RhZ3MubmFzYWxGaW5hbCAmJlxuICAgICAgICAgICAgZmluYWxzRm9yRUtlZ2Vra2VnZ2VuZy5pbmNsdWRlcyhpdC50b1N0cmluZygpKSkpO1xuICAgICAgICAvLyBpbml0aWFsaXplIGZvciB0aGlzIG1vcnBoZW1lXG4gICAgICAgIGthbmFzW2ldID0gJyc7XG4gICAgICAgIGlmIChpbml0bC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgaWYgKG1kbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWRscy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodm9ld2xzSVJvci5pbmNsdWRlcyhtZGxzW2pdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNvbWJpbmluZ0RvdEJlbG93T3ZlcmxpbmUoaW5pdGxbMF0udG9TdHJpbmcoKSwgbWRsc1tqXS50b1N0cmluZygpKSArIGdldEthbmFJUm9yKG1kbHMsIHN0cEZubC5sZW5ndGggKyBuc2xGbmwubGVuZ3RoID09IDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1kbHNbal0udG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJlY2VkaW5nIGxldHRlciBpcyBhbiBpbml0aWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbEthbmEgPSBoYW5kbGVDb21iaW5pbmdEb3RCZWxvd092ZXJsaW5lKGluaXRsWzBdLnRvU3RyaW5nKCksIG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gaW5pdGlhbEthbmE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cEZubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrbiA9IG1hcHBpbmdNZWRpYWxTbWFsbEZvcm0uZ2V0KG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGtuWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga24gPSBtYXBwaW5nTWVkaWFsLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBrblsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RwRm5sLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ01lZGlhbFNtYWxsRm9ybS5nZXQobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnb3RWb3dlbHMgPSBtYXBwaW5nTWVkaWFsLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ290Vm93ZWxzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ290Vm93ZWxzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZGxzW2pdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuc2xGbmwubGVuZ3RoICsgc3RwRm5sLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuc2x6Lmxlbmd0aCA9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzRm9yRVRvS2FuYUlFLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBmaW5hbCwgbGV0dGVyIGkgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgYW4gaW5pdGlhbCBrYW5hXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgfmVuZyBvciAtZWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBoYW5kbGVDb21iaW5pbmdEb3RCZWxvd092ZXJsaW5lKGluaXRsWzBdLnRvU3RyaW5nKCksIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZGxzW2pdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGxldHRlciBlLCBhbiBzbWFsbCBrYW5hIGUgaXMgYXBwZW5kZWQgdG8gdGhlIHByZWNlZGluZyBpLWVuZGluZyBpbml0aWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFNtYWxsS2FuYVZvd2VsKG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHBGbmwubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vcmUgdGhhdCBvbmUgdm93ZWxzLiBlLmcuIGdvZWhoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBnZXRTbWFsbEthbmFWb3dlbChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT0gMSAmJiBtZGxzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0U21hbGxLYW5hVm93ZWwobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPT0gMSAmJiBtZGxzLmxlbmd0aCA9PSAyICYmIG5zbEZubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFNtYWxsS2FuYVZvd2VsKG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrbiA9IGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbiAmJiBrblsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCB2b3dlbC4gZS5nLiBnZWhoLCBnb2VoaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBoYW5kbGVDb21iaW5pbmdEb3RCZWxvd092ZXJsaW5lKGluaXRsWzBdLnRvU3RyaW5nKCksIG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuc2xGbmwubGVuZ3RoID09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kbHMubGVuZ3RoID09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cEZubC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbiBzeWxsYWJsZXMgd2l0aCBhbiBpbml0aWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrbiA9IGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtuICYmIGtuWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGljYXRlIHRoZSB2b3dlbCBhbmQgYXBwZW5kIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobnNsRm5sLmxlbmd0aCA9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGxzLmxlbmd0aCA9PSAxICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHBGbmwubGVuZ3RoID09IDEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24yXzEubmV1dHJhbEZpbmFsc1RvbmFsLmluY2x1ZGVzKHN0cEZubFswXS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0U21hbGxLYW5hVm93ZWwobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIG1lZGlhbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5pdGwubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGlmIChtZGxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1kbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdvdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbWRsc1tqXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBtZGxzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcCBvIHRvIHdvXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3QgPSBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLncgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3Mubyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXAgbyB0byBvXG4gICAgICAgICAgICAgICAgICAgICAgICBnb3QgPSBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZ290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PSAxICYmIG1kbHMubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgc21hbGwga2FuYSBmb3IgMm5kIG1lZGlhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFNtYWxsS2FuYVZvd2VsKG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqID09IDEgJiYgbWRscy5sZW5ndGggPT0gMiAmJiBzdHBGbmwubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgc21hbGwga2FuYSBmb3IgMm5kIHZvd2VsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0U21hbGxLYW5hVm93ZWwobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPT0gMSAmJiBtZGxzLmxlbmd0aCA9PSAyICYmIG5zbEZubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBzbWFsbCBrYW5hIGZvciAybmQgdm93ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBnZXRTbWFsbEthbmFWb3dlbChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA9PSAyICYmIG1kbHMubGVuZ3RoID09IDMgJiYgc3RwRm5sLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHNtYWxsIGthbmEgZm9yIDNyZCB2b3dlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFNtYWxsS2FuYVZvd2VsKG1kbHNbal0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqID09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZGxzW2pdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuc2xGbmwubGVuZ3RoICsgc3RwRm5sLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuc2x6Lmxlbmd0aCA9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzRm9yRVRvS2FuYUlFLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBmaW5hbCwgbGV0dGVyIGkgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgYW4gZXh0cmEgbWVkaWFsIGthbmFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiB+ZW5nIG9yIC1la1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtuID0ga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1kbHNbal0udG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgbGV0dGVyIGUsIGEgc21hbGwga2FuYSBlIGlzIGFwcGVuZGVkIHRvIHRoZSBwcmVjZWRpbmcgaS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0U21hbGxLYW5hVm93ZWwobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBnb3RbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0UmVwbGljYXRlZEthbmFWb3dlbChtb3JwaGVtZXNbaV0ubGV0dGVycywgaiwgZ290WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZGxzW2pdLnRvU3RyaW5nKCkgPT09IHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWRsc1tqXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ01lZGlhbC5nZXQobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV0gKyBjb21iaW5pbmdPdmVybGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cEZubC5sZW5ndGggPT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjJfMS5uZXV0cmFsRmluYWxzVG9uYWwuaW5jbHVkZXMoc3RwRm5sWzBdLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIG9yaCwgdXNlIGthbmFJUm9yIHRvIGdldCBvbmUgZXh0cmEgc21hbGwga2FuYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gZ2V0S2FuYUlSb3IobWRscywgc3RwRm5sLmxlbmd0aCArIG5zbEZubC5sZW5ndGggPT0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSByZXBsaWNhdGVkIGthbmEgb3RoZXIgdGhhbiBpciwgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFJlcGxpY2F0ZWRLYW5hVm93ZWwobW9ycGhlbWVzW2ldLmxldHRlcnMsIGksIGtuWzFdICsgY29tYmluaW5nT3ZlcmxpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWRsc1tqXS50b1N0cmluZygpID09PSB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51ciB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kbHNbal0udG9TdHJpbmcoKSA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJlY2VkaW5nIGxldHRlciBpcyBub3QgYW4gaW5pdGlhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ01lZGlhbC5nZXQobWRsc1tqXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIHVyLCBpdXIuIGJ5cGFzcyB1cmgsIHVyaHksIGl1cmgsIGl1cmh5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtuICYmIHN0cEZubC5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0ga25bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cEZubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIG9mIHVyaCwgdXJoeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa24gJiYgbWRscy5sZW5ndGggPT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGtuWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbWwgPSBtYXBwaW5nTWVkaWFsU21hbGxGb3JtLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc21sKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gc21sWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1kbHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBnZXRSZXBsaWNhdGVkS2FuYVZvd2VsKG1vcnBoZW1lc1tpXS5sZXR0ZXJzLCBqLCBrblsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2ZXJzaW9uMl8xLm1hdGVyTGVjdGlvbmlzVG9uYWwuaW5jbHVkZXMobWRsc1tqXS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGVyIGxlY3Rpb25pczogbSwgbiwgbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga24gPSBtYXBwaW5nTWVkaWFsLmdldChtZGxzW2pdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBrblsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zbHoubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBrYW5hc1tpXS5zbGljZSgxLCBrYW5hc1tpXS5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGluaXRsLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga24gPSBtYXBwaW5nTmFzYWxpemF0aW9uLmdldChpbml0bFswXS50b1N0cmluZygpICsgbWRsc1swXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBpZiAoa24pXG4gICAgICAgICAgICAgICAgICAgIGthbmFzW2ldID0ga24gKyB0YWlsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga24gPSBtYXBwaW5nTmFzYWxpemF0aW9uLmdldChtZGxzWzBdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGlmIChrbilcbiAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gPSBrbiArIHRhaWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zbEZubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgLy8gc3lsbGFibGUgZmluYWxzXG4gICAgICAgICAgICBpZiAoaW5pdGwubGVuZ3RoID09IDEgJiYgbWRscy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIG1lZGlhbHNcbiAgICAgICAgICAgICAgICBjb25zdCBrbiA9IGthbmFJbml0aWFscyhtYXBwaW5nSW5pdGlhbC5nZXQoaW5pdGxbMF0udG9TdHJpbmcoKSkpKG5zbEZubFswXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBpZiAoa24gJiYga25bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAga2FuYXNbaV0gKz0gaGFuZGxlQ29tYmluaW5nRG90QmVsb3dPdmVybGluZShpbml0bFswXS50b1N0cmluZygpLCBuc2xGbmxbMF0udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGtuO1xuICAgICAgICAgICAgaWYgKHN0cEZubC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIGtuID0gbWFwcGluZ1NtYWxsTmFzYWxGaW5hbC5nZXQobnNsRm5sWzBdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGtuID0gbWFwcGluZ05hc2FsRmluYWwuZ2V0KG5zbEZubFswXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGlmIChrbiAmJiBrblsxXSlcbiAgICAgICAgICAgICAgICBrYW5hc1tpXSArPSBrblsxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RwRm5sLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAvLyBzeWxsYWJsZSBmaW5hbHNcbiAgICAgICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ1N0b3BGaW5hbC5nZXQoc3RwRm5sWzBdLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgaWYgKGtuICYmIGtuWzFdKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RvcCBmaW5hbHMgcCwgdCwgaywgcHAsIHR0LCBra1xuICAgICAgICAgICAgICAgIGthbmFzW2ldICs9IGtuWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoY29sbGVjdGlvbnNfMS5mb3VydGhGaW5hbHMpLmluY2x1ZGVzKHN0cEZubFswXS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgIGthbmFzNHRoVG9uZVdvQXJyb3cgPSBrYW5hc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGthbmFzW2ldICs9IGdldFRvbmVTeW1ib2xGb3JGb3VydGhFaWdodGgoc3RwRm5sWzBdLnRvU3RyaW5nKCksIGNoa1RubC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmclRubC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAga2FuYXNbaV0gKz0gbWFwcGluZ1N5bWJvbEZvclRvbmVzLmdldChmclRubFswXS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hrVG5sLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICBrYW5hc1tpXSArPSBtYXBwaW5nU3ltYm9sRm9yVG9uZXMuZ2V0KGNoa1RubFswXS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBrYW5hU2Vxcy5wdXNoKGthbmFzLmpvaW4oJycpKTtcbiAgICBpZiAoa2FuYXM0dGhUb25lV29BcnJvdy5sZW5ndGggPiAwICYmIG1vcnBoZW1lcy5sZW5ndGggPT0gMSkge1xuICAgICAgICBrYW5hU2Vxcy5wdXNoKGthbmFzNHRoVG9uZVdvQXJyb3cpO1xuICAgIH1cbiAgICByZXR1cm4ga2FuYVNlcXM7XG59XG4vKiogR2V0IFRhaXdhbmVzZSBLYW5hIGJsb2Nrcy4gKi9cbmZ1bmN0aW9uIGdldFRhaUthbmFCbG9ja3MobW9ycGhlbWVzKSB7XG4gICAgY29uc3Qga2FuYVNlcXVlbmNlcyA9IGNvbXBvc2UobW9ycGhlbWVzKTtcbiAgICByZXR1cm4ga2FuYVNlcXVlbmNlcztcbn1cbmV4cG9ydHMuZ2V0VGFpS2FuYUJsb2NrcyA9IGdldFRhaUthbmFCbG9ja3M7XG5jb25zdCBrYW5hSW5pdGlhbHMgPSBmdW5jdGlvbiAobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmb2xsb3dpbmcpIHtcbiAgICAgICAgaWYgKGZvbGxvd2luZykge1xuICAgICAgICAgICAgaWYgKG1hcCAmJiBtYXAuaGFzKGZvbGxvd2luZykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnb3QgPSBtYXAuZ2V0KGZvbGxvd2luZyk7XG4gICAgICAgICAgICAgICAgaWYgKGdvdCAmJiBnb3RbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtnb3RbMV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIGNvbnN0IGthbmFzID0gQXJyYXkuZnJvbShtYXAudmFsdWVzKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR1cGVzID0gQXJyYXkuZnJvbShrYW5hcy5tYXAoaXQgPT4gKGl0ID8gaXRbMV0gOiAnJykpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWR1cGVzID0gZHVwZXMucmVkdWNlKGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgIGN1cnI6IHN0cmluZ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFjY3VtdWxhdG9yLmZpbHRlcihpdCA9PiBpdCA9PT0gY3VycikubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaChjdXJyKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVkdXBlcztcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xufTtcbmNvbnN0IGdldEthbmFJUm9yID0gZnVuY3Rpb24gKHZvd2VscywgaGFzT25lRmluYWwpIHtcbiAgICBpZiAodm93ZWxzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIGNvbnN0IGtuID0gbWFwcGluZ01lZGlhbC5nZXQodm93ZWxzWzBdLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAoa24pIHtcbiAgICAgICAgICAgIGlmIChoYXNPbmVGaW5hbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNtbCA9IG1hcHBpbmdNZWRpYWxTbWFsbEZvcm0uZ2V0KHZvd2Vsc1swXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBpZiAoc21sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzbWxbMV0gKyBjb21iaW5pbmdPdmVybGluZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga25bMV0gKyBjb21iaW5pbmdPdmVybGluZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2b3dlbHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgLy8gcmV0dXJuIHNtYWxsIGZvcm1cbiAgICAgICAgY29uc3Qga24gPSBtYXBwaW5nTWVkaWFsU21hbGxGb3JtLmdldCh2b3dlbHNbMF0udG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChrbikge1xuICAgICAgICAgICAgcmV0dXJuIGtuWzFdICsgY29tYmluaW5nT3ZlcmxpbmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xufTtcbmNvbnN0IGZyZWVTeWxsYWJsZXNXaXRoQ29tYmluaW5nT3ZlcmxpbmUgPSBbXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuY2gudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jLnRvU3RyaW5nKCkgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuY2gudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jLnRvU3RyaW5nKCkgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuY2gudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8udG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaC50b1N0cmluZygpICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mub3IudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaC50b1N0cmluZygpICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jLnRvU3RyaW5nKCkgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZC50b1N0cmluZygpICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaS50b1N0cmluZygpLFxuICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnQudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmkudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5kLnRvU3RyaW5nKCkgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudC50b1N0cmluZygpICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudS50b1N0cmluZygpLFxuICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudC50b1N0cmluZygpICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5kLnRvU3RyaW5nKCkgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pci50b1N0cmluZygpLFxuICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnQudG9TdHJpbmcoKSArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLnRvU3RyaW5nKCksXG5dO1xuY29uc3QgaW5pdGlhbHNXaXRoQ29tYmluaW5nRG90QmVsb3cgPSB7XG4gICAgLy8gd2hldGhlciB0aGUgZG90IHNob3VsZCBiZSBjb21iaW5lZFxuICAgIGFzcGlyYXRlZDogW1xuICAgICAgICAvLyB3aXRoIGEgZG90XG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmsudG9TdHJpbmcoKSxcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYy50b1N0cmluZygpLFxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5wLnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnQudG9TdHJpbmcoKSxcbiAgICBdLFxuICAgIHdpdGhvdXRBRG90T3JPdmVybGluZTogW1xuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5xLnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmcudG9TdHJpbmcoKSxcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYi50b1N0cmluZygpLFxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy52LnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmoudG9TdHJpbmcoKSxcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubC50b1N0cmluZygpLFxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oLnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnMudG9TdHJpbmcoKSxcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubS50b1N0cmluZygpLFxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5uLnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLnRvU3RyaW5nKCksXG4gICAgXSxcbiAgICB3aXRoQW5PdmVybGluZTogW1xuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaC50b1N0cmluZygpLFxuICAgICAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jLnRvU3RyaW5nKCksXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQudG9TdHJpbmcoKSxcbiAgICBdLFxufTtcbi8vIGluY2x1ZGVzIG1hdGVyIGxlY3Rpb25pc1xuY29uc3QgbWFwcGluZ01lZGlhbCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnVyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLncgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm0sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubSArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm4sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLCBrYW5hXzEuaGF0c3Vvbi5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm4pKTtcbmNvbnN0IHZvZXdsc0lSb3IgPSBbXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vci50b1N0cmluZygpLFxuXTtcbmNvbnN0IG1hcHBpbmdNZWRpYWxTbWFsbEZvcm0gPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuYSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MudyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubSwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5tICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubiwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubikpO1xuY29uc3QgbWFwcGluZ1N5bWJvbEZvclRvbmVzID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5mLCAn4o2tJykgLy8gYXBsIGZ1bmN0aW9uYWwgc3ltYm9sIHN0aWxlIHRpbGRlIChVKzIzNkQpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy55LCAn4o6bJykgLy8gbGVmdCBwYXJlbnRoZXNpcyB1cHBlciBob29rIChVKzIzOUIpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy53LCAn4o6dJykgLy8gbGVmdCBwYXJlbnRoZXNpcyBsb3dlciBob29rIChVKzIzOUQpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy54LCAn4p+oJykgLy8gbWF0aGVtYXRpY2FsIGxlZnQgYW5nbGUgYnJhY2tldCAoVSsyN0U4KVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuengsICfin6knKSAvLyBtYXRoZW1hdGljYWwgbGVmdCBhbmdsZSBicmFja2V0IChVKzI3RTgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy56LCAn4o64JykgLy8gbGVmdCB2ZXJ0aWNhbCBib3ggbGluZSAoVSsyM0I4KVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MueHgsICfiq70nKSAvLyBkb3VibGUgc29saWR1cyBvcGVyYXRvciAoVSsyQUZEKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MucCwgJ+KkhicpIC8vIGxlZnR3YXJkcyBkb3VibGUgYXJyb3cgZnJvbSBiYXIgKFUrMjkwNilcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnQsICfipIYnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaywgJ+KkhicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oLCAn4qSGJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmIsICfipIYnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZywgJ+KkhicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5qLCAn4qSGJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmwsICfipIYnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MucywgJ+KkhicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5wcCwgJ+KkhycpIC8vIHJpZ2h0d2FyZHMgZG91YmxlIGFycm93IGZyb20gYmFyIChVKzI5MDcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50dCwgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5raywgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oaCwgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5iYiwgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5nZywgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5sbCwgJ+KkhycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zcywgJ+KkhycpO1xuY29uc3QgbWFwcGluZ1N0b3BGaW5hbCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MucCwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCwga2FuYV8xLmtvZ2FraW1vamkuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5jaCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmssIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmIsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuYiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmcsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuZyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmosIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuaiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmwsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuciArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnMsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnBwLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnAgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50dCwga2FuYV8xLmtvZ2FraW1vamkuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5jaCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmtrLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmsgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5iYiwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5iICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZ2csIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuZyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmxsLCBrYW5hXzEub3RoZXJLYW5hcy5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zcywga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5zICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKTtcbmNvbnN0IG1hcHBpbmdOYXNhbGl6YXRpb24gPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsICfji5AnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLkScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwgJ+OLkicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCAn44uSJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji5MnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubywgJ+OLlCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwgJ+OLlScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLlicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwgJ+OLlycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwgJ+OLmCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5rICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubywgJ+OLmScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwgJ+OLmicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLmycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwgJ+OLnCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwgJ+OLnScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubywgJ+OLnicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwgJ+OLmicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLoCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIsICfji6EnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYyArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnUsICfji6EnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYyArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji50nKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYyArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sICfji54nKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuY2ggKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCAn44uaJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmNoICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLoCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCAn44uhJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmNoICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwgJ+OLoScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji50nKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuY2ggKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCAn44ueJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCAn44ufJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCAn44ugJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCAn44uhJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCAn44uiJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmQgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCAn44ujJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmogKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCAn44ubJyArICdcXHV7MzA5OX0nKSAvLyDji5vjgplcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnAgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCAn44upJyArICdcXHV7MzA5YX0nKSAvLyDji6njgppcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnAgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCAn44uqJyArICdcXHV7MzA5YX0nKSAvLyDji6rjgppcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnAgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCAn44urJyArICdcXHV7MzA5YX0nKSAvLyDji6vjgppcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnAgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCAn44usJyArICdcXHV7MzA5YX0nKSAvLyDji6zjgppcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnAgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCAn44utJyArICdcXHV7MzA5YX0nKSAvLyDji63jgppcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnEgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCAn44uVJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnEgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCAn44uWJylcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnEgKyB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwgJ+OLlycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5xICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwgJ+OLlycpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5xICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwgJ+OLmCcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5xICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubywgJ+OLmScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwgJ+OLqScpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwgJ+OLqicpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5oICsgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIsICfji6snKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnUsICfji6snKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji6wnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sICfji60nKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsICfji58nKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksICfji6AnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnUsICfji6EnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji6InKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudCArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sICfji6MnKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudiArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsICfji6knICsgJ1xcdXszMDlhfScpIC8vIOOLqeOCmlxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudiArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksICfji6onICsgJ1xcdXszMDlhfScpIC8vIOOLquOCmlxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudiArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnUsICfji6snICsgJ1xcdXszMDlhfScpIC8vIOOLq+OCmlxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudiArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsICfji6wnICsgJ1xcdXszMDlhfScpIC8vIOOLrOOCmlxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudiArIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sICfji60nICsgJ1xcdXszMDlhfScpOyAvLyDji63jgppcbmNvbnN0IGZpbmFsc0ZvckVLZWdla2tlZ2dlbmcgPSBbXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Muay50b1N0cmluZygpLFxuICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmcudG9TdHJpbmcoKSxcbiAgICB2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5ray50b1N0cmluZygpLFxuICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmdnLnRvU3RyaW5nKCksXG4gICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcudG9TdHJpbmcoKSxcbl07XG5jb25zdCBtYXBwaW5nTmFzYWxGaW5hbCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5tICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubiwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5oYXRzdW9uLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubikpO1xuY29uc3QgbWFwcGluZ1NtYWxsTmFzYWxGaW5hbCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubSwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5tICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubiwga2FuYV8xLm90aGVyS2FuYXMuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5vdGhlckthbmFzLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubikpO1xuY29uc3QgbWFwcGluZ0luaXRpYWxCID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuYSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuZSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuaSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51ciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5iICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mub3IsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuYiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSk7XG5jb25zdCBtYXBwaW5nSW5pdGlhbEMgPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5hKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuYyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5pKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmNoICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmNoICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuY2ggKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5tLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmNoICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKTtcbmNvbnN0IG1hcHBpbmdJbml0aWFsRyA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmEpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubywga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuZyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmcgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKTtcbmNvbnN0IG1hcHBpbmdJbml0aWFsSCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5oICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmEpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5oICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5oICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuZiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm0sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuZiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuaCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmYgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmYgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51ciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5oICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mub3IsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuaCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSk7XG5jb25zdCBtYXBwaW5nSW5pdGlhbEogPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MueiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuaiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5pKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MueiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnogKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnogKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy56ICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MueiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSk7XG5jb25zdCBtYXBwaW5nSW5pdGlhbEsgPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5hKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5pKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnUsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnVyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmsgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5rICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mub3IsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuayArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm5nLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmsgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpO1xuY29uc3QgbWFwcGluZ0luaXRpYWxMID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuYSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuZSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuaSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5yICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuciArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnIgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpO1xuY29uc3QgbWFwcGluZ0luaXRpYWxNID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm0gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuYSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm0gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuaSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm0gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm0gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuZSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm0gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5uZywga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5tICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKTtcbmNvbnN0IG1hcHBpbmdJbml0aWFsTiA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmEpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubywga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubiArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm4gKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpO1xuY29uc3QgbWFwcGluZ0luaXRpYWxORyA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwga2FuYV8xLnNwZWNpYWwuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uZyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5hKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksIGthbmFfMS5zcGVjaWFsLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MubmcgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuaSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCBrYW5hXzEuc3BlY2lhbC5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubywga2FuYV8xLnNwZWNpYWwuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5uZyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEuc3BlY2lhbC5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLm5nICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKTtcbmNvbnN0IG1hcHBpbmdJbml0aWFsUCA9IG5ldyBNYXAoKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuYSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmEpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLmkpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3Mubywga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudSwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnAgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5wICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudXIsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSk7XG5jb25zdCBtYXBwaW5nSW5pdGlhbFMgPSBuZXcgTWFwKClcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmEsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5hKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmUsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5lKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmksIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5pKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm8sIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy5vKSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLm9yLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51ciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5zICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MucyArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmlyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5tLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpO1xuY29uc3QgbWFwcGluZ0luaXRpYWxUID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5hLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnQgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuYSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5lLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnQgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuZSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmMgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MuaSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnQgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy51LCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLmNoICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLnUpKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIGthbmFfMS5oaXJhZ2FuYUthdGFrYW5hLmdldChrYW5hXzEuS2FuYUxldHRlclRhZ3MuY2ggKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MudSkpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5pciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy5jaCArIGthbmFfMS5LYW5hTGV0dGVyVGFncy51KSlcbiAgICAuc2V0KHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLnVyLCBrYW5hXzEuaGlyYWdhbmFLYXRha2FuYS5nZXQoa2FuYV8xLkthbmFMZXR0ZXJUYWdzLnQgKyBrYW5hXzEuS2FuYUxldHRlclRhZ3MubykpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5vciwga2FuYV8xLmhpcmFnYW5hS2F0YWthbmEuZ2V0KGthbmFfMS5LYW5hTGV0dGVyVGFncy50ICsga2FuYV8xLkthbmFMZXR0ZXJUYWdzLm8pKTtcbmNvbnN0IG1hcHBpbmdJbml0aWFsID0gbmV3IE1hcCgpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5iLCBtYXBwaW5nSW5pdGlhbEIpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jLCBtYXBwaW5nSW5pdGlhbEMpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5jaCwgbWFwcGluZ0luaXRpYWxDKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZCwgbWFwcGluZ0luaXRpYWxUKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZywgbWFwcGluZ0luaXRpYWxHKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCwgbWFwcGluZ0luaXRpYWxIKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaiwgbWFwcGluZ0luaXRpYWxKKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaywgbWFwcGluZ0luaXRpYWxLKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubCwgbWFwcGluZ0luaXRpYWxMKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubSwgbWFwcGluZ0luaXRpYWxNKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubiwgbWFwcGluZ0luaXRpYWxOKVxuICAgIC5zZXQodmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubmcsIG1hcHBpbmdJbml0aWFsTkcpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5wLCBtYXBwaW5nSW5pdGlhbFApXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5xLCBtYXBwaW5nSW5pdGlhbEspXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy5zLCBtYXBwaW5nSW5pdGlhbFMpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy50LCBtYXBwaW5nSW5pdGlhbFQpXG4gICAgLnNldCh2ZXJzaW9uMl8xLlRvbmFsTGV0dGVyVGFncy52LCBtYXBwaW5nSW5pdGlhbFApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/init.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lemmatizer.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lemmatizer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lemmatize = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\n/**\n * Lemmatizes a word.\n * @param word A word to be lemmatized.\n */\nfunction lemmatize(word) {\n    const ms = analyzer_1.tonalLemmatizationAnalyzer.morphAnalyze(word);\n    const lx = analyzer_1.tonalLemmatizationAnalyzer.lexAnalyze(ms);\n    return lx;\n}\nexports.lemmatize = lemmatize;\n//# sourceMappingURL=lemmatizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9sZW1tYXRpemVyLmpzPzQ1NGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL2xlbW1hdGl6ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubGVtbWF0aXplID0gdm9pZCAwO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL2FuYWx5emVyXCIpO1xuLyoqXG4gKiBMZW1tYXRpemVzIGEgd29yZC5cbiAqIEBwYXJhbSB3b3JkIEEgd29yZCB0byBiZSBsZW1tYXRpemVkLlxuICovXG5mdW5jdGlvbiBsZW1tYXRpemUod29yZCkge1xuICAgIGNvbnN0IG1zID0gYW5hbHl6ZXJfMS50b25hbExlbW1hdGl6YXRpb25BbmFseXplci5tb3JwaEFuYWx5emUod29yZCk7XG4gICAgY29uc3QgbHggPSBhbmFseXplcl8xLnRvbmFsTGVtbWF0aXphdGlvbkFuYWx5emVyLmxleEFuYWx5emUobXMpO1xuICAgIHJldHVybiBseDtcbn1cbmV4cG9ydHMubGVtbWF0aXplID0gbGVtbWF0aXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGVtbWF0aXplci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lemmatizer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lettergen.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lettergen.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalPositionalLetterGenerator = exports.syllableCompositions = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nfunction initialConsonant(sg) {\n    if (version2_1.initialsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.initial);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction stopFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.stopFinalsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.stopFinal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.stopFinalsTonal.letters);\n    }\n    return sg;\n}\nfunction neutralFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.neutralFinalsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.stopFinal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.neutralFinalsTonal.letters);\n    }\n    return sg;\n}\nfunction nasalFinalConsonant(sg) {\n    // check out the length of letters like we do in the loop in function vowel\n    if (!sg.matching || sg.letters.length == 0)\n        return sg;\n    if (version2_1.nasalFinalsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.nasalFinal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalFinalsTonal.letters);\n    }\n    return sg;\n}\nfunction vowel(sg) {\n    // we need the below line when the preceding initial consonant is not matched\n    if (!sg.matching)\n        return sg;\n    let toBePredicted = true;\n    let matches = 0;\n    for (let i = sg.matchedLetters.length; i < sg.letters.length; i++) {\n        if (version2_1.vowelsTonal.includes(sg.letters[i])) {\n            toBePredicted = true;\n            const pl = version2_1.tonalPositionalLetters.get(sg.letters[i]);\n            if (pl) {\n                const s = pl(version2_1.TonalSpellingTags.medial);\n                matches++;\n                if (s)\n                    sg.matchedLetters.push(s);\n            }\n        }\n        else {\n            toBePredicted = false;\n            if (matches == 0)\n                sg.matching = false;\n            break;\n        }\n    }\n    if (toBePredicted) {\n        if (sg.predictive && sg.letters.length > 0) {\n            sg.predictions.push(version2_1.vowelsTonal.letters);\n        }\n        sg.matching = true;\n    }\n    return sg;\n}\nfunction materLectionis(sg) {\n    if (version2_1.materLectionisTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.medial);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else\n        sg.matching = false;\n    return sg;\n}\nfunction nasalization(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.nasalizationsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const ps = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (ps) {\n            const s = ps(version2_1.TonalSpellingTags.nasalization);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.nasalizationsTonal.letters);\n    }\n    return sg;\n}\nfunction freeTonal(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.freeTonalsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.freeTonal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.freeTonalsTonal.letters);\n    }\n    return sg;\n}\nfunction checkedTonal(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.checkedTonalsTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.checkedTonal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length && sg.predictive)\n            sg.predictions.push(version2_1.checkedTonalsTonal.letters);\n    }\n    return sg;\n}\nfunction sandhiFinalConsonant(sg) {\n    if (!sg.matching)\n        return sg;\n    if (version2_1.stopFinalsBgjklpsTonal.includes(sg.letters[sg.matchedLetters.length]) ||\n        version2_1.stopFinalsBBggkkllppssTonal.includes(sg.letters[sg.matchedLetters.length])) {\n        const pl = version2_1.tonalPositionalLetters.get(sg.letters[sg.matchedLetters.length]);\n        if (pl) {\n            const s = pl(version2_1.TonalSpellingTags.stopFinal);\n            if (s)\n                sg.matchedLetters.push(s);\n        }\n    }\n    else {\n        sg.matching = false;\n        if (sg.letters.length == sg.matchedLetters.length &&\n            sg.predictive &&\n            sg.predictSandhiFinal) {\n            sg.predictions.push(version2_1.stopFinalsBgjklpsTonal.letters);\n            sg.predictions.push(version2_1.stopFinalsBBggkkllppssTonal.letters);\n        }\n    }\n    return sg;\n}\n// common syllables\nconst scV = unit_1.sgPipe(vowel);\nconst scM = unit_1.sgPipe(materLectionis);\nconst scVT = unit_1.sgPipe(vowel, freeTonal);\nconst scMT = unit_1.sgPipe(materLectionis, freeTonal);\nconst scMC = unit_1.sgPipe(materLectionis, neutralFinalConsonant);\nconst scCV = unit_1.sgPipe(initialConsonant, vowel);\nconst scVC1 = unit_1.sgPipe(vowel, stopFinalConsonant);\nconst scVC2 = unit_1.sgPipe(vowel, nasalFinalConsonant);\nconst scVCT1 = unit_1.sgPipe(vowel, stopFinalConsonant, checkedTonal);\nconst scVCT2 = unit_1.sgPipe(vowel, nasalFinalConsonant, freeTonal);\nconst scCVT = unit_1.sgPipe(initialConsonant, vowel, freeTonal);\nconst scCVC1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant);\nconst scCVC2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant);\nconst scCVCT1 = unit_1.sgPipe(initialConsonant, vowel, stopFinalConsonant, checkedTonal);\nconst scCVCT2 = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, freeTonal);\nconst scCVCC = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant);\nconst scVCCT = unit_1.sgPipe(vowel, nasalFinalConsonant, neutralFinalConsonant, checkedTonal);\n// consonant syllables\nconst scCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant);\nconst scCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, freeTonal);\nconst scCCC = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant);\nconst scCCCT = unit_1.sgPipe(initialConsonant, nasalFinalConsonant, neutralFinalConsonant, checkedTonal);\n// nasalization syllables\nconst scVN = unit_1.sgPipe(vowel, nasalization);\nconst scVNT = unit_1.sgPipe(vowel, nasalization, freeTonal);\nconst scVNC = unit_1.sgPipe(vowel, nasalization, neutralFinalConsonant);\nconst scCVN = unit_1.sgPipe(initialConsonant, vowel, nasalization);\nconst scCVNT = unit_1.sgPipe(initialConsonant, vowel, nasalization, freeTonal);\nconst scCVNC = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant);\nconst scCVNCT = unit_1.sgPipe(initialConsonant, vowel, nasalization, neutralFinalConsonant, checkedTonal);\n// sandhi syllables\nconst scVC3 = unit_1.sgPipe(vowel, sandhiFinalConsonant);\nconst scVCT3 = unit_1.sgPipe(vowel, sandhiFinalConsonant, checkedTonal);\nconst scCVC3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant);\nconst scCVCT3 = unit_1.sgPipe(initialConsonant, vowel, sandhiFinalConsonant, checkedTonal);\nconst scCVCCT = unit_1.sgPipe(initialConsonant, vowel, nasalFinalConsonant, neutralFinalConsonant, checkedTonal);\n// prettier-ignore\nexports.syllableCompositions = [\n    // syllable compositions or patterns\n    scV, scM, scVT, scMT, scMC, scCV, scVC1, scVC2, scVCT1, scVCT2, scCVT, scCVC1,\n    scCVC2, scCVCT1, scCVCT2, scCVCC, scVCCT,\n    scCC, scCCT, scCCC, scCCCT,\n    scVN, scVNT, scVNC, scCVN, scCVNT, scCVNC, scCVNCT,\n    scVC3, scVCT3, scCVC3, scCVCT3, scCVCCT,\n];\nclass TonalPositionalLetterGenerator {\n    isStopFinal(str) {\n        if (version2_1.stopFinalsTonal.includes(str))\n            return true;\n        return false;\n    }\n    genChecked(ltrs) {\n        // TODO: if the 3rd and 5th checked tones would be changed to -ppx, -ttx, -kkx,\n        // -hhx, -ppw, -ttw, -kkw, and -hhw, edit the rules in combiningRules\n        const tos = collections_1.combiningRules.get(ltrs[ltrs.length - 1]);\n        let strs = new Array();\n        strs.push(ltrs);\n        // console.debug(tos);\n        if (tos) {\n            for (let i in tos) {\n                let syl = new Array();\n                Object.assign(syl, ltrs);\n                syl.push(version2_1.lowerLettersTonal.get(tos[i]).literal);\n                strs.push(syl);\n            }\n        }\n        return strs;\n    }\n    generate(letters) {\n        let strs = new Array();\n        const sequences = new Array(); // to be returned\n        if (this.isStopFinal(letters[letters.length - 1])) {\n            strs = this.genChecked(letters);\n        }\n        else {\n            strs.push(letters);\n        }\n        for (let i in strs) {\n            // generates all needed positional letters to be processed\n            for (let j = 0; j < exports.syllableCompositions.length; j++) {\n                let sg = new unit_1.PositionalLetterGeneration();\n                sg.letters = strs[i];\n                //console.log(`j: ${j}`)\n                sg = exports.syllableCompositions[j](sg);\n                if (sg.letters.length == sg.matchedLetters.length &&\n                    sg.matching == true) {\n                    sequences.push(sg.matchedLetters);\n                    break;\n                }\n            }\n        }\n        // console.log(letters, sequences);\n        return sequences;\n    }\n}\nexports.TonalPositionalLetterGenerator = TonalPositionalLetterGenerator;\n//# sourceMappingURL=lettergen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lettergen.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/lexeme.js":
/*!************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/lexeme.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalLemmatizationLexemeMaker = exports.TonalLemmatizationLexeme = exports.TonalWord = exports.CheckedAllomorphicEnding = exports.FreeAllomorphicEnding = exports.AllomorphicEnding = exports.CheckedInflectionalEnding = exports.FreeInflectionalEnding = exports.InflectionalEnding = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst version2_2 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/tonal/metaplasm.js\");\nclass Ending {\n}\nclass InflectionalEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.affix = new version2_2.TonalAffix(); // the affix of this word\n    }\n    toString() {\n        return this.affix.toString();\n    }\n}\nexports.InflectionalEnding = InflectionalEnding;\nclass FreeInflectionalEnding extends InflectionalEnding {\n}\nexports.FreeInflectionalEnding = FreeInflectionalEnding;\nclass CheckedInflectionalEnding extends InflectionalEnding {\n}\nexports.CheckedInflectionalEnding = CheckedInflectionalEnding;\nclass AllomorphicEnding extends Ending {\n    constructor() {\n        super(...arguments);\n        this.allomorph = new version2_1.Allomorph();\n    }\n    toString() {\n        return this.allomorph.toString();\n    }\n}\nexports.AllomorphicEnding = AllomorphicEnding;\nclass FreeAllomorphicEnding extends AllomorphicEnding {\n}\nexports.FreeAllomorphicEnding = FreeAllomorphicEnding;\nclass CheckedAllomorphicEnding extends AllomorphicEnding {\n}\nexports.CheckedAllomorphicEnding = CheckedAllomorphicEnding;\n/** A word made of syllables. */\nclass TonalWord extends unit_1.Word {\n    constructor(syllables) {\n        super();\n        this.syllables = new Array();\n        if (syllables != undefined) {\n            this.syllables = syllables;\n            this.concat();\n        }\n    }\n    popSyllable() {\n        this.syllables = this.syllables.slice(0, this.syllables.length - 1);\n        this.concat();\n    }\n    pushSyllable(syllable) {\n        this.syllables.push(syllable);\n        this.concat();\n    }\n    shiftSyllable() {\n        const syl = this.syllables.shift();\n        this.concat();\n        return syl;\n    }\n    unshiftSyllable(syllable) {\n        const num = this.syllables.unshift(syllable);\n        this.concat();\n        return num;\n    }\n    replaceSyllable(i, syllable) {\n        if (i < this.syllables.length) {\n            this.syllables.splice(i, 1, syllable);\n        }\n        this.concat();\n    }\n    concat() {\n        this.literal = this.syllables.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.TonalWord = TonalWord;\n/** A word and its lemmas/base forms. */\nclass TonalLemmatizationLexeme extends unit_1.Lexeme {\n    constructor(morphemes, metaplasm) {\n        super();\n        this.lemmata = new Array(); // lexical forms. underlying forms\n        if (morphemes.length == 0)\n            this.word = new TonalWord([]);\n        else\n            this.word = new TonalWord(morphemes.map(x => x.syllable));\n        if (morphemes.length > 0) {\n            if (morphemes[morphemes.length - 1].allomorph) {\n                this.inflectionalEnding = this.assignInflectionalEnding(morphemes[morphemes.length - 1].allomorph);\n            }\n            else {\n                this.inflectionalEnding = new InflectionalEnding();\n            }\n        }\n        else {\n            this.inflectionalEnding = new InflectionalEnding();\n        }\n        if (morphemes.length > 0)\n            this.lemmata = metaplasm.apply(morphemes, this.inflectionalEnding);\n    }\n    getLemmas() {\n        // this must be called after populateLemmata is called\n        return this.lemmata;\n    }\n    getInflectionalEnding() {\n        if (this.inflectionalEnding)\n            return this.inflectionalEnding.toString();\n        return '';\n    }\n    assignInflectionalEnding(allomorph) {\n        let infe = new InflectionalEnding();\n        // change allomorph to affix\n        if (allomorph instanceof version2_1.FreeAllomorph) {\n            let fie = new FreeInflectionalEnding();\n            fie.affix.tonal = allomorph.tonal;\n            infe = fie;\n        }\n        else if (allomorph instanceof version2_1.CheckedAllomorph) {\n            let cie = new CheckedInflectionalEnding();\n            cie.affix.tonal = allomorph.tonal;\n            infe = cie;\n        }\n        // this word is already in base form, and its last syllable is checked tone\n        return infe;\n    }\n}\nexports.TonalLemmatizationLexeme = TonalLemmatizationLexeme;\nclass TonalLemmatizationLexemeMaker extends unit_1.LexemeMaker {\n    constructor() {\n        super();\n    }\n    makeLexemes(morphemes) {\n        return this.make(morphemes);\n    }\n    make(morphemes) {\n        // inflectional stem with x in the middle\n        return new TonalLemmatizationLexeme(morphemes, new metaplasm_1.TonalLemmatization());\n    }\n}\nexports.TonalLemmatizationLexemeMaker = TonalLemmatizationLexemeMaker;\n//# sourceMappingURL=lexeme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/lexeme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/matcher.js":
/*!*************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/matcher.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.smBgjklpsF = exports.smBgkpWx = exports.smLsWx = exports.regexLsWx = exports.smBgkpF = exports.smJlsF = exports.regexJlsF = exports.smMnngHWx = exports.smMHW = exports.regexMnngHWx = exports.smMnngHF = exports.regexMnngHF = void 0;\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n// mhf, nhf, nghf\nexports.regexMnngHF = /(m|ng?)hf/g;\n// mhf, nhf, nghf\nexports.smMnngHF = function (nasalFinal, neutralFinalH, firstTonalF) {\n    if (collections_1.nasalFinals.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.h === neutralFinalH &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// mhw, mhx, nhw, nhx, nghw, nghx\nexports.regexMnngHWx = /(m|ng?)h(w|x)/g;\n// mhw\nexports.smMHW = function (nasalFinal, neutralFinalHh, thirdTonalW) {\n    if (nasalFinal === version2_1.TonalLetterTags.m &&\n        neutralFinalHh === version2_1.TonalLetterTags.h &&\n        thirdTonalW === version2_1.TonalLetterTags.w)\n        return true;\n    return false;\n};\n// mhw, mhx, nhw, nhx, nghw, nghx\nexports.smMnngHWx = function (nasalFinal, neutralFinalH, tonalWX) {\n    if (collections_1.nasalFinals.includes(nasalFinal) &&\n        version2_1.TonalLetterTags.h === neutralFinalH &&\n        collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// jf, lf, sf\nexports.regexJlsF = /(j|l|s)f/g;\n// jf, lf, sf\nexports.smJlsF = function (finalJls, firstTonalF) {\n    if (collections_1.finalsJls.includes(finalJls) && version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// bf, gf, kf, pf\nexports.smBgkpF = function (finalBgkp, firstTonalF) {\n    if (collections_1.finalsBgkp.includes(finalBgkp) && version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n// lw, lx, sw. there is no sx\nexports.regexLsWx = /(l|s)(w|x)/g;\n// lw, lx, sw\nexports.smLsWx = function (finalLs, tonalWX) {\n    if (collections_1.finalsLs.includes(finalLs) && collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bw, bx, gw, gx, kw, kx, pw, px\nexports.smBgkpWx = function (finalBgkp, tonalWX) {\n    if (collections_1.finalsBgkp.includes(finalBgkp) && collections_1.tonalsWx.includes(tonalWX))\n        return true;\n    return false;\n};\n// bf, gf, jf, kf, lf, pf, sf\nexports.smBgjklpsF = function (finalBgjklps, firstTonalF) {\n    if (version2_1.stopFinalsBgjklpsTonal.includes(finalBgjklps) &&\n        version2_1.TonalLetterTags.f === firstTonalF)\n        return true;\n    return false;\n};\n//# sourceMappingURL=matcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9tYXRjaGVyLmpzPzdlMGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9tYXRjaGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNtQmdqa2xwc0YgPSBleHBvcnRzLnNtQmdrcFd4ID0gZXhwb3J0cy5zbUxzV3ggPSBleHBvcnRzLnJlZ2V4THNXeCA9IGV4cG9ydHMuc21CZ2twRiA9IGV4cG9ydHMuc21KbHNGID0gZXhwb3J0cy5yZWdleEpsc0YgPSBleHBvcnRzLnNtTW5uZ0hXeCA9IGV4cG9ydHMuc21NSFcgPSBleHBvcnRzLnJlZ2V4TW5uZ0hXeCA9IGV4cG9ydHMuc21Nbm5nSEYgPSBleHBvcnRzLnJlZ2V4TW5uZ0hGID0gdm9pZCAwO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb24yXCIpO1xuY29uc3QgY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25zXCIpO1xuLy8gbWhmLCBuaGYsIG5naGZcbmV4cG9ydHMucmVnZXhNbm5nSEYgPSAvKG18bmc/KWhmL2c7XG4vLyBtaGYsIG5oZiwgbmdoZlxuZXhwb3J0cy5zbU1ubmdIRiA9IGZ1bmN0aW9uIChuYXNhbEZpbmFsLCBuZXV0cmFsRmluYWxILCBmaXJzdFRvbmFsRikge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLm5hc2FsRmluYWxzLmluY2x1ZGVzKG5hc2FsRmluYWwpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmggPT09IG5ldXRyYWxGaW5hbEggJiZcbiAgICAgICAgdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuZiA9PT0gZmlyc3RUb25hbEYpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG4vLyBtaHcsIG1oeCwgbmh3LCBuaHgsIG5naHcsIG5naHhcbmV4cG9ydHMucmVnZXhNbm5nSFd4ID0gLyhtfG5nPyloKHd8eCkvZztcbi8vIG1od1xuZXhwb3J0cy5zbU1IVyA9IGZ1bmN0aW9uIChuYXNhbEZpbmFsLCBuZXV0cmFsRmluYWxIaCwgdGhpcmRUb25hbFcpIHtcbiAgICBpZiAobmFzYWxGaW5hbCA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MubSAmJlxuICAgICAgICBuZXV0cmFsRmluYWxIaCA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MuaCAmJlxuICAgICAgICB0aGlyZFRvbmFsVyA9PT0gdmVyc2lvbjJfMS5Ub25hbExldHRlclRhZ3MudylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIG1odywgbWh4LCBuaHcsIG5oeCwgbmdodywgbmdoeFxuZXhwb3J0cy5zbU1ubmdIV3ggPSBmdW5jdGlvbiAobmFzYWxGaW5hbCwgbmV1dHJhbEZpbmFsSCwgdG9uYWxXWCkge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLm5hc2FsRmluYWxzLmluY2x1ZGVzKG5hc2FsRmluYWwpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmggPT09IG5ldXRyYWxGaW5hbEggJiZcbiAgICAgICAgY29sbGVjdGlvbnNfMS50b25hbHNXeC5pbmNsdWRlcyh0b25hbFdYKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8vIGpmLCBsZiwgc2ZcbmV4cG9ydHMucmVnZXhKbHNGID0gLyhqfGx8cylmL2c7XG4vLyBqZiwgbGYsIHNmXG5leHBvcnRzLnNtSmxzRiA9IGZ1bmN0aW9uIChmaW5hbEpscywgZmlyc3RUb25hbEYpIHtcbiAgICBpZiAoY29sbGVjdGlvbnNfMS5maW5hbHNKbHMuaW5jbHVkZXMoZmluYWxKbHMpICYmIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmYsIGdmLCBrZiwgcGZcbmV4cG9ydHMuc21CZ2twRiA9IGZ1bmN0aW9uIChmaW5hbEJna3AsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKGNvbGxlY3Rpb25zXzEuZmluYWxzQmdrcC5pbmNsdWRlcyhmaW5hbEJna3ApICYmIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gbHcsIGx4LCBzdy4gdGhlcmUgaXMgbm8gc3hcbmV4cG9ydHMucmVnZXhMc1d4ID0gLyhsfHMpKHd8eCkvZztcbi8vIGx3LCBseCwgc3dcbmV4cG9ydHMuc21Mc1d4ID0gZnVuY3Rpb24gKGZpbmFsTHMsIHRvbmFsV1gpIHtcbiAgICBpZiAoY29sbGVjdGlvbnNfMS5maW5hbHNMcy5pbmNsdWRlcyhmaW5hbExzKSAmJiBjb2xsZWN0aW9uc18xLnRvbmFsc1d4LmluY2x1ZGVzKHRvbmFsV1gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYncsIGJ4LCBndywgZ3gsIGt3LCBreCwgcHcsIHB4XG5leHBvcnRzLnNtQmdrcFd4ID0gZnVuY3Rpb24gKGZpbmFsQmdrcCwgdG9uYWxXWCkge1xuICAgIGlmIChjb2xsZWN0aW9uc18xLmZpbmFsc0Jna3AuaW5jbHVkZXMoZmluYWxCZ2twKSAmJiBjb2xsZWN0aW9uc18xLnRvbmFsc1d4LmluY2x1ZGVzKHRvbmFsV1gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gYmYsIGdmLCBqZiwga2YsIGxmLCBwZiwgc2ZcbmV4cG9ydHMuc21CZ2prbHBzRiA9IGZ1bmN0aW9uIChmaW5hbEJnamtscHMsIGZpcnN0VG9uYWxGKSB7XG4gICAgaWYgKHZlcnNpb24yXzEuc3RvcEZpbmFsc0JnamtscHNUb25hbC5pbmNsdWRlcyhmaW5hbEJnamtscHMpICYmXG4gICAgICAgIHZlcnNpb24yXzEuVG9uYWxMZXR0ZXJUYWdzLmYgPT09IGZpcnN0VG9uYWxGKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hlci5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/matcher.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/metaplasm.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/metaplasm.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalLemmatization = exports.TransfixUncombining = exports.LastSyllableForms = exports.PrecedingAyexUncombining = exports.TonalUncombiningForms = void 0;\nconst metaplasm_1 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst lexeme_1 = __webpack_require__(/*! ./lexeme */ \"./node_modules/taipa/lib/tonal/lexeme.js\");\nconst morpheme_1 = __webpack_require__(/*! ./morpheme */ \"./node_modules/taipa/lib/tonal/morpheme.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** Returns the uncombining forms of a syllable. */\nclass TonalUncombiningForms extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(lettersFollowing) {\n        super();\n        this.lettersFollowing = lettersFollowing;\n    }\n    apply(letters, allomorph) {\n        if (allomorph) {\n            if (allomorph instanceof version2_1.FreeAllomorph) {\n                if (allomorph instanceof version2_1.ZeroAllomorph) {\n                    // push y to make tone 2\n                    // 1 to 2\n                    const s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n                    const tnls = version2_1.freeAllomorphUncombiningRules.get('zero');\n                    if (tnls)\n                        s.pushLetter(new unit_1.AlphabeticLetter(tnls[0].characters));\n                    return [s];\n                }\n                else {\n                    // the 7th tone has two baseforms\n                    const ret = [];\n                    const rules = version2_1.freeAllomorphUncombiningRules.get(allomorph.toString());\n                    const tnls = !rules ? [] : rules;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(letters.map(x => new unit_1.AlphabeticLetter(x.characters)));\n                        if (!(tnls[i] instanceof version2_1.ZeroAllomorph)) {\n                            // 2 to 3. 3 to 7. 7 to 5. 3 to 5.\n                            // replace z with f or x\n                            s.popLetter();\n                            s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                            ret.push(s);\n                        }\n                        else {\n                            // 7 to 1\n                            // pop z\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n            }\n            else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                // pop the tone letter\n                // 1 to 4. 3 to 8. 2 to 4. 5 to 8.\n                if (allomorph.tonal.toString() === '')\n                    return [];\n                const s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                const fnl = s.letters[s.letters.length - 1].literal;\n                const nslFnls = letters.filter(it => it.name === version2_1.TonalSpellingTags.nasalFinal);\n                s.popLetter(); // pop out the tonal\n                if (nslFnls.length == 0 &&\n                    (fnl === version2_1.TonalLetterTags.w || fnl === version2_1.TonalLetterTags.x) &&\n                    Array.from(collections_1.fourthToEighthFinals.keys()).includes(s.lastLetter.literal)) {\n                    // in case of no internal sandhi\n                    const fnl = s.lastLetter.literal;\n                    s.popLetter(); // pop the 4th final\n                    const got = collections_1.fourthToEighthFinals.get(fnl);\n                    if (got)\n                        s.pushLetter(version2_1.lowerLettersTonal.get(got)); // push the 8th final\n                }\n                else if (collections_1.finalsBgjlsbbggllss.has(s.lastLetter.literal)) {\n                    // in case of internal or external sandhi\n                    const fnlsOfLemma = collections_1.finalsBgjlsbbggllss.get(s.lastLetter.literal + fnl);\n                    // console.log(s, allomorph, fnl, fnlsOfLemma);\n                    if (fnlsOfLemma) {\n                        const clones = fnlsOfLemma.map(it => {\n                            const clone = Object.create(s);\n                            clone.replaceLetter(s.letters.length - 1, version2_1.lowerLettersTonal.get(it.toString()));\n                            return clone;\n                        });\n                        const ret = [];\n                        clones.map(it => ret.push(it));\n                        return clones;\n                    }\n                }\n                else if (letters.filter(it => it.name === version2_1.TonalSpellingTags.medial).length >\n                    0 &&\n                    collections_1.nasalFinals.includes(s.lastSecondLetter.literal) &&\n                    version2_1.neutralFinalsTonal.includes(s.lastLetter.literal)) {\n                    // in case of internal sandhi of p or t\n                    // if there is no medials, e.g. hmhh, hngh, just bypass this block\n                    // mhh, mh, nhh, nh, nghh, ngh\n                    if (this.lettersFollowing[0] &&\n                        this.lettersFollowing[0].name === version2_1.TonalSpellingTags.initial &&\n                        s.lastSecondLetter.literal === this.lettersFollowing[0].toString()) {\n                        // unchange to -tt or -t\n                        s.popLetter(); // pop the neutral\n                        s.popLetter(); // pop the nasal\n                        const clone = Object.create(s);\n                        // if (ntrl === TonalLetterTags.hh) {\n                        if (fnl === version2_1.TonalLetterTags.w) {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n                        }\n                        else {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                        }\n                        return [clone];\n                    }\n                    else if (this.lettersFollowing[0]) {\n                        // there has to be a following syllable for this syllable to change form\n                        // unchange to -pp or -p\n                        s.popLetter(); // pop the neutral\n                        s.popLetter(); // pop the nasal\n                        const clone = Object.create(s);\n                        // if (ntrl === TonalLetterTags.hh) {\n                        if (fnl === version2_1.TonalLetterTags.w) {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.pp));\n                        }\n                        else {\n                            clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n                        }\n                        return [clone];\n                    }\n                }\n                return [s];\n            }\n        }\n        return [];\n    }\n}\nexports.TonalUncombiningForms = TonalUncombiningForms;\n/** Returns the uncombining forms of the syllable preceding ay */\nclass PrecedingAyexUncombining extends metaplasm_1.TonalCombiningMetaplasm {\n    getUncombiningForms(syllable, letters) {\n        if (collections_1.voicedVoicelessFinals.has(letters[letters.length - 2].toString())) {\n            // in case of sandhi finals\n            const fnl = collections_1.voicedVoicelessFinals.get(syllable.lastLetter.literal + letters[letters.length - 1].toString());\n            if (fnl)\n                syllable.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(fnl));\n        }\n        else if (collections_1.fourthToEighthFinals.has(letters[letters.length - 2].toString()) &&\n            letters[letters.length - 1].toString() === version2_1.TonalLetterTags.x) {\n            const fnl = collections_1.fourthToEighthFinals.get(syllable.lastLetter.literal);\n            if (fnl)\n                syllable.replaceLetter(syllable.letters.length - 1, version2_1.lowerLettersTonal.get(fnl));\n        }\n    }\n    apply(letters, allomorph) {\n        if (allomorph) {\n            if (allomorph.tonal.toString() === version2_1.TonalLetterTags.f) {\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                        // 1 to 2. 1 to 3\n                        // replace f with y or w\n                        s.popLetter();\n                        s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                        ret.push(s);\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    const s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                    // pop f\n                    s.popLetter();\n                    this.getUncombiningForms(s, letters);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.x) {\n                // 5 to 1. 5 to 7. 5 to 5.\n                if (allomorph instanceof version2_1.FreeAllomorph) {\n                    const ret = [];\n                    const rls = version2_1.uncombiningRulesAy.get(allomorph.toString());\n                    const tnls = !rls ? [] : rls;\n                    for (let i in tnls) {\n                        let s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                        if (!(tnls[i] instanceof version2_1.ZeroTonal)) {\n                            if (tnls[i] instanceof version2_1.FreeTonalZ) {\n                                // 5 to 7\n                                // replace x with z\n                                s.popLetter();\n                                s.pushLetter(new unit_1.AlphabeticLetter(tnls[i].characters));\n                                ret.push(s);\n                            }\n                            else if (tnls[i] instanceof version2_1.FreeTonalX) {\n                                // 5 to 5\n                                ret.push(s);\n                            }\n                        }\n                        else {\n                            // 5 to 1\n                            // pop x\n                            s.popLetter();\n                            ret.push(s);\n                        }\n                    }\n                    return ret;\n                }\n                else if (allomorph instanceof version2_1.CheckedAllomorph) {\n                    // 5 to 8.\n                    const s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n                    s.popLetter(); // pop x\n                    this.getUncombiningForms(s, letters);\n                    return [s];\n                }\n            }\n            else if (allomorph.tonal.toString() === version2_1.TonalLetterTags.y) {\n                return [];\n            }\n        }\n        return [];\n    }\n}\nexports.PrecedingAyexUncombining = PrecedingAyexUncombining;\n/** Returns the last syllable of a double or triple construction as an uncombining form. */\nclass LastSyllableForms extends metaplasm_1.TonalCombiningMetaplasm {\n    constructor(lettersLastSyllable) {\n        super();\n        this.lettersLastSyllable = lettersLastSyllable;\n    }\n    apply(letters, allomorph) {\n        if (allomorph) {\n            // skip the last syllable. it is the base form of the preceding 2 syllables.\n            if (this.lettersLastSyllable[this.lettersLastSyllable.length - 1].toString() === letters[letters.length - 1].toString())\n                return [];\n            const s = new morpheme_1.TonalSyllable(this.lettersLastSyllable.map(it => new unit_1.AlphabeticLetter(it.characters)));\n            return [s];\n        }\n        return [];\n    }\n}\nexports.LastSyllableForms = LastSyllableForms;\n/** Returns the uncombining forms of a transfix inflected syllable. */\nclass TransfixUncombining extends metaplasm_1.TonalCombiningMetaplasm {\n    apply(letters, allomorph) {\n        if (allomorph) {\n            const vowelA = letters.filter(it => it.toString() === version2_1.TonalLetterTags.a);\n            const chkFnls = letters.filter(it => it.name === version2_1.TonalSpellingTags.checkedTonal);\n            const s = new morpheme_1.TonalSyllable(letters.map(it => new unit_1.AlphabeticLetter(it.characters)));\n            if (vowelA.length == 1) {\n                // aw -> ay\n                s.popLetter(); // pop letter w\n                s.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y));\n                return [s];\n            }\n            else if (chkFnls.length == 1) {\n                // checked tones\n                s.popLetter(); // pop letter w\n                const clone = Object.create(s);\n                clone.popLetter(); // pop final t\n                clone.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n                return [s, clone];\n            }\n            else {\n                // in case of free tones other than aw, return the other four free tones\n                s.popLetter(); // pop letter w. 1st tone\n                const clone2 = Object.create(s); // 2nd tone\n                const clone5 = Object.create(s); // 5th tone\n                const clone7 = Object.create(s); // 7th tone\n                clone2.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.y));\n                clone5.popLetter(); // letter y was also pushed to clone5, so we have to pop it out. bug?\n                clone5.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.x));\n                clone7.popLetter(); // letter y was also pushed to clone7, so we have to pop it out. bug?\n                clone7.pushLetter(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.z));\n                return [s, clone2, clone5, clone7];\n            }\n        }\n        return [];\n    }\n}\nexports.TransfixUncombining = TransfixUncombining;\n/** Lemmatizes a word and returns its base forms. */\nclass TonalLemmatization extends metaplasm_2.TonalLemmatizationMetaplasm {\n    apply(morphemes, inflectionalEnding) {\n        return this.populateLemmata(morphemes, inflectionalEnding);\n    }\n    getLemmas(morphemes, inflectionalEnding) {\n        if (inflectionalEnding) {\n            if (inflectionalEnding instanceof lexeme_1.FreeInflectionalEnding) {\n                const ret = [];\n                const arr = morphemes[morphemes.length - 1].getForms();\n                for (const key in arr) {\n                    const wrd = new lexeme_1.TonalWord(morphemes.map(it => it.syllable));\n                    wrd.popSyllable();\n                    wrd.pushSyllable(arr[key]);\n                    ret.push(wrd);\n                }\n                return ret;\n            }\n            else if (inflectionalEnding instanceof lexeme_1.CheckedInflectionalEnding) {\n                if (morphemes[morphemes.length - 1].getForms().length == 0)\n                    return [];\n                const wrd = new lexeme_1.TonalWord(morphemes.map(it => it.syllable));\n                wrd.popSyllable();\n                wrd.pushSyllable(morphemes[morphemes.length - 1].getForms()[0]);\n                return [wrd];\n            }\n        }\n        return [];\n    }\n    populateLemmata(morphemes, inflectionalEnding) {\n        let lemmata = new Array();\n        // turn morphemes into lemmas\n        let lms = this.getLemmas(morphemes, inflectionalEnding);\n        if (lms.length > 0) {\n            for (let key in lms) {\n                lemmata.push(lms[key]);\n            }\n        }\n        return lemmata;\n    }\n}\nexports.TonalLemmatization = TonalLemmatization;\n//# sourceMappingURL=metaplasm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/metaplasm.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/morpheme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/morpheme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalUncombiningMorphemeMaker = exports.TonalUncombiningMorpheme = exports.TonalSyllable = exports.syllabifyTonal = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst unit_2 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst lettergen_1 = __webpack_require__(/*! ./lettergen */ \"./node_modules/taipa/lib/tonal/lettergen.js\");\nconst syllabletable_1 = __webpack_require__(/*! ./syllabletable */ \"./node_modules/taipa/lib/tonal/syllabletable.js\");\nconst matcher_1 = __webpack_require__(/*! ./matcher */ \"./node_modules/taipa/lib/tonal/matcher.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\nconst metaplasm_1 = __webpack_require__(/*! ./metaplasm */ \"./node_modules/taipa/lib/tonal/metaplasm.js\");\nconst metaplasm_2 = __webpack_require__(/*! ../metaplasm */ \"./node_modules/taipa/lib/metaplasm.js\");\nfunction syllabifyTonal(letters, beginOfSyllable) {\n    // get the longest matched syllable pattern\n    let literal = '';\n    let matched = '';\n    let begin = 0;\n    let ltrs = new Array();\n    let matchedLtrs = new Array();\n    let literalRoot4thFinal = '';\n    for (let i = beginOfSyllable; i < letters.length; i++) {\n        literal = literal + letters[i].literal;\n        ltrs.push(letters[i].literal);\n        // console.log(`begining of the loop: ${literal}. ${ltrs}`);\n        const had = collections_1.fourthToEighthFinals.has(letters[i].literal);\n        if (i + 1 < letters.length &&\n            had &&\n            version2_1.TonalLetterTags.w === letters[i + 1].literal) {\n            const got = collections_1.fourthToEighthFinals.get(letters[i].literal);\n            // restore the lexical roots for 4th finals, which is 8th finals\n            if (got) {\n                // since it is 4th finals, length of 4th final is one, just slice one character\n                literalRoot4thFinal =\n                    literalRoot4thFinal.slice(0, literalRoot4thFinal.length) + got;\n                // console.log(`literalRoot4thFinal: ${literalRoot4thFinal}`);\n            }\n        }\n        else {\n            literalRoot4thFinal = literalRoot4thFinal + letters[i].literal;\n        }\n        if (syllabletable_1.isInSyllableTable(literal) &&\n            version2_1.freeTonalsTonal.includes(letters[i].literal)) {\n            // console.log(`i: ${i}, literal: ${literal}, tone: ${letters[i].literal}, letters[i+1]: ${letters[i + 1].literal}`)\n            if (begin === beginOfSyllable) {\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if (syllabletable_1.isInSyllableTable(literalRoot4thFinal) &&\n            version2_1.stopFinalsTonal.includes(letters[i].literal)) {\n            // console.log(`i: ${i}, literal: ${literal}, literalRoot4thFinal: ${literalRoot4thFinal}, stopFinal: ${letters[i].literal}`);\n            // console.log(`begin: ${begin}, beginOfSyllable: ${beginOfSyllable}`);\n            if (begin === beginOfSyllable) {\n                matched = literal; // assign literal instead of literalRoot4thFinal\n                Object.assign(matchedLtrs, ltrs);\n            }\n            break;\n        }\n        else if (version2_1.freeTonalsTonal.includes(letters[i].literal)) {\n            // check tonals is the subset of free tonals\n            // console.log(\n            //   `i: ${i}, literal: ${literal}, letters[i].literal, ${letters[i].literal}`\n            // );\n            // when there are tonals\n            if (literal.length > 1 &&\n                letters[i] &&\n                letters[i - 1] &&\n                (matcher_1.smBgkpF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smBgkpWx(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smJlsF(letters[i - 1].literal, letters[i].literal) ||\n                    matcher_1.smLsWx(letters[i - 1].literal, letters[i].literal))) {\n                // b, g, bb, gg, l, j, s, ll, ss need to be handled in TonalCombiningMorpheme.assignAllomorph\n                // this combining form is not present in the pool.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            else if (literal.length > 2 &&\n                letters[i] &&\n                letters[i - 1] &&\n                letters[i - 2] &&\n                matcher_1.smMHW(letters[i - 2].literal, letters[i - 1].literal, letters[i].literal)) {\n                // for lexical roots end with ~mhw.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n                break;\n            }\n            // tone change of free allomorphs\n            const rulesFa = version2_1.freeAllomorphUncombiningRules.get(letters[i].literal);\n            const tnlsFa = !rulesFa ? [] : rulesFa.map(x => x.toString());\n            // tone sandhi of ay\n            const rulesAy = version2_1.uncombiningRulesAy.get(letters[i].literal);\n            const tnlsAy = !rulesAy ? [] : rulesAy.map(x => x.toString());\n            // merge the above twoo arrays\n            const tnls = tnlsFa.concat(tnlsAy.filter(item => tnlsFa.indexOf(item) < 0));\n            // console.log(tnls)\n            if (tnls.length > 0) {\n                for (let t of tnls) {\n                    //console.log(lit + t.toString())\n                    if (syllabletable_1.isInSyllableTable(letters\n                        .slice(beginOfSyllable, i)\n                        .map(x => x.literal)\n                        .join('') + t)) {\n                        // this combining form is not present in the pool,\n                        // but its uncombining forms are. e.g. aw.\n                        matched = literal;\n                        //begin = beginOfSyllable;\n                        Object.assign(matchedLtrs, ltrs);\n                        break;\n                    }\n                }\n                if (matched.length > 0 && matchedLtrs.length > 0)\n                    break;\n            }\n            else {\n                // no uncombining forms for this combining form. e.g. ax.\n                matched = '';\n                matchedLtrs = [];\n            }\n        }\n        else if (syllabletable_1.isInSyllableTable(literal)) {\n            matched = literal;\n            Object.assign(matchedLtrs, ltrs);\n            begin = beginOfSyllable;\n            // console.log(matched);\n        }\n        else {\n            // console.log('no matched for syllabifyTonal:' + ltrs)\n            // when there are no tonals\n            if (letters[i].literal === version2_1.TonalLetterTags.gg) {\n                // for surface form gg whose underlying form could be tt or kk.\n                matched = literal;\n                Object.assign(matchedLtrs, ltrs);\n            }\n            else if (!version2_1.freeTonalsTonal.includes(letters[i].literal)) {\n                // free first tone without a free tonal\n                const rules = version2_1.freeAllomorphUncombiningRules.get(version2_1.TonalLetterTags.zero);\n                const tnls = !rules ? [] : rules;\n                for (let t of tnls) {\n                    // append second tonal letter\n                    // check the uncombining forms\n                    if (syllabletable_1.isInSyllableTable(literal + t.toString())) {\n                        // if the free first tone's lemma is included\n                        matched = literal;\n                        Object.assign(matchedLtrs, ltrs);\n                        //break;\n                    }\n                }\n            }\n            // when there is no matched lexcial roots for this syllable, we still assign begin\n            begin = beginOfSyllable;\n        }\n    }\n    // console.log(`literal: ${literal}. matched: ${matched}`);\n    // console.log(matchedLtrs);\n    if (matched.length > 0 && literal.length > matched.length) {\n        // when ~ay is longer than ~a by one letter y\n        // for those first tone lexcial roots that are present\n        matched = '';\n        matchedLtrs = [];\n    }\n    // console.log('matched: ' + matched);\n    const tsg = new lettergen_1.TonalPositionalLetterGenerator();\n    //console.log('matched: ' + matched)\n    let list = new Array();\n    if (matched.length > 0) {\n        list = tsg.generate(matchedLtrs);\n    }\n    else {\n        if (ltrs.length == 3 && ltrs[1] === 'a' && ltrs[2] === 'y') {\n            const rea = new metaplasm_2.RemovingEpenthesisOfAy();\n            const done = rea.applyToString(literal);\n            //console.log(done.toString())\n            if (collections_1.epentheticLetters.includes(ltrs[0]) && syllabletable_1.isInSyllableTable(done)) {\n                list = tsg.generate(ltrs);\n            }\n        }\n    }\n    // console.log(list);\n    let matchedLen = 0;\n    let mp = new unit_1.MatchedPattern();\n    for (let m in list) {\n        const min = Math.min(letters.length - beginOfSyllable, list[m].length);\n        if (list[m].length == min) {\n            for (let n = 0; n < min; n++) {\n                if (list[m][n] != undefined) {\n                    if (letters[beginOfSyllable + n].literal === list[m][n].toString()) {\n                        //console.log(syllabary[m])\n                        if (n + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                mp.letters[q] = letters[beginOfSyllable + q];\n                            }\n                            // copy the pattern of positional letters\n                            mp.pattern = list[m];\n                            //console.log(syllabary.list[m])\n                            //console.log(mp.letters)\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return mp;\n}\nexports.syllabifyTonal = syllabifyTonal;\nclass TonalSyllable extends unit_1.Syllable {\n    popLetter() {\n        this.letters = this.letters.slice(0, this.letters.length - 1);\n        this.concat();\n    }\n    get lastLetter() {\n        if (this.letters.length >= 1)\n            return this.letters[this.letters.length - 1];\n        return new unit_2.AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length >= 2)\n            return this.letters[this.letters.length - 2];\n        return new unit_2.AlphabeticLetter([]);\n    }\n}\nexports.TonalSyllable = TonalSyllable;\n/** A syllable and its uncombining forms. */\nclass TonalUncombiningMorpheme extends unit_1.Morpheme {\n    constructor(syllable, letters, metaplasm) {\n        super();\n        this.syllable = syllable;\n        this.metaplasm = metaplasm;\n        // assign allomorph for each syllable\n        this.letters = letters;\n        this.allomorph = this.assignAllomorph(this.letters);\n        this.forms = this.metaplasm.apply(this.letters, this.allomorph);\n    }\n    getForms() {\n        return this.forms;\n    }\n    assignAllomorph(letters) {\n        let allomorph = new version2_1.ZeroAllomorph();\n        // assign the matched allomorph for this syllable\n        let las = []; // list of allomorphs\n        const s = new TonalSyllable(letters.map(it => new unit_2.AlphabeticLetter(it.characters)));\n        const keys = Array.from(version2_1.checkedAllomorphs.keys());\n        for (let k = 0; k < keys.length; k++) {\n            const am = version2_1.checkedAllomorphs.get(keys[k]);\n            if (am && am instanceof version2_1.CheckedAllomorph) {\n                if (am.tonal) {\n                    if (am.tonal.toString() === s.lastLetter.literal &&\n                        am.final.toString() === s.lastSecondLetter.literal) {\n                        las.push(am);\n                        break;\n                    }\n                    else {\n                        if (am.final.toString() === s.lastLetter.literal) {\n                            las.push(am);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (las.length > 0) {\n            // there is only one match after processing, we just assign it\n            const ret = las.shift();\n            if (ret)\n                return ret;\n        }\n        // after matching with checked allomorphs, we go on matching free allomorphs\n        las = [];\n        if (version2_1.freeAllomorphs.has(s.lastLetter.literal)) {\n            const am = version2_1.freeAllomorphs.get(s.lastLetter.literal);\n            const stpFnls = letters.filter(it => it.name === version2_1.TonalSpellingTags.stopFinal);\n            const chkttnls = letters.filter(it => it.name === version2_1.TonalSpellingTags.checkedTonal);\n            if (am &&\n                !(stpFnls.length == 1 &&\n                    stpFnls[0].toString().length == 2 &&\n                    chkttnls.length == 1)) {\n                // when 8th finals *not* followed by a tonal\n                las.push(am);\n            }\n            else\n                las.push(new version2_1.Allomorph());\n        }\n        if (las.length == 0) {\n            // tone 1 has no allomorph\n            allomorph = new version2_1.ZeroAllomorph();\n        }\n        else if (las.length == 1) {\n            // are there multiple allomorphs? there should be only one.\n            for (let i = 0; i < las.length; i++) {\n                if (las[i].tonal.toString() === new version2_1.AllomorphX().tonal.toString()) {\n                    // this syllable is already in base form\n                    // in order to display this inflectional ending, we have to assign\n                    allomorph = las[i];\n                }\n                else {\n                    allomorph = las[i];\n                }\n            }\n        }\n        return allomorph;\n    }\n}\nexports.TonalUncombiningMorpheme = TonalUncombiningMorpheme;\nclass TonalUncombiningMorphemeMaker extends unit_1.MorphemeMaker {\n    constructor() {\n        super();\n        this.sandhiFinals = new Array();\n        this.sandhiFinalTonals = new Array();\n    }\n    createMorphemes() {\n        return new Array();\n    }\n    createMorpheme(matched, metaplasm) {\n        const tum = new TonalUncombiningMorpheme(new TonalSyllable(matched.letters), matched.pattern, metaplasm);\n        return tum;\n    }\n    isCombiningAy(syllables) {\n        const keysAy = Array.from(version2_1.uncombiningRulesAy.keys());\n        // bug?\n        // console.log(regexMnngHF.test('vunghf')); // true\n        // console.log(regexMnngHF.test('vunghfngay')); // false\n        // console.log(regexMnngHF.test('cunhf')) // true\n        // console.log(regexMnngHF.test('cunhfmiax')) // false\n        if (syllables.length >= 2) {\n            const nslFnlLast2nd = syllables[syllables.length - 2].pattern.filter(it => it.name === version2_1.TonalSpellingTags.nasalFinal);\n            const stpFnlH = syllables[syllables.length - 2].pattern.filter(it => it.name === version2_1.TonalSpellingTags.stopFinal &&\n                it.toString() === version2_1.TonalLetterTags.h);\n            const tnl = syllables[syllables.length - 2].pattern.filter(it => (it.name === version2_1.TonalSpellingTags.nasalFinal ||\n                it.name === version2_1.TonalSpellingTags.checkedTonal) &&\n                keysAy.includes(it.toString()));\n            const nslInitLast = syllables[syllables.length - 1].pattern.filter(it => it.name === version2_1.TonalSpellingTags.initial &&\n                collections_1.nasalInitials.includes(it.toString()));\n            // ending ay\n            const endingAy = syllables[syllables.length - 1].lastSecondLetter.literal ===\n                version2_1.TonalLetterTags.a &&\n                syllables[syllables.length - 1].lastLetter.literal ===\n                    version2_1.TonalLetterTags.y;\n            // ending a is the proceeding form of ay\n            const endingA = syllables[syllables.length - 1].lastLetter.literal ===\n                version2_1.TonalLetterTags.a;\n            if (!(nslFnlLast2nd.length == 1 &&\n                stpFnlH.length == 1 &&\n                tnl.length == 1) &&\n                (endingAy || endingA)) {\n                // bypass sandhi t. e.g. vunghf~.\n                if (nslInitLast.length == 1 && nslFnlLast2nd.length == 0) {\n                    // in case of words like vutfngay\n                    return false;\n                }\n                const initLast = syllables[syllables.length - 1].pattern.filter(it => it.name === version2_1.TonalSpellingTags.initial &&\n                    version2_1.initialsTonal.includes(it.toString()));\n                if (stpFnlH.length == 0 &&\n                    nslFnlLast2nd.length == 1 &&\n                    initLast.length == 1 &&\n                    nslFnlLast2nd[0].toString() != initLast[0].toString()) {\n                    // in case of words like angzchoay, ngzchoay\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    isTransfixInflection(syllables) {\n        // TODO: there are not many of them. make a tiny dictionary to cover the ocurrences\n        const thirds = syllables\n            .map(it => it.pattern.filter(ltr => ltr.toString() === version2_1.TonalLetterTags.w))\n            .map(seq => seq.map(ltr => ltr.toString()))\n            .filter(arr => arr.length > 0);\n        const endingAw = syllables[syllables.length - 1].lastSecondLetter.literal ===\n            version2_1.TonalLetterTags.a;\n        if (syllables.length > 1 && thirds.length == syllables.length && endingAw)\n            return true;\n        return false;\n    }\n    isDoublet(syllables) {\n        if (syllables.length == 2) {\n            const stems = syllables\n                .map(it => it.pattern.filter(s => s.name !== version2_1.TonalSpellingTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSpellingTags.freeTonal))\n                .map(seq => seq.map(ltr => ltr.toString()).join(''));\n            // compare 2 strings/lexical stems\n            if (stems[0] === stems[1])\n                return true; // identical\n        }\n        return false;\n    }\n    isTriplet(syllables) {\n        if (syllables.length == 3) {\n            const stems = syllables\n                .map(it => it.pattern.filter(ltr => ltr.name !== version2_1.TonalSpellingTags.freeTonal &&\n                ltr.name !== version2_1.TonalSpellingTags.checkedTonal))\n                .map(seq => seq.map(ltr => ltr.toString()).join(''));\n            const fnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSpellingTags.stopFinal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // TODO: add checks for tone group\n            const tnls = syllables\n                .map(it => it.pattern.filter(s => s.name === version2_1.TonalSpellingTags.freeTonal))\n                .map(seq => seq.map(s => s.toString()).join(''));\n            // compare 3 strings/lexical stems\n            if (fnls && fnls.length > 0) {\n                // stems of checked tones\n                if (stems[0] === stems[1] && stems[0] + fnls[0] === stems[2])\n                    return true;\n            }\n            else {\n                // stems of free tones\n                if (stems.every((v, i, a) => v === a[a.length - 1]))\n                    return true; // identical\n            }\n        }\n        return false;\n    }\n    preprocessSandhiFinal(letters) {\n        this.sandhiFinals.push(letters[letters.length - 1]);\n        return letters.slice(0, letters.length - 1);\n    }\n    preprocessSandhiFinalTonal(letters, literal, regex, len) {\n        const matchedStrs = literal.match(regex);\n        // console.log(matchedStrs);\n        let indx = -1;\n        if (len == 1) {\n            for (let i = 0; i < letters.length - 1; i++) {\n                if (matcher_1.smJlsF(letters[i].literal, letters[i + 1].literal) ||\n                    matcher_1.smLsWx(letters[i].literal, letters[i + 1].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        else if (len == 2) {\n            for (let i = 0; i < letters.length - 2; i++) {\n                if (matcher_1.smMnngHF(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal) ||\n                    matcher_1.smMnngHWx(letters[i].literal, letters[i + 1].literal, letters[i + 2].literal)) {\n                    indx = i;\n                    break;\n                }\n            }\n        }\n        if (matchedStrs) {\n            for (let i in matchedStrs) {\n                const idxl = literal.search(matchedStrs[i]);\n                const head = literal.substring(0, idxl);\n                const tail = literal.substring(idxl + matchedStrs[i].length);\n                // in case of hmhw or hmhwhmhw\n                // check if the previous letter is a consonant\n                if (version2_1.initialsTonal.includes(head))\n                    return letters;\n                let fnl;\n                if (version2_1.TonalLetterTags.f === matchedStrs[i].charAt(matchedStrs[i].length - 1)) {\n                    literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.f, tail);\n                    fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                }\n                else if (collections_1.tonalsWx.includes(matchedStrs[i].charAt(matchedStrs[i].length - 1))) {\n                    if (matchedStrs[i].charAt(matchedStrs[i].length - 1) ===\n                        version2_1.TonalLetterTags.w) {\n                        // 3rd tone\n                        if (matchedStrs[0][0] === tail[0]) {\n                            literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.w, tail);\n                        }\n                        else {\n                            literal = head.concat(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.w, tail);\n                        }\n                    }\n                    else if (matchedStrs[i].charAt(matchedStrs[i].length - 1) ===\n                        version2_1.TonalLetterTags.x) {\n                        // 5th tone\n                        if (matchedStrs[0][0] === tail[0]) {\n                            literal = head.concat(version2_1.TonalLetterTags.t + version2_1.TonalLetterTags.x, tail);\n                        }\n                        else {\n                            literal = head.concat(version2_1.TonalLetterTags.p + version2_1.TonalLetterTags.x, tail);\n                        }\n                    }\n                    // console.log(letters.map(x => x.literal).join(''), 'before splicing');\n                    // console.log(matchedStrs[0][0], tail[0]);\n                    if (matchedStrs[0][0] === tail[0] ||\n                        (matchedStrs[0][0] === version2_1.TonalLetterTags.l &&\n                            tail[0] === version2_1.TonalLetterTags.j)) {\n                        // if the initial of the following syllable equals to the final of the preceding one\n                        // h -> tt\n                        fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.t));\n                    }\n                    else if (matchedStrs[0][0] === version2_1.TonalLetterTags.h) {\n                        // h -> pp\n                        fnl = letters.splice(indx, len, version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n                    }\n                    // console.log(letters.map(x => x.literal).join(''), 'after splicing');\n                }\n                // console.log(literal, head, tail);\n                if (fnl && len == 1)\n                    this.sandhiFinalTonals.push({ index: indx, letters: [fnl[0]] });\n                else if (fnl && len == 2)\n                    this.sandhiFinalTonals.push({\n                        index: indx,\n                        letters: [fnl[0], fnl[1]],\n                    });\n            }\n        }\n        return letters;\n    }\n    replaceSandhiFinal(letters) {\n        const slicedLetters = letters.slice(0, letters.length - 1);\n        const slicedLiteral = slicedLetters.map(it => it.literal).join('');\n        if (letters.length > 0 &&\n            letters[letters.length - 1].literal === version2_1.TonalLetterTags.gg &&\n            syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.tt) &&\n            !syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.kk)) {\n            // for surface form gg whose underlying form is tt but not kk\n            const ls = this.preprocessSandhiFinal(letters);\n            // append tt to sliced letters\n            ls.push(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.tt));\n            return ls;\n        }\n        else if (letters.length > 0 &&\n            letters[letters.length - 1].literal === version2_1.TonalLetterTags.b &&\n            syllabletable_1.isInSyllableTable(slicedLiteral + version2_1.TonalLetterTags.p)) {\n            // for surface form b whose underlying form is p\n            const ls = this.preprocessSandhiFinal(letters);\n            // append tt to sliced letters\n            ls.push(version2_1.lowerLettersTonal.get(version2_1.TonalLetterTags.p));\n            return ls;\n        }\n        return letters;\n    }\n    replaceSandhiFinalTonal(letters) {\n        let literal = letters.map(x => x.literal).join('');\n        if (literal.length > 1 && matcher_1.regexJlsF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexJlsF, 1);\n            return ls;\n        }\n        else if (literal.length > 1 && matcher_1.regexLsWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexLsWx, 1);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHF.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHF, 2);\n            return ls;\n        }\n        else if (literal.length > 2 && matcher_1.regexMnngHWx.test(literal)) {\n            const ls = this.preprocessSandhiFinalTonal(letters, literal, matcher_1.regexMnngHWx, 2);\n            return ls;\n        }\n        return letters;\n    }\n    preprocess(graphemes) {\n        let ltrs = new Array();\n        ltrs = graphemes.map(it => it.letter);\n        // handle sandhi finals without a tonal\n        ltrs = this.replaceSandhiFinal(ltrs);\n        // handle sandhi finals with a tonal\n        ltrs = this.replaceSandhiFinalTonal(ltrs);\n        return ltrs;\n    }\n    postprocessSandhiPPpttt(pattern, lenPrecedingLetters) {\n        if ((pattern.letters[pattern.letters.length - 1].literal ===\n            version2_1.TonalLetterTags.t ||\n            pattern.letters[pattern.letters.length - 1].literal ===\n                version2_1.TonalLetterTags.tt ||\n            pattern.letters[pattern.letters.length - 1].literal ===\n                version2_1.TonalLetterTags.p) &&\n            this.sandhiFinals.length > 0) {\n            // if there isn't a tonal\n            pattern.letters.pop();\n            pattern.pattern.pop();\n            const fnl = this.sandhiFinals.pop();\n            if (fnl) {\n                pattern.letters.push(fnl);\n                const ltr = version2_1.tonalPositionalLetters.get(fnl.literal);\n                if (ltr)\n                    pattern.pattern.push(ltr(version2_1.TonalSpellingTags.stopFinal));\n            }\n        }\n        else if (this.sandhiFinalTonals.length > 0 &&\n            collections_1.sandhiFinalsPPpttt.includes(pattern.letters[pattern.letters.length - 2].literal)) {\n            // if there is a tonal\n            const fnl = this.sandhiFinalTonals.pop();\n            if (fnl) {\n                if (fnl.letters.length == 1) {\n                    pattern.letters.splice(fnl.index, 1, fnl.letters[0]);\n                    const ltr = version2_1.tonalPositionalLetters.get(fnl.letters[0].literal);\n                    if (ltr)\n                        pattern.pattern.splice(fnl.index, 1, ltr(version2_1.TonalSpellingTags.stopFinal));\n                }\n                else if (fnl.letters.length == 2) {\n                    // replace 1 letter at fnl.index with 2 letters\n                    pattern.letters.splice(fnl.index - lenPrecedingLetters, 1, fnl.letters[0], fnl.letters[1]);\n                    const ltr1 = version2_1.tonalPositionalLetters.get(fnl.letters[0].literal);\n                    const ltr2 = version2_1.tonalPositionalLetters.get(fnl.letters[1].literal);\n                    if (ltr1 && ltr2) {\n                        pattern.pattern.splice(fnl.index - lenPrecedingLetters, 1, ltr1(version2_1.TonalSpellingTags.nasalFinal), ltr2(version2_1.TonalSpellingTags.stopFinal));\n                    }\n                }\n            }\n        }\n        return pattern;\n    }\n    postprocess(matched) {\n        const morphemes = this.createMorphemes();\n        for (let i = 0; i < matched.length; i++) {\n            // accumulate the lenght of letters preceding the current syllable\n            const lenPrecedingLetters = matched\n                .map((val, j) => (j < i ? val.letters.length : 0))\n                .reduce((prev, val) => prev + val);\n            const ptn = this.postprocessSandhiPPpttt(matched[i], lenPrecedingLetters);\n            if (this.isCombiningAy(matched) && matched.length == 2) {\n                // ~fa, ~xa, fay, or ~xay. only 2 syllables\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.PrecedingAyexUncombining()));\n            }\n            else if (this.isCombiningAy(matched) &&\n                (matched.length == 3 || matched.length == 4)) {\n                // ~fa, ~xa, fay, or ~xay. more than 2 syllables\n                if (i == matched.length - 2 || i == matched.length - 1)\n                    // the last 2 syllables\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.PrecedingAyexUncombining()));\n                else if (i == matched.length - 3)\n                    // the first syllable of a 3-syllable word or the 2nd syllable of a 4-syllable word\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n                else if (matched.length == 4 && i == matched.length - 4)\n                    // the first syllable of a 4-syllable word\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n            }\n            else if (this.isTriplet(matched)) {\n                // triplet construction. pass the last syllable as an argument\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.LastSyllableForms(matched[2].pattern)));\n            }\n            else if (this.isDoublet(matched)) {\n                // doublet construction. pass the last syllable as an argument\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.LastSyllableForms(matched[1].pattern)));\n            }\n            else if (this.isTransfixInflection(matched)) {\n                morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TransfixUncombining()));\n            }\n            else {\n                if (i < matched.length - 1) {\n                    // pass the letters of the following syllable to unchange sounds accordingly\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms(matched[i + 1].pattern)));\n                }\n                else {\n                    // no sandhi sounds to unchange, just pass an empty array\n                    morphemes.push(this.createMorpheme(ptn, new metaplasm_1.TonalUncombiningForms([])));\n                }\n            }\n        }\n        return morphemes;\n    }\n    makeMorphemes(graphemes) {\n        const ltrs = this.preprocess(graphemes);\n        const ptns = this.make(ltrs, syllabifyTonal);\n        const ms = this.postprocess(ptns);\n        // TODO: to further check if the syllable is valid, given the following syllable\n        return ms;\n    }\n}\nexports.TonalUncombiningMorphemeMaker = TonalUncombiningMorphemeMaker;\n//# sourceMappingURL=morpheme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/morpheme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/phraseme.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/phraseme.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TonalPhrase = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\n/** A phrase made of words. */\nclass TonalPhrase extends unit_1.Phrase {\n    constructor(words) {\n        super();\n        this.words = new Array();\n        if (words) {\n            this.words = words;\n            this.concat();\n        }\n    }\n    popWord() {\n        // get rid off the last word from array\n        this.words = this.words.slice(0, this.words.length - 1);\n        this.concat();\n    }\n    pushWord(w) {\n        this.words.push(w);\n        this.concat();\n    }\n    concat() {\n        if (this.words.length > 0) {\n            if (this.words.filter(x => x && x.literal.length > 0).length == 0) {\n                this.literal = '';\n            }\n            else\n                this.literal = this.words.map(x => (x ? x.literal : '')).join(' ');\n        }\n    }\n}\nexports.TonalPhrase = TonalPhrase;\n//# sourceMappingURL=phraseme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9waHJhc2VtZS5qcz82NmQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3BocmFzZW1lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRvbmFsUGhyYXNlID0gdm9pZCAwO1xuY29uc3QgdW5pdF8xID0gcmVxdWlyZShcIi4uL3VuaXRcIik7XG4vKiogQSBwaHJhc2UgbWFkZSBvZiB3b3Jkcy4gKi9cbmNsYXNzIFRvbmFsUGhyYXNlIGV4dGVuZHMgdW5pdF8xLlBocmFzZSB7XG4gICAgY29uc3RydWN0b3Iod29yZHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBpZiAod29yZHMpIHtcbiAgICAgICAgICAgIHRoaXMud29yZHMgPSB3b3JkcztcbiAgICAgICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9wV29yZCgpIHtcbiAgICAgICAgLy8gZ2V0IHJpZCBvZmYgdGhlIGxhc3Qgd29yZCBmcm9tIGFycmF5XG4gICAgICAgIHRoaXMud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDAsIHRoaXMud29yZHMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuY29uY2F0KCk7XG4gICAgfVxuICAgIHB1c2hXb3JkKHcpIHtcbiAgICAgICAgdGhpcy53b3Jkcy5wdXNoKHcpO1xuICAgICAgICB0aGlzLmNvbmNhdCgpO1xuICAgIH1cbiAgICBjb25jYXQoKSB7XG4gICAgICAgIGlmICh0aGlzLndvcmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndvcmRzLmZpbHRlcih4ID0+IHggJiYgeC5saXRlcmFsLmxlbmd0aCA+IDApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5saXRlcmFsID0gdGhpcy53b3Jkcy5tYXAoeCA9PiAoeCA/IHgubGl0ZXJhbCA6ICcnKSkuam9pbignICcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbFBocmFzZSA9IFRvbmFsUGhyYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGhyYXNlbWUuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/phraseme.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/prediction.js":
/*!****************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/prediction.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.predict = void 0;\nconst lettergen_1 = __webpack_require__(/*! ./lettergen */ \"./node_modules/taipa/lib/tonal/lettergen.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst syllabletable_1 = __webpack_require__(/*! ./syllabletable */ \"./node_modules/taipa/lib/tonal/syllabletable.js\");\n/** Predicts the following letters. Return them as an array of strings when available. If the lexical roots are not present, an empty array will be returned. */\nfunction predict(letters) {\n    const pLetterSeqs = new Array();\n    for (let j = 0; j < lettergen_1.syllableCompositions.length; j++) {\n        let sg = new unit_1.PositionalLetterGeneration();\n        sg.predictive = true;\n        sg.letters = letters;\n        sg = lettergen_1.syllableCompositions[j](sg);\n        if (sg.letters.length != sg.matchedLetters.length || sg.matching != true) {\n            // the pattern is not matched, the first unmatched set of positional letters\n            // is then returned as a possible prediction\n            sg.predictions.map(x => pLetterSeqs.push(x));\n        }\n    }\n    const dupes = new Array();\n    pLetterSeqs.map(i => i.map(j => dupes.push([j.toString(), j.name])));\n    const dedupes = dupes.reduce(function (accumulator, curr) {\n        if (accumulator.filter(x => x[0] === curr[0]).length == 0) {\n            accumulator.push(curr);\n        }\n        return accumulator;\n    }, []);\n    // for valid predictions\n    const predictions = dedupes.filter(x => syllabletable_1.isInSyllableTable(letters.join('') + x[0]));\n    return predictions;\n}\nexports.predict = predict;\n// TODO: add a predict function to cover those skipped syllables in basicSyllables\n//# sourceMappingURL=prediction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9wcmVkaWN0aW9uLmpzP2RhOGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGdFQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyxpREFBUztBQUNoQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RUFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZDQUE2QztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC9wcmVkaWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZWRpY3QgPSB2b2lkIDA7XG5jb25zdCBsZXR0ZXJnZW5fMSA9IHJlcXVpcmUoXCIuL2xldHRlcmdlblwiKTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3Qgc3lsbGFibGV0YWJsZV8xID0gcmVxdWlyZShcIi4vc3lsbGFibGV0YWJsZVwiKTtcbi8qKiBQcmVkaWN0cyB0aGUgZm9sbG93aW5nIGxldHRlcnMuIFJldHVybiB0aGVtIGFzIGFuIGFycmF5IG9mIHN0cmluZ3Mgd2hlbiBhdmFpbGFibGUuIElmIHRoZSBsZXhpY2FsIHJvb3RzIGFyZSBub3QgcHJlc2VudCwgYW4gZW1wdHkgYXJyYXkgd2lsbCBiZSByZXR1cm5lZC4gKi9cbmZ1bmN0aW9uIHByZWRpY3QobGV0dGVycykge1xuICAgIGNvbnN0IHBMZXR0ZXJTZXFzID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBsZXR0ZXJnZW5fMS5zeWxsYWJsZUNvbXBvc2l0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICBsZXQgc2cgPSBuZXcgdW5pdF8xLlBvc2l0aW9uYWxMZXR0ZXJHZW5lcmF0aW9uKCk7XG4gICAgICAgIHNnLnByZWRpY3RpdmUgPSB0cnVlO1xuICAgICAgICBzZy5sZXR0ZXJzID0gbGV0dGVycztcbiAgICAgICAgc2cgPSBsZXR0ZXJnZW5fMS5zeWxsYWJsZUNvbXBvc2l0aW9uc1tqXShzZyk7XG4gICAgICAgIGlmIChzZy5sZXR0ZXJzLmxlbmd0aCAhPSBzZy5tYXRjaGVkTGV0dGVycy5sZW5ndGggfHwgc2cubWF0Y2hpbmcgIT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gdGhlIHBhdHRlcm4gaXMgbm90IG1hdGNoZWQsIHRoZSBmaXJzdCB1bm1hdGNoZWQgc2V0IG9mIHBvc2l0aW9uYWwgbGV0dGVyc1xuICAgICAgICAgICAgLy8gaXMgdGhlbiByZXR1cm5lZCBhcyBhIHBvc3NpYmxlIHByZWRpY3Rpb25cbiAgICAgICAgICAgIHNnLnByZWRpY3Rpb25zLm1hcCh4ID0+IHBMZXR0ZXJTZXFzLnB1c2goeCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGR1cGVzID0gbmV3IEFycmF5KCk7XG4gICAgcExldHRlclNlcXMubWFwKGkgPT4gaS5tYXAoaiA9PiBkdXBlcy5wdXNoKFtqLnRvU3RyaW5nKCksIGoubmFtZV0pKSk7XG4gICAgY29uc3QgZGVkdXBlcyA9IGR1cGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGN1cnIpIHtcbiAgICAgICAgaWYgKGFjY3VtdWxhdG9yLmZpbHRlcih4ID0+IHhbMF0gPT09IGN1cnJbMF0pLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGN1cnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9LCBbXSk7XG4gICAgLy8gZm9yIHZhbGlkIHByZWRpY3Rpb25zXG4gICAgY29uc3QgcHJlZGljdGlvbnMgPSBkZWR1cGVzLmZpbHRlcih4ID0+IHN5bGxhYmxldGFibGVfMS5pc0luU3lsbGFibGVUYWJsZShsZXR0ZXJzLmpvaW4oJycpICsgeFswXSkpO1xuICAgIHJldHVybiBwcmVkaWN0aW9ucztcbn1cbmV4cG9ydHMucHJlZGljdCA9IHByZWRpY3Q7XG4vLyBUT0RPOiBhZGQgYSBwcmVkaWN0IGZ1bmN0aW9uIHRvIGNvdmVyIHRob3NlIHNraXBwZWQgc3lsbGFibGVzIGluIGJhc2ljU3lsbGFibGVzXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVkaWN0aW9uLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/prediction.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/syllabletable.js":
/*!*******************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/syllabletable.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.basicSyllables = exports.isInSyllableTable = void 0;\nfunction isInSyllableTable(syllable) {\n    if (exports.basicSyllables.includes(syllable))\n        return true;\n    if (extraSyllables.includes(syllable))\n        return true;\n    if (syllabicHeadwords.includes(syllable))\n        return true;\n    return false;\n}\nexports.isInSyllableTable = isInSyllableTable;\n// prettier-ignore\nconst toBeVerified = [\n    'baih', 'buhh', 'burhh',\n    'cett', 'changxx', 'choa', 'chiauhh', 'ciauhh',\n    'dom',\n    'hioh',\n    'jex', 'jek', 'jeng', 'jih', 'jirnx', 'jirtt',\n    'kihh', 'kiauhh',\n    'len', 'lirey', 'lng',\n    'mah',\n    'na', 'ngihh',\n    'oehh',\n    'pitt',\n    'qanh', 'qih', 'qngh', 'qoaiz', 'qoatt',\n    'sauhh', 'sokk',\n    'toehh', 'tom', 'tomz',\n    'vann', 'vihh', 'virt',\n];\n// prettier-ignore\nconst addonSyllables = [\n    'ainn', 'ainny', 'ainnx', 'anny', 'aunn', 'aunny', 'aunnz',\n    'borh', 'borhh', 'borx', 'bory', 'borz',\n    'cainn', 'cainny', 'cainnw', 'cainnx', 'cannh', 'cennh', 'cennx', 'cennz', 'cennhh', 'cor', 'corh', 'corw', 'corx', 'cory', 'corz', 'cinnw', 'cinnh', 'cinnz', 'cir', 'cirinn', 'cirinny', 'cirw', 'ciry', 'cirx', 'coanny', 'coannw', 'coannz', 'cuinn', 'cuinny', 'cuinnw',\n    'chainn', 'chainnw', 'chainnx', 'channw', 'channx', 'chennx', 'chor', 'choreh', 'chorehh', 'chorew', 'chorex', 'chorez', 'chorh', 'chorhh', 'chorw', 'chorz', 'chir', 'chirinny', 'chirinnx', 'chirm', 'chirw', 'chiry', 'chirx', 'chirz', 'chiunnx', 'chm', 'chuinn', 'chuinny', 'chuinnw', 'chuinnx', 'chuinnz',\n    'dainny', 'dainnw', 'dainnx', 'dainnz', 'dainnhh', 'denny', 'dennx', 'dorex', 'dorey', 'dorez', 'dorh', 'dorhh', 'dorw', 'dory', 'dorz', 'diann', 'diannw', 'dinnh', 'dinnw', 'dir', 'dirinnw', 'dirinnz', 'dirw', 'dirx', 'dirz', 'doanny', 'duinny', 'duinnw', 'duinnx', 'duinnz',\n    'enny', 'ennh', 'ennz', 'ennhh', 'or', 'ore', 'orehh', 'orex', 'orey', 'orez', 'orh', 'orw', 'orx', 'orz',\n    'goreh', 'gorehh', 'gorhh', 'gorex', 'gorez', 'gorx', 'giauh', 'girnx', 'girnz', 'girt', 'girx', 'giry', 'girz',\n    'hainny', 'hainnh', 'hainnz', 'hann', 'hannhh', 'henny', 'hennz', 'hennhh', 'hor', 'horez', 'horw', 'horx', 'hory', 'horz', 'haunn', 'haunny', 'haunnw', 'haunnh', 'haunnx', 'haunnhh', 'hinnh', 'hinnx', 'hir', 'hirinnx', 'hirinnz', 'hirny', 'hirnz', 'hirw', 'hirx', 'hiry', 'hirtt', 'hirk', 'hiunny', 'hiunnw', 'hiunnz', 'hmhh', 'hmz', 'hngw', 'hoainnh', 'hoannw', 'honnz', 'hop', 'huinn', 'huinnh', 'huinnx', 'huinnz',\n    'ionn', 'innh', 'innhh', 'ir', 'irinnx', 'irn', 'irny', 'irpp', 'irw', 'irx', 'iry', 'irz',\n    'jiaunny', 'jiaunnw', 'jiaunnx', 'jinny', 'jiry', 'jirx', 'jorx',\n    'kannx', 'kainnh', 'kainnw', 'kaunnhh', 'kennh', 'kennx', 'kor', 'kore', 'koreh', 'korew', 'korw', 'korh', 'korx', 'kiann', 'kiannw', 'kinn', 'kir', 'kirnx', 'kirny', 'kirw', 'kngz', 'koainn', 'koainnw', 'konny', 'kuinnw',\n    'lorehh', 'lorex', 'lorh', 'lorx', 'liry', 'lirx', 'lirz',\n    'maix', 'mih', 'mihh', 'mng', 'moaix', 'moaiz', 'moex', 'moez', 'mui', 'muiz',\n    'naih', 'naix', 'ney', 'new', 'nez', 'nehh', 'niauw', 'niauh', 'niaw', 'nirix', 'niriz', 'niu', 'nngh', 'nox', 'nui', 'nuiy', 'nuiw', 'nuix', 'nuiz',\n    'ngai', 'ngaiy', 'ngauy', 'ngauh', 'ngauhh', 'ngaw', 'ngaz', 'nge', 'ngh', 'nghh', 'ngiahh', 'ngiriy', 'ngiuy', 'ngiux', 'ngiz', 'ngoeh', 'ngoehh',\n    'oainn', 'oainnh', 'oainnz', 'oainnhh', 'oannx',\n    'painn', 'pennw', 'por', 'porhh', 'porw', 'porx', 'porz', 'pinny', 'pinnhh', 'png', 'pngy', 'pngw', 'pngz', 'pnghh', 'poannx', 'ponn', 'puinn', 'puinnw', 'puinnx',\n    'qainny', 'qainnw', 'qainnz', 'qannhh', 'qore', 'qoreh', 'qorew', 'qorex', 'qorey', 'qorez', 'qorh', 'qorw', 'qory', 'qiaunnhh', 'qinny', 'qinnh', 'qinnhh', 'qir', 'qirinn', 'qirinny', 'qirn', 'qirnw', 'qirnz', 'qirw', 'qirx', 'qiry', 'qirz', 'qiunnx', 'qiunnz', 'qnghh', 'qoainnw', 'qoainnx', 'qoainnhh', 'qoannw', 'qoenny', 'qonnz', 'quinn', 'quinny', 'quinnw',\n    'sainn', 'sanny', 'sannw', 'sannx', 'sore', 'sorew', 'sorew', 'sorh', 'sorhh', 'sorx', 'sorw', 'sorz', 'sinnx', 'sinnhh', 'sir', 'sirinn', 'sirm', 'sirp', 'sirw', 'sirx', 'siry', 'sirz', 'sm', 'smw', 'smh', 'snghh', 'soainn', 'soainnh', 'soainnx', 'soainnhh', 'soenn', 'soenny', 'soennw', 'suinn', 'suinny', 'suinnw',\n    'tainnw', 'tainnz', 'tannx', 'tannz', 'tenn', 'tor', 'tore', 'torehh', 'torew', 'torhh', 'torw', 'tinnw', 'tinnx', 'tirx', 'tiry', 'tiunny', 'toannx', 'tuinnw', 'tuinnx', 'tuinnz',\n    'uihh', 'uinn', 'uinny', 'uinnx', 'uinnz',\n    'vainny', 'vainnx', 'vainnz', 'vor', 'vory', 'vorw', 'vorx', 'vorz', 'vinnx', 'vngx', 'vuinn', 'vuinny', 'vuinnx', 'vuinnz',\n];\n// prettier-ignore\nconst syllabicHeadwords = [\n    // TODO: some syllabic forms may not be found in Taiwanese but present in dictionary as headwords. need to further check\n    'bam', 'bek', 'biet', 'bit', 'biu', 'boa', 'boat', 'bor',\n    'coa', 'coai', 'coang', 'coat', 'com', 'cor', 'core',\n    'chap', 'chiak', 'chio', 'chir', 'chiri', 'choai', 'choang', 'choe', 'chom', 'chor', 'chore',\n    'diang', 'dim', 'dio', 'dir', 'diri', 'diur', 'doa', 'doe', 'dom', 'dor', 'dore', 'dut',\n    'er', 'erng',\n    'ga', 'gai', 'gak', 'gang', 'gap', 'ge', 'gir', 'go', 'goe', 'gok', 'goat', 'gong', 'gor', 'gore', 'gur',\n    'hiap', 'hio', 'hir', 'hiri', 'hirn', 'hiur', 'hoai', 'hoang', 'hop', 'hor', 'hore',\n    'iak', 'ionn', 'ir', 'iri', 'irn',\n    'je', 'jek', 'jeng', 'jiak', 'jiap', 'jien', 'jiet', 'jin', 'jir', 'jit', 'jiu', 'jiur', 'jo', 'joa', 'joe', 'jor', 'jun', 'jur',\n    'kir', 'kor',\n    'lai', 'lat', 'lia', 'liak', 'liet', 'lir', 'lo', 'loa', 'loat', 'loe', 'lop', 'lom', 'lor', 'lore',\n    'm', 'mia', 'min', 'moai', 'moe', 'mu',\n    'nio', 'no', 'nui',\n    'nga',\n    'or', 'ore',\n    'qen', 'qet', 'qiak', 'qiang', 'qio', 'qip', 'qir', 'qiri', 'qirn', 'qit', 'qiur', 'qor',\n    'oa', 'oak',\n    'por',\n    'sir', 'siri', 'sop', 'sor', 'sore',\n    'ta', 'tia', 'tor',\n    'via', 'viang', 'viri', 'voa', 'vor',\n];\n// prettier-ignore\nconst extraSyllables = [\n    'aih',\n    'burh',\n    'coaih', 'choatt',\n    'dngh',\n    'en',\n    'gehh', 'gih', 'giuh', 'gimw', 'gunx',\n    'homz',\n    'jip',\n    'kiaih', 'kuih',\n    'laih', 'langh', 'lip', 'lih', 'lit', 'litt', 'loaih', 'loaiz', 'loeh',\n    'mnghh',\n    'n',\n    'ngh',\n    'oh', 'op',\n    'sangh', 'sennh', 'sienh', 'sinnh',\n];\n// prettier-ignore\nexports.basicSyllables = [\n    'a', 'ay', 'az', 'ah', 'ahh', 'ai', 'aiy', 'aiw', 'ainnz', 'ak', 'am',\n    'amy', 'amw', 'amx', 'amz', 'an', 'any', 'anw', 'anx', 'anz', 'ang',\n    'angw', 'angx', 'angz', 'annw', 'annx', 'annz', 'ap', 'app', 'at', 'au',\n    'auy', 'auw', 'aux', 'auz',\n    'ba', 'bax', 'baz', 'bah', 'bai', 'baiy', 'baix', 'bak', 'bakk', 'ban',\n    'bany', 'banx', 'banz', 'bangy', 'bangw', 'bangx', 'bangz', 'bat', 'batt',\n    'bauy', 'bauz', 'bey', 'bex', 'bez', 'beh', 'behh', 'biy', 'bix', 'biz',\n    'bieny', 'bienx', 'bienz', 'biett', 'biauy', 'biaux', 'biauz', 'bih',\n    'bihh', 'bekk', 'biny', 'binx', 'binz', 'bengy', 'bengx', 'bengz', 'biury',\n    'biurx', 'biurz', 'bitt', 'biuz', 'bury', 'burx', 'burz', 'bok', 'bokk',\n    'bong', 'bongy', 'bongw', 'bongx', 'bongz', 'boy', 'box', 'boz', 'buy',\n    'bux', 'buz', 'boax', 'boah', 'boahh', 'boany', 'boatt', 'boey', 'boex',\n    'boez', 'boehh', 'bui', 'buny', 'bunw', 'bunx', 'bunz', 'but', 'butt',\n    'ca', 'cay', 'cax', 'caz', 'cah', 'cai', 'caiy', 'caiw', 'caix', 'caiz',\n    'cak', 'cakk', 'cam', 'camy', 'camw', 'camx', 'can', 'canw', 'canx',\n    'cang', 'cangy', 'cangw', 'canny', 'cannz', 'cap', 'capp', 'cat', 'catt',\n    'cau', 'cauy', 'cauw', 'cauhh', 'ce', 'cey', 'cew', 'cex', 'cez', 'ceh',\n    'cenn', 'cenny', 'cennw', 'ci', 'ciy', 'ciw', 'cix', 'ciz', 'cia', 'ciax',\n    'ciah', 'ciakk', 'ciam', 'ciamy', 'cien', 'cieny', 'cienx', 'ciangy',\n    'ciangw', 'ciangx', 'ciangz', 'ciann', 'cianny', 'ciannw', 'ciannx', 'ciap',\n    'ciet', 'ciau', 'ciauw', 'ciaux', 'cih', 'cihh', 'cek', 'cekk', 'cim',\n    'cimy', 'cin', 'cinw', 'ceng', 'cengy', 'cengw', 'cengx', 'cengz', 'cinn',\n    'cinny', 'cinnx', 'ciur', 'ciurw', 'ciurz', 'ciurh', 'ciurhh', 'ciok',\n    'ciokk', 'ciong', 'ciongw', 'cip', 'cit', 'ciu', 'ciuy', 'ciux', 'ciuz',\n    'ciunn', 'ciunny', 'ciunnw', 'ciunnx', 'ciunnz', 'cng', 'cngy', 'cngw',\n    'cngx', 'cngh', 'cnghh', 'cur', 'cury', 'curw', 'curh', 'cok', 'cokk',\n    'cong', 'congy', 'congw', 'congx', 'co', 'coy', 'cow', 'cu', 'cuy', 'cuw',\n    'cuz', 'coaw', 'coaz', 'coah', 'coahh', 'coan', 'coan', 'coanw', 'coanx',\n    'coangw', 'coann', 'coannw', 'coe', 'coey', 'coex', 'coez', 'cuh', 'cuhh',\n    'cui', 'cuiy', 'cuiw', 'cun', 'cuny', 'cunw', 'cunx', 'cunz', 'cut',\n    'cha', 'chay', 'chaw', 'chah', 'chahh', 'chai', 'chaiy', 'chaiw', 'chaix',\n    'chaiz', 'chainny', 'chak', 'chakk', 'cham', 'chamy', 'chamw', 'chamz',\n    'chan', 'chany', 'chanw', 'chanx', 'chanz', 'chang', 'changy', 'changw',\n    'changx', 'channy', 'channz', 'chapp', 'chat', 'chatt', 'chau', 'chauy',\n    'chauw', 'chaux', 'chauz', 'che', 'chey', 'chew', 'chex', 'chez', 'cheh',\n    'chehh', 'chenn', 'chenny', 'chennw', 'chennz', 'chi', 'chiy', 'chiw',\n    'chix', 'chiz', 'chia', 'chiay', 'chiaw', 'chiaz', 'chiah', 'chiahh',\n    'chiam', 'chiamw', 'chiamx', 'chiamz', 'chien', 'chieny', 'chienw',\n    'chienx', 'chienz', 'chiang', 'chiangy', 'chiangw', 'chiann', 'chianny',\n    'chiannw', 'chiannx', 'chiannz', 'chiap', 'chiapp', 'chiet', 'chiett',\n    'chiau', 'chiauy', 'chiauw', 'chiaux', 'chih', 'chihh', 'chek', 'chekk',\n    'chim', 'chimy', 'chimw', 'chimx', 'chin', 'chiny', 'chinw', 'chinx',\n    'chinz', 'cheng', 'chengy', 'chengw', 'chengx', 'chengz', 'chinn',\n    'chinny', 'chinnw', 'chinnx', 'chinnz', 'chiur', 'chiury', 'chiurw',\n    'chiurh', 'chiurhh', 'chiok', 'chiong', 'chiongy', 'chiongw', 'chiongx',\n    'chiongz', 'chip', 'chipp', 'chit', 'chitt', 'chiu', 'chiuy', 'chiuw',\n    'chiuz', 'chiunn', 'chiunny', 'chiunnw', 'chiunnz', 'chng', 'chngy',\n    'chngw', 'chngx', 'chngz', 'chur', 'chury', 'churw', 'churx', 'churz',\n    'churh', 'chok', 'chokk', 'chong', 'chongy', 'chongw', 'chongx', 'chongz',\n    'cho', 'choy', 'choz', 'chu', 'chuy', 'chuw', 'chux', 'chuxz', 'choay',\n    'choax', 'choaz', 'choah', 'choahh', 'choainnz', 'choan', 'choany',\n    'choanw', 'choanx', 'choanz', 'choann', 'choanny', 'choannw', 'choannx',\n    'choannz', 'choat', 'choew', 'choez', 'chuh', 'chui', 'chuiy', 'chuiw',\n    'chuix', 'chuiz', 'chun', 'chuny', 'chunw', 'chunx', 'chunz', 'chut',\n    'chutt',\n    'da', 'day', 'daw', 'dah', 'dahh', 'dai', 'daiy', 'daiw', 'daix', 'daiz',\n    'dainn', 'dainny', 'dak', 'dakk', 'dam', 'damy', 'damw', 'damx', 'damz',\n    'dan', 'dany', 'danw', 'danx', 'danz', 'dang', 'dangy', 'dangw', 'dangx',\n    'dangz', 'dann', 'danny', 'dannw', 'dannx', 'dannz', 'dap', 'dapp', 'dat',\n    'datt', 'dau', 'dauy', 'dauw', 'daux', 'dauz', 'dauh', 'dauhh', 'de', 'dey',\n    'dew', 'dex', 'dez', 'deh', 'denn', 'dennw', 'dennz', 'di', 'diy', 'diw',\n    'dix', 'diz', 'dia', 'diah', 'diahh', 'diak', 'diakk', 'diam', 'diamy',\n    'diamw', 'diamx', 'diamz', 'dien', 'dieny', 'dienx', 'dienz', 'dianny',\n    'diannx', 'diannz', 'diap', 'diapp', 'diet', 'diett', 'diau', 'diauw',\n    'diaux', 'diauz', 'dih', 'dihh', 'dek', 'dekk', 'dimw', 'dimx', 'dimz',\n    'din', 'diny', 'dinw', 'dinx', 'dinz', 'deng', 'dengy', 'dengw', 'dengx',\n    'dengz', 'dinn', 'dinnx', 'dinnz', 'dinnhh', 'diurw', 'diurx', 'diurz',\n    'diurh', 'diurhh', 'diok', 'diokk', 'diong', 'diongy', 'diongw', 'diongx',\n    'diongz', 'dit', 'ditt', 'diu', 'diuy', 'diuw', 'diux', 'diuz', 'diuh',\n    'diunn', 'diunny', 'diunnw', 'diunnx', 'diunnz', 'dng', 'dngy', 'dngw',\n    'dngx', 'dngz', 'dur', 'dury', 'durw', 'durx', 'durz', 'durh', 'durhh',\n    'dok', 'dokk', 'domx', 'dong', 'dongy', 'dongw', 'dongx', 'dongz', 'do',\n    'doy', 'dow', 'dox', 'doz', 'du', 'duy', 'duw', 'dux', 'duz', 'doaw',\n    'doaz', 'doan', 'doany', 'doanw', 'doanz', 'doann', 'doannw', 'doannx',\n    'doannz', 'doat', 'doatt', 'doew', 'doex', 'doez', 'duh', 'duhh', 'dui',\n    'duiw', 'duix', 'duiz', 'dun', 'duny', 'dunw', 'dunz', 'dutt',\n    'e', 'ey', 'ew', 'ex', 'ez', 'eh', 'ehh', 'enn', 'ennx',\n    'ek', 'ekk', 'eng', 'engy', 'engw', 'engx', 'engz',\n    'gax', 'gaz', 'gaix', 'gaiz', 'gakk', 'gamy', 'gamx', 'gamz', 'gany',\n    'ganw', 'ganx', 'ganz', 'gangz', 'gaux', 'gew', 'gex', 'gez', 'giy', 'gix',\n    'giz', 'giax', 'giah', 'giahh', 'giamy', 'giamx', 'giamz', 'gieny', 'gienw',\n    'gienx', 'gienz', 'giang', 'giangw', 'giangz', 'giap', 'giapp', 'giet',\n    'giett', 'giaux', 'gekk', 'gimy', 'gimx', 'gimz', 'giny', 'ginx', 'ginz',\n    'gengy', 'gengx', 'giury', 'giurx', 'giurhh', 'giok', 'giokk', 'giongy',\n    'giuy', 'giux', 'gurx', 'gurz', 'gokk', 'gongx', 'gongz', 'gox', 'goz',\n    'guy', 'gux', 'guz', 'goay', 'goaz', 'goany', 'goanx', 'goanz', 'goatt',\n    'goez', 'goehh', 'guix', 'guiz',\n    'ha', 'haw', 'hax', 'haz', 'hah', 'hahh', 'hai', 'haiy', 'haix', 'haiz',\n    'hainn', 'hainnw', 'hainnx', 'hak', 'hakk', 'ham', 'hamy', 'hamw', 'hamx',\n    'hamz', 'han', 'hany', 'hanw', 'hanx', 'hanz', 'hang', 'hangw', 'hangx',\n    'hangz', 'hanny', 'hannx', 'hannz', 'hannh', 'hap', 'happ', 'hat', 'hatt',\n    'hau', 'hauy', 'hauw', 'haux', 'hauz', 'he', 'hey', 'hew', 'hex', 'hez',\n    'heh', 'hennw', 'hennx', 'hennh', 'hi', 'hiy', 'hiw', 'hix', 'hia', 'hiaz',\n    'hiah', 'hiahh', 'hiam', 'hiamy', 'hiamw', 'hiamx', 'hien', 'hieny',\n    'hienw', 'hienx', 'hienz', 'hiang', 'hiangy', 'hiangw', 'hiann', 'hianny',\n    'hiannw', 'hiannx', 'hiannz', 'hiannh', 'hiapp', 'hiet', 'hiett', 'hiau',\n    'hiauy', 'hiaux', 'hiauh', 'hek', 'hekk', 'him', 'himx', 'hin', 'hinx',\n    'hinz', 'heng', 'hengw', 'hengx', 'hengz', 'hinn', 'hinnw', 'hinnz',\n    'hiurx', 'hiurz', 'hiurh', 'hiurhh', 'hiok', 'hiong', 'hiongy', 'hiongw',\n    'hiongx', 'hip', 'hit', 'hitt', 'hiu', 'hiuy', 'hiuw', 'hiux', 'hiunn',\n    'hiunnhh', 'hmy', 'hmx', 'hmh', 'hmhh', 'hng', 'hngy', 'hngx', 'hngz',\n    'hngh', 'hnghh', 'hury', 'hurx', 'hurz', 'hurhh', 'hok', 'hokk', 'hong',\n    'hongy', 'hongw', 'hongx', 'hongz', 'honn', 'honny', 'honnw', 'honnh', 'ho',\n    'hoy', 'how', 'hox', 'hoz', 'hu', 'huy', 'huw', 'hux', 'huz', 'hoa', 'hoaw',\n    'hoax', 'hoaz', 'hoah', 'hoahh', 'hoaix', 'hoaiz', 'hoainnx', 'hoan',\n    'hoany', 'hoanw', 'hoanx', 'hoanz', 'hoann', 'hoanny', 'hoannx', 'hoannz',\n    'hoat', 'hoatt', 'hoe', 'hoey', 'hoew', 'hoex', 'hoez', 'hoeh', 'hui',\n    'huiy', 'huiw', 'huix', 'huiz', 'hun', 'huny', 'hunw', 'hunx', 'hunz',\n    'hut', 'hutt',\n    'i', 'iy', 'iw', 'ix', 'iz', 'ia', 'iay', 'iaw', 'iax', 'iaz', 'iah',\n    'iahh', 'iam', 'iamy', 'iamx', 'iamz', 'ien', 'ieny', 'ienw', 'ienx',\n    'iang', 'iangz', 'iann', 'ianny', 'iannw', 'iannx', 'iannz', 'iap', 'iapp',\n    'iet', 'iett', 'iau', 'iauy', 'iauw', 'iaux', 'iauz', 'iaunn', 'im', 'imy',\n    'imw', 'imx', 'in', 'iny', 'inw', 'inx', 'inz', 'inn', 'inny', 'innw',\n    'innx', 'innz', 'iur', 'iury', 'iurx', 'iurh', 'iurhh', 'iok', 'iokk',\n    'iong', 'iongy', 'iongw', 'iongx', 'iongz', 'ip', 'it', 'itt', 'iu', 'iuy',\n    'iuw', 'iux', 'iuz', 'iunn', 'iunny', 'iunnx', 'iunnz',\n    'jiy', 'jix', 'jiz', 'jia', 'jiay', 'jiamy', 'jienx', 'jiangy', 'jiapp',\n    'jiett', 'jiauy', 'jiauw', 'jiaux', 'jimy', 'jimx', 'jimz', 'jinx', 'jinz',\n    'jiurz', 'jiok', 'jiokk', 'jiongy', 'jiongx', 'jiongz', 'jipp', 'jitt',\n    'jiux', 'juy', 'jux', 'juz', 'joahh', 'joex', 'joez', 'junz',\n    'ka', 'kay', 'kaw', 'kah', 'kahh', 'kai', 'kaiy', 'kaiw', 'kainn', 'kainny',\n    'kak', 'kakk', 'kam', 'kamy', 'kamw', 'kan', 'kanw', 'kang', 'kangy',\n    'kangw', 'kann', 'kap', 'kapp', 'kat', 'kau', 'kauy', 'kauw', 'ke', 'key',\n    'kew', 'kex', 'keh', 'kehh', 'kenn', 'kennhh', 'ki', 'kiy', 'kiw', 'kix',\n    'kiz', 'kia', 'kiax', 'kiaz', 'kiah', 'kiakk', 'kiam', 'kiamw', 'kiamx',\n    'kiamz', 'kien', 'kieny', 'kienw', 'kienx', 'kiang', 'kiangw', 'kiap',\n    'kiet', 'kiett', 'kiau', 'kiauy', 'kiauw', 'kiauh', 'kih', 'kek', 'kim',\n    'kimy', 'kimx', 'kin', 'kiny', 'kinx', 'keng', 'kengy', 'kengw', 'kengx',\n    'kengz', 'kinnx', 'kiury', 'kiurw', 'kiurh', 'kiok', 'kiong', 'kiongy',\n    'kiongx', 'kip', 'kipp', 'kit', 'kitt', 'kiu', 'kiuy', 'kiux', 'kiuz',\n    'kiunn', 'kiunnz', 'kng', 'kngw', 'kur', 'kury', 'kurw', 'kurx', 'kok',\n    'kokk', 'kong', 'kongy', 'kongw', 'kongz', 'ko', 'koy', 'kow', 'ku', 'kux',\n    'kuz', 'koa', 'koay', 'koaw', 'koah', 'koaiw', 'koan', 'koany', 'koanw',\n    'koanx', 'koann', 'koanny', 'koannw', 'koat', 'koe', 'koew', 'koex', 'koeh',\n    'kuh', 'kui', 'kuiy', 'kuiw', 'kun', 'kuny', 'kunw', 'kunx', 'kut', 'kutt',\n    'la', 'lax', 'laz', 'lah', 'lahh', 'laix', 'laiz', 'lak', 'lakk', 'lam',\n    'lamy', 'lamw', 'lamx', 'lamz', 'lan', 'lany', 'lanx', 'lanz', 'lang',\n    'langy', 'langw', 'langx', 'langz', 'lap', 'lapp', 'latt', 'lauy', 'lauw',\n    'laux', 'lauz', 'lauhh', 'le', 'ley', 'lew', 'lex', 'lez', 'leh', 'lehh',\n    'li', 'liy', 'liw', 'lix', 'liz', 'liah', 'liahh', 'liam', 'liamy', 'liamw',\n    'liamx', 'liamz', 'lien', 'lieny', 'lienx', 'lienz', 'liang', 'liangy',\n    'liangx', 'liangz', 'liap', 'liapp', 'liett', 'liauy', 'liauw', 'liaux',\n    'liauz', 'lihh', 'lek', 'lekk', 'lim', 'limy', 'limx', 'limz', 'lin',\n    'liny', 'linw', 'linx', 'limz', 'leng', 'lengy', 'lengw', 'lengx', 'lengz',\n    'liury', 'liurx', 'liurz', 'liurhh', 'liok', 'liokk', 'liongy', 'liongw',\n    'liongx', 'liongz', 'lipp', 'liu', 'liuy', 'liuw', 'liux', 'liuz', 'lur',\n    'lury', 'lurw', 'lurx', 'lurz', 'lurh', 'lurhh', 'lok', 'lokk', 'long',\n    'longy', 'longw', 'longx', 'longz', 'loy', 'lox', 'loz', 'lu', 'luy',\n    'luw', 'lux', 'luz', 'loax', 'loaz', 'loah', 'loahh', 'loany', 'loanx',\n    'loanz', 'loatt', 'loex', 'loez', 'lui', 'luiy', 'luiw', 'luix', 'luiz',\n    'lun', 'luny', 'lunx', 'lunz', 'lut', 'lutt',\n    'my', 'mx', 'mz', 'ma', 'may', 'maw', 'max', 'maz', 'mai', 'maiy', 'maiw',\n    'maiz', 'mau', 'maux', 'mauz', 'mauh', 'me', 'mey', 'mex', 'mez', 'meh',\n    'mehh', 'mi', 'miy', 'mix', 'miz', 'miax', 'miaz', 'miauz', 'mih', 'mihh',\n    'mngy', 'mngx', 'mngz', 'mo', 'moy', 'mox', 'moz', 'moh', 'mohh', 'moa',\n    'moay', 'moax', 'moaz', 'muiy', 'muix',\n    'nay', 'naw', 'nax', 'naz', 'nah', 'nai', 'naiy', 'naiz', 'nauy', 'nauz',\n    'nauh', 'ne', 'nex', 'neh', 'ni', 'niy', 'nix', 'niz', 'niay', 'niax',\n    'niaz', 'niau', 'niauy', 'nih', 'niuy', 'niux', 'niuz', 'nng', 'nngy',\n    'nngw', 'nngx', 'nngz', 'noy', 'noz', 'noay', 'noaw', 'noax', 'noaz',\n    'ng', 'ngy', 'ngw', 'ngx', 'ngz', 'ngay', 'ngaiz', 'ngaux', 'ngauz', 'ngey',\n    'ngez', 'ngeh', 'ngehh', 'ngiax', 'ngiau', 'ngiauy', 'ngiauh', 'ngiauhh',\n    'ngoy', 'ngox', 'ngoz',\n    'o', 'oy', 'ox', 'oz', 'ok', 'om', 'omz', 'ong', 'ongy', 'ongx', 'ongz',\n    'onn', 'onnw',\n    'oa', 'oay', 'oax', 'oahh', 'oai', 'oainny', 'oan', 'oany', 'oanw', 'oanx',\n    'oanz', 'oang', 'oann', 'oanny', 'oannw', 'oannz', 'oat', 'oatt', 'oe',\n    'oey', 'oew', 'oex', 'oez', 'oeh',\n    'pa', 'paw', 'paz', 'pah', 'paiw', 'painny', 'painnz', 'pak', 'pakk', 'pan',\n    'pan', 'pang', 'pangy', 'pangw', 'pangx', 'pangz', 'pannw', 'pannz', 'pau',\n    'pauy', 'pauw', 'pauz', 'pauhh', 'pe', 'pey', 'pew', 'pez', 'penn', 'pennx',\n    'pennz', 'pi', 'piy', 'piw', 'pix', 'piz', 'piah', 'piahh', 'piak', 'piakk',\n    'pien', 'pienw', 'pienx', 'piang', 'piangz', 'piann', 'pianny', 'piannx',\n    'piet', 'piau', 'piauw', 'piaux', 'pih', 'pihh', 'pek', 'piny', 'pinx',\n    'pinz', 'peng', 'pengw', 'pengx', 'pengz', 'pinn', 'pinnw', 'pinnx',\n    'pinnz', 'piurw', 'piurx', 'pit', 'pngh', 'pur', 'pury', 'purw', 'purz',\n    'purh', 'pok', 'pokk', 'pong', 'pongy', 'pongw', 'pongx', 'pongz', 'po',\n    'poy', 'pow', 'pox', 'poz', 'puy', 'pux', 'puz', 'poaw', 'poah', 'poahh',\n    'poan', 'poanx', 'poanz', 'poann', 'poannw', 'poannz', 'poat', 'poe',\n    'poey', 'poew', 'poex', 'poez', 'poehh', 'puhh', 'puiy', 'puiw', 'pun',\n    'puny', 'punw', 'punx', 'put', 'putt',\n    'qa', 'qay', 'qaw', 'qaz', 'qah', 'qai', 'qaiy', 'qaiw', 'qainn', 'qainnx',\n    'qak', 'qakk', 'qam', 'qamy', 'qamw', 'qamx', 'qan', 'qany', 'qanw', 'qang',\n    'qangy', 'qangw', 'qangx', 'qangz', 'qann', 'qanny', 'qannw', 'qannx',\n    'qap', 'qat', 'qau', 'qauy', 'qauw', 'qaux', 'qauz', 'qauh', 'qe', 'qey',\n    'qew', 'qez', 'qeh', 'qehh', 'qenn', 'qenny', 'qennw', 'qi', 'qiy', 'qiw',\n    'qix', 'qiz', 'qia', 'qiaw', 'qiaz', 'qiahh', 'qiam', 'qiamy', 'qiamw',\n    'qiamx', 'qien', 'qieny', 'qienw', 'qienz', 'qiann', 'qianny', 'qiannw',\n    'qiannx', 'qiannz', 'qiap', 'qiet', 'qiett', 'qiau', 'qiauy', 'qiaux',\n    'qiauz', 'qek', 'qekk', 'qim', 'qimy', 'qimw', 'qimz', 'qin', 'qiny',\n    'qinw', 'qinz', 'qeng', 'qengy', 'qengw', 'qengx', 'qengz', 'qinn', 'qinnw',\n    'qinnx', 'qiurw', 'qiurx', 'qiurz', 'qiurh', 'qiok', 'qiokk', 'qiong',\n    'qiongy', 'qiongx', 'qiongz', 'qip', 'qipp', 'qitt', 'qiu', 'qiuy', 'qiuw',\n    'qiux', 'qiuz', 'qiunn', 'qng', 'qngy', 'qngw', 'qur', 'qury', 'qurw',\n    'qurx', 'qurz', 'qurh', 'qok', 'qokk', 'qong', 'qongy', 'qongw', 'qongx',\n    'qonnx', 'qo', 'qoy', 'qow', 'qox', 'qoz', 'qu', 'quy', 'quw', 'quz', 'qoa',\n    'qoay', 'qoaw', 'qoaz', 'qoah', 'qoai', 'qoaiy', 'qoaiw', 'qoainn',\n    'qoainny', 'qoainnz', 'qoan', 'qoany', 'qoanw', 'qoanx', 'qoanz', 'qoann',\n    'qoanny', 'qoannx', 'qoannz', 'qoat', 'qoe', 'qoey', 'qoew', 'qoeh', 'qui',\n    'quiy', 'quiw', 'quix', 'quiz', 'qun', 'quny', 'qunw', 'qunx', 'qunz',\n    'qut', 'qutt',\n    'sa', 'say', 'saw', 'sah', 'sahh', 'sai', 'saiy', 'saiw', 'saix', 'saiz',\n    'sak', 'sam', 'samy', 'samw', 'samx', 'san', 'sany', 'sanw', 'sang',\n    'sangy', 'sangw', 'sann', 'sannh', 'sap', 'sat', 'sau', 'sauw', 'se', 'sey',\n    'sew', 'sex', 'seh', 'sehh', 'senn', 'senny', 'sennw', 'si', 'siy', 'siw',\n    'six', 'siz', 'sia', 'siay', 'siaw', 'siax', 'siaz', 'siah', 'siahh',\n    'siak', 'siam', 'siamy', 'siamw', 'siamx', 'sien', 'sieny', 'sienw',\n    'sienx', 'sienz', 'siang', 'siangy', 'siangw', 'siangx', 'siangz', 'siann',\n    'sianny', 'siannw', 'siannx', 'siannz', 'siap', 'siapp', 'siet', 'siett',\n    'siau', 'siauy', 'siauw', 'siaux', 'siauz', 'sih', 'sihh', 'sek', 'sekk',\n    'sim', 'simy', 'simw', 'simx', 'simz', 'sin', 'sinw', 'sinx', 'sinz',\n    'seng', 'sengy', 'sengw', 'sengx', 'sengz', 'sinn', 'sinnw', 'sinnz',\n    'siur', 'siury', 'siurx', 'siurh', 'siurhh', 'siok', 'siokk', 'siong',\n    'siongy', 'siongw', 'siongx', 'siongz', 'sip', 'sipp', 'sit', 'sitt', 'siu',\n    'siuy', 'siuw', 'siux', 'siuz', 'siunn', 'siunny', 'siunnw', 'siunnx',\n    'siunnz', 'sng', 'sngy', 'sngw', 'sngx', 'sngh', 'sur', 'sury', 'surw',\n    'surx', 'surz', 'surh', 'sok', 'som', 'song', 'songy', 'songw', 'songx',\n    'so', 'soy', 'sow', 'su', 'suy', 'suw', 'sux', 'suz', 'soa', 'soay', 'soaw',\n    'soah', 'soai', 'soainnz', 'soan', 'soany', 'soanw', 'soanx', 'soanz',\n    'soann', 'soanny', 'soannw', 'soat', 'soe', 'soey', 'soew', 'soex', 'soeh',\n    'suh', 'sui', 'suiy', 'suiw', 'suix', 'suiz', 'sun', 'suny', 'sunw', 'sunx',\n    'sunz', 'sut', 'sutt',\n    'taw', 'tah', 'tahh', 'tai', 'taiy', 'taiw', 'taix', 'taiz', 'tak', 'takk',\n    'tam', 'tamw', 'tamx', 'tamz', 'tan', 'tany', 'tanw', 'tanx', 'tang',\n    'tangy', 'tangw', 'tangx', 'tann', 'tanny', 'tap', 'tat', 'tau', 'tauy',\n    'tauw', 'taux', 'tauz', 'te', 'tey', 'tew', 'tex', 'tez', 'teh', 'tehh',\n    'tennw', 'tennx', 'ti', 'tiy', 'tiw', 'tix', 'tiz', 'tiah', 'tiam', 'tiamy',\n    'tiamz', 'tien', 'tieny', 'tiann', 'tiannw', 'tiannx', 'tiannz', 'tiap',\n    'tiapp', 'tiet', 'tiau', 'tiauy', 'tiauw', 'tiaux', 'tiauz', 'tih', 'tihh',\n    'tek', 'tekk', 'tim', 'tin', 'tinx', 'tinz', 'teng', 'tengy', 'tengw',\n    'tengx', 'tinn', 'tinnz', 'tiur', 'tiurw', 'tiurx', 'tiok', 'tiong',\n    'tiongy', 'tiongw', 'tiongx', 'tiu', 'tiuy', 'tng', 'tngw', 'tngx', 'tngz',\n    'tur', 'tury', 'turw', 'turx', 'turh', 'turhh', 'tok', 'tokk', 'tong',\n    'tongy', 'tongw', 'tongz', 'toy', 'tow', 'tox', 'tuy', 'toa', 'toaz',\n    'toah', 'toanx', 'toann', 'toanny', 'toannw', 'toat', 'tuh', 'tui', 'tuiy',\n    'tuiw', 'tuix', 'tun', 'tuny', 'tunx', 'tunz', 'tut', 'tutt',\n    'u', 'uy', 'uw', 'ux', 'uz', 'uh', 'ui', 'uiy', 'uiw', 'uix', 'uiz', 'un',\n    'uny', 'unw', 'unx', 'unz', 'ut',\n    'ur', 'urw', 'urx', 'urh', 'urhh',\n    'va', 'vay', 'vaw', 'vax', 'vaz', 'vah', 'vai', 'vaiy', 'vaiw', 'vaix',\n    'vaiz', 'vak', 'vakk', 'van', 'vany', 'vanx', 'vanz', 'vang', 'vangy',\n    'vangw', 'vangx', 'vat', 'vatt', 'vau', 'vauy', 'vaux', 'vauz', 've', 'vey',\n    'vew', 'vex', 'vez', 'veh', 'vehh', 'venn', 'vennw', 'vennx', 'vennz', 'vi',\n    'viy', 'viw', 'vix', 'viz', 'viah', 'viak', 'viakk', 'vien', 'vieny',\n    'vienw', 'vienz', 'viangw', 'viangz', 'viann', 'vianny', 'viannw', 'viannx',\n    'viet', 'viett', 'viau', 'viauy', 'vih', 'vek', 'vekk', 'vin', 'viny',\n    'vinw', 'vinx', 'veng', 'vengy', 'vengw', 'vengx', 'vengz', 'vinn', 'vinny',\n    'vinnw', 'vinnz', 'viur', 'viury', 'viurz', 'vit', 'vitt', 'viu', 'vng',\n    'vngy', 'vngz', 'vur', 'vury', 'vurw', 'vurx', 'vurz', 'vurh', 'vurhh',\n    'vok', 'vokk', 'vongy', 'vongw', 'vongx', 'vongz', 'vo', 'voy', 'vow',\n    'vox', 'voz', 'vu', 'vuw', 'vux', 'vuz', 'voaw', 'voah', 'voahh',\n    'voan', 'voanw', 'voanx', 'voanz', 'voann', 'voanny', 'voannw', 'voannx',\n    'voannz', 'voat', 'voatt', 'voe', 'voey', 'voew', 'voex', 'voez', 'voeh',\n    'voehh', 'vuh', 'vui', 'vuix', 'vuiz', 'vun', 'vuny', 'vunw', 'vunx',\n    'vunz', 'vut', 'vutt',\n];\n//# sourceMappingURL=syllabletable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/syllabletable.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/tokenizer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tokenizeLatinSyllable = void 0;\nconst lettergen_1 = __webpack_require__(/*! ./lettergen */ \"./node_modules/taipa/lib/tonal/lettergen.js\");\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/taipa/lib/tonal/analyzer.js\");\nconst version2_1 = __webpack_require__(/*! ./version2 */ \"./node_modules/taipa/lib/tonal/version2.js\");\nconst collections_1 = __webpack_require__(/*! ./collections */ \"./node_modules/taipa/lib/tonal/collections.js\");\n/** Subword tokenization. */\nfunction tokenizeLatinSyllable(str) {\n    const pLetterSeqs = new Array();\n    const letters = analyzer_1.graphAnalyzeTonal(str).map(x => x.letter && x.letter.literal);\n    // console.log(letters);\n    let beginOfSyllable = 0;\n    while (beginOfSyllable < letters.length) {\n        const accumulatedSeqs = new Array(); // accumulator for the matched\n        let shouldBreak = false;\n        for (let i = 0; i < letters.length; i++) {\n            // i is used for the end of the specified portion of letters. see letters.slice below\n            for (let j = 0; j < lettergen_1.syllableCompositions.length; j++) {\n                if (shouldBreak)\n                    break;\n                if (i + 1 > beginOfSyllable) {\n                    // bypass those loops when i is less than or equal to beginOfSyllable\n                    let sg = new unit_1.PositionalLetterGeneration();\n                    // the letter at position i is exclusive\n                    sg.letters = letters.slice(beginOfSyllable, i + 1);\n                    // console.log(sg.letters, beginOfSyllable, i, j);\n                    if (collections_1.impossibleSequences.includes(sg.letters[i])) {\n                        if (i > 0 && version2_1.vowelsTonal.includes(sg.letters[i - 1])) {\n                            shouldBreak = true;\n                            break;\n                        }\n                    }\n                    sg = lettergen_1.syllableCompositions[j](sg);\n                    if (sg.letters.length == sg.matchedLetters.length &&\n                        sg.matching == true) {\n                        accumulatedSeqs.push(sg.matchedLetters);\n                        // console.log(sg.letters, beginOfSyllable, i, j);\n                    }\n                }\n            }\n            if (i + 1 == letters.length) {\n                // on the last loop\n                if (accumulatedSeqs.length > 0) {\n                    // the last one should be the longest one?\n                    if (beginOfSyllable +\n                        accumulatedSeqs[accumulatedSeqs.length - 1].length <=\n                        letters.length) {\n                        // when beginOfSyllable adds up to under the length of letters\n                        beginOfSyllable +=\n                            accumulatedSeqs[accumulatedSeqs.length - 1].length;\n                    }\n                    // console.log(beginOfSyllable);\n                }\n            }\n        }\n        if (accumulatedSeqs.length == 0) {\n            // break while loop\n            break;\n        }\n        else if (accumulatedSeqs.length > 0) {\n            pLetterSeqs.push(accumulatedSeqs);\n        }\n    }\n    return pLetterSeqs.map(x => x.map(y => y));\n}\nexports.tokenizeLatinSyllable = tokenizeLatinSyllable;\n//# sourceMappingURL=tokenizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC90b2tlbml6ZXIuanM/ZWI5YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsZ0VBQWE7QUFDekMsZUFBZSxtQkFBTyxDQUFDLGlEQUFTO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDhEQUFZO0FBQ3ZDLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsdUJBQXVCLG9CQUFvQjtBQUMzQztBQUNBLDJCQUEyQiw2Q0FBNkM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3Rva2VuaXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b2tlbml6ZUxhdGluU3lsbGFibGUgPSB2b2lkIDA7XG5jb25zdCBsZXR0ZXJnZW5fMSA9IHJlcXVpcmUoXCIuL2xldHRlcmdlblwiKTtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY29uc3QgYW5hbHl6ZXJfMSA9IHJlcXVpcmUoXCIuL2FuYWx5emVyXCIpO1xuY29uc3QgdmVyc2lvbjJfMSA9IHJlcXVpcmUoXCIuL3ZlcnNpb24yXCIpO1xuY29uc3QgY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25zXCIpO1xuLyoqIFN1YndvcmQgdG9rZW5pemF0aW9uLiAqL1xuZnVuY3Rpb24gdG9rZW5pemVMYXRpblN5bGxhYmxlKHN0cikge1xuICAgIGNvbnN0IHBMZXR0ZXJTZXFzID0gbmV3IEFycmF5KCk7XG4gICAgY29uc3QgbGV0dGVycyA9IGFuYWx5emVyXzEuZ3JhcGhBbmFseXplVG9uYWwoc3RyKS5tYXAoeCA9PiB4LmxldHRlciAmJiB4LmxldHRlci5saXRlcmFsKTtcbiAgICAvLyBjb25zb2xlLmxvZyhsZXR0ZXJzKTtcbiAgICBsZXQgYmVnaW5PZlN5bGxhYmxlID0gMDtcbiAgICB3aGlsZSAoYmVnaW5PZlN5bGxhYmxlIDwgbGV0dGVycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYWNjdW11bGF0ZWRTZXFzID0gbmV3IEFycmF5KCk7IC8vIGFjY3VtdWxhdG9yIGZvciB0aGUgbWF0Y2hlZFxuICAgICAgICBsZXQgc2hvdWxkQnJlYWsgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpIGlzIHVzZWQgZm9yIHRoZSBlbmQgb2YgdGhlIHNwZWNpZmllZCBwb3J0aW9uIG9mIGxldHRlcnMuIHNlZSBsZXR0ZXJzLnNsaWNlIGJlbG93XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxldHRlcmdlbl8xLnN5bGxhYmxlQ29tcG9zaXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZEJyZWFrKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPiBiZWdpbk9mU3lsbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnlwYXNzIHRob3NlIGxvb3BzIHdoZW4gaSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYmVnaW5PZlN5bGxhYmxlXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZyA9IG5ldyB1bml0XzEuUG9zaXRpb25hbExldHRlckdlbmVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxldHRlciBhdCBwb3NpdGlvbiBpIGlzIGV4Y2x1c2l2ZVxuICAgICAgICAgICAgICAgICAgICBzZy5sZXR0ZXJzID0gbGV0dGVycy5zbGljZShiZWdpbk9mU3lsbGFibGUsIGkgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2cubGV0dGVycywgYmVnaW5PZlN5bGxhYmxlLCBpLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb25zXzEuaW1wb3NzaWJsZVNlcXVlbmNlcy5pbmNsdWRlcyhzZy5sZXR0ZXJzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAwICYmIHZlcnNpb24yXzEudm93ZWxzVG9uYWwuaW5jbHVkZXMoc2cubGV0dGVyc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQnJlYWsgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNnID0gbGV0dGVyZ2VuXzEuc3lsbGFibGVDb21wb3NpdGlvbnNbal0oc2cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2cubGV0dGVycy5sZW5ndGggPT0gc2cubWF0Y2hlZExldHRlcnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZy5tYXRjaGluZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNlcXMucHVzaChzZy5tYXRjaGVkTGV0dGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZy5sZXR0ZXJzLCBiZWdpbk9mU3lsbGFibGUsIGksIGopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgKyAxID09IGxldHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gb24gdGhlIGxhc3QgbG9vcFxuICAgICAgICAgICAgICAgIGlmIChhY2N1bXVsYXRlZFNlcXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbGFzdCBvbmUgc2hvdWxkIGJlIHRoZSBsb25nZXN0IG9uZT9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZ2luT2ZTeWxsYWJsZSArXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNlcXNbYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCAtIDFdLmxlbmd0aCA8PVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gYmVnaW5PZlN5bGxhYmxlIGFkZHMgdXAgdG8gdW5kZXIgdGhlIGxlbmd0aCBvZiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbk9mU3lsbGFibGUgKz1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNlcXNbYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCAtIDFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhiZWdpbk9mU3lsbGFibGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWNjdW11bGF0ZWRTZXFzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAvLyBicmVhayB3aGlsZSBsb29wXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY2N1bXVsYXRlZFNlcXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcExldHRlclNlcXMucHVzaChhY2N1bXVsYXRlZFNlcXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwTGV0dGVyU2Vxcy5tYXAoeCA9PiB4Lm1hcCh5ID0+IHkpKTtcbn1cbmV4cG9ydHMudG9rZW5pemVMYXRpblN5bGxhYmxlID0gdG9rZW5pemVMYXRpblN5bGxhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5pemVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/tokenizer.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/tonal/version2.js":
/*!**************************************************!*\
  !*** ./node_modules/taipa/lib/tonal/version2.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uncombiningRulesAy = exports.freeAllomorphUncombiningRules = exports.combinedCheckedAllomorphs = exports.uncombinedCheckedAllomorphs = exports.combinedFreeAllomorphs = exports.checkedAllomorphs = exports.AllomorphHY = exports.AllomorphH = exports.freeAllomorphs = exports.AllomorphX = exports.AllomorphW = exports.AllomorphY = exports.AllomorphZ = exports.ZeroAllomorph = exports.tonalPositionalLetters = exports.stopFinalsBBggkkllppssTonal = exports.stopFinalsBgjklpsTonal = exports.stopFinalsTonal = exports.checkedTonalsTonal = exports.freeTonalsTonal = exports.initialsTonal = exports.materLectionisTonal = exports.vowelsTonal = exports.neutralFinalsTonal = exports.nasalFinalsTonal = exports.nasalizationsTonal = exports.FinalHH = exports.FinalKK = exports.FinalTT = exports.FinalPP = exports.FinalH = exports.FinalK = exports.FinalT = exports.FinalP = exports.CheckedTonalY = exports.CheckedTonalX = exports.CheckedTonalF = exports.CheckedTonalW = exports.FreeTonalY = exports.FreeTonalX = exports.FreeTonalZX = exports.FreeTonalXX = exports.FreeTonalF = exports.FreeTonalW = exports.FreeTonalZ = exports.ZeroTonal = exports.NasalFinal = exports.StopFinal = exports.CheckedTonal = exports.FreeTonal = exports.Tonal = exports.Nasalization = exports.Final = exports.Medial = exports.Initial = exports.TonalSpellingTags = exports.lowerLettersTonal = exports.LettersOfTonal = exports.TonalLetterTags = exports.TonalAffix = exports.CheckedAllomorph = exports.FreeAllomorph = exports.Allomorph = exports.Morph = void 0;\nconst unit_1 = __webpack_require__(/*! ../unit */ \"./node_modules/taipa/lib/unit.js\");\nclass Morph {\n}\nexports.Morph = Morph;\nclass Allomorph extends Morph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        if (this.tonal.toString().length == 0) {\n            // return string 'zero' for first tone. member variable characters of graph is still null.\n            return TonalLetterTags.zero;\n        }\n        else\n            return this.tonal.toString();\n    }\n}\nexports.Allomorph = Allomorph;\nclass FreeAllomorph extends Allomorph {\n}\nexports.FreeAllomorph = FreeAllomorph;\nclass CheckedAllomorph extends Allomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new Final();\n    }\n    toString() {\n        if (this.tonal.toString()) {\n            return this.final.toString() + this.tonal.toString();\n        }\n        return this.final.toString();\n    }\n}\nexports.CheckedAllomorph = CheckedAllomorph;\nclass TonalAffix extends Morph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new Tonal();\n    }\n    toString() {\n        return this.tonal.toString();\n    }\n}\nexports.TonalAffix = TonalAffix;\nclass FreeAffix extends TonalAffix {\n}\nclass CheckedAffix extends TonalAffix {\n}\nvar TonalLetterTags;\n(function (TonalLetterTags) {\n    TonalLetterTags[\"a\"] = \"a\";\n    TonalLetterTags[\"e\"] = \"e\";\n    TonalLetterTags[\"i\"] = \"i\";\n    TonalLetterTags[\"o\"] = \"o\";\n    TonalLetterTags[\"u\"] = \"u\";\n    TonalLetterTags[\"ur\"] = \"ur\";\n    TonalLetterTags[\"c\"] = \"c\";\n    TonalLetterTags[\"d\"] = \"d\";\n    TonalLetterTags[\"ch\"] = \"ch\";\n    TonalLetterTags[\"j\"] = \"j\";\n    TonalLetterTags[\"q\"] = \"q\";\n    TonalLetterTags[\"s\"] = \"s\";\n    TonalLetterTags[\"v\"] = \"v\";\n    TonalLetterTags[\"m\"] = \"m\";\n    TonalLetterTags[\"n\"] = \"n\";\n    TonalLetterTags[\"ng\"] = \"ng\";\n    TonalLetterTags[\"nn\"] = \"nn\";\n    TonalLetterTags[\"f\"] = \"f\";\n    TonalLetterTags[\"w\"] = \"w\";\n    TonalLetterTags[\"x\"] = \"x\";\n    TonalLetterTags[\"xx\"] = \"xx\";\n    TonalLetterTags[\"y\"] = \"y\";\n    TonalLetterTags[\"z\"] = \"z\";\n    TonalLetterTags[\"zx\"] = \"zx\";\n    TonalLetterTags[\"b\"] = \"b\";\n    TonalLetterTags[\"g\"] = \"g\";\n    TonalLetterTags[\"l\"] = \"l\";\n    TonalLetterTags[\"k\"] = \"k\";\n    TonalLetterTags[\"p\"] = \"p\";\n    TonalLetterTags[\"t\"] = \"t\";\n    TonalLetterTags[\"kk\"] = \"kk\";\n    TonalLetterTags[\"pp\"] = \"pp\";\n    TonalLetterTags[\"tt\"] = \"tt\";\n    TonalLetterTags[\"hh\"] = \"hh\";\n    TonalLetterTags[\"bb\"] = \"bb\";\n    TonalLetterTags[\"gg\"] = \"gg\";\n    TonalLetterTags[\"ll\"] = \"ll\";\n    TonalLetterTags[\"ss\"] = \"ss\";\n    TonalLetterTags[\"h\"] = \"h\";\n    TonalLetterTags[\"zero\"] = \"zero\";\n    TonalLetterTags[\"er\"] = \"er\";\n    TonalLetterTags[\"ir\"] = \"ir\";\n    TonalLetterTags[\"or\"] = \"or\";\n})(TonalLetterTags = exports.TonalLetterTags || (exports.TonalLetterTags = {}));\nclass LettersOfTonal extends unit_1.Letters {\n    handleN(characters, beginOfLetter, listLength) {\n        let ms = new unit_1.MatchedSequence();\n        if (characters.length - beginOfLetter >= 'nng'.length &&\n            listLength == exports.lowerLettersTonal.size) {\n            if (characters[beginOfLetter].character === 'n' &&\n                characters[beginOfLetter + 1].character === 'n' &&\n                characters[beginOfLetter + 2].character === 'g') {\n                // at the beginning of a letter, we should always prefer 'n' to 'nn'\n                // 'nn' is not able to begin a syllable\n                // 'ng' has higher associativity than 'nn' when in 'nng'\n                // special case for 'nng'\n                // copy the matched letter\n                ms.characters[0] = new unit_1.Character('n');\n                return ms;\n            }\n        }\n        return ms;\n    }\n}\nexports.LettersOfTonal = LettersOfTonal;\nexports.lowerLettersTonal = new LettersOfTonal([\n    TonalLetterTags.a,\n    TonalLetterTags.e,\n    TonalLetterTags.i,\n    TonalLetterTags.o,\n    TonalLetterTags.u,\n    TonalLetterTags.ur,\n    TonalLetterTags.c,\n    TonalLetterTags.d,\n    TonalLetterTags.ch,\n    TonalLetterTags.j,\n    TonalLetterTags.q,\n    TonalLetterTags.s,\n    TonalLetterTags.v,\n    TonalLetterTags.m,\n    TonalLetterTags.n,\n    TonalLetterTags.ng,\n    TonalLetterTags.nn,\n    TonalLetterTags.w,\n    TonalLetterTags.xx,\n    TonalLetterTags.z,\n    TonalLetterTags.zx,\n    TonalLetterTags.x,\n    TonalLetterTags.y,\n    TonalLetterTags.b,\n    TonalLetterTags.g,\n    TonalLetterTags.l,\n    TonalLetterTags.k,\n    TonalLetterTags.p,\n    TonalLetterTags.t,\n    TonalLetterTags.kk,\n    TonalLetterTags.pp,\n    TonalLetterTags.tt,\n    TonalLetterTags.hh,\n    TonalLetterTags.bb,\n    TonalLetterTags.gg,\n    TonalLetterTags.ll,\n    TonalLetterTags.ss,\n    TonalLetterTags.f,\n    TonalLetterTags.h,\n    TonalLetterTags.er,\n    TonalLetterTags.ir,\n    TonalLetterTags.or,\n]);\nvar TonalSpellingTags;\n(function (TonalSpellingTags) {\n    TonalSpellingTags[\"initial\"] = \"initial\";\n    TonalSpellingTags[\"medial\"] = \"medial\";\n    TonalSpellingTags[\"nasalization\"] = \"nasalization\";\n    TonalSpellingTags[\"stopFinal\"] = \"stopFinal\";\n    TonalSpellingTags[\"nasalFinal\"] = \"nasalFinal\";\n    TonalSpellingTags[\"checkedTonal\"] = \"checkedTonal\";\n    TonalSpellingTags[\"freeTonal\"] = \"freeTonal\";\n})(TonalSpellingTags = exports.TonalSpellingTags || (exports.TonalSpellingTags = {}));\nclass Initial extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.initial;\n    }\n}\nexports.Initial = Initial;\nclass Medial extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.medial;\n    }\n}\nexports.Medial = Medial;\nclass Final extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Final = Final;\nclass Nasalization extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.nasalization;\n    }\n}\nexports.Nasalization = Nasalization;\nclass Tonal extends unit_1.PositionalLetter {\n    constructor() {\n        super(...arguments);\n        this.name = '';\n    }\n}\nexports.Tonal = Tonal;\nclass FreeTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.freeTonal;\n    }\n}\nexports.FreeTonal = FreeTonal;\nclass CheckedTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.checkedTonal;\n    }\n}\nexports.CheckedTonal = CheckedTonal;\nclass StopFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.stopFinal;\n    }\n}\nexports.StopFinal = StopFinal;\nclass NasalFinal extends Final {\n    constructor() {\n        super(...arguments);\n        this.name = TonalSpellingTags.nasalFinal;\n    }\n}\nexports.NasalFinal = NasalFinal;\nclass MedialA extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.a);\n    }\n}\nclass MedialE extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.e);\n    }\n}\nclass MedialI extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.i);\n    }\n}\nclass MedialO extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.o);\n    }\n}\nclass MedialU extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.u);\n    }\n}\nclass MedialUR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ur);\n    }\n}\nclass MedialER extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.er);\n    }\n}\nclass MedialIR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ir);\n    }\n}\nclass MedialOR extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.or);\n    }\n}\nclass MaterLectionisM extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass MaterLectionisN extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass MaterLectionisNG extends Medial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass InitialC extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.c);\n    }\n}\nclass InitialCH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ch);\n    }\n}\nclass InitialJ extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass InitialL extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass InitialQ extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.q);\n    }\n}\nclass InitialS extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass InitialV extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.v);\n    }\n}\nclass InitialH extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nclass InitialP extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nclass InitialT extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nclass InitialK extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nclass InitialB extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass InitialD extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.d);\n    }\n}\nclass InitialG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass InitialM extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass InitialN extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass InitialNG extends Initial {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass ZeroTonal extends Tonal {\n    constructor() {\n        super(...arguments);\n        this.characters = [];\n    }\n}\nexports.ZeroTonal = ZeroTonal;\nclass FreeTonalZ extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.z);\n    }\n}\nexports.FreeTonalZ = FreeTonalZ;\nclass FreeTonalW extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.FreeTonalW = FreeTonalW;\nclass FreeTonalF extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.FreeTonalF = FreeTonalF;\nclass FreeTonalXX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.xx);\n    }\n}\nexports.FreeTonalXX = FreeTonalXX;\nclass FreeTonalZX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.zx);\n    }\n}\nexports.FreeTonalZX = FreeTonalZX;\nclass FreeTonalX extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.FreeTonalX = FreeTonalX;\nclass FreeTonalY extends FreeTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.FreeTonalY = FreeTonalY;\nclass CheckedTonalW extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.w);\n    }\n}\nexports.CheckedTonalW = CheckedTonalW;\nclass CheckedTonalF extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.f);\n    }\n}\nexports.CheckedTonalF = CheckedTonalF;\nclass CheckedTonalX extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.x);\n    }\n}\nexports.CheckedTonalX = CheckedTonalX;\nclass CheckedTonalY extends CheckedTonal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.y);\n    }\n}\nexports.CheckedTonalY = CheckedTonalY;\nclass FinalP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.p);\n    }\n}\nexports.FinalP = FinalP;\nclass FinalT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.t);\n    }\n}\nexports.FinalT = FinalT;\nclass FinalK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.k);\n    }\n}\nexports.FinalK = FinalK;\nclass FinalH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.h);\n    }\n}\nexports.FinalH = FinalH;\nclass FinalPP extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.pp);\n    }\n}\nexports.FinalPP = FinalPP;\nclass FinalTT extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.tt);\n    }\n}\nexports.FinalTT = FinalTT;\nclass FinalKK extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.kk);\n    }\n}\nexports.FinalKK = FinalKK;\nclass FinalHH extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.hh);\n    }\n}\nexports.FinalHH = FinalHH;\nclass FinalB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.b);\n    }\n}\nclass FinalL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.l);\n    }\n}\nclass FinalG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.g);\n    }\n}\nclass FinalJ extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.j);\n    }\n}\nclass FinalS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.s);\n    }\n}\nclass FinalBB extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.bb);\n    }\n}\nclass FinalLL extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ll);\n    }\n}\nclass FinalGG extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.gg);\n    }\n}\nclass FinalSS extends StopFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ss);\n    }\n}\nclass FinalM extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.m);\n    }\n}\nclass FinalN extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.n);\n    }\n}\nclass FinalNG extends NasalFinal {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.ng);\n    }\n}\nclass NasalizationNN extends Nasalization {\n    constructor() {\n        super(...arguments);\n        this.characters = this.makeCharacters(TonalLetterTags.nn);\n    }\n}\nexports.nasalizationsTonal = unit_1.letterSequence([new NasalizationNN()]);\nexports.nasalFinalsTonal = unit_1.letterSequence([\n    new FinalM(),\n    new FinalN(),\n    new FinalNG(),\n]);\nexports.neutralFinalsTonal = unit_1.letterSequence([new FinalH(), new FinalHH()]);\nexports.vowelsTonal = unit_1.letterSequence([\n    new MedialA(),\n    new MedialE(),\n    new MedialI(),\n    new MedialO(),\n    new MedialU(),\n    new MedialUR(),\n    new MedialIR(),\n    new MedialOR(),\n    new MedialER(),\n]);\nexports.materLectionisTonal = unit_1.letterSequence([\n    new MaterLectionisM(),\n    new MaterLectionisN(),\n    new MaterLectionisNG(),\n]);\nexports.initialsTonal = unit_1.letterSequence([\n    new InitialP(),\n    new InitialT(),\n    new InitialK(),\n    new InitialB(),\n    new InitialD(),\n    new InitialG(),\n    new InitialH(),\n    new InitialC(),\n    new InitialCH(),\n    new InitialJ(),\n    new InitialL(),\n    new InitialQ(),\n    new InitialS(),\n    new InitialV(),\n    new InitialM(),\n    new InitialN(),\n    new InitialNG(),\n]);\nexports.freeTonalsTonal = unit_1.letterSequence([\n    new FreeTonalZ(),\n    new FreeTonalW(),\n    new FreeTonalXX(),\n    new FreeTonalF(),\n    new FreeTonalZX(),\n    new FreeTonalX(),\n    new FreeTonalY(),\n]);\nexports.checkedTonalsTonal = unit_1.letterSequence([\n    new CheckedTonalF(),\n    new CheckedTonalY(),\n    new CheckedTonalW(),\n    new CheckedTonalX(),\n]);\nexports.stopFinalsTonal = unit_1.letterSequence([\n    new FinalP(),\n    new FinalT(),\n    new FinalK(),\n    new FinalH(),\n    new FinalPP(),\n    new FinalTT(),\n    new FinalKK(),\n    new FinalHH(),\n]);\nexports.stopFinalsBgjklpsTonal = unit_1.letterSequence([\n    new FinalB(),\n    new FinalG(),\n    new FinalJ(),\n    new FinalK(),\n    new FinalL(),\n    new FinalP(),\n    new FinalS(),\n]);\nexports.stopFinalsBBggkkllppssTonal = unit_1.letterSequence([\n    new FinalBB(),\n    new FinalGG(),\n    new FinalKK(),\n    new FinalLL(),\n    new FinalPP(),\n    new FinalSS(),\n]);\nfunction positionalLetter(letters) {\n    return (t) => {\n        for (let i in letters) {\n            if (letters[i].name === t)\n                return letters[i];\n        }\n        return new unit_1.PositionalLetter();\n    };\n}\nconst plA = positionalLetter([new MedialA()]);\nconst plB = positionalLetter([new InitialB(), new FinalB()]);\nconst plBB = positionalLetter([new FinalBB()]);\nconst plC = positionalLetter([new InitialC()]);\nconst plCH = positionalLetter([new InitialCH()]);\nconst plD = positionalLetter([new InitialD()]);\nconst plE = positionalLetter([new MedialE()]);\nconst plER = positionalLetter([new MedialER()]);\nconst plF = positionalLetter([new FreeTonalF(), new CheckedTonalF()]);\nconst plG = positionalLetter([new InitialG(), new FinalG()]);\nconst plGG = positionalLetter([new FinalGG()]);\nconst plH = positionalLetter([new InitialH(), new FinalH()]);\nconst plHH = positionalLetter([new FinalHH()]);\nconst plI = positionalLetter([new MedialI()]);\nconst plIR = positionalLetter([new MedialIR()]);\nconst plJ = positionalLetter([new InitialJ(), new FinalJ()]);\nconst plK = positionalLetter([new InitialK(), new FinalK()]);\nconst plKK = positionalLetter([new FinalKK()]);\nconst plL = positionalLetter([new InitialL(), new FinalL()]);\nconst plLL = positionalLetter([new FinalLL()]);\nconst plM = positionalLetter([\n    new InitialM(),\n    new MaterLectionisM(),\n    new FinalM(),\n]);\nconst plN = positionalLetter([\n    new InitialN(),\n    new MaterLectionisN(),\n    new FinalN(),\n]);\nconst plNN = positionalLetter([new NasalizationNN()]);\nconst plNG = positionalLetter([\n    new InitialNG(),\n    new MaterLectionisNG(),\n    new FinalNG(),\n]);\nconst plO = positionalLetter([new MedialO()]);\nconst plOR = positionalLetter([new MedialOR()]);\nconst plP = positionalLetter([new InitialP(), new FinalP()]);\nconst plPP = positionalLetter([new FinalPP()]);\nconst plQ = positionalLetter([new InitialQ()]);\nconst plS = positionalLetter([new InitialS(), new FinalS()]);\nconst plSS = positionalLetter([new FinalSS()]);\nconst plT = positionalLetter([new InitialT(), new FinalT()]);\nconst plTT = positionalLetter([new FinalTT()]);\nconst plU = positionalLetter([new MedialU()]);\nconst plUR = positionalLetter([new MedialUR()]);\nconst plV = positionalLetter([new InitialV()]);\nconst plW = positionalLetter([new FreeTonalW(), new CheckedTonalW()]);\nconst plX = positionalLetter([new FreeTonalX(), new CheckedTonalX()]);\nconst plXX = positionalLetter([new FreeTonalXX()]);\nconst plY = positionalLetter([new FreeTonalY(), new CheckedTonalY()]);\nconst plZ = positionalLetter([new FreeTonalZ()]);\nconst plZX = positionalLetter([new FreeTonalZX()]);\nexports.tonalPositionalLetters = new Map()\n    .set(TonalLetterTags.a, plA)\n    .set(TonalLetterTags.b, plB)\n    .set(TonalLetterTags.bb, plBB)\n    .set(TonalLetterTags.c, plC)\n    .set(TonalLetterTags.ch, plCH)\n    .set(TonalLetterTags.d, plD)\n    .set(TonalLetterTags.e, plE)\n    .set(TonalLetterTags.er, plER)\n    .set(TonalLetterTags.f, plF)\n    .set(TonalLetterTags.g, plG)\n    .set(TonalLetterTags.gg, plGG)\n    .set(TonalLetterTags.h, plH)\n    .set(TonalLetterTags.hh, plHH)\n    .set(TonalLetterTags.i, plI)\n    .set(TonalLetterTags.ir, plIR)\n    .set(TonalLetterTags.j, plJ)\n    .set(TonalLetterTags.k, plK)\n    .set(TonalLetterTags.kk, plKK)\n    .set(TonalLetterTags.l, plL)\n    .set(TonalLetterTags.ll, plLL)\n    .set(TonalLetterTags.m, plM)\n    .set(TonalLetterTags.n, plN)\n    .set(TonalLetterTags.nn, plNN)\n    .set(TonalLetterTags.ng, plNG)\n    .set(TonalLetterTags.o, plO)\n    .set(TonalLetterTags.or, plOR)\n    .set(TonalLetterTags.p, plP)\n    .set(TonalLetterTags.pp, plPP)\n    .set(TonalLetterTags.q, plQ)\n    .set(TonalLetterTags.s, plS)\n    .set(TonalLetterTags.ss, plSS)\n    .set(TonalLetterTags.t, plT)\n    .set(TonalLetterTags.tt, plTT)\n    .set(TonalLetterTags.u, plU)\n    .set(TonalLetterTags.ur, plUR)\n    .set(TonalLetterTags.v, plV)\n    .set(TonalLetterTags.w, plW)\n    .set(TonalLetterTags.x, plX)\n    .set(TonalLetterTags.xx, plXX)\n    .set(TonalLetterTags.y, plY)\n    .set(TonalLetterTags.z, plZ)\n    .set(TonalLetterTags.zx, plZX);\nclass ZeroAllomorph extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new ZeroTonal();\n    }\n}\nexports.ZeroAllomorph = ZeroAllomorph;\nclass AllomorphF extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalF();\n    }\n}\nclass AllomorphZ extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZ();\n    }\n}\nexports.AllomorphZ = AllomorphZ;\nclass AllomorphY extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalY();\n    }\n}\nexports.AllomorphY = AllomorphY;\nclass AllomorphW extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalW();\n    }\n}\nexports.AllomorphW = AllomorphW;\nclass AllomorphX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalX();\n    }\n}\nexports.AllomorphX = AllomorphX;\nclass AllomorphXX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalXX();\n    }\n}\nclass AllomorphZX extends FreeAllomorph {\n    constructor() {\n        super(...arguments);\n        this.tonal = new FreeTonalZX();\n    }\n}\nexports.freeAllomorphs = new Map()\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.xx, new AllomorphXX())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.zx, new AllomorphZX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.x, new AllomorphX());\nclass AllomorphP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n    }\n}\nclass AllomorphT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n    }\n}\nclass AllomorphK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n    }\n}\nclass AllomorphH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n    }\n}\nexports.AllomorphH = AllomorphH;\nclass AllomorphPP extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalPP();\n    }\n}\nclass AllomorphTT extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalTT();\n    }\n}\nclass AllomorphKK extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalKK();\n    }\n}\nclass AllomorphHH extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalHH();\n    }\n}\nclass AllomorphPF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphPW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphTF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphKF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphHY extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalY();\n    }\n}\nexports.AllomorphHY = AllomorphHY;\nclass AllomorphHW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphTW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphKW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphPX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalP();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphTX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalT();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphKX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalK();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphHX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalH();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphBF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphGF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphJF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalJ();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphLF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphSF extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalS();\n        this.tonal = new CheckedTonalF();\n    }\n}\nclass AllomorphBW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphGW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphLW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphSW extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalS();\n        this.tonal = new CheckedTonalW();\n    }\n}\nclass AllomorphBX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalB();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphGX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalG();\n        this.tonal = new CheckedTonalX();\n    }\n}\nclass AllomorphLX extends CheckedAllomorph {\n    constructor() {\n        super(...arguments);\n        this.final = new FinalL();\n        this.tonal = new CheckedTonalX();\n    }\n}\nexports.checkedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH())\n    .set(TonalLetterTags.p + TonalLetterTags.f, new AllomorphPF())\n    .set(TonalLetterTags.t + TonalLetterTags.f, new AllomorphTF())\n    .set(TonalLetterTags.k + TonalLetterTags.f, new AllomorphKF())\n    .set(TonalLetterTags.h + TonalLetterTags.f, new AllomorphHF())\n    .set(TonalLetterTags.b + TonalLetterTags.f, new AllomorphBF())\n    .set(TonalLetterTags.g + TonalLetterTags.f, new AllomorphGF())\n    .set(TonalLetterTags.j + TonalLetterTags.f, new AllomorphJF())\n    .set(TonalLetterTags.l + TonalLetterTags.f, new AllomorphLF())\n    .set(TonalLetterTags.s + TonalLetterTags.f, new AllomorphSF())\n    .set(TonalLetterTags.h + TonalLetterTags.y, new AllomorphHY())\n    .set(TonalLetterTags.p + TonalLetterTags.w, new AllomorphPW())\n    .set(TonalLetterTags.t + TonalLetterTags.w, new AllomorphTW())\n    .set(TonalLetterTags.k + TonalLetterTags.w, new AllomorphKW())\n    .set(TonalLetterTags.h + TonalLetterTags.w, new AllomorphHW())\n    .set(TonalLetterTags.b + TonalLetterTags.w, new AllomorphBW())\n    .set(TonalLetterTags.g + TonalLetterTags.w, new AllomorphGW())\n    .set(TonalLetterTags.l + TonalLetterTags.w, new AllomorphLW())\n    .set(TonalLetterTags.s + TonalLetterTags.w, new AllomorphSW())\n    .set(TonalLetterTags.p + TonalLetterTags.x, new AllomorphPX())\n    .set(TonalLetterTags.t + TonalLetterTags.x, new AllomorphTX())\n    .set(TonalLetterTags.k + TonalLetterTags.x, new AllomorphKX())\n    .set(TonalLetterTags.h + TonalLetterTags.x, new AllomorphHX())\n    .set(TonalLetterTags.b + TonalLetterTags.x, new AllomorphBX())\n    .set(TonalLetterTags.g + TonalLetterTags.x, new AllomorphGX())\n    .set(TonalLetterTags.l + TonalLetterTags.x, new AllomorphLX());\nexports.combinedFreeAllomorphs = new Map()\n    .set(TonalLetterTags.w, new AllomorphW())\n    .set(TonalLetterTags.z, new AllomorphZ())\n    .set(TonalLetterTags.x, new AllomorphX())\n    .set(TonalLetterTags.y, new AllomorphY())\n    .set(TonalLetterTags.f, new AllomorphF())\n    .set(TonalLetterTags.xx, new AllomorphXX());\nexports.uncombinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p, new AllomorphP())\n    .set(TonalLetterTags.t, new AllomorphT())\n    .set(TonalLetterTags.k, new AllomorphK())\n    .set(TonalLetterTags.h, new AllomorphH())\n    .set(TonalLetterTags.pp, new AllomorphPP())\n    .set(TonalLetterTags.tt, new AllomorphTT())\n    .set(TonalLetterTags.kk, new AllomorphKK())\n    .set(TonalLetterTags.hh, new AllomorphHH());\nexports.combinedCheckedAllomorphs = new Map()\n    .set(TonalLetterTags.p + TonalLetterTags.f, [new AllomorphPF()])\n    .set(TonalLetterTags.p + TonalLetterTags.w, [new AllomorphPW()])\n    .set(TonalLetterTags.p + TonalLetterTags.x, [new AllomorphPX()])\n    .set(TonalLetterTags.t + TonalLetterTags.f, [new AllomorphTF()])\n    .set(TonalLetterTags.t + TonalLetterTags.w, [new AllomorphTW()])\n    .set(TonalLetterTags.t + TonalLetterTags.x, [new AllomorphTX()])\n    .set(TonalLetterTags.k + TonalLetterTags.f, [new AllomorphKF()])\n    .set(TonalLetterTags.k + TonalLetterTags.w, [new AllomorphKW()])\n    .set(TonalLetterTags.k + TonalLetterTags.x, [new AllomorphKX()])\n    .set(TonalLetterTags.h + TonalLetterTags.f, [new AllomorphHF()])\n    .set(TonalLetterTags.h + TonalLetterTags.y, [new AllomorphHY()])\n    .set(TonalLetterTags.h + TonalLetterTags.w, [new AllomorphHW()])\n    .set(TonalLetterTags.h + TonalLetterTags.x, [new AllomorphHX()])\n    .set(TonalLetterTags.b + TonalLetterTags.f, [new AllomorphBF()])\n    .set(TonalLetterTags.b + TonalLetterTags.w, [new AllomorphBW()])\n    .set(TonalLetterTags.b + TonalLetterTags.x, [new AllomorphBX()])\n    .set(TonalLetterTags.g + TonalLetterTags.f, [new AllomorphGF()])\n    .set(TonalLetterTags.g + TonalLetterTags.w, [new AllomorphGW()])\n    .set(TonalLetterTags.g + TonalLetterTags.x, [new AllomorphGX()])\n    .set(TonalLetterTags.j + TonalLetterTags.f, [new AllomorphJF()])\n    .set(TonalLetterTags.l + TonalLetterTags.f, [new AllomorphLF()])\n    .set(TonalLetterTags.l + TonalLetterTags.w, [new AllomorphLW()])\n    .set(TonalLetterTags.l + TonalLetterTags.x, [new AllomorphLX()])\n    .set(TonalLetterTags.s + TonalLetterTags.f, [new AllomorphSF()])\n    .set(TonalLetterTags.s + TonalLetterTags.w, [new AllomorphSW()]);\nexports.freeAllomorphUncombiningRules = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY()])\n    .set(TonalLetterTags.w, [new FreeTonalZ(), new FreeTonalX()])\n    .set(TonalLetterTags.xx, [\n    new FreeTonalZ(),\n    new FreeTonalF(),\n    new FreeTonalX(),\n])\n    .set(TonalLetterTags.z, [new FreeTonalX(), new FreeTonalF(), new ZeroTonal()])\n    .set(TonalLetterTags.zx, [])\n    .set(TonalLetterTags.x, [])\n    .set(TonalLetterTags.y, [new FreeTonalW()])\n    .set(TonalLetterTags.zero, [new FreeTonalY()]);\nexports.uncombiningRulesAy = new Map()\n    .set(TonalLetterTags.f, [new FreeTonalY(), new FreeTonalW()])\n    .set(TonalLetterTags.x, [\n    new ZeroTonal(),\n    new FreeTonalX(),\n    new FreeTonalZ(),\n]);\n//# sourceMappingURL=version2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RhaXBhL2xpYi90b25hbC92ZXJzaW9uMi5qcz80YTIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQSxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0RUFBNEU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0ZBQWtGO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGFpcGEvbGliL3RvbmFsL3ZlcnNpb24yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuY29tYmluaW5nUnVsZXNBeSA9IGV4cG9ydHMuZnJlZUFsbG9tb3JwaFVuY29tYmluaW5nUnVsZXMgPSBleHBvcnRzLmNvbWJpbmVkQ2hlY2tlZEFsbG9tb3JwaHMgPSBleHBvcnRzLnVuY29tYmluZWRDaGVja2VkQWxsb21vcnBocyA9IGV4cG9ydHMuY29tYmluZWRGcmVlQWxsb21vcnBocyA9IGV4cG9ydHMuY2hlY2tlZEFsbG9tb3JwaHMgPSBleHBvcnRzLkFsbG9tb3JwaEhZID0gZXhwb3J0cy5BbGxvbW9ycGhIID0gZXhwb3J0cy5mcmVlQWxsb21vcnBocyA9IGV4cG9ydHMuQWxsb21vcnBoWCA9IGV4cG9ydHMuQWxsb21vcnBoVyA9IGV4cG9ydHMuQWxsb21vcnBoWSA9IGV4cG9ydHMuQWxsb21vcnBoWiA9IGV4cG9ydHMuWmVyb0FsbG9tb3JwaCA9IGV4cG9ydHMudG9uYWxQb3NpdGlvbmFsTGV0dGVycyA9IGV4cG9ydHMuc3RvcEZpbmFsc0JCZ2dra2xscHBzc1RvbmFsID0gZXhwb3J0cy5zdG9wRmluYWxzQmdqa2xwc1RvbmFsID0gZXhwb3J0cy5zdG9wRmluYWxzVG9uYWwgPSBleHBvcnRzLmNoZWNrZWRUb25hbHNUb25hbCA9IGV4cG9ydHMuZnJlZVRvbmFsc1RvbmFsID0gZXhwb3J0cy5pbml0aWFsc1RvbmFsID0gZXhwb3J0cy5tYXRlckxlY3Rpb25pc1RvbmFsID0gZXhwb3J0cy52b3dlbHNUb25hbCA9IGV4cG9ydHMubmV1dHJhbEZpbmFsc1RvbmFsID0gZXhwb3J0cy5uYXNhbEZpbmFsc1RvbmFsID0gZXhwb3J0cy5uYXNhbGl6YXRpb25zVG9uYWwgPSBleHBvcnRzLkZpbmFsSEggPSBleHBvcnRzLkZpbmFsS0sgPSBleHBvcnRzLkZpbmFsVFQgPSBleHBvcnRzLkZpbmFsUFAgPSBleHBvcnRzLkZpbmFsSCA9IGV4cG9ydHMuRmluYWxLID0gZXhwb3J0cy5GaW5hbFQgPSBleHBvcnRzLkZpbmFsUCA9IGV4cG9ydHMuQ2hlY2tlZFRvbmFsWSA9IGV4cG9ydHMuQ2hlY2tlZFRvbmFsWCA9IGV4cG9ydHMuQ2hlY2tlZFRvbmFsRiA9IGV4cG9ydHMuQ2hlY2tlZFRvbmFsVyA9IGV4cG9ydHMuRnJlZVRvbmFsWSA9IGV4cG9ydHMuRnJlZVRvbmFsWCA9IGV4cG9ydHMuRnJlZVRvbmFsWlggPSBleHBvcnRzLkZyZWVUb25hbFhYID0gZXhwb3J0cy5GcmVlVG9uYWxGID0gZXhwb3J0cy5GcmVlVG9uYWxXID0gZXhwb3J0cy5GcmVlVG9uYWxaID0gZXhwb3J0cy5aZXJvVG9uYWwgPSBleHBvcnRzLk5hc2FsRmluYWwgPSBleHBvcnRzLlN0b3BGaW5hbCA9IGV4cG9ydHMuQ2hlY2tlZFRvbmFsID0gZXhwb3J0cy5GcmVlVG9uYWwgPSBleHBvcnRzLlRvbmFsID0gZXhwb3J0cy5OYXNhbGl6YXRpb24gPSBleHBvcnRzLkZpbmFsID0gZXhwb3J0cy5NZWRpYWwgPSBleHBvcnRzLkluaXRpYWwgPSBleHBvcnRzLlRvbmFsU3BlbGxpbmdUYWdzID0gZXhwb3J0cy5sb3dlckxldHRlcnNUb25hbCA9IGV4cG9ydHMuTGV0dGVyc09mVG9uYWwgPSBleHBvcnRzLlRvbmFsTGV0dGVyVGFncyA9IGV4cG9ydHMuVG9uYWxBZmZpeCA9IGV4cG9ydHMuQ2hlY2tlZEFsbG9tb3JwaCA9IGV4cG9ydHMuRnJlZUFsbG9tb3JwaCA9IGV4cG9ydHMuQWxsb21vcnBoID0gZXhwb3J0cy5Nb3JwaCA9IHZvaWQgMDtcbmNvbnN0IHVuaXRfMSA9IHJlcXVpcmUoXCIuLi91bml0XCIpO1xuY2xhc3MgTW9ycGgge1xufVxuZXhwb3J0cy5Nb3JwaCA9IE1vcnBoO1xuY2xhc3MgQWxsb21vcnBoIGV4dGVuZHMgTW9ycGgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnRvbmFsID0gbmV3IFRvbmFsKCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy50b25hbC50b1N0cmluZygpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gc3RyaW5nICd6ZXJvJyBmb3IgZmlyc3QgdG9uZS4gbWVtYmVyIHZhcmlhYmxlIGNoYXJhY3RlcnMgb2YgZ3JhcGggaXMgc3RpbGwgbnVsbC5cbiAgICAgICAgICAgIHJldHVybiBUb25hbExldHRlclRhZ3MuemVybztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b25hbC50b1N0cmluZygpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoID0gQWxsb21vcnBoO1xuY2xhc3MgRnJlZUFsbG9tb3JwaCBleHRlbmRzIEFsbG9tb3JwaCB7XG59XG5leHBvcnRzLkZyZWVBbGxvbW9ycGggPSBGcmVlQWxsb21vcnBoO1xuY2xhc3MgQ2hlY2tlZEFsbG9tb3JwaCBleHRlbmRzIEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWwoKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnRvbmFsLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmFsLnRvU3RyaW5nKCkgKyB0aGlzLnRvbmFsLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmluYWwudG9TdHJpbmcoKTtcbiAgICB9XG59XG5leHBvcnRzLkNoZWNrZWRBbGxvbW9ycGggPSBDaGVja2VkQWxsb21vcnBoO1xuY2xhc3MgVG9uYWxBZmZpeCBleHRlbmRzIE1vcnBoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50b25hbCA9IG5ldyBUb25hbCgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9uYWwudG9TdHJpbmcoKTtcbiAgICB9XG59XG5leHBvcnRzLlRvbmFsQWZmaXggPSBUb25hbEFmZml4O1xuY2xhc3MgRnJlZUFmZml4IGV4dGVuZHMgVG9uYWxBZmZpeCB7XG59XG5jbGFzcyBDaGVja2VkQWZmaXggZXh0ZW5kcyBUb25hbEFmZml4IHtcbn1cbnZhciBUb25hbExldHRlclRhZ3M7XG4oZnVuY3Rpb24gKFRvbmFsTGV0dGVyVGFncykge1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImFcIl0gPSBcImFcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJlXCJdID0gXCJlXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wiaVwiXSA9IFwiaVwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcIm9cIl0gPSBcIm9cIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJ1XCJdID0gXCJ1XCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1widXJcIl0gPSBcInVyXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wiY1wiXSA9IFwiY1wiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImRcIl0gPSBcImRcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJjaFwiXSA9IFwiY2hcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJqXCJdID0gXCJqXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wicVwiXSA9IFwicVwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInNcIl0gPSBcInNcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJ2XCJdID0gXCJ2XCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wibVwiXSA9IFwibVwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcIm5cIl0gPSBcIm5cIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJuZ1wiXSA9IFwibmdcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJublwiXSA9IFwibm5cIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJmXCJdID0gXCJmXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wid1wiXSA9IFwid1wiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInhcIl0gPSBcInhcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJ4eFwiXSA9IFwieHhcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJ5XCJdID0gXCJ5XCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wielwiXSA9IFwielwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInp4XCJdID0gXCJ6eFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImJcIl0gPSBcImJcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJnXCJdID0gXCJnXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wibFwiXSA9IFwibFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImtcIl0gPSBcImtcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJwXCJdID0gXCJwXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1widFwiXSA9IFwidFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImtrXCJdID0gXCJra1wiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInBwXCJdID0gXCJwcFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInR0XCJdID0gXCJ0dFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImhoXCJdID0gXCJoaFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImJiXCJdID0gXCJiYlwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImdnXCJdID0gXCJnZ1wiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImxsXCJdID0gXCJsbFwiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcInNzXCJdID0gXCJzc1wiO1xuICAgIFRvbmFsTGV0dGVyVGFnc1tcImhcIl0gPSBcImhcIjtcbiAgICBUb25hbExldHRlclRhZ3NbXCJ6ZXJvXCJdID0gXCJ6ZXJvXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wiZXJcIl0gPSBcImVyXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wiaXJcIl0gPSBcImlyXCI7XG4gICAgVG9uYWxMZXR0ZXJUYWdzW1wib3JcIl0gPSBcIm9yXCI7XG59KShUb25hbExldHRlclRhZ3MgPSBleHBvcnRzLlRvbmFsTGV0dGVyVGFncyB8fCAoZXhwb3J0cy5Ub25hbExldHRlclRhZ3MgPSB7fSkpO1xuY2xhc3MgTGV0dGVyc09mVG9uYWwgZXh0ZW5kcyB1bml0XzEuTGV0dGVycyB7XG4gICAgaGFuZGxlTihjaGFyYWN0ZXJzLCBiZWdpbk9mTGV0dGVyLCBsaXN0TGVuZ3RoKSB7XG4gICAgICAgIGxldCBtcyA9IG5ldyB1bml0XzEuTWF0Y2hlZFNlcXVlbmNlKCk7XG4gICAgICAgIGlmIChjaGFyYWN0ZXJzLmxlbmd0aCAtIGJlZ2luT2ZMZXR0ZXIgPj0gJ25uZycubGVuZ3RoICYmXG4gICAgICAgICAgICBsaXN0TGVuZ3RoID09IGV4cG9ydHMubG93ZXJMZXR0ZXJzVG9uYWwuc2l6ZSkge1xuICAgICAgICAgICAgaWYgKGNoYXJhY3RlcnNbYmVnaW5PZkxldHRlcl0uY2hhcmFjdGVyID09PSAnbicgJiZcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzW2JlZ2luT2ZMZXR0ZXIgKyAxXS5jaGFyYWN0ZXIgPT09ICduJyAmJlxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcnNbYmVnaW5PZkxldHRlciArIDJdLmNoYXJhY3RlciA9PT0gJ2cnKSB7XG4gICAgICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxldHRlciwgd2Ugc2hvdWxkIGFsd2F5cyBwcmVmZXIgJ24nIHRvICdubidcbiAgICAgICAgICAgICAgICAvLyAnbm4nIGlzIG5vdCBhYmxlIHRvIGJlZ2luIGEgc3lsbGFibGVcbiAgICAgICAgICAgICAgICAvLyAnbmcnIGhhcyBoaWdoZXIgYXNzb2NpYXRpdml0eSB0aGFuICdubicgd2hlbiBpbiAnbm5nJ1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgJ25uZydcbiAgICAgICAgICAgICAgICAvLyBjb3B5IHRoZSBtYXRjaGVkIGxldHRlclxuICAgICAgICAgICAgICAgIG1zLmNoYXJhY3RlcnNbMF0gPSBuZXcgdW5pdF8xLkNoYXJhY3RlcignbicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXM7XG4gICAgfVxufVxuZXhwb3J0cy5MZXR0ZXJzT2ZUb25hbCA9IExldHRlcnNPZlRvbmFsO1xuZXhwb3J0cy5sb3dlckxldHRlcnNUb25hbCA9IG5ldyBMZXR0ZXJzT2ZUb25hbChbXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmEsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmUsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmksXG4gICAgVG9uYWxMZXR0ZXJUYWdzLm8sXG4gICAgVG9uYWxMZXR0ZXJUYWdzLnUsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLnVyLFxuICAgIFRvbmFsTGV0dGVyVGFncy5jLFxuICAgIFRvbmFsTGV0dGVyVGFncy5kLFxuICAgIFRvbmFsTGV0dGVyVGFncy5jaCxcbiAgICBUb25hbExldHRlclRhZ3MuaixcbiAgICBUb25hbExldHRlclRhZ3MucSxcbiAgICBUb25hbExldHRlclRhZ3MucyxcbiAgICBUb25hbExldHRlclRhZ3MudixcbiAgICBUb25hbExldHRlclRhZ3MubSxcbiAgICBUb25hbExldHRlclRhZ3MubixcbiAgICBUb25hbExldHRlclRhZ3MubmcsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLm5uLFxuICAgIFRvbmFsTGV0dGVyVGFncy53LFxuICAgIFRvbmFsTGV0dGVyVGFncy54eCxcbiAgICBUb25hbExldHRlclRhZ3MueixcbiAgICBUb25hbExldHRlclRhZ3MuengsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLngsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLnksXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmIsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmcsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmwsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmssXG4gICAgVG9uYWxMZXR0ZXJUYWdzLnAsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLnQsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmtrLFxuICAgIFRvbmFsTGV0dGVyVGFncy5wcCxcbiAgICBUb25hbExldHRlclRhZ3MudHQsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmhoLFxuICAgIFRvbmFsTGV0dGVyVGFncy5iYixcbiAgICBUb25hbExldHRlclRhZ3MuZ2csXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmxsLFxuICAgIFRvbmFsTGV0dGVyVGFncy5zcyxcbiAgICBUb25hbExldHRlclRhZ3MuZixcbiAgICBUb25hbExldHRlclRhZ3MuaCxcbiAgICBUb25hbExldHRlclRhZ3MuZXIsXG4gICAgVG9uYWxMZXR0ZXJUYWdzLmlyLFxuICAgIFRvbmFsTGV0dGVyVGFncy5vcixcbl0pO1xudmFyIFRvbmFsU3BlbGxpbmdUYWdzO1xuKGZ1bmN0aW9uIChUb25hbFNwZWxsaW5nVGFncykge1xuICAgIFRvbmFsU3BlbGxpbmdUYWdzW1wiaW5pdGlhbFwiXSA9IFwiaW5pdGlhbFwiO1xuICAgIFRvbmFsU3BlbGxpbmdUYWdzW1wibWVkaWFsXCJdID0gXCJtZWRpYWxcIjtcbiAgICBUb25hbFNwZWxsaW5nVGFnc1tcIm5hc2FsaXphdGlvblwiXSA9IFwibmFzYWxpemF0aW9uXCI7XG4gICAgVG9uYWxTcGVsbGluZ1RhZ3NbXCJzdG9wRmluYWxcIl0gPSBcInN0b3BGaW5hbFwiO1xuICAgIFRvbmFsU3BlbGxpbmdUYWdzW1wibmFzYWxGaW5hbFwiXSA9IFwibmFzYWxGaW5hbFwiO1xuICAgIFRvbmFsU3BlbGxpbmdUYWdzW1wiY2hlY2tlZFRvbmFsXCJdID0gXCJjaGVja2VkVG9uYWxcIjtcbiAgICBUb25hbFNwZWxsaW5nVGFnc1tcImZyZWVUb25hbFwiXSA9IFwiZnJlZVRvbmFsXCI7XG59KShUb25hbFNwZWxsaW5nVGFncyA9IGV4cG9ydHMuVG9uYWxTcGVsbGluZ1RhZ3MgfHwgKGV4cG9ydHMuVG9uYWxTcGVsbGluZ1RhZ3MgPSB7fSkpO1xuY2xhc3MgSW5pdGlhbCBleHRlbmRzIHVuaXRfMS5Qb3NpdGlvbmFsTGV0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gVG9uYWxTcGVsbGluZ1RhZ3MuaW5pdGlhbDtcbiAgICB9XG59XG5leHBvcnRzLkluaXRpYWwgPSBJbml0aWFsO1xuY2xhc3MgTWVkaWFsIGV4dGVuZHMgdW5pdF8xLlBvc2l0aW9uYWxMZXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBUb25hbFNwZWxsaW5nVGFncy5tZWRpYWw7XG4gICAgfVxufVxuZXhwb3J0cy5NZWRpYWwgPSBNZWRpYWw7XG5jbGFzcyBGaW5hbCBleHRlbmRzIHVuaXRfMS5Qb3NpdGlvbmFsTGV0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XG4gICAgfVxufVxuZXhwb3J0cy5GaW5hbCA9IEZpbmFsO1xuY2xhc3MgTmFzYWxpemF0aW9uIGV4dGVuZHMgdW5pdF8xLlBvc2l0aW9uYWxMZXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBUb25hbFNwZWxsaW5nVGFncy5uYXNhbGl6YXRpb247XG4gICAgfVxufVxuZXhwb3J0cy5OYXNhbGl6YXRpb24gPSBOYXNhbGl6YXRpb247XG5jbGFzcyBUb25hbCBleHRlbmRzIHVuaXRfMS5Qb3NpdGlvbmFsTGV0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJyc7XG4gICAgfVxufVxuZXhwb3J0cy5Ub25hbCA9IFRvbmFsO1xuY2xhc3MgRnJlZVRvbmFsIGV4dGVuZHMgVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBUb25hbFNwZWxsaW5nVGFncy5mcmVlVG9uYWw7XG4gICAgfVxufVxuZXhwb3J0cy5GcmVlVG9uYWwgPSBGcmVlVG9uYWw7XG5jbGFzcyBDaGVja2VkVG9uYWwgZXh0ZW5kcyBUb25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFRvbmFsU3BlbGxpbmdUYWdzLmNoZWNrZWRUb25hbDtcbiAgICB9XG59XG5leHBvcnRzLkNoZWNrZWRUb25hbCA9IENoZWNrZWRUb25hbDtcbmNsYXNzIFN0b3BGaW5hbCBleHRlbmRzIEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gVG9uYWxTcGVsbGluZ1RhZ3Muc3RvcEZpbmFsO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RvcEZpbmFsID0gU3RvcEZpbmFsO1xuY2xhc3MgTmFzYWxGaW5hbCBleHRlbmRzIEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gVG9uYWxTcGVsbGluZ1RhZ3MubmFzYWxGaW5hbDtcbiAgICB9XG59XG5leHBvcnRzLk5hc2FsRmluYWwgPSBOYXNhbEZpbmFsO1xuY2xhc3MgTWVkaWFsQSBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmEpO1xuICAgIH1cbn1cbmNsYXNzIE1lZGlhbEUgZXh0ZW5kcyBNZWRpYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5lKTtcbiAgICB9XG59XG5jbGFzcyBNZWRpYWxJIGV4dGVuZHMgTWVkaWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuaSk7XG4gICAgfVxufVxuY2xhc3MgTWVkaWFsTyBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLm8pO1xuICAgIH1cbn1cbmNsYXNzIE1lZGlhbFUgZXh0ZW5kcyBNZWRpYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy51KTtcbiAgICB9XG59XG5jbGFzcyBNZWRpYWxVUiBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLnVyKTtcbiAgICB9XG59XG5jbGFzcyBNZWRpYWxFUiBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmVyKTtcbiAgICB9XG59XG5jbGFzcyBNZWRpYWxJUiBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmlyKTtcbiAgICB9XG59XG5jbGFzcyBNZWRpYWxPUiBleHRlbmRzIE1lZGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLm9yKTtcbiAgICB9XG59XG5jbGFzcyBNYXRlckxlY3Rpb25pc00gZXh0ZW5kcyBNZWRpYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5tKTtcbiAgICB9XG59XG5jbGFzcyBNYXRlckxlY3Rpb25pc04gZXh0ZW5kcyBNZWRpYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5uKTtcbiAgICB9XG59XG5jbGFzcyBNYXRlckxlY3Rpb25pc05HIGV4dGVuZHMgTWVkaWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MubmcpO1xuICAgIH1cbn1cbmNsYXNzIEluaXRpYWxDIGV4dGVuZHMgSW5pdGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmMpO1xuICAgIH1cbn1cbmNsYXNzIEluaXRpYWxDSCBleHRlbmRzIEluaXRpYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5jaCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEogZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Muaik7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEwgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MubCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbFEgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MucSk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbFMgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mucyk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbFYgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mudik7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEggZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuaCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbFAgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MucCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbFQgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MudCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEsgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Muayk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEIgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuYik7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEQgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuZCk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbEcgZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuZyk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbE0gZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MubSk7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbE4gZXh0ZW5kcyBJbml0aWFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mubik7XG4gICAgfVxufVxuY2xhc3MgSW5pdGlhbE5HIGV4dGVuZHMgSW5pdGlhbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLm5nKTtcbiAgICB9XG59XG5jbGFzcyBaZXJvVG9uYWwgZXh0ZW5kcyBUb25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuWmVyb1RvbmFsID0gWmVyb1RvbmFsO1xuY2xhc3MgRnJlZVRvbmFsWiBleHRlbmRzIEZyZWVUb25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLnopO1xuICAgIH1cbn1cbmV4cG9ydHMuRnJlZVRvbmFsWiA9IEZyZWVUb25hbFo7XG5jbGFzcyBGcmVlVG9uYWxXIGV4dGVuZHMgRnJlZVRvbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mudyk7XG4gICAgfVxufVxuZXhwb3J0cy5GcmVlVG9uYWxXID0gRnJlZVRvbmFsVztcbmNsYXNzIEZyZWVUb25hbEYgZXh0ZW5kcyBGcmVlVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5mKTtcbiAgICB9XG59XG5leHBvcnRzLkZyZWVUb25hbEYgPSBGcmVlVG9uYWxGO1xuY2xhc3MgRnJlZVRvbmFsWFggZXh0ZW5kcyBGcmVlVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy54eCk7XG4gICAgfVxufVxuZXhwb3J0cy5GcmVlVG9uYWxYWCA9IEZyZWVUb25hbFhYO1xuY2xhc3MgRnJlZVRvbmFsWlggZXh0ZW5kcyBGcmVlVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy56eCk7XG4gICAgfVxufVxuZXhwb3J0cy5GcmVlVG9uYWxaWCA9IEZyZWVUb25hbFpYO1xuY2xhc3MgRnJlZVRvbmFsWCBleHRlbmRzIEZyZWVUb25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLngpO1xuICAgIH1cbn1cbmV4cG9ydHMuRnJlZVRvbmFsWCA9IEZyZWVUb25hbFg7XG5jbGFzcyBGcmVlVG9uYWxZIGV4dGVuZHMgRnJlZVRvbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MueSk7XG4gICAgfVxufVxuZXhwb3J0cy5GcmVlVG9uYWxZID0gRnJlZVRvbmFsWTtcbmNsYXNzIENoZWNrZWRUb25hbFcgZXh0ZW5kcyBDaGVja2VkVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy53KTtcbiAgICB9XG59XG5leHBvcnRzLkNoZWNrZWRUb25hbFcgPSBDaGVja2VkVG9uYWxXO1xuY2xhc3MgQ2hlY2tlZFRvbmFsRiBleHRlbmRzIENoZWNrZWRUb25hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmYpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hlY2tlZFRvbmFsRiA9IENoZWNrZWRUb25hbEY7XG5jbGFzcyBDaGVja2VkVG9uYWxYIGV4dGVuZHMgQ2hlY2tlZFRvbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MueCk7XG4gICAgfVxufVxuZXhwb3J0cy5DaGVja2VkVG9uYWxYID0gQ2hlY2tlZFRvbmFsWDtcbmNsYXNzIENoZWNrZWRUb25hbFkgZXh0ZW5kcyBDaGVja2VkVG9uYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy55KTtcbiAgICB9XG59XG5leHBvcnRzLkNoZWNrZWRUb25hbFkgPSBDaGVja2VkVG9uYWxZO1xuY2xhc3MgRmluYWxQIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MucCk7XG4gICAgfVxufVxuZXhwb3J0cy5GaW5hbFAgPSBGaW5hbFA7XG5jbGFzcyBGaW5hbFQgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy50KTtcbiAgICB9XG59XG5leHBvcnRzLkZpbmFsVCA9IEZpbmFsVDtcbmNsYXNzIEZpbmFsSyBleHRlbmRzIFN0b3BGaW5hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmspO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluYWxLID0gRmluYWxLO1xuY2xhc3MgRmluYWxIIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuaCk7XG4gICAgfVxufVxuZXhwb3J0cy5GaW5hbEggPSBGaW5hbEg7XG5jbGFzcyBGaW5hbFBQIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MucHApO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluYWxQUCA9IEZpbmFsUFA7XG5jbGFzcyBGaW5hbFRUIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MudHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluYWxUVCA9IEZpbmFsVFQ7XG5jbGFzcyBGaW5hbEtLIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mua2spO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluYWxLSyA9IEZpbmFsS0s7XG5jbGFzcyBGaW5hbEhIIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuaGgpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmluYWxISCA9IEZpbmFsSEg7XG5jbGFzcyBGaW5hbEIgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5iKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbEwgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5sKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbEcgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5nKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbEogZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5qKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbFMgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5zKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbEJCIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3MuYmIpO1xuICAgIH1cbn1cbmNsYXNzIEZpbmFsTEwgZXh0ZW5kcyBTdG9wRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5sbCk7XG4gICAgfVxufVxuY2xhc3MgRmluYWxHRyBleHRlbmRzIFN0b3BGaW5hbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVycyA9IHRoaXMubWFrZUNoYXJhY3RlcnMoVG9uYWxMZXR0ZXJUYWdzLmdnKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbFNTIGV4dGVuZHMgU3RvcEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Muc3MpO1xuICAgIH1cbn1cbmNsYXNzIEZpbmFsTSBleHRlbmRzIE5hc2FsRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5tKTtcbiAgICB9XG59XG5jbGFzcyBGaW5hbE4gZXh0ZW5kcyBOYXNhbEZpbmFsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzID0gdGhpcy5tYWtlQ2hhcmFjdGVycyhUb25hbExldHRlclRhZ3Mubik7XG4gICAgfVxufVxuY2xhc3MgRmluYWxORyBleHRlbmRzIE5hc2FsRmluYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5uZyk7XG4gICAgfVxufVxuY2xhc3MgTmFzYWxpemF0aW9uTk4gZXh0ZW5kcyBOYXNhbGl6YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJhY3RlcnMgPSB0aGlzLm1ha2VDaGFyYWN0ZXJzKFRvbmFsTGV0dGVyVGFncy5ubik7XG4gICAgfVxufVxuZXhwb3J0cy5uYXNhbGl6YXRpb25zVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW25ldyBOYXNhbGl6YXRpb25OTigpXSk7XG5leHBvcnRzLm5hc2FsRmluYWxzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW1xuICAgIG5ldyBGaW5hbE0oKSxcbiAgICBuZXcgRmluYWxOKCksXG4gICAgbmV3IEZpbmFsTkcoKSxcbl0pO1xuZXhwb3J0cy5uZXV0cmFsRmluYWxzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW25ldyBGaW5hbEgoKSwgbmV3IEZpbmFsSEgoKV0pO1xuZXhwb3J0cy52b3dlbHNUb25hbCA9IHVuaXRfMS5sZXR0ZXJTZXF1ZW5jZShbXG4gICAgbmV3IE1lZGlhbEEoKSxcbiAgICBuZXcgTWVkaWFsRSgpLFxuICAgIG5ldyBNZWRpYWxJKCksXG4gICAgbmV3IE1lZGlhbE8oKSxcbiAgICBuZXcgTWVkaWFsVSgpLFxuICAgIG5ldyBNZWRpYWxVUigpLFxuICAgIG5ldyBNZWRpYWxJUigpLFxuICAgIG5ldyBNZWRpYWxPUigpLFxuICAgIG5ldyBNZWRpYWxFUigpLFxuXSk7XG5leHBvcnRzLm1hdGVyTGVjdGlvbmlzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW1xuICAgIG5ldyBNYXRlckxlY3Rpb25pc00oKSxcbiAgICBuZXcgTWF0ZXJMZWN0aW9uaXNOKCksXG4gICAgbmV3IE1hdGVyTGVjdGlvbmlzTkcoKSxcbl0pO1xuZXhwb3J0cy5pbml0aWFsc1RvbmFsID0gdW5pdF8xLmxldHRlclNlcXVlbmNlKFtcbiAgICBuZXcgSW5pdGlhbFAoKSxcbiAgICBuZXcgSW5pdGlhbFQoKSxcbiAgICBuZXcgSW5pdGlhbEsoKSxcbiAgICBuZXcgSW5pdGlhbEIoKSxcbiAgICBuZXcgSW5pdGlhbEQoKSxcbiAgICBuZXcgSW5pdGlhbEcoKSxcbiAgICBuZXcgSW5pdGlhbEgoKSxcbiAgICBuZXcgSW5pdGlhbEMoKSxcbiAgICBuZXcgSW5pdGlhbENIKCksXG4gICAgbmV3IEluaXRpYWxKKCksXG4gICAgbmV3IEluaXRpYWxMKCksXG4gICAgbmV3IEluaXRpYWxRKCksXG4gICAgbmV3IEluaXRpYWxTKCksXG4gICAgbmV3IEluaXRpYWxWKCksXG4gICAgbmV3IEluaXRpYWxNKCksXG4gICAgbmV3IEluaXRpYWxOKCksXG4gICAgbmV3IEluaXRpYWxORygpLFxuXSk7XG5leHBvcnRzLmZyZWVUb25hbHNUb25hbCA9IHVuaXRfMS5sZXR0ZXJTZXF1ZW5jZShbXG4gICAgbmV3IEZyZWVUb25hbFooKSxcbiAgICBuZXcgRnJlZVRvbmFsVygpLFxuICAgIG5ldyBGcmVlVG9uYWxYWCgpLFxuICAgIG5ldyBGcmVlVG9uYWxGKCksXG4gICAgbmV3IEZyZWVUb25hbFpYKCksXG4gICAgbmV3IEZyZWVUb25hbFgoKSxcbiAgICBuZXcgRnJlZVRvbmFsWSgpLFxuXSk7XG5leHBvcnRzLmNoZWNrZWRUb25hbHNUb25hbCA9IHVuaXRfMS5sZXR0ZXJTZXF1ZW5jZShbXG4gICAgbmV3IENoZWNrZWRUb25hbEYoKSxcbiAgICBuZXcgQ2hlY2tlZFRvbmFsWSgpLFxuICAgIG5ldyBDaGVja2VkVG9uYWxXKCksXG4gICAgbmV3IENoZWNrZWRUb25hbFgoKSxcbl0pO1xuZXhwb3J0cy5zdG9wRmluYWxzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW1xuICAgIG5ldyBGaW5hbFAoKSxcbiAgICBuZXcgRmluYWxUKCksXG4gICAgbmV3IEZpbmFsSygpLFxuICAgIG5ldyBGaW5hbEgoKSxcbiAgICBuZXcgRmluYWxQUCgpLFxuICAgIG5ldyBGaW5hbFRUKCksXG4gICAgbmV3IEZpbmFsS0soKSxcbiAgICBuZXcgRmluYWxISCgpLFxuXSk7XG5leHBvcnRzLnN0b3BGaW5hbHNCZ2prbHBzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW1xuICAgIG5ldyBGaW5hbEIoKSxcbiAgICBuZXcgRmluYWxHKCksXG4gICAgbmV3IEZpbmFsSigpLFxuICAgIG5ldyBGaW5hbEsoKSxcbiAgICBuZXcgRmluYWxMKCksXG4gICAgbmV3IEZpbmFsUCgpLFxuICAgIG5ldyBGaW5hbFMoKSxcbl0pO1xuZXhwb3J0cy5zdG9wRmluYWxzQkJnZ2trbGxwcHNzVG9uYWwgPSB1bml0XzEubGV0dGVyU2VxdWVuY2UoW1xuICAgIG5ldyBGaW5hbEJCKCksXG4gICAgbmV3IEZpbmFsR0coKSxcbiAgICBuZXcgRmluYWxLSygpLFxuICAgIG5ldyBGaW5hbExMKCksXG4gICAgbmV3IEZpbmFsUFAoKSxcbiAgICBuZXcgRmluYWxTUygpLFxuXSk7XG5mdW5jdGlvbiBwb3NpdGlvbmFsTGV0dGVyKGxldHRlcnMpIHtcbiAgICByZXR1cm4gKHQpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSBpbiBsZXR0ZXJzKSB7XG4gICAgICAgICAgICBpZiAobGV0dGVyc1tpXS5uYW1lID09PSB0KVxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgdW5pdF8xLlBvc2l0aW9uYWxMZXR0ZXIoKTtcbiAgICB9O1xufVxuY29uc3QgcGxBID0gcG9zaXRpb25hbExldHRlcihbbmV3IE1lZGlhbEEoKV0pO1xuY29uc3QgcGxCID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxCKCksIG5ldyBGaW5hbEIoKV0pO1xuY29uc3QgcGxCQiA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGaW5hbEJCKCldKTtcbmNvbnN0IHBsQyA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBJbml0aWFsQygpXSk7XG5jb25zdCBwbENIID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxDSCgpXSk7XG5jb25zdCBwbEQgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgSW5pdGlhbEQoKV0pO1xuY29uc3QgcGxFID0gcG9zaXRpb25hbExldHRlcihbbmV3IE1lZGlhbEUoKV0pO1xuY29uc3QgcGxFUiA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBNZWRpYWxFUigpXSk7XG5jb25zdCBwbEYgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRnJlZVRvbmFsRigpLCBuZXcgQ2hlY2tlZFRvbmFsRigpXSk7XG5jb25zdCBwbEcgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgSW5pdGlhbEcoKSwgbmV3IEZpbmFsRygpXSk7XG5jb25zdCBwbEdHID0gcG9zaXRpb25hbExldHRlcihbbmV3IEZpbmFsR0coKV0pO1xuY29uc3QgcGxIID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxIKCksIG5ldyBGaW5hbEgoKV0pO1xuY29uc3QgcGxISCA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGaW5hbEhIKCldKTtcbmNvbnN0IHBsSSA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBNZWRpYWxJKCldKTtcbmNvbnN0IHBsSVIgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgTWVkaWFsSVIoKV0pO1xuY29uc3QgcGxKID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxKKCksIG5ldyBGaW5hbEooKV0pO1xuY29uc3QgcGxLID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxLKCksIG5ldyBGaW5hbEsoKV0pO1xuY29uc3QgcGxLSyA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGaW5hbEtLKCldKTtcbmNvbnN0IHBsTCA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBJbml0aWFsTCgpLCBuZXcgRmluYWxMKCldKTtcbmNvbnN0IHBsTEwgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRmluYWxMTCgpXSk7XG5jb25zdCBwbE0gPSBwb3NpdGlvbmFsTGV0dGVyKFtcbiAgICBuZXcgSW5pdGlhbE0oKSxcbiAgICBuZXcgTWF0ZXJMZWN0aW9uaXNNKCksXG4gICAgbmV3IEZpbmFsTSgpLFxuXSk7XG5jb25zdCBwbE4gPSBwb3NpdGlvbmFsTGV0dGVyKFtcbiAgICBuZXcgSW5pdGlhbE4oKSxcbiAgICBuZXcgTWF0ZXJMZWN0aW9uaXNOKCksXG4gICAgbmV3IEZpbmFsTigpLFxuXSk7XG5jb25zdCBwbE5OID0gcG9zaXRpb25hbExldHRlcihbbmV3IE5hc2FsaXphdGlvbk5OKCldKTtcbmNvbnN0IHBsTkcgPSBwb3NpdGlvbmFsTGV0dGVyKFtcbiAgICBuZXcgSW5pdGlhbE5HKCksXG4gICAgbmV3IE1hdGVyTGVjdGlvbmlzTkcoKSxcbiAgICBuZXcgRmluYWxORygpLFxuXSk7XG5jb25zdCBwbE8gPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgTWVkaWFsTygpXSk7XG5jb25zdCBwbE9SID0gcG9zaXRpb25hbExldHRlcihbbmV3IE1lZGlhbE9SKCldKTtcbmNvbnN0IHBsUCA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBJbml0aWFsUCgpLCBuZXcgRmluYWxQKCldKTtcbmNvbnN0IHBsUFAgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRmluYWxQUCgpXSk7XG5jb25zdCBwbFEgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgSW5pdGlhbFEoKV0pO1xuY29uc3QgcGxTID0gcG9zaXRpb25hbExldHRlcihbbmV3IEluaXRpYWxTKCksIG5ldyBGaW5hbFMoKV0pO1xuY29uc3QgcGxTUyA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGaW5hbFNTKCldKTtcbmNvbnN0IHBsVCA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBJbml0aWFsVCgpLCBuZXcgRmluYWxUKCldKTtcbmNvbnN0IHBsVFQgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRmluYWxUVCgpXSk7XG5jb25zdCBwbFUgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgTWVkaWFsVSgpXSk7XG5jb25zdCBwbFVSID0gcG9zaXRpb25hbExldHRlcihbbmV3IE1lZGlhbFVSKCldKTtcbmNvbnN0IHBsViA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBJbml0aWFsVigpXSk7XG5jb25zdCBwbFcgPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRnJlZVRvbmFsVygpLCBuZXcgQ2hlY2tlZFRvbmFsVygpXSk7XG5jb25zdCBwbFggPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRnJlZVRvbmFsWCgpLCBuZXcgQ2hlY2tlZFRvbmFsWCgpXSk7XG5jb25zdCBwbFhYID0gcG9zaXRpb25hbExldHRlcihbbmV3IEZyZWVUb25hbFhYKCldKTtcbmNvbnN0IHBsWSA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGcmVlVG9uYWxZKCksIG5ldyBDaGVja2VkVG9uYWxZKCldKTtcbmNvbnN0IHBsWiA9IHBvc2l0aW9uYWxMZXR0ZXIoW25ldyBGcmVlVG9uYWxaKCldKTtcbmNvbnN0IHBsWlggPSBwb3NpdGlvbmFsTGV0dGVyKFtuZXcgRnJlZVRvbmFsWlgoKV0pO1xuZXhwb3J0cy50b25hbFBvc2l0aW9uYWxMZXR0ZXJzID0gbmV3IE1hcCgpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuYSwgcGxBKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmIsIHBsQilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5iYiwgcGxCQilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5jLCBwbEMpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuY2gsIHBsQ0gpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZCwgcGxEKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmUsIHBsRSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5lciwgcGxFUilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5mLCBwbEYpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZywgcGxHKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmdnLCBwbEdHKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmgsIHBsSClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oaCwgcGxISClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5pLCBwbEkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaXIsIHBsSVIpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaiwgcGxKKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmssIHBsSylcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5raywgcGxLSylcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5sLCBwbEwpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MubGwsIHBsTEwpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MubSwgcGxNKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLm4sIHBsTilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5ubiwgcGxOTilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5uZywgcGxORylcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5vLCBwbE8pXG4gICAgLnNldChUb25hbExldHRlclRhZ3Mub3IsIHBsT1IpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MucCwgcGxQKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnBwLCBwbFBQKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnEsIHBsUSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5zLCBwbFMpXG4gICAgLnNldChUb25hbExldHRlclRhZ3Muc3MsIHBsU1MpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MudCwgcGxUKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnR0LCBwbFRUKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnUsIHBsVSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy51ciwgcGxVUilcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy52LCBwbFYpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MudywgcGxXKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLngsIHBsWClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy54eCwgcGxYWClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy55LCBwbFkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueiwgcGxaKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnp4LCBwbFpYKTtcbmNsYXNzIFplcm9BbGxvbW9ycGggZXh0ZW5kcyBGcmVlQWxsb21vcnBoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50b25hbCA9IG5ldyBaZXJvVG9uYWwoKTtcbiAgICB9XG59XG5leHBvcnRzLlplcm9BbGxvbW9ycGggPSBaZXJvQWxsb21vcnBoO1xuY2xhc3MgQWxsb21vcnBoRiBleHRlbmRzIEZyZWVBbGxvbW9ycGgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnRvbmFsID0gbmV3IEZyZWVUb25hbEYoKTtcbiAgICB9XG59XG5jbGFzcyBBbGxvbW9ycGhaIGV4dGVuZHMgRnJlZUFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgRnJlZVRvbmFsWigpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoWiA9IEFsbG9tb3JwaFo7XG5jbGFzcyBBbGxvbW9ycGhZIGV4dGVuZHMgRnJlZUFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgRnJlZVRvbmFsWSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoWSA9IEFsbG9tb3JwaFk7XG5jbGFzcyBBbGxvbW9ycGhXIGV4dGVuZHMgRnJlZUFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgRnJlZVRvbmFsVygpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoVyA9IEFsbG9tb3JwaFc7XG5jbGFzcyBBbGxvbW9ycGhYIGV4dGVuZHMgRnJlZUFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgRnJlZVRvbmFsWCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoWCA9IEFsbG9tb3JwaFg7XG5jbGFzcyBBbGxvbW9ycGhYWCBleHRlbmRzIEZyZWVBbGxvbW9ycGgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnRvbmFsID0gbmV3IEZyZWVUb25hbFhYKCk7XG4gICAgfVxufVxuY2xhc3MgQWxsb21vcnBoWlggZXh0ZW5kcyBGcmVlQWxsb21vcnBoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50b25hbCA9IG5ldyBGcmVlVG9uYWxaWCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuZnJlZUFsbG9tb3JwaHMgPSBuZXcgTWFwKClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5mLCBuZXcgQWxsb21vcnBoRigpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLncsIG5ldyBBbGxvbW9ycGhXKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueHgsIG5ldyBBbGxvbW9ycGhYWCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnosIG5ldyBBbGxvbW9ycGhaKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuengsIG5ldyBBbGxvbW9ycGhaWCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnksIG5ldyBBbGxvbW9ycGhZKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueCwgbmV3IEFsbG9tb3JwaFgoKSk7XG5jbGFzcyBBbGxvbW9ycGhQIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxQKCk7XG4gICAgfVxufVxuY2xhc3MgQWxsb21vcnBoVCBleHRlbmRzIENoZWNrZWRBbGxvbW9ycGgge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmZpbmFsID0gbmV3IEZpbmFsVCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEsgZXh0ZW5kcyBDaGVja2VkQWxsb21vcnBoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5maW5hbCA9IG5ldyBGaW5hbEsoKTtcbiAgICB9XG59XG5jbGFzcyBBbGxvbW9ycGhIIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxIKCk7XG4gICAgfVxufVxuZXhwb3J0cy5BbGxvbW9ycGhIID0gQWxsb21vcnBoSDtcbmNsYXNzIEFsbG9tb3JwaFBQIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxQUCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFRUIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxUVCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEtLIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxLSygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEhIIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxISCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFBGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxQKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFBXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxQKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFRGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxUKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEtGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxLKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEhGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxIKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEhZIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxIKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWxsb21vcnBoSFkgPSBBbGxvbW9ycGhIWTtcbmNsYXNzIEFsbG9tb3JwaEhXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxIKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFRXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxUKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEtXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxLKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFBYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxQKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFRYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxUKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEtYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxLKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEhYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxIKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEJGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxCKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEdGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxHKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEpGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxKKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaExGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxMKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFNGIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxTKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsRigpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEJXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxCKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEdXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxHKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaExXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxMKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaFNXIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxTKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsVygpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEJYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxCKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaEdYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxHKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmNsYXNzIEFsbG9tb3JwaExYIGV4dGVuZHMgQ2hlY2tlZEFsbG9tb3JwaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZmluYWwgPSBuZXcgRmluYWxMKCk7XG4gICAgICAgIHRoaXMudG9uYWwgPSBuZXcgQ2hlY2tlZFRvbmFsWCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2hlY2tlZEFsbG9tb3JwaHMgPSBuZXcgTWFwKClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5wLCBuZXcgQWxsb21vcnBoUCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnQsIG5ldyBBbGxvbW9ycGhUKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaywgbmV3IEFsbG9tb3JwaEsoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oLCBuZXcgQWxsb21vcnBoSCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnBwLCBuZXcgQWxsb21vcnBoUFAoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy50dCwgbmV3IEFsbG9tb3JwaFRUKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3Mua2ssIG5ldyBBbGxvbW9ycGhLSygpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmhoLCBuZXcgQWxsb21vcnBoSEgoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5wICsgVG9uYWxMZXR0ZXJUYWdzLmYsIG5ldyBBbGxvbW9ycGhQRigpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnQgKyBUb25hbExldHRlclRhZ3MuZiwgbmV3IEFsbG9tb3JwaFRGKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuayArIFRvbmFsTGV0dGVyVGFncy5mLCBuZXcgQWxsb21vcnBoS0YoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oICsgVG9uYWxMZXR0ZXJUYWdzLmYsIG5ldyBBbGxvbW9ycGhIRigpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmIgKyBUb25hbExldHRlclRhZ3MuZiwgbmV3IEFsbG9tb3JwaEJGKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZyArIFRvbmFsTGV0dGVyVGFncy5mLCBuZXcgQWxsb21vcnBoR0YoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5qICsgVG9uYWxMZXR0ZXJUYWdzLmYsIG5ldyBBbGxvbW9ycGhKRigpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmwgKyBUb25hbExldHRlclRhZ3MuZiwgbmV3IEFsbG9tb3JwaExGKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MucyArIFRvbmFsTGV0dGVyVGFncy5mLCBuZXcgQWxsb21vcnBoU0YoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oICsgVG9uYWxMZXR0ZXJUYWdzLnksIG5ldyBBbGxvbW9ycGhIWSgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnAgKyBUb25hbExldHRlclRhZ3MudywgbmV3IEFsbG9tb3JwaFBXKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MudCArIFRvbmFsTGV0dGVyVGFncy53LCBuZXcgQWxsb21vcnBoVFcoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5rICsgVG9uYWxMZXR0ZXJUYWdzLncsIG5ldyBBbGxvbW9ycGhLVygpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmggKyBUb25hbExldHRlclRhZ3MudywgbmV3IEFsbG9tb3JwaEhXKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuYiArIFRvbmFsTGV0dGVyVGFncy53LCBuZXcgQWxsb21vcnBoQlcoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5nICsgVG9uYWxMZXR0ZXJUYWdzLncsIG5ldyBBbGxvbW9ycGhHVygpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmwgKyBUb25hbExldHRlclRhZ3MudywgbmV3IEFsbG9tb3JwaExXKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MucyArIFRvbmFsTGV0dGVyVGFncy53LCBuZXcgQWxsb21vcnBoU1coKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5wICsgVG9uYWxMZXR0ZXJUYWdzLngsIG5ldyBBbGxvbW9ycGhQWCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnQgKyBUb25hbExldHRlclRhZ3MueCwgbmV3IEFsbG9tb3JwaFRYKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuayArIFRvbmFsTGV0dGVyVGFncy54LCBuZXcgQWxsb21vcnBoS1goKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oICsgVG9uYWxMZXR0ZXJUYWdzLngsIG5ldyBBbGxvbW9ycGhIWCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmIgKyBUb25hbExldHRlclRhZ3MueCwgbmV3IEFsbG9tb3JwaEJYKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZyArIFRvbmFsTGV0dGVyVGFncy54LCBuZXcgQWxsb21vcnBoR1goKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5sICsgVG9uYWxMZXR0ZXJUYWdzLngsIG5ldyBBbGxvbW9ycGhMWCgpKTtcbmV4cG9ydHMuY29tYmluZWRGcmVlQWxsb21vcnBocyA9IG5ldyBNYXAoKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLncsIG5ldyBBbGxvbW9ycGhXKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueiwgbmV3IEFsbG9tb3JwaFooKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy54LCBuZXcgQWxsb21vcnBoWCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnksIG5ldyBBbGxvbW9ycGhZKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZiwgbmV3IEFsbG9tb3JwaEYoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy54eCwgbmV3IEFsbG9tb3JwaFhYKCkpO1xuZXhwb3J0cy51bmNvbWJpbmVkQ2hlY2tlZEFsbG9tb3JwaHMgPSBuZXcgTWFwKClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5wLCBuZXcgQWxsb21vcnBoUCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnQsIG5ldyBBbGxvbW9ycGhUKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaywgbmV3IEFsbG9tb3JwaEsoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oLCBuZXcgQWxsb21vcnBoSCgpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnBwLCBuZXcgQWxsb21vcnBoUFAoKSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy50dCwgbmV3IEFsbG9tb3JwaFRUKCkpXG4gICAgLnNldChUb25hbExldHRlclRhZ3Mua2ssIG5ldyBBbGxvbW9ycGhLSygpKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmhoLCBuZXcgQWxsb21vcnBoSEgoKSk7XG5leHBvcnRzLmNvbWJpbmVkQ2hlY2tlZEFsbG9tb3JwaHMgPSBuZXcgTWFwKClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5wICsgVG9uYWxMZXR0ZXJUYWdzLmYsIFtuZXcgQWxsb21vcnBoUEYoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MucCArIFRvbmFsTGV0dGVyVGFncy53LCBbbmV3IEFsbG9tb3JwaFBXKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnAgKyBUb25hbExldHRlclRhZ3MueCwgW25ldyBBbGxvbW9ycGhQWCgpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy50ICsgVG9uYWxMZXR0ZXJUYWdzLmYsIFtuZXcgQWxsb21vcnBoVEYoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MudCArIFRvbmFsTGV0dGVyVGFncy53LCBbbmV3IEFsbG9tb3JwaFRXKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnQgKyBUb25hbExldHRlclRhZ3MueCwgW25ldyBBbGxvbW9ycGhUWCgpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5rICsgVG9uYWxMZXR0ZXJUYWdzLmYsIFtuZXcgQWxsb21vcnBoS0YoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuayArIFRvbmFsTGV0dGVyVGFncy53LCBbbmV3IEFsbG9tb3JwaEtXKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmsgKyBUb25hbExldHRlclRhZ3MueCwgW25ldyBBbGxvbW9ycGhLWCgpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oICsgVG9uYWxMZXR0ZXJUYWdzLmYsIFtuZXcgQWxsb21vcnBoSEYoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaCArIFRvbmFsTGV0dGVyVGFncy55LCBbbmV3IEFsbG9tb3JwaEhZKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmggKyBUb25hbExldHRlclRhZ3MudywgW25ldyBBbGxvbW9ycGhIVygpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5oICsgVG9uYWxMZXR0ZXJUYWdzLngsIFtuZXcgQWxsb21vcnBoSFgoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuYiArIFRvbmFsTGV0dGVyVGFncy5mLCBbbmV3IEFsbG9tb3JwaEJGKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmIgKyBUb25hbExldHRlclRhZ3MudywgW25ldyBBbGxvbW9ycGhCVygpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5iICsgVG9uYWxMZXR0ZXJUYWdzLngsIFtuZXcgQWxsb21vcnBoQlgoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuZyArIFRvbmFsTGV0dGVyVGFncy5mLCBbbmV3IEFsbG9tb3JwaEdGKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmcgKyBUb25hbExldHRlclRhZ3MudywgW25ldyBBbGxvbW9ycGhHVygpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5nICsgVG9uYWxMZXR0ZXJUYWdzLngsIFtuZXcgQWxsb21vcnBoR1goKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuaiArIFRvbmFsTGV0dGVyVGFncy5mLCBbbmV3IEFsbG9tb3JwaEpGKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmwgKyBUb25hbExldHRlclRhZ3MuZiwgW25ldyBBbGxvbW9ycGhMRigpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5sICsgVG9uYWxMZXR0ZXJUYWdzLncsIFtuZXcgQWxsb21vcnBoTFcoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MubCArIFRvbmFsTGV0dGVyVGFncy54LCBbbmV3IEFsbG9tb3JwaExYKCldKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnMgKyBUb25hbExldHRlclRhZ3MuZiwgW25ldyBBbGxvbW9ycGhTRigpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5zICsgVG9uYWxMZXR0ZXJUYWdzLncsIFtuZXcgQWxsb21vcnBoU1coKV0pO1xuZXhwb3J0cy5mcmVlQWxsb21vcnBoVW5jb21iaW5pbmdSdWxlcyA9IG5ldyBNYXAoKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLmYsIFtuZXcgRnJlZVRvbmFsWSgpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy53LCBbbmV3IEZyZWVUb25hbFooKSwgbmV3IEZyZWVUb25hbFgoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueHgsIFtcbiAgICBuZXcgRnJlZVRvbmFsWigpLFxuICAgIG5ldyBGcmVlVG9uYWxGKCksXG4gICAgbmV3IEZyZWVUb25hbFgoKSxcbl0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueiwgW25ldyBGcmVlVG9uYWxYKCksIG5ldyBGcmVlVG9uYWxGKCksIG5ldyBaZXJvVG9uYWwoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MuengsIFtdKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLngsIFtdKVxuICAgIC5zZXQoVG9uYWxMZXR0ZXJUYWdzLnksIFtuZXcgRnJlZVRvbmFsVygpXSlcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy56ZXJvLCBbbmV3IEZyZWVUb25hbFkoKV0pO1xuZXhwb3J0cy51bmNvbWJpbmluZ1J1bGVzQXkgPSBuZXcgTWFwKClcbiAgICAuc2V0KFRvbmFsTGV0dGVyVGFncy5mLCBbbmV3IEZyZWVUb25hbFkoKSwgbmV3IEZyZWVUb25hbFcoKV0pXG4gICAgLnNldChUb25hbExldHRlclRhZ3MueCwgW1xuICAgIG5ldyBaZXJvVG9uYWwoKSxcbiAgICBuZXcgRnJlZVRvbmFsWCgpLFxuICAgIG5ldyBGcmVlVG9uYWxaKCksXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24yLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/tonal/version2.js\n");

/***/ }),

/***/ "./node_modules/taipa/lib/unit.js":
/*!****************************************!*\
  !*** ./node_modules/taipa/lib/unit.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Phrase = exports.Phraseme = exports.ToneGroup = exports.LexemeMaker = exports.Word = exports.Lexeme = exports.MorphemeMaker = exports.Syllable = exports.Morpheme = exports.MatchedPattern = exports.PositionalLetterGeneration = exports.sgPipe = exports.letterSequence = exports.PositionalLetter = exports.GraphemeMaker = exports.Letters = exports.MatchedSequence = exports.AlphabeticLetter = exports.Letter = exports.AlphabeticGrapheme = exports.Grapheme = exports.characters = exports.Character = void 0;\nclass Character {\n    constructor(s) {\n        this.character = s;\n    }\n}\nexports.Character = Character;\nclass Characters {\n    constructor() {\n        this.carr = [\n            'a',\n            'b',\n            'c',\n            'd',\n            'e',\n            'f',\n            'g',\n            'h',\n            'i',\n            'j',\n            'k',\n            'l',\n            'm',\n            'n',\n            'o',\n            'p',\n            'q',\n            'r',\n            's',\n            't',\n            'u',\n            'v',\n            'w',\n            'x',\n            'y',\n            'z',\n        ];\n        this.o = new Map();\n        for (let e of this.carr) {\n            this.assign(e);\n        }\n    }\n    assign(e) {\n        this.o.set(e, new Character(e));\n    }\n    get(key) {\n        let value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new Character('');\n    }\n    get size() {\n        return this.o.size;\n    }\n}\nexports.characters = new Characters();\nclass Grapheme {\n}\nexports.Grapheme = Grapheme;\nclass AlphabeticGrapheme extends Grapheme {\n    constructor(letter) {\n        super();\n        this.letter = letter;\n    }\n}\nexports.AlphabeticGrapheme = AlphabeticGrapheme;\n/** Letter is a subword unit. */\nclass Letter {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Letter = Letter;\nclass AlphabeticLetter extends Letter {\n    constructor(characters) {\n        super();\n        this.characters = new Array();\n        if (characters) {\n            this.characters = characters;\n            this.concat();\n        }\n    }\n    pushCharacter(c) {\n        this.characters.push(c);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.characters.map(x => (x ? x.character : '')).join('');\n    }\n}\nexports.AlphabeticLetter = AlphabeticLetter;\nclass MatchedSequence {\n    constructor() {\n        this.characters = new Array();\n    }\n    get matchedLength() {\n        return this.characters.length;\n    }\n    toString() {\n        let str = '';\n        for (let i in this.characters) {\n            str += this.characters[i].character;\n        }\n        return str;\n    }\n}\nexports.MatchedSequence = MatchedSequence;\nclass Letters {\n    constructor(larr) {\n        this.o = new Map();\n        this.arr = larr;\n        for (let i = 0; i < this.arr.length; i++) {\n            this.assign(this.arr[i]);\n        }\n    }\n    assign(e) {\n        let carr = [];\n        for (let i = 0; i < e.length; i++) {\n            let c = exports.characters.get(e[i]);\n            if (c) {\n                carr.push(c);\n            }\n        }\n        this.o.set(e, new AlphabeticLetter(carr));\n    }\n    handleN(characters, beginOfLetter, listLength) {\n        return new MatchedSequence();\n    }\n    get(key) {\n        let value = this.o.get(key);\n        if (value) {\n            return value;\n        }\n        return new AlphabeticLetter([]);\n    }\n    get size() {\n        return this.o.size;\n    }\n    get values() {\n        return this.o.values();\n    }\n}\nexports.Letters = Letters;\n/** Turn a string into graphemes. */\nclass GraphemeMaker {\n    constructor(lowerLetters) {\n        this.lowerLetters = lowerLetters;\n        this.listOfLetters = new Array();\n        this.listOfLetters = Array.from(lowerLetters.values);\n    }\n    makeGraphemes(str) {\n        const characters = new Array();\n        if (str) {\n            for (let i = 0; i < str.length; i++) {\n                if (str.charAt(i) != '\\0') {\n                    characters.push(new Character(str.charAt(i)));\n                }\n            }\n        }\n        const graphemes = this.make(characters);\n        return graphemes;\n    }\n    getMatchedSequence(characters, beginOfLetter, candidates) {\n        let ms = new MatchedSequence();\n        let matchedLen = 0;\n        //console.log(characters)\n        if (characters[beginOfLetter].character === 'n') {\n            // ms = this.handler.handleN(\n            ms = this.lowerLetters.handleN(characters, beginOfLetter, this.listOfLetters.length);\n            if (ms.matchedLength > 0)\n                return ms;\n        }\n        for (let j in candidates) {\n            let min = Math.min(characters.length - beginOfLetter, candidates[j].literal.length);\n            if (candidates[j].literal.length == min) {\n                for (let k = 0; k < min; k++) {\n                    if (characters[beginOfLetter + k].character === candidates[j].literal[k]) {\n                        if (k + 1 == min && min > matchedLen) {\n                            // to make sure it is longer than previous patterns\n                            // last letter matched for the pattern\n                            matchedLen = min;\n                            // copy the matched letters\n                            for (let q = 0; q < matchedLen; q++) {\n                                ms.characters[q] = characters[beginOfLetter + q];\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        return ms;\n    }\n    make(characters) {\n        let graphemes = new Array();\n        let beginOfLetter = 0;\n        let letters = new Array();\n        for (let i = 0; i < characters.length; i++) {\n            // console.log('examining character: %s. length of characters: %d', characters[i].character, characters.length);\n            //console.log(\"metadata letter array looping.\");\n            if (i - beginOfLetter == 0) {\n                //console.log(\"matchedLen: %d\", ms.matchedLength);\n                // let candidates = this.list.filter(\n                let candidates = this.listOfLetters.filter(l => l.characters[0].character === characters[i].character);\n                let ms = this.getMatchedSequence(characters, beginOfLetter, candidates);\n                if (ms.matchedLength > 0) {\n                    for (let key in candidates) {\n                        // console.log(candidates[key].literal + ' - ' + ms.toString());\n                        if (candidates[key].literal ===\n                            new AlphabeticLetter(ms.characters).literal) {\n                            letters.push(candidates[key]);\n                        }\n                    }\n                }\n            }\n            if (letters.length == 0) {\n                for (let j in characters) {\n                    //console.log(characters[j].character)\n                }\n                // 'length of letters is zero'\n            }\n            else if (letters.length == 1) {\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d. ls[0]:\", i, ls[0].characters.length, ls[0])\n                //console.log(\"just one matched. i:%d. ls[0].characters.length:%d\", i, ls[0].characters.length);\n                if (i + 1 - beginOfLetter == letters[0].characters.length) {\n                    // when index i plus one equals the length of the matched syllable\n                    let l = letters.shift();\n                    if (l) {\n                        beginOfLetter += l.characters.length;\n                        // pack letters into graphemes\n                        let gr = new AlphabeticGrapheme(l);\n                        graphemes.push(gr);\n                    }\n                }\n            }\n        }\n        //console.log(\"metadata letter array length %d\", letters.length);\n        return graphemes;\n    }\n}\nexports.GraphemeMaker = GraphemeMaker;\nclass PositionalLetter {\n    constructor() {\n        this.name = '';\n        // an array of character objects. can be used to make a word object.\n        this.characters = new Array();\n    }\n    // we still need a method for combinning characters from each character objects.\n    // this is different from an array of character objects. it is a string.\n    toString() {\n        let l = '';\n        // there is no characters for 1st tone\n        if (this.characters != null) {\n            // when it is not 1st tone\n            for (let k in this.characters) {\n                l += this.characters[k].character;\n            }\n        }\n        return l;\n    }\n    makeCharacters(str) {\n        let arr = new Array();\n        for (let i = 0; i < str.length; i++) {\n            arr.push(new Character(str[i]));\n        }\n        return arr;\n    }\n}\nexports.PositionalLetter = PositionalLetter;\nexports.letterSequence = function (letters) {\n    return {\n        letters: letters,\n        includes(str) {\n            for (let i in this.letters) {\n                if (str && this.letters[i] && str === this.letters[i].toString())\n                    return true;\n            }\n            return false;\n        },\n    };\n};\n// spelling generation\nexports.sgPipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n/** Positional letter generation for syllable compositions. */\nclass PositionalLetterGeneration {\n    constructor() {\n        /** The letters to be matched. */\n        this.letters = [];\n        /** Matched letters accumulator. */\n        this.matchedLetters = new Array();\n        /** flag for syllable matching process. */\n        this.matching = true;\n        /** Will populate `predictions` when set to true. */\n        this.predictive = false;\n        /** Predicted positional letters */\n        this.predictions = new Array();\n        this.predictSandhiFinal = false;\n    }\n}\nexports.PositionalLetterGeneration = PositionalLetterGeneration;\nclass MatchedPattern {\n    constructor() {\n        this.letters = new Array();\n        this.pattern = new Array();\n    }\n    get matchedLength() {\n        return this.letters.length;\n    } // length of pattern can be optionally returned\n    get lastLetter() {\n        if (this.letters.length > 0)\n            return this.letters[this.letters.length - 1];\n        return new AlphabeticLetter([]);\n    }\n    get lastSecondLetter() {\n        if (this.letters.length > 1)\n            return this.letters[this.letters.length - 2];\n        return new AlphabeticLetter([]);\n    }\n}\nexports.MatchedPattern = MatchedPattern;\nclass Morpheme {\n}\nexports.Morpheme = Morpheme;\n/** Syllable is a subword unit. */\nclass Syllable {\n    constructor(letters) {\n        this.literal = '';\n        this.letters = new Array();\n        if (letters) {\n            this.letters = letters;\n            this.concat();\n        }\n    }\n    pushLetter(l) {\n        this.letters.push(l);\n        this.concat();\n    }\n    replaceLetter(i, l) {\n        this.letters.splice(i, 1, l);\n        this.concat();\n    }\n    insertLetter(i, l) {\n        this.letters.splice(i, 0, l);\n        this.concat();\n    }\n    concat() {\n        this.literal = this.letters.map(x => (x ? x.literal : '')).join('');\n    }\n}\nexports.Syllable = Syllable;\nclass MorphemeMaker {\n    make(letters, syllabify) {\n        let patterns = new Array();\n        let beginOfSyllable = 0;\n        for (let i = 0; i < letters.length; i++) {\n            let msp = new MatchedPattern();\n            if (i - beginOfSyllable == 0) {\n                msp = syllabify(letters, beginOfSyllable);\n                if (msp.matchedLength == 0) {\n                    //console.log('no matched syllables found. the syllable might need to be added')\n                }\n                // console.log('matchedLen: %d', msp.matchedLength);\n                // console.log(msp.pattern);\n                // console.log(msp.letters);\n                if (msp.letters.length > 0) {\n                    for (let j in msp.letters) {\n                        //console.log(\"msp.letters: %s\", msp.letters[j].literal)\n                    }\n                    patterns.push(msp);\n                }\n                beginOfSyllable += msp.matchedLength;\n            }\n            if (patterns.length == 0) {\n                //console.log('nothing matched')\n            }\n            else if (patterns.length >= 1) {\n                if (msp == undefined)\n                    break;\n                if (msp.matchedLength > 0) {\n                    i += beginOfSyllable - i - 1;\n                }\n            }\n        }\n        return patterns;\n    }\n}\nexports.MorphemeMaker = MorphemeMaker;\nclass Lexeme {\n}\nexports.Lexeme = Lexeme;\nclass Word {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Word = Word;\nclass LexemeMaker {\n}\nexports.LexemeMaker = LexemeMaker;\nclass ToneGroup {\n    constructor() {\n        this.inflectionalEndings = new Array();\n    }\n}\nexports.ToneGroup = ToneGroup;\nclass ToneSandhiGroup extends ToneGroup {\n}\nclass Phraseme {\n}\nexports.Phraseme = Phraseme;\nclass Phrase {\n    constructor() {\n        this.literal = '';\n    }\n}\nexports.Phrase = Phrase;\n//# sourceMappingURL=unit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/taipa/lib/unit.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzgyYjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ }),

/***/ "./pages/widgets.tsx":
/*!***************************!*\
  !*** ./pages/widgets.tsx ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! taipa */ \"./node_modules/taipa/lib/index.js\");\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(taipa__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _src_highlight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../src/highlight */ \"./src/highlight.ts\");\n/* harmony import */ var react_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-window */ \"./node_modules/react-window/dist/index.esm.js\");\n\n\nvar _jsxFileName = \"/Users/jslv/Projects/keyin/pages/widgets.tsx\",\n    _s = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\nvar wordsChang = [{\n  index: 0,\n  hanyjiz: '棕',\n  lurzmafjiz: 'chang'\n}, {\n  index: 1,\n  hanyjiz: '粽ハァ⤇',\n  lurzmafjiz: 'changy'\n}, {\n  index: 2,\n  hanyjiz: '粽',\n  lurzmafjiz: 'changw'\n}, {\n  index: 3,\n  hanyjiz: 'サ̅ㇰ',\n  lurzmafjiz: 'chak'\n}, {\n  index: 4,\n  hanyjiz: '欉',\n  lurzmafjiz: 'changx'\n}, {\n  index: 5,\n  hanyjiz: '棕簑',\n  lurzmafjiz: 'changz'\n}, {\n  index: 6,\n  hanyjiz: 'サ̅ㇰ⤇',\n  lurzmafjiz: 'chakk'\n}, {\n  index: 7,\n  hanyjiz: '昨昏',\n  lurzmafjiz: 'changxx'\n}];\nvar wordsItfditt = [{\n  index: 0,\n  hanyjiz: '一直',\n  lurzmafjiz: 'itfditt'\n}, {\n  index: 1,\n  hanyjiz: '',\n  lurzmafjiz: 'itfditw'\n}, {\n  index: 2,\n  hanyjiz: '',\n  lurzmafjiz: 'itfditf'\n}];\nvar wordsMizmix = [{\n  index: 0,\n  hanyjiz: '綿綿',\n  lurzmafjiz: 'mizmix'\n}, {\n  index: 1,\n  hanyjiz: '',\n  lurzmafjiz: 'mixxmix'\n}];\nvar sentence = ['hitf', 'chanz', 'daiwchiw', 'chinz', 'doaw', 'diaux'];\nvar currWord = 0;\nvar divStyle = {\n  // workaround: https://github.com/cssinjs/jss/issues/1344\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  // backgroundColor: 'papayawhip',\n  border: '1px solid silver',\n  // color: 'black',\n  fontFamily: 'IBM Plex Mono',\n  // fontSize: 24,\n  padding: '5px',\n  width: '170px',\n  color: 'black'\n};\nvar divStyleFont = {\n  fontFamily: 'IBM Plex Mono',\n  color: 'black'\n};\nvar divStyleTwoColumns = {\n  border: '1px solid silver',\n  fontFamily: 'IBM Plex Mono',\n  padding: '5px',\n  width: '365px',\n  color: 'black'\n};\nvar divStyleEightColumns = {\n  border: '1px solid silver',\n  fontFamily: 'IBM Plex Mono',\n  padding: '5px',\n  width: '1460px',\n  color: 'black'\n};\nvar divStyleHorizontal = {\n  display: 'flex',\n  flexDirection: 'row'\n};\nvar cellStyle = {\n  backgroundColor: 'papayawhip',\n  border: '1px dotted white',\n  columnWidth: 173,\n  rowHeight: 25\n};\n\nvar cellStyleTwoRows = function cellStyleTwoRows(rowIndex, style) {\n  if (rowIndex % 2 == 0) return Object.assign({\n    border: cellStyle.border,\n    backgroundColor: 'mistyrose'\n  }, style);\n  return Object.assign({\n    border: cellStyle.border,\n    textAlign: 'right',\n    fontWeight: 100\n  }, style);\n};\n\nvar cellStyleFiveRows = function cellStyleFiveRows(rowIndex, style) {\n  if (rowIndex == 3) return Object.assign({\n    border: cellStyle.border,\n    backgroundColor: 'mistyrose'\n  }, style);else if (rowIndex == 0 || rowIndex == 1 || rowIndex == 2) return Object.assign({\n    border: cellStyle.border,\n    backgroundColor: 'papayawhip'\n  }, style);\n  return Object.assign({\n    border: cellStyle.border,\n    textAlign: 'right',\n    fontWeight: 100\n  }, style);\n};\n\nvar gridStyle1x2 = {\n  columnCount: 1,\n  rowCount: 2,\n  height: cellStyle.rowHeight * 2 + 2,\n  width: cellStyle.columnWidth + 2\n};\nvar gridStyle1x5 = {\n  columnCount: 1,\n  rowCount: 5,\n  height: cellStyle.rowHeight * 5 + 15,\n  width: cellStyle.columnWidth + 8\n};\nvar inputStyle = {\n  fontFamily: 'IBM Plex Mono',\n  fontSize: '16px',\n  maxWidth: '140px'\n};\n\nfunction WidgetsPage() {\n  _s();\n\n  var _this = this;\n\n  var _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useReducer\"])(function (state, newState) {\n    return _objectSpread(_objectSpread({}, state), newState);\n  }, {\n    inputZero: '',\n    inputOne: '',\n    inputTwo: '',\n    inputThree: '',\n    inputFour: '',\n    inputFive: '',\n    inputSix: '',\n    inputSeven: '',\n    inputTen: '',\n    inputEleven: '',\n    inputTwelve: '',\n    inputTwenty: '',\n    inputTwentyOne: ''\n  }),\n      input = _useReducer[0],\n      setInput = _useReducer[1];\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(''),\n      inputThirty = _useState[0],\n      setInputThirty = _useState[1];\n\n  var handleChangeChang = function handleChangeChang(e) {\n    var name = e.target.name;\n    var value = e.target.value;\n    setInput(Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, name, value)); // e.target.focus();\n  };\n\n  var handleChangeItfditt = function handleChangeItfditt(e) {\n    var name = e.target.name;\n    var value = e.target.value;\n    setInput(Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, name, value));\n  };\n\n  var handleChangeMizmix = function handleChangeMizmix(e) {\n    var name = e.target.name;\n    var value = e.target.value;\n    setInput(Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, name, value));\n  };\n\n  var handleChangeSentence = function handleChangeSentence(e) {\n    setInputThirty(e.target.value);\n  };\n\n  var cli = new taipa__WEBPACK_IMPORTED_MODULE_2__[\"Client\"]();\n  var hltChang = new _src_highlight__WEBPACK_IMPORTED_MODULE_3__[\"Highlighter\"](wordsChang);\n  var hltChangZero = hltChang.getTarget(input.inputZero, wordsChang[0].index);\n  var hltChangOne = hltChang.getTarget(input.inputOne, wordsChang[1].index);\n  var hltChangTwo = hltChang.getTarget(input.inputTwo, wordsChang[2].index);\n  var hltChangThree = hltChang.getTarget(input.inputThree, wordsChang[3].index);\n  var hltChangFour = hltChang.getTarget(input.inputFour, wordsChang[4].index);\n  var hltChangFive = hltChang.getTarget(input.inputFive, wordsChang[5].index);\n  var hltChangSix = hltChang.getTarget(input.inputSix, wordsChang[6].index);\n  var hltChangSeven = hltChang.getTarget(input.inputSeven, wordsChang[7].index);\n  var hltItfditt = new _src_highlight__WEBPACK_IMPORTED_MODULE_3__[\"Highlighter\"](wordsItfditt);\n  var hltItfdittTen = hltItfditt.getTarget(input.inputTen, wordsItfditt[0].index);\n  var hltItfdittEleven = hltItfditt.getTarget(input.inputEleven, wordsItfditt[1].index);\n  var hltItfdittTwelve = hltItfditt.getTarget(input.inputTwelve, wordsItfditt[2].index);\n  var hltMizmix = new _src_highlight__WEBPACK_IMPORTED_MODULE_3__[\"Highlighter\"](wordsMizmix);\n  var hltMizmixTwenty = hltMizmix.getTarget(input.inputTwenty, wordsMizmix[0].index);\n  var hltMizmixTwentyOne = hltMizmix.getTarget(input.inputTwentyOne, wordsMizmix[1].index);\n  var entries = [];\n\n  for (var i = 0; i < sentence.length; i++) {\n    entries.push({\n      index: i,\n      hanyjiz: '',\n      lurzmafjiz: sentence[i]\n    });\n  }\n\n  var hltSentence = new _src_highlight__WEBPACK_IMPORTED_MODULE_3__[\"Highlighter\"](entries);\n  var hltSentenceThirty = new _src_highlight__WEBPACK_IMPORTED_MODULE_3__[\"Highlight\"]();\n  hltSentenceThirty = hltSentence.getTarget(inputThirty ? inputThirty : '', currWord);\n\n  if (hltSentenceThirty.tail.length == 0 && inputThirty && inputThirty === sentence[currWord]) {\n    currWord + 1 < sentence.length ? currWord++ : currWord = 0;\n    setInputThirty('');\n  }\n\n  var CellChang = function CellChang(_ref) {\n    var columnIndex = _ref.columnIndex,\n        rowIndex = _ref.rowIndex,\n        style = _ref.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, wordsChang[0].hanyjiz) : rowIndex == 1 ? wordsChang[0].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[0].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, hltChangZero.target), hltChangZero.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }\n    }, hltChangZero.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChang = function GridChang() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChang\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 5\n      }\n    }, CellChang);\n  };\n\n  var CellChangy = function CellChangy(_ref2) {\n    var columnIndex = _ref2.columnIndex,\n        rowIndex = _ref2.rowIndex,\n        style = _ref2.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }\n    }, wordsChang[1].hanyjiz) : rowIndex == 1 ? wordsChang[1].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[1].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }\n    }, hltChangOne.target), hltChangOne.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }\n    }, hltChangOne.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChangy = function GridChangy() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChangy\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 5\n      }\n    }, CellChangy);\n  };\n\n  var CellChangw = function CellChangw(_ref3) {\n    var columnIndex = _ref3.columnIndex,\n        rowIndex = _ref3.rowIndex,\n        style = _ref3.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }, wordsChang[2].hanyjiz) : rowIndex == 1 ? wordsChang[2].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[2].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, hltChangTwo.target), hltChangTwo.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }\n    }, hltChangTwo.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChangw = function GridChangw() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChangw\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 5\n      }\n    }, CellChangw);\n  };\n\n  var CellChak = function CellChak(_ref4) {\n    var columnIndex = _ref4.columnIndex,\n        rowIndex = _ref4.rowIndex,\n        style = _ref4.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }\n    }, wordsChang[3].hanyjiz) : rowIndex == 1 ? wordsChang[3].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[3].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }\n    }, hltChangThree.target), hltChangThree.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }\n    }, hltChangThree.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChak = function GridChak() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChak\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 5\n      }\n    }, CellChak);\n  };\n\n  var CellChangx = function CellChangx(_ref5) {\n    var columnIndex = _ref5.columnIndex,\n        rowIndex = _ref5.rowIndex,\n        style = _ref5.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }\n    }, wordsChang[4].hanyjiz) : rowIndex == 1 ? wordsChang[4].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[4].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }\n    }, hltChangFour.target), hltChangFour.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }\n    }, hltChangFour.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChangx = function GridChangx() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChangx\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 5\n      }\n    }, CellChangx);\n  };\n\n  var CellChangz = function CellChangz(_ref6) {\n    var columnIndex = _ref6.columnIndex,\n        rowIndex = _ref6.rowIndex,\n        style = _ref6.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }\n    }, wordsChang[5].hanyjiz) : rowIndex == 1 ? wordsChang[5].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[5].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }\n    }, hltChangFive.target), hltChangFive.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }\n    }, hltChangFive.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChangz = function GridChangz() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChangz\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 5\n      }\n    }, CellChangz);\n  };\n\n  var CellChakk = function CellChakk(_ref7) {\n    var columnIndex = _ref7.columnIndex,\n        rowIndex = _ref7.rowIndex,\n        style = _ref7.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }\n    }, wordsChang[6].hanyjiz) : rowIndex == 1 ? wordsChang[6].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[6].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }\n    }, hltChangSix.target), hltChangSix.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }\n    }, hltChangSix.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChakk = function GridChakk() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChakk\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 5\n      }\n    }, CellChakk);\n  };\n\n  var CellChangxx = function CellChangxx(_ref8) {\n    var columnIndex = _ref8.columnIndex,\n        rowIndex = _ref8.rowIndex,\n        style = _ref8.style;\n    return __jsx(\"div\", {\n      style: cellStyleFiveRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }\n    }, wordsChang[7].hanyjiz) : rowIndex == 1 ? wordsChang[7].lurzmafjiz : rowIndex == 2 ? cli.processTonal(wordsChang[7].lurzmafjiz).blockSequences.filter(function (it) {\n      return it.length > 0;\n    }).join(', ') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }\n    }, hltChangSeven.target), hltChangSeven.tail) : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }\n    }, hltChangSeven.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridChangxx = function GridChangxx() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridChangxx\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 5\n      }\n    }, CellChangxx);\n  };\n\n  var CellItfditt = function CellItfditt(_ref9) {\n    var columnIndex = _ref9.columnIndex,\n        rowIndex = _ref9.rowIndex,\n        style = _ref9.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 11\n      }\n    }, hltItfdittTen.target), hltItfdittTen.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }\n    }, hltItfdittTen.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridItfditt = function GridItfditt() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridItfditt\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 5\n      }\n    }, CellItfditt);\n  };\n\n  var CellItfditw = function CellItfditw(_ref10) {\n    var columnIndex = _ref10.columnIndex,\n        rowIndex = _ref10.rowIndex,\n        style = _ref10.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 11\n      }\n    }, hltItfdittEleven.target), hltItfdittEleven.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }\n    }, hltItfdittEleven.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridItfditw = function GridItfditw() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridItfditw\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 5\n      }\n    }, CellItfditw);\n  };\n\n  var CellItfditf = function CellItfditf(_ref11) {\n    var columnIndex = _ref11.columnIndex,\n        rowIndex = _ref11.rowIndex,\n        style = _ref11.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 11\n      }\n    }, hltItfdittTwelve.target), hltItfdittTwelve.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 9\n      }\n    }, hltItfdittTwelve.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridItfditf = function GridItfditf() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridItfditf\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 5\n      }\n    }, CellItfditf);\n  };\n\n  var CellMizmix = function CellMizmix(_ref12) {\n    var columnIndex = _ref12.columnIndex,\n        rowIndex = _ref12.rowIndex,\n        style = _ref12.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 11\n      }\n    }, hltMizmixTwenty.target), hltMizmixTwenty.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }\n    }, hltMizmixTwenty.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridMizmix = function GridMizmix() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridMizmix\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 5\n      }\n    }, CellMizmix);\n  };\n\n  var CellMixxmix = function CellMixxmix(_ref13) {\n    var columnIndex = _ref13.columnIndex,\n        rowIndex = _ref13.rowIndex,\n        style = _ref13.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 11\n      }\n    }, hltMizmixTwentyOne.target), hltMizmixTwentyOne.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 9\n      }\n    }, hltMizmixTwentyOne.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridMixxmix = function GridMixxmix() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridMixxmix\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 5\n      }\n    }, CellMixxmix);\n  };\n\n  var CellSentence = function CellSentence(_ref14) {\n    var columnIndex = _ref14.columnIndex,\n        rowIndex = _ref14.rowIndex,\n        style = _ref14.style;\n    return __jsx(\"div\", {\n      style: cellStyleTwoRows(rowIndex, style),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }\n    }, __jsx(\"text\", {\n      style: {\n        color: 'red'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 11\n      }\n    }, hltSentenceThirty.target), hltSentenceThirty.tail) : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 9\n      }\n    }, hltSentenceThirty.hint.text) : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridSentence = function GridSentence() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridSentence\",\n      columnCount: gridStyle1x2.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x2.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x2.height,\n      width: gridStyle1x2.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 5\n      }\n    }, CellSentence);\n  };\n\n  var CellDanzgiy = function CellDanzgiy(_ref15) {\n    var columnIndex = _ref15.columnIndex,\n        rowIndex = _ref15.rowIndex,\n        style = _ref15.style;\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 5\n      }\n    }, rowIndex == 0 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 9\n      }\n    }, '單語') : rowIndex == 1 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 9\n      }\n    }, 'danzgiy') : rowIndex == 2 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 9\n      }\n    }, 'タヌ⎸ギイ⎛') : rowIndex == 3 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }\n    }, 'danzguy') : rowIndex == 4 ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 9\n      }\n    }, 'タヌ⎸グウ⎛') : __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var GridDanzgiy = function GridDanzgiy() {\n    return __jsx(react_window__WEBPACK_IMPORTED_MODULE_4__[\"FixedSizeGrid\"], {\n      className: \"GridDanzgiy\",\n      columnCount: gridStyle1x5.columnCount,\n      columnWidth: cellStyle.columnWidth,\n      rowCount: gridStyle1x5.rowCount,\n      rowHeight: cellStyle.rowHeight,\n      height: gridStyle1x5.height,\n      width: gridStyle1x5.width,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 5\n      }\n    }, CellDanzgiy);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 5\n    }\n  }, \"widgets\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 854,\n      columnNumber: 7\n    }\n  }), \"1.\", __jsx(\"div\", {\n    style: divStyleEightColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 9\n    }\n  }, 'chang'), __jsx(\"div\", {\n    style: divStyleHorizontal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 11\n    }\n  }, __jsx(GridChang, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputZero,\n    name: \"inputZero\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 11\n    }\n  }, __jsx(GridChangy, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputOne,\n    name: \"inputOne\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 11\n    }\n  }, __jsx(GridChangw, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputTwo,\n    name: \"inputTwo\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 11\n    }\n  }, __jsx(GridChak, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 890,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputThree,\n    name: \"inputThree\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 11\n    }\n  }, __jsx(GridChangx, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputFour,\n    name: \"inputFour\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 909,\n      columnNumber: 11\n    }\n  }, __jsx(GridChangz, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputFive,\n    name: \"inputFive\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 11\n    }\n  }, __jsx(GridChakk, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputSix,\n    name: \"inputSix\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 921,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 11\n    }\n  }, __jsx(GridChangxx, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputSeven,\n    name: \"inputSeven\",\n    onChange: handleChangeChang,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 13\n    }\n  })))), \"2.\", __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 7\n    }\n  }, wordsItfditt[0].hanyjiz, __jsx(GridItfditt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputTen,\n    name: \"inputTen\",\n    onChange: handleChangeItfditt,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 9\n    }\n  }), __jsx(GridItfditw, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputEleven,\n    name: \"inputEleven\",\n    onChange: handleChangeItfditt,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 9\n    }\n  }), __jsx(GridItfditf, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputTwelve,\n    name: \"inputTwelve\",\n    onChange: handleChangeItfditt,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 9\n    }\n  })), \"3.\", __jsx(\"div\", {\n    style: divStyleTwoColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 970,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 9\n    }\n  }, wordsMizmix[0].hanyjiz), __jsx(\"div\", {\n    style: divStyleHorizontal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 11\n    }\n  }, __jsx(GridMizmix, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputTwenty,\n    name: \"inputTwenty\",\n    onChange: handleChangeMizmix,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 11\n    }\n  }, __jsx(GridMixxmix, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: input.inputTwentyOne,\n    name: \"inputTwentyOne\",\n    onChange: handleChangeMizmix,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 13\n    }\n  })))), \"4.\", __jsx(\"div\", {\n    style: divStyleFont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 7\n    }\n  }, sentence.map(function (it) {\n    return it;\n  }).join(' '), __jsx(GridSentence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    value: inputThirty // name=\"inputThirty\"\n    ,\n    onChange: handleChangeSentence,\n    style: inputStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 9\n    }\n  })), \"5.\", __jsx(\"div\", {\n    style: divStyleFont,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 7\n    }\n  }, __jsx(GridDanzgiy, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(WidgetsPage, \"EmHF+3GcftaLnyplazwOSC0fczw=\");\n\n_c = WidgetsPage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (WidgetsPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetsPage\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/widgets.tsx\n");

/***/ }),

/***/ "./src/highlight.ts":
/*!**************************!*\
  !*** ./src/highlight.ts ***!
  \**************************/
/*! exports provided: Highlight, Entry, Highlighter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Highlight\", function() { return Highlight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Entry\", function() { return Entry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Highlighter\", function() { return Highlighter; });\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! taipa */ \"./node_modules/taipa/lib/index.js\");\n/* harmony import */ var taipa__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(taipa__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n/*\n * initial state:      target + tail\n * typing:      head + target + tail\n * before final state: target\n * final state:     no target\n */\n\nvar Hint = function Hint() {\n  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Hint);\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"text\", '');\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"sounds\", new Array());\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"namesOfSound\", new Array());\n};\n\nvar Highlight = function Highlight() {\n  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Highlight);\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"posTarget\", 0);\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"target\", '');\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"tail\", '');\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"hint\", new Hint());\n};\nvar Entry = function Entry() {\n  Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Entry);\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"index\", 0);\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"hanyjiz\", '');\n\n  Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"lurzmafjiz\", '');\n};\nvar tonalInHanji = new Map().set('f', '一').set('y', '二').set('w', '三').set('x', '五').set('z', '七').set('xx', '九');\nvar namesInHanji = new Map().set('initial', '初聲').set('medial', '中聲').set('nasalization', '鼻音化').set('stopFinal', '終聲').set('nasalFinal', '終聲').set('freeTonal', '聲調').set('checkedTonal', '聲調');\nvar Highlighter = /*#__PURE__*/function () {\n  function Highlighter(entries) {\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, Highlighter);\n\n    this.entries = entries;\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"tails\", []);\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"literals\", []);\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"hints\", new Array());\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"targets\", []);\n\n    this.getGroup();\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Highlighter, [{\n    key: \"getGroup\",\n    value: function getGroup() {\n      var clt = new taipa__WEBPACK_IMPORTED_MODULE_3__[\"Client\"]();\n\n      for (var i = 0; i < this.entries.length; i++) {\n        var ta = clt.processTonal(this.entries[i].lurzmafjiz);\n        this.literals[i] = ta.word.literal;\n        var h = new Hint();\n\n        var _iterator = _createForOfIteratorHelper(ta.letterSequences),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var e = _step.value;\n\n            var _iterator2 = _createForOfIteratorHelper(e),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var j = _step2.value;\n                h.namesOfSound.push(j.name);\n                h.sounds.push(j.toString());\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            h.text = namesInHanji.get(h.namesOfSound[0]) + ' ' + h.namesOfSound[0];\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this.targets[i] = h.sounds[0];\n        var sliced = this.literals[i].slice(this.targets[i].length);\n        this.tails[i] = sliced;\n        this.hints.push(h);\n      }\n    }\n  }, {\n    key: \"setHintAndTarget\",\n    value: function setHintAndTarget(index, n) {\n      if (this.hints[index].namesOfSound[n] === taipa__WEBPACK_IMPORTED_MODULE_3__[\"TonalSpellingTags\"].freeTonal || this.hints[index].namesOfSound[n] === taipa__WEBPACK_IMPORTED_MODULE_3__[\"TonalSpellingTags\"].checkedTonal) {\n        if (tonalInHanji.has(this.hints[index].sounds[n])) {\n          var tonal = '';\n          tonal = tonalInHanji.get(this.hints[index].sounds[n]);\n          this.hints[index].text = namesInHanji.get(this.hints[index].namesOfSound[n]) + tonal + ' ' + this.hints[index].namesOfSound[n];\n        }\n      } else {\n        this.hints[index].text = namesInHanji.get(this.hints[index].namesOfSound[n]) + ' ' + this.hints[index].namesOfSound[n];\n      }\n\n      this.targets[index] = this.hints[index].sounds[n];\n    }\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(strInput, idx) {\n      var idxTarget = 0;\n\n      if (strInput.length > 0 && this.literals[idx].search(new RegExp(strInput)) == 0) {\n        for (var j = 0; j < this.hints[idx].sounds.length; j++) {\n          idxTarget += this.hints[idx].sounds[j].length;\n\n          if (idxTarget >= strInput.length) {\n            if (idxTarget > strInput.length) {\n              this.setHintAndTarget(idx, j);\n            } else {\n              if (j + 1 == this.hints[idx].sounds.length) {\n                // last sound\n                this.hints[idx].text = '';\n                this.targets[idx] = '';\n              } else {\n                this.setHintAndTarget(idx, j + 1);\n              }\n            }\n\n            break;\n          }\n        }\n      } else if (strInput.length == 0) {\n        this.setHintAndTarget(idx, 0);\n      }\n\n      if (idxTarget == strInput.length) {\n        var targetPlusTail = this.literals[idx].slice(strInput.length);\n\n        if (this.literals[idx].search(new RegExp(strInput)) == 0) {\n          if (this.targets[idx] != undefined) {\n            this.tails[idx] = targetPlusTail.slice(this.targets[idx].length);\n          }\n        }\n      } else if (idxTarget > strInput.length) {\n        var gsLiteral = Object(taipa__WEBPACK_IMPORTED_MODULE_3__[\"graphAnalyzeTonal\"])(this.literals[idx]);\n        var gsInput = Object(taipa__WEBPACK_IMPORTED_MODULE_3__[\"graphAnalyzeTonal\"])(strInput);\n        var idxSlicing = 0;\n\n        for (var i = 0; i < gsLiteral.length; i++) {\n          if (gsLiteral[i].letter.literal.length != gsInput[i].letter.literal.length) {\n            idxSlicing = i + 1; // i plus 1 for the argument of slice\n\n            break;\n          }\n        }\n\n        var slicedGsLiteral = gsLiteral.slice(0, idxSlicing);\n        var lensSlicedGsLiteral = slicedGsLiteral.map(function (it) {\n          return it.letter.literal.length;\n        });\n        var idxTailBegin = lensSlicedGsLiteral.length > 0 ? lensSlicedGsLiteral.reduce(function (prev, curr) {\n          return prev + curr;\n        }) : 0;\n\n        if (idxSlicing) {\n          this.tails[idx] = this.literals[idx].slice(idxTailBegin);\n        }\n      }\n\n      var hl = new Highlight();\n      hl.posTarget = idxTarget;\n      hl.target = this.targets[idx];\n      hl.tail = this.tails[idx];\n      hl.hint = this.hints[idx];\n      return hl;\n    }\n  }]);\n\n  return Highlighter;\n}();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/highlight.ts\n");

/***/ })

},[["./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fwidgets&absolutePagePath=%2FUsers%2Fjslv%2FProjects%2Fkeyin%2Fpages%2Fwidgets.tsx!./","webpack"]]]);